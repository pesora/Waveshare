
Evk407I_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c18  08012fc0  08012fc0  00022fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015bd8  08015bd8  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08015bd8  08015bd8  00025bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015be0  08015be0  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015be0  08015be0  00025be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015be4  08015be4  00025be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08015be8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00008670  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200086f8  200086f8  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000249e4  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006086  00000000  00000000  00054adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d58  00000000  00000000  0005ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001788  00000000  00000000  0005c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002eec9  00000000  00000000  0005e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030144  00000000  00000000  0008cf11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7944  00000000  00000000  000bd055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000829c  00000000  00000000  001a499c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001acc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012fa8 	.word	0x08012fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08012fa8 	.word	0x08012fa8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08e      	sub	sp, #56	; 0x38
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	623b      	str	r3, [r7, #32]
 8000586:	4b7b      	ldr	r3, [pc, #492]	; (8000774 <MX_GPIO_Init+0x208>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a7a      	ldr	r2, [pc, #488]	; (8000774 <MX_GPIO_Init+0x208>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b78      	ldr	r3, [pc, #480]	; (8000774 <MX_GPIO_Init+0x208>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	623b      	str	r3, [r7, #32]
 800059c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
 80005a2:	4b74      	ldr	r3, [pc, #464]	; (8000774 <MX_GPIO_Init+0x208>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a73      	ldr	r2, [pc, #460]	; (8000774 <MX_GPIO_Init+0x208>)
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b71      	ldr	r3, [pc, #452]	; (8000774 <MX_GPIO_Init+0x208>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	61fb      	str	r3, [r7, #28]
 80005b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	4b6d      	ldr	r3, [pc, #436]	; (8000774 <MX_GPIO_Init+0x208>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a6c      	ldr	r2, [pc, #432]	; (8000774 <MX_GPIO_Init+0x208>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b6a      	ldr	r3, [pc, #424]	; (8000774 <MX_GPIO_Init+0x208>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	4b66      	ldr	r3, [pc, #408]	; (8000774 <MX_GPIO_Init+0x208>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a65      	ldr	r2, [pc, #404]	; (8000774 <MX_GPIO_Init+0x208>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b63      	ldr	r3, [pc, #396]	; (8000774 <MX_GPIO_Init+0x208>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b5f      	ldr	r3, [pc, #380]	; (8000774 <MX_GPIO_Init+0x208>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a5e      	ldr	r2, [pc, #376]	; (8000774 <MX_GPIO_Init+0x208>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b5c      	ldr	r3, [pc, #368]	; (8000774 <MX_GPIO_Init+0x208>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b58      	ldr	r3, [pc, #352]	; (8000774 <MX_GPIO_Init+0x208>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a57      	ldr	r2, [pc, #348]	; (8000774 <MX_GPIO_Init+0x208>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b55      	ldr	r3, [pc, #340]	; (8000774 <MX_GPIO_Init+0x208>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b51      	ldr	r3, [pc, #324]	; (8000774 <MX_GPIO_Init+0x208>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a50      	ldr	r2, [pc, #320]	; (8000774 <MX_GPIO_Init+0x208>)
 8000634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <MX_GPIO_Init+0x208>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <MX_GPIO_Init+0x208>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a49      	ldr	r2, [pc, #292]	; (8000774 <MX_GPIO_Init+0x208>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b47      	ldr	r3, [pc, #284]	; (8000774 <MX_GPIO_Init+0x208>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEG1_C_Pin|SEG1_D_Pin|SEG2_A_Pin|SEG2_B_Pin
 8000662:	2200      	movs	r2, #0
 8000664:	21ff      	movs	r1, #255	; 0xff
 8000666:	4844      	ldr	r0, [pc, #272]	; (8000778 <MX_GPIO_Init+0x20c>)
 8000668:	f002 fdde 	bl	8003228 <HAL_GPIO_WritePin>
                          |SEG2_C_Pin|SEG2_D_Pin|SEG1_A_Pin|SEG1_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_TEMP_G_Pin|LED_TEMP_R_Pin|LED_FAN1_G_Pin|LED_FAN1_R_Pin
 800066c:	2200      	movs	r2, #0
 800066e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000672:	4842      	ldr	r0, [pc, #264]	; (800077c <MX_GPIO_Init+0x210>)
 8000674:	f002 fdd8 	bl	8003228 <HAL_GPIO_WritePin>
                          |LED_FAN2_G_Pin|LED_FAN2_R_Pin|LED_PDU_G_Pin|LED_PDU_R_Pin
                          |LED_DP1_G_Pin|LED_DP2_G_Pin|LED_DP3_G_Pin|LED_CHG_G_Pin
                          |LED_CHG_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2104      	movs	r1, #4
 800067c:	4840      	ldr	r0, [pc, #256]	; (8000780 <MX_GPIO_Init+0x214>)
 800067e:	f002 fdd3 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEMP_GG0_GPIO_Port, LED_TEMP_GG0_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	483f      	ldr	r0, [pc, #252]	; (8000784 <MX_GPIO_Init+0x218>)
 8000688:	f002 fdce 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_nRESET_GPIO_Port, I2C1_nRESET_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <MX_GPIO_Init+0x21c>)
 8000694:	f002 fdc8 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SEG1_C_Pin|SEG1_D_Pin|SEG2_A_Pin|SEG2_B_Pin
 8000698:	23ff      	movs	r3, #255	; 0xff
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SEG2_C_Pin|SEG2_D_Pin|SEG1_A_Pin|SEG1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4832      	ldr	r0, [pc, #200]	; (8000778 <MX_GPIO_Init+0x20c>)
 80006b0:	f002 fc06 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = LED_TEMP_G_Pin|LED_TEMP_R_Pin|LED_FAN1_G_Pin|LED_FAN1_R_Pin
 80006b4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_FAN2_G_Pin|LED_FAN2_R_Pin|LED_PDU_G_Pin|LED_PDU_R_Pin
                          |LED_DP1_G_Pin|LED_DP2_G_Pin|LED_DP3_G_Pin|LED_CHG_G_Pin
                          |LED_CHG_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	4619      	mov	r1, r3
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <MX_GPIO_Init+0x210>)
 80006ce:	f002 fbf7 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_TEST_Pin;
 80006d2:	2304      	movs	r3, #4
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_TEST_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e4:	4619      	mov	r1, r3
 80006e6:	4829      	ldr	r0, [pc, #164]	; (800078c <MX_GPIO_Init+0x220>)
 80006e8:	f002 fbea 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RUN_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RUN_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	4619      	mov	r1, r3
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <MX_GPIO_Init+0x214>)
 8000704:	f002 fbdc 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_TEMP_GG0_Pin;
 8000708:	2301      	movs	r3, #1
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_TEMP_GG0_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4619      	mov	r1, r3
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <MX_GPIO_Init+0x218>)
 8000720:	f002 fbce 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PD3
                           PDPin PDPin */
  GPIO_InitStruct.Pin = INPUT_PG1_Pin|INPUT_PG2_Pin|INPUT_DP1_Pin|GPIO_PIN_3
 8000724:	233f      	movs	r3, #63	; 0x3f
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT_DP3_Pin|INPUT_CHG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <MX_GPIO_Init+0x224>)
 8000738:	f002 fbc2 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C1_nRESET_Pin;
 800073c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(I2C1_nRESET_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0x21c>)
 8000756:	f002 fbb3 	bl	8002ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2105      	movs	r1, #5
 800075e:	2008      	movs	r0, #8
 8000760:	f001 fa8b 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000764:	2008      	movs	r0, #8
 8000766:	f001 faa4 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3738      	adds	r7, #56	; 0x38
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40021000 	.word	0x40021000
 800077c:	40021400 	.word	0x40021400
 8000780:	40021c00 	.word	0x40021c00
 8000784:	40021800 	.word	0x40021800
 8000788:	40020400 	.word	0x40020400
 800078c:	40020800 	.word	0x40020800
 8000790:	40020c00 	.word	0x40020c00

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 fd75 	bl	80032c0 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f978 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000a4 	.word	0x200000a4
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <HAL_I2C_MspInit+0xa4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d13b      	bne.n	800088a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <HAL_I2C_MspInit+0xa8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <HAL_I2C_MspInit+0xa8>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <HAL_I2C_MspInit+0xa8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083e:	2304      	movs	r3, #4
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <HAL_I2C_MspInit+0xac>)
 800084a:	f002 fb39 	bl	8002ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_I2C_MspInit+0xa8>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <HAL_I2C_MspInit+0xa8>)
 8000858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_I2C_MspInit+0xa8>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	201f      	movs	r0, #31
 8000870:	f001 fa03 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000874:	201f      	movs	r0, #31
 8000876:	f001 fa1c 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2020      	movs	r0, #32
 8000880:	f001 f9fb 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000884:	2020      	movs	r0, #32
 8000886:	f001 fa14 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40005400 	.word	0x40005400
 8000898:	40023800 	.word	0x40023800
 800089c:	40020400 	.word	0x40020400

080008a0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 100);
 80008a8:	1d39      	adds	r1, r7, #4
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	2201      	movs	r2, #1
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <__io_putchar+0x20>)
 80008b0:	f006 fa30 	bl	8006d14 <HAL_UART_Transmit>
	return ch;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000274 	.word	0x20000274

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f001 f842 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f84c 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f7ff fe4c 	bl	800056c <MX_GPIO_Init>
  MX_TIM1_Init();
 80008d4:	f000 fa74 	bl	8000dc0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008d8:	f000 fb76 	bl	8000fc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008dc:	f000 fbe4 	bl	80010a8 <MX_TIM4_Init>
  MX_I2C1_Init();
 80008e0:	f7ff ff58 	bl	8000794 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008e4:	f000 fb08 	bl	8000ef8 <MX_TIM2_Init>
  MX_LWIP_Init();
 80008e8:	f007 f9c6 	bl	8007c78 <MX_LWIP_Init>
  MX_TIM6_Init();
 80008ec:	f000 fc46 	bl	800117c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 fe2a 	bl	8001548 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <main+0x88>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <main+0x88>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0220 	orr.w	r2, r2, #32
 8000902:	60da      	str	r2, [r3, #12]
   if (RB_Init(&ring_buff, 16))
 8000904:	2110      	movs	r1, #16
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <main+0x8c>)
 8000908:	f011 fab0 	bl	8011e6c <RB_Init>
   {
   }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800090c:	2100      	movs	r1, #0
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <main+0x90>)
 8000910:	f005 f86c 	bl	80059ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000914:	2104      	movs	r1, #4
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <main+0x90>)
 8000918:	f005 f868 	bl	80059ec <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800091c:	2100      	movs	r1, #0
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <main+0x94>)
 8000920:	f005 f97c 	bl	8005c1c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000924:	2104      	movs	r1, #4
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <main+0x94>)
 8000928:	f005 f978 	bl	8005c1c <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim6);
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <main+0x98>)
 800092e:	f004 ff9d 	bl	800586c <HAL_TIM_Base_Start_IT>

  printf("Evk407 Test....\n");
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <main+0x9c>)
 8000934:	f011 fd18 	bl	8012368 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 8000938:	2104      	movs	r1, #4
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <main+0xa0>)
 800093c:	f002 fc8d 	bl	800325a <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000944:	f001 f876 	bl	8001a34 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 8000948:	e7f6      	b.n	8000938 <main+0x74>
 800094a:	bf00      	nop
 800094c:	20000274 	.word	0x20000274
 8000950:	200000f8 	.word	0x200000f8
 8000954:	2000010c 	.word	0x2000010c
 8000958:	20000154 	.word	0x20000154
 800095c:	2000022c 	.word	0x2000022c
 8000960:	08012fc0 	.word	0x08012fc0
 8000964:	40021c00 	.word	0x40021c00

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f011 fde6 	bl	8012548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <SystemClock_Config+0xcc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <SystemClock_Config+0xcc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <SystemClock_Config+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <SystemClock_Config+0xd0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d8:	2308      	movs	r3, #8
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009dc:	23a8      	movs	r3, #168	; 0xa8
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fa95 	bl	8004f1c <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f8:	f000 f86a 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2105      	movs	r1, #5
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fcf6 	bl	800540c <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a26:	f000 f853 	bl	8000ad0 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	; 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]

  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f001 f941 	bl	8001cce <HAL_NVIC_DisableIRQ>

  if(GPIO_Pin == KEY_TEST_Pin)
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d10d      	bne.n	8000a6e <HAL_GPIO_EXTI_Callback+0x32>
  {
    if(HAL_GPIO_ReadPin(KEY_TEST_GPIO_Port, KEY_TEST_Pin) == GPIO_PIN_RESET)
 8000a52:	2104      	movs	r1, #4
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x40>)
 8000a56:	f002 fbcf 	bl	80031f8 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d106      	bne.n	8000a6e <HAL_GPIO_EXTI_Callback+0x32>
    {
      HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_3);
 8000a60:	2108      	movs	r1, #8
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x44>)
 8000a64:	f002 fbf9 	bl	800325a <HAL_GPIO_TogglePin>
      printf("Key pressed ! \n");
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x48>)
 8000a6a:	f011 fc7d 	bl	8012368 <puts>
   }
  }

  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a6e:	2008      	movs	r0, #8
 8000a70:	f001 f91f 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40021c00 	.word	0x40021c00
 8000a84:	08012fd0 	.word	0x08012fd0

08000a88 <HAL_TIM_PeriodElapsedCallback>:

uint16_t timer10ms_count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  if(htim->Instance == TIM6)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d110      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x34>
  {
    timer10ms_count++;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000aa4:	801a      	strh	r2, [r3, #0]


    if(timer10ms_count >= 10)
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d906      	bls.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x34>
    {
    	HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ab2:	f002 fbd2 	bl	800325a <HAL_GPIO_TogglePin>

      //-------------------------------------------
      timer10ms_count = 0;
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40001000 	.word	0x40001000
 8000ac8:	20000104 	.word	0x20000104
 8000acc:	40021c00 	.word	0x40021c00

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 ff3c 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_TEST_Pin);
 8000b84:	2004      	movs	r0, #4
 8000b86:	f002 fb83 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM2_IRQHandler+0x10>)
 8000b96:	f005 f969 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000154 	.word	0x20000154

08000ba4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM4_IRQHandler+0x10>)
 8000baa:	f005 f95f 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001e4 	.word	0x200001e4

08000bb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <I2C1_EV_IRQHandler+0x10>)
 8000bbe:	f002 fcd8 	bl	8003572 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000a4 	.word	0x200000a4

08000bcc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <I2C1_ER_IRQHandler+0x10>)
 8000bd2:	f002 fe21 	bl	8003818 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000a4 	.word	0x200000a4

08000be0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART3_IRQHandler+0x10>)
 8000be6:	f006 f921 	bl	8006e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000274 	.word	0x20000274

08000bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM6_DAC_IRQHandler+0x10>)
 8000bfa:	f005 f937 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000022c 	.word	0x2000022c

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_kill+0x20>)
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	200086f0 	.word	0x200086f0

08000c3c <_exit>:

void _exit (int status)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe5 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4e:	e7fe      	b.n	8000c4e <_exit+0x12>

08000c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
  }

  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fdfb 	bl	80008a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
  }
  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	20000108 	.word	0x20000108
 8000d94:	200086f8 	.word	0x200086f8
 8000d98:	200086f0 	.word	0x200086f0

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b092      	sub	sp, #72	; 0x48
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2220      	movs	r2, #32
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f011 fbac 	bl	8012548 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <MX_TIM1_Init+0x134>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000df8:	220b      	movs	r2, #11
 8000dfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 280-1;
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e04:	f240 1217 	movw	r2, #279	; 0x117
 8000e08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e1c:	4834      	ldr	r0, [pc, #208]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e1e:	f004 fd95 	bl	800594c <HAL_TIM_PWM_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e28:	f7ff fe52 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e3c:	f005 fe38 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e46:	f7ff fe43 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4a:	2360      	movs	r3, #96	; 0x60
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4820      	ldr	r0, [pc, #128]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e70:	f005 f988 	bl	8006184 <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e7a:	f7ff fe29 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	2204      	movs	r2, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	481a      	ldr	r0, [pc, #104]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000e88:	f005 f97c 	bl	8006184 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e92:	f7ff fe1d 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000ea0:	f005 f970 	bl	8006184 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000eaa:	f7ff fe11 	bl	8000ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000ed2:	f005 fe69 	bl	8006ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000edc:	f7ff fdf8 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM1_Init+0x130>)
 8000ee2:	f000 fa8f 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3748      	adds	r7, #72	; 0x48
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000010c 	.word	0x2000010c
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f3c:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f3e:	f004 fe1d 	bl	8005b7c <HAL_TIM_IC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f48:	f7ff fdc2 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f5c:	f005 fda8 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f66:	f7ff fdb3 	bl	8000ad0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f82:	f005 f863 	bl	800604c <HAL_TIM_IC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f7ff fda0 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	2204      	movs	r2, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000f98:	f005 f858 	bl	800604c <HAL_TIM_IC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000fa2:	f7ff fd95 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0xcc>)
 8000fae:	f005 f84d 	bl	800604c <HAL_TIM_IC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000fb8:	f7ff fd8a 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000154 	.word	0x20000154

08000fc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8000fec:	4a2d      	ldr	r2, [pc, #180]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MX_TIM3_Init+0xd8>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001010:	4823      	ldr	r0, [pc, #140]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8001012:	f004 fc9b 	bl	800594c <HAL_TIM_PWM_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800101c:	f7ff fd58 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4619      	mov	r1, r3
 800102e:	481c      	ldr	r0, [pc, #112]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8001030:	f005 fd3e 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800103a:	f7ff fd49 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8001056:	f005 f895 	bl	8006184 <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001060:	f7ff fd36 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_TIM3_Init+0xd8>)
 800106c:	f005 f88a 	bl	8006184 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001076:	f7ff fd2b 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2208      	movs	r2, #8
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8001082:	f005 f87f 	bl	8006184 <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800108c:	f7ff fd20 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MX_TIM3_Init+0xd8>)
 8001092:	f000 f9b7 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000019c 	.word	0x2000019c
 80010a4:	40000400 	.word	0x40000400

080010a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010c6:	4a2c      	ldr	r2, [pc, #176]	; (8001178 <MX_TIM4_Init+0xd0>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12-1;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010cc:	220b      	movs	r2, #11
 80010ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 280-1;
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010d8:	f240 1217 	movw	r2, #279	; 0x117
 80010dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <MX_TIM4_Init+0xcc>)
 80010ec:	f004 fd46 	bl	8005b7c <HAL_TIM_IC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80010f6:	f7ff fceb 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	481a      	ldr	r0, [pc, #104]	; (8001174 <MX_TIM4_Init+0xcc>)
 800110a:	f005 fcd1 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001114:	f7ff fcdc 	bl	8000ad0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001118:	2300      	movs	r3, #0
 800111a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800111c:	2301      	movs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_TIM4_Init+0xcc>)
 8001130:	f004 ff8c 	bl	800604c <HAL_TIM_IC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800113a:	f7ff fcc9 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2204      	movs	r2, #4
 8001142:	4619      	mov	r1, r3
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <MX_TIM4_Init+0xcc>)
 8001146:	f004 ff81 	bl	800604c <HAL_TIM_IC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001150:	f7ff fcbe 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2208      	movs	r2, #8
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM4_Init+0xcc>)
 800115c:	f004 ff76 	bl	800604c <HAL_TIM_IC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001166:	f7ff fcb3 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001e4 	.word	0x200001e4
 8001178:	40000800 	.word	0x40000800

0800117c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_TIM6_Init+0x64>)
 800118c:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_TIM6_Init+0x68>)
 800118e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840-1;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_TIM6_Init+0x64>)
 8001192:	f240 3247 	movw	r2, #839	; 0x347
 8001196:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_TIM6_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80011a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011ae:	f004 fb0d 	bl	80057cc <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011b8:	f7ff fc8a 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011ca:	f005 fc71 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f7ff fc7c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000022c 	.word	0x2000022c
 80011e4:	40001000 	.word	0x40001000

080011e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <HAL_TIM_PWM_MspInit+0x64>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10e      	bne.n	8001218 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_TIM_PWM_MspInit+0x68>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_TIM_PWM_MspInit+0x68>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_TIM_PWM_MspInit+0x68>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001216:	e012      	b.n	800123e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_TIM_PWM_MspInit+0x6c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10d      	bne.n	800123e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_TIM_PWM_MspInit+0x68>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_TIM_PWM_MspInit+0x68>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_TIM_PWM_MspInit+0x68>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000
 8001250:	40023800 	.word	0x40023800
 8001254:	40000400 	.word	0x40000400

08001258 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d153      	bne.n	8001322 <HAL_TIM_IC_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a40      	ldr	r2, [pc, #256]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a39      	ldr	r2, [pc, #228]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1_IC1_Pin;
 80012ce:	2320      	movs	r3, #32
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012de:	2301      	movs	r3, #1
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_IC1_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	482e      	ldr	r0, [pc, #184]	; (80013a4 <HAL_TIM_IC_MspInit+0x14c>)
 80012ea:	f001 fde9 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_IC3_Pin|TIM2_CH2_IC2_Pin;
 80012ee:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001300:	2301      	movs	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4827      	ldr	r0, [pc, #156]	; (80013a8 <HAL_TIM_IC_MspInit+0x150>)
 800130c:	f001 fdd8 	bl	8002ec0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	201c      	movs	r0, #28
 8001316:	f000 fcb0 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131a:	201c      	movs	r0, #28
 800131c:	f000 fcc9 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001320:	e039      	b.n	8001396 <HAL_TIM_IC_MspInit+0x13e>
  else if(tim_icHandle->Instance==TIM4)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <HAL_TIM_IC_MspInit+0x154>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d134      	bne.n	8001396 <HAL_TIM_IC_MspInit+0x13e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6413      	str	r3, [r2, #64]	; 0x40
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_TIM_IC_MspInit+0x148>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH1_IC4_Pin|TIM4_CH2_IC5_Pin|TIM4_CH3_IC6_Pin;
 8001364:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001376:	2302      	movs	r3, #2
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <HAL_TIM_IC_MspInit+0x158>)
 8001382:	f001 fd9d 	bl	8002ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	201e      	movs	r0, #30
 800138c:	f000 fc75 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001390:	201e      	movs	r0, #30
 8001392:	f000 fc8e 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3730      	adds	r7, #48	; 0x30
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40000800 	.word	0x40000800
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_TIM_Base_MspInit+0x48>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d115      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2036      	movs	r0, #54	; 0x36
 80013e8:	f000 fc47 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013ec:	2036      	movs	r0, #54	; 0x36
 80013ee:	f000 fc60 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40001000 	.word	0x40001000
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a42      	ldr	r2, [pc, #264]	; (800152c <HAL_TIM_MspPostInit+0x128>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11f      	bne.n	8001466 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_PWM1_Pin|TIM1_CH2_PWM2_Pin|TIM1_TCH3_PWM3_Pin;
 8001442:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001454:	2301      	movs	r3, #1
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4835      	ldr	r0, [pc, #212]	; (8001534 <HAL_TIM_MspPostInit+0x130>)
 8001460:	f001 fd2e 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001464:	e05e      	b.n	8001524 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM3)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <HAL_TIM_MspPostInit+0x134>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d159      	bne.n	8001524 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6313      	str	r3, [r2, #48]	; 0x30
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a26      	ldr	r2, [pc, #152]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_TIM_MspPostInit+0x12c>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_PWM4_Pin;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014d4:	2302      	movs	r3, #2
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_PWM4_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <HAL_TIM_MspPostInit+0x138>)
 80014e0:	f001 fcee 	bl	8002ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH3_PWM6_Pin;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f4:	2302      	movs	r3, #2
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH3_PWM6_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <HAL_TIM_MspPostInit+0x13c>)
 8001500:	f001 fcde 	bl	8002ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH2_PWM5_Pin;
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001514:	2302      	movs	r3, #2
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH2_PWM5_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_TIM_MspPostInit+0x140>)
 8001520:	f001 fcce 	bl	8002ec0 <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010000 	.word	0x40010000
 8001530:	40023800 	.word	0x40023800
 8001534:	40021000 	.word	0x40021000
 8001538:	40000400 	.word	0x40000400
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800

08001548 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART3_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART3_UART_Init+0x4c>)
 8001580:	f005 fb78 	bl	8006c74 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f7ff faa1 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000274 	.word	0x20000274
 8001598:	40004800 	.word	0x40004800

0800159c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <HAL_UART_MspInit+0x94>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d134      	bne.n	8001628 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_UART_MspInit+0x98>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_UART_MspInit+0x98>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_UART_MspInit+0x98>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_UART_MspInit+0x98>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_UART_MspInit+0x98>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_UART_MspInit+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <HAL_UART_MspInit+0x9c>)
 8001614:	f001 fc54 	bl	8002ec0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2027      	movs	r0, #39	; 0x27
 800161e:	f000 fb2c 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001622:	2027      	movs	r0, #39	; 0x27
 8001624:	f000 fb45 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40004800 	.word	0x40004800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020800 	.word	0x40020800

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001640:	f7ff fbac 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f010 ffcb 	bl	8012604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f929 	bl	80008c4 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001680:	08015be8 	.word	0x08015be8
  ldr r2, =_sbss
 8001684:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001688:	200086f8 	.word	0x200086f8

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>

0800168e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e014      	b.n	80016e6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d17c      	bne.n	800180c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e01c      	b.n	8001766 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f107 0208 	add.w	r2, r7, #8
 8001734:	2112      	movs	r1, #18
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	4798      	blx	r3
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	da03      	bge.n	8001748 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001740:	f06f 0304 	mvn.w	r3, #4
 8001744:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001746:	e00b      	b.n	8001760 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d105      	bne.n	8001760 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
         break;
 800175e:	e005      	b.n	800176c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b1f      	cmp	r3, #31
 800176a:	d9df      	bls.n	800172c <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b1f      	cmp	r3, #31
 8001772:	d902      	bls.n	800177a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001774:	f06f 0302 	mvn.w	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d145      	bne.n	800180c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800178c:	2100      	movs	r1, #0
 800178e:	4798      	blx	r3
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	db37      	blt.n	8001806 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6810      	ldr	r0, [r2, #0]
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	2100      	movs	r1, #0
 80017a4:	4798      	blx	r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db28      	blt.n	80017fe <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4798      	blx	r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017b6:	e01c      	b.n	80017f2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4798      	blx	r3
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ca:	d80e      	bhi.n	80017ea <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6810      	ldr	r0, [r2, #0]
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	2100      	movs	r1, #0
 80017da:	4798      	blx	r3
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da07      	bge.n	80017f2 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80017e2:	f06f 0304 	mvn.w	r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
                 break;
 80017e8:	e010      	b.n	800180c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017ea:	f06f 0301 	mvn.w	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
               break;
 80017f0:	e00c      	b.n	800180c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1dd      	bne.n	80017b8 <LAN8742_Init+0xc6>
 80017fc:	e006      	b.n	800180c <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80017fe:	f06f 0304 	mvn.w	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e002      	b.n	800180c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001806:	f06f 0303 	mvn.w	r3, #3
 800180a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d112      	bne.n	8001838 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4798      	blx	r3
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800181c:	bf00      	nop
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4798      	blx	r3
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001830:	d9f5      	bls.n	800181e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001838:	693b      	ldr	r3, [r7, #16]
 }
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6810      	ldr	r0, [r2, #0]
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	2101      	movs	r1, #1
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	da02      	bge.n	800186a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001864:	f06f 0304 	mvn.w	r3, #4
 8001868:	e06e      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6810      	ldr	r0, [r2, #0]
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	2101      	movs	r1, #1
 8001878:	4798      	blx	r3
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	da02      	bge.n	8001886 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001880:	f06f 0304 	mvn.w	r3, #4
 8001884:	e060      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001890:	2301      	movs	r3, #1
 8001892:	e059      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6810      	ldr	r0, [r2, #0]
 800189c:	f107 020c 	add.w	r2, r7, #12
 80018a0:	2100      	movs	r1, #0
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da02      	bge.n	80018b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018aa:	f06f 0304 	mvn.w	r3, #4
 80018ae:	e04b      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d11b      	bne.n	80018f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <LAN8742_GetLinkState+0x90>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e03a      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018dc:	2303      	movs	r3, #3
 80018de:	e033      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018ea:	2304      	movs	r3, #4
 80018ec:	e02c      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018ee:	2305      	movs	r3, #5
 80018f0:	e02a      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6810      	ldr	r0, [r2, #0]
 80018fa:	f107 020c 	add.w	r2, r7, #12
 80018fe:	211f      	movs	r1, #31
 8001900:	4798      	blx	r3
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	da02      	bge.n	800190e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001908:	f06f 0304 	mvn.w	r3, #4
 800190c:	e01c      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001918:	2306      	movs	r3, #6
 800191a:	e015      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 031c 	and.w	r3, r3, #28
 8001922:	2b18      	cmp	r3, #24
 8001924:	d101      	bne.n	800192a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001926:	2302      	movs	r3, #2
 8001928:	e00e      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 031c 	and.w	r3, r3, #28
 8001930:	2b08      	cmp	r3, #8
 8001932:	d101      	bne.n	8001938 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001934:	2303      	movs	r3, #3
 8001936:	e007      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 031c 	and.w	r3, r3, #28
 800193e:	2b14      	cmp	r3, #20
 8001940:	d101      	bne.n	8001946 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001942:	2304      	movs	r3, #4
 8001944:	e000      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001946:	2305      	movs	r3, #5
    }
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f973 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff f8aa 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f999 	bl	8001cea <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f953 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	200002bc 	.word	0x200002bc

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002bc 	.word	0x200002bc

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db12      	blt.n	8001b54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	490a      	ldr	r1, [pc, #40]	; (8001b60 <__NVIC_DisableIRQ+0x44>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	3320      	adds	r3, #32
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b48:	f3bf 8f4f 	dsb	sy
}
 8001b4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b4e:	f3bf 8f6f 	isb	sy
}
 8001b52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff05 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff1a 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff0d 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff1d 	bl	8001b1c <__NVIC_DisableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff94 	bl	8001c20 <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff fe84 	bl	8001a1c <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d008      	beq.n	8001d34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e052      	b.n	8001dda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0216 	bic.w	r2, r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <HAL_DMA_Abort+0x62>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0208 	bic.w	r2, r2, #8
 8001d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d84:	e013      	b.n	8001dae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d86:	f7ff fe49 	bl	8001a1c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d90c      	bls.n	8001dae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e015      	b.n	8001dda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e4      	bne.n	8001d86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e00c      	b.n	8001e1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2205      	movs	r2, #5
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e34:	b2db      	uxtb	r3, r3
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06c      	b.n	8001f30 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2223      	movs	r2, #35	; 0x23
 8001e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f006 f99f 	bl	80081ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_ETH_Init+0xf4>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <HAL_ETH_Init+0xf4>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_ETH_Init+0xf4>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_ETH_Init+0xf8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <HAL_ETH_Init+0xf8>)
 8001e90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e94:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_ETH_Init+0xf8>)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4927      	ldr	r1, [pc, #156]	; (8001f3c <HAL_ETH_Init+0xf8>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_ETH_Init+0xf8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec0:	f7ff fdac 	bl	8001a1c <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ec6:	e011      	b.n	8001eec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ec8:	f7ff fda8 	bl	8001a1c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ed6:	d909      	bls.n	8001eec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2204      	movs	r2, #4
 8001edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	22e0      	movs	r2, #224	; 0xe0
 8001ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e021      	b.n	8001f30 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1e4      	bne.n	8001ec8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fd38 	bl	8002974 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fddf 	bl	8002ac8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fe35 	bl	8002b7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	461a      	mov	r2, r3
 8001f16:	2100      	movs	r1, #0
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fd9d 	bl	8002a58 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013800 	.word	0x40013800

08001f40 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d150      	bne.n	8001ff4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2223      	movs	r2, #35	; 0x23
 8001f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f939 	bl	80021d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0208 	orr.w	r2, r2, #8
 8001f74:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff fd58 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0204 	orr.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff fd45 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fb7e 	bl	80026b4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fce:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fe6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2223      	movs	r2, #35	; 0x23
 8001fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200c:	2b23      	cmp	r3, #35	; 0x23
 800200e:	d14a      	bne.n	80020a6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2223      	movs	r2, #35	; 0x23
 8002014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800202a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800202e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	f023 0302 	bic.w	r3, r3, #2
 8002042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002046:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0204 	bic.w	r2, r2, #4
 8002056:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fce7 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fb20 	bl	80026b4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff fcd1 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2210      	movs	r2, #16
 800209e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07c      	b.n	80021d0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020dc:	2b23      	cmp	r3, #35	; 0x23
 80020de:	d176      	bne.n	80021ce <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80020e0:	2200      	movs	r2, #0
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fdb5 	bl	8002c54 <ETH_Prepare_Tx_Descriptors>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e065      	b.n	80021d0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002104:	f3bf 8f4f 	dsb	sy
}
 8002108:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3206      	adds	r2, #6
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	2b03      	cmp	r3, #3
 8002128:	d904      	bls.n	8002134 <HAL_ETH_Transmit+0x84>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	1f1a      	subs	r2, r3, #4
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3106      	adds	r1, #6
 8002140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002144:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002148:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800214a:	f7ff fc67 	bl	8001a1c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002150:	e037      	b.n	80021c2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d011      	beq.n	8002188 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f043 0208 	orr.w	r2, r3, #8
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e023      	b.n	80021d0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d018      	beq.n	80021c2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002190:	f7ff fc44 	bl	8001a1c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d302      	bcc.n	80021a6 <HAL_ETH_Transmit+0xf6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80021bc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e006      	b.n	80021d0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	dbc3      	blt.n	8002152 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80021e4:	2301      	movs	r3, #1
 80021e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	3212      	adds	r2, #18
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002200:	e03d      	b.n	800227e <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d112      	bne.n	8002230 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4618      	mov	r0, r3
 8002210:	f006 f94c 	bl	80084ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	74fb      	strb	r3, [r7, #19]
 800221e:	e007      	b.n	8002230 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	461a      	mov	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	461a      	mov	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d023      	beq.n	800227e <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <ETH_UpdateDescriptor+0xfc>)
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	e003      	b.n	800224e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800224c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d902      	bls.n	800226c <ETH_UpdateDescriptor+0x94>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b04      	subs	r3, #4
 800226a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	3212      	adds	r2, #18
 8002272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002276:	617b      	str	r3, [r7, #20]
      desccount--;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3b01      	subs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <ETH_UpdateDescriptor+0xb2>
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1bb      	bne.n	8002202 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	429a      	cmp	r2, r3
 8002292:	d01a      	beq.n	80022ca <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800229e:	f3bf 8f5f 	dmb	sy
}
 80022a2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6919      	ldr	r1, [r3, #16]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	18ca      	adds	r2, r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	80004600 	.word	0x80004600

080022d8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 031c 	and.w	r3, r3, #28
 80022f4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	02db      	lsls	r3, r3, #11
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002328:	f7ff fb78 	bl	8001a1c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800232e:	e00d      	b.n	800234c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002330:	f7ff fb74 	bl	8001a1c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d301      	bcc.n	8002344 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e010      	b.n	8002366 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ec      	bne.n	8002330 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 031c 	and.w	r3, r3, #28
 800238a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	02db      	lsls	r3, r3, #11
 8002390:	b29b      	uxth	r3, r3
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	019b      	lsls	r3, r3, #6
 800239c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff fb28 	bl	8001a1c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ce:	e00d      	b.n	80023ec <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80023d0:	f7ff fb24 	bl	8001a1c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023de:	d301      	bcc.n	80023e4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e009      	b.n	80023f8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ec      	bne.n	80023d0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d9      	b.n	80025c8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	b29a      	uxth	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e00b      	b.n	8002600 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d105      	bne.n	80025fe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f883 	bl	8002700 <ETH_SetMACConfig>

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 031c 	bic.w	r3, r3, #28
 800261e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002620:	f003 f8a0 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 8002624:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d908      	bls.n	8002640 <HAL_ETH_SetMDIOClockRange+0x38>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d804      	bhi.n	8002640 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e027      	b.n	8002690 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d908      	bls.n	800265a <HAL_ETH_SetMDIOClockRange+0x52>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d204      	bcs.n	800265a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f043 030c 	orr.w	r3, r3, #12
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e01a      	b.n	8002690 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d303      	bcc.n	800266a <HAL_ETH_SetMDIOClockRange+0x62>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d911      	bls.n	800268e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d908      	bls.n	8002684 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d804      	bhi.n	8002684 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e005      	b.n	8002690 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f043 0310 	orr.w	r3, r3, #16
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e000      	b.n	8002690 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800268e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	611a      	str	r2, [r3, #16]
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	01312cff 	.word	0x01312cff
 80026a4:	02160ebf 	.word	0x02160ebf
 80026a8:	03938700 	.word	0x03938700
 80026ac:	05f5e0ff 	.word	0x05f5e0ff
 80026b0:	08f0d17f 	.word	0x08f0d17f

080026b4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff f9a5 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f4:	6193      	str	r3, [r2, #24]
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4b51      	ldr	r3, [pc, #324]	; (800285c <ETH_SetMACConfig+0x15c>)
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7c1b      	ldrb	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <ETH_SetMACConfig+0x28>
 8002722:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002726:	e000      	b.n	800272a <ETH_SetMACConfig+0x2a>
 8002728:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	7c5b      	ldrb	r3, [r3, #17]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <ETH_SetMACConfig+0x38>
 8002732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002736:	e000      	b.n	800273a <ETH_SetMACConfig+0x3a>
 8002738:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800273a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002740:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7fdb      	ldrb	r3, [r3, #31]
 8002746:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002748:	431a      	orrs	r2, r3
                        macconf->Speed |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800274e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	7f92      	ldrb	r2, [r2, #30]
 8002754:	2a00      	cmp	r2, #0
 8002756:	d102      	bne.n	800275e <ETH_SetMACConfig+0x5e>
 8002758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0x60>
 800275e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002760:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	7f1b      	ldrb	r3, [r3, #28]
 8002766:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002768:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800276e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	791b      	ldrb	r3, [r3, #4]
 8002774:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002776:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800277e:	2a00      	cmp	r2, #0
 8002780:	d102      	bne.n	8002788 <ETH_SetMACConfig+0x88>
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	e000      	b.n	800278a <ETH_SetMACConfig+0x8a>
 8002788:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800278a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	7bdb      	ldrb	r3, [r3, #15]
 8002790:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002792:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002798:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027a2:	4313      	orrs	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff f93a 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027e6:	2a00      	cmp	r2, #0
 80027e8:	d101      	bne.n	80027ee <ETH_SetMACConfig+0xee>
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	e000      	b.n	80027f0 <ETH_SetMACConfig+0xf0>
 80027ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027fe:	2a01      	cmp	r2, #1
 8002800:	d101      	bne.n	8002806 <ETH_SetMACConfig+0x106>
 8002802:	2208      	movs	r2, #8
 8002804:	e000      	b.n	8002808 <ETH_SetMACConfig+0x108>
 8002806:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002808:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002810:	2a01      	cmp	r2, #1
 8002812:	d101      	bne.n	8002818 <ETH_SetMACConfig+0x118>
 8002814:	2204      	movs	r2, #4
 8002816:	e000      	b.n	800281a <ETH_SetMACConfig+0x11a>
 8002818:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800281a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002822:	2a01      	cmp	r2, #1
 8002824:	d101      	bne.n	800282a <ETH_SetMACConfig+0x12a>
 8002826:	2202      	movs	r2, #2
 8002828:	e000      	b.n	800282c <ETH_SetMACConfig+0x12c>
 800282a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800282c:	4313      	orrs	r3, r2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002844:	2001      	movs	r0, #1
 8002846:	f7ff f8f5 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	ff20810f 	.word	0xff20810f

08002860 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <ETH_SetDMAConfig+0x110>)
 800287a:	4013      	ands	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7b1b      	ldrb	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <ETH_SetDMAConfig+0x2c>
 8002886:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800288a:	e000      	b.n	800288e <ETH_SetDMAConfig+0x2e>
 800288c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	7b5b      	ldrb	r3, [r3, #13]
 8002892:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002894:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	7f52      	ldrb	r2, [r2, #29]
 800289a:	2a00      	cmp	r2, #0
 800289c:	d102      	bne.n	80028a4 <ETH_SetDMAConfig+0x44>
 800289e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028a2:	e000      	b.n	80028a6 <ETH_SetDMAConfig+0x46>
 80028a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	7b9b      	ldrb	r3, [r3, #14]
 80028ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7f1b      	ldrb	r3, [r3, #28]
 80028ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7f9b      	ldrb	r3, [r3, #30]
 80028c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028d4:	4313      	orrs	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	461a      	mov	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff f89c 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	791b      	ldrb	r3, [r3, #4]
 800290e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002914:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800291a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002920:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002928:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800292a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002932:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002938:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002942:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002946:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002954:	2001      	movs	r0, #1
 8002956:	f7ff f86d 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	f8de3f23 	.word	0xf8de3f23

08002974 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0a6      	sub	sp, #152	; 0x98
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002988:	2300      	movs	r3, #0
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029b0:	2300      	movs	r3, #0
 80029b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fe86 	bl	8002700 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a28:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a44:	f107 0308 	add.w	r3, r7, #8
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff08 	bl	8002860 <ETH_SetDMAConfig>
}
 8002a50:	bf00      	nop
 8002a52:	3798      	adds	r7, #152	; 0x98
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3305      	adds	r3, #5
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	3204      	adds	r2, #4
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <ETH_MACAddressConfig+0x68>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3303      	adds	r3, #3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	061a      	lsls	r2, r3, #24
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3301      	adds	r3, #1
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <ETH_MACAddressConfig+0x6c>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40028040 	.word	0x40028040
 8002ac4:	40028044 	.word	0x40028044

08002ac8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e03e      	b.n	8002b54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	3206      	adds	r2, #6
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d80c      	bhi.n	8002b38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	e004      	b.n	8002b42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d9bd      	bls.n	8002ad6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6c:	611a      	str	r2, [r3, #16]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e046      	b.n	8002c16 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6919      	ldr	r1, [r3, #16]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002bcc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	3212      	adds	r2, #18
 8002be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d80c      	bhi.n	8002c06 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6919      	ldr	r1, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	e004      	b.n	8002c10 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d9b5      	bls.n	8002b88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c46:	60da      	str	r2, [r3, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b08d      	sub	sp, #52	; 0x34
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3318      	adds	r3, #24
 8002c64:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c96:	d007      	beq.n	8002ca8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e103      	b.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	3301      	adds	r3, #1
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002cc4:	f023 031f 	bic.w	r3, r3, #31
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	6852      	ldr	r2, [r2, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d32:	f3bf 8f5f 	dmb	sy
}
 8002d36:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d44:	e084      	b.n	8002e50 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e005      	b.n	8002d72 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	3301      	adds	r3, #1
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d902      	bls.n	8002d84 <ETH_Prepare_Tx_Descriptors+0x130>
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	3b04      	subs	r3, #4
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da6:	d007      	beq.n	8002db8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	3304      	adds	r3, #4
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d029      	beq.n	8002e0c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	e019      	b.n	8002e00 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dcc:	f3bf 8f5f 	dmb	sy
}
 8002dd0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	3301      	adds	r3, #1
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d902      	bls.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	3b04      	subs	r3, #4
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3e1      	bcc.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e053      	b.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002e2a:	f023 031f 	bic.w	r3, r3, #31
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e3e:	f3bf 8f5f 	dmb	sy
}
 8002e42:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f af76 	bne.w	8002d46 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e005      	b.n	8002e7a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e8a:	6979      	ldr	r1, [r7, #20]
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	3304      	adds	r3, #4
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9c:	b672      	cpsid	i
}
 8002e9e:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002eae:	b662      	cpsie	i
}
 8002eb0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3734      	adds	r7, #52	; 0x34
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e16b      	b.n	80031b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 815a 	bne.w	80031ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d005      	beq.n	8002f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d130      	bne.n	8002f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0201 	and.w	r2, r3, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d017      	beq.n	8002fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80b4 	beq.w	80031ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b60      	ldr	r3, [pc, #384]	; (80031cc <HAL_GPIO_Init+0x30c>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a5f      	ldr	r2, [pc, #380]	; (80031cc <HAL_GPIO_Init+0x30c>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <HAL_GPIO_Init+0x30c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003062:	4a5b      	ldr	r2, [pc, #364]	; (80031d0 <HAL_GPIO_Init+0x310>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_GPIO_Init+0x314>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02b      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_GPIO_Init+0x318>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d025      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a50      	ldr	r2, [pc, #320]	; (80031dc <HAL_GPIO_Init+0x31c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4f      	ldr	r2, [pc, #316]	; (80031e0 <HAL_GPIO_Init+0x320>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x21a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	; (80031e4 <HAL_GPIO_Init+0x324>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x216>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4d      	ldr	r2, [pc, #308]	; (80031e8 <HAL_GPIO_Init+0x328>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x212>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <HAL_GPIO_Init+0x32c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x20e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4b      	ldr	r2, [pc, #300]	; (80031f0 <HAL_GPIO_Init+0x330>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x20a>
 80030c6:	2307      	movs	r3, #7
 80030c8:	e00e      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030ca:	2308      	movs	r3, #8
 80030cc:	e00c      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030ce:	2306      	movs	r3, #6
 80030d0:	e00a      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030d2:	2305      	movs	r3, #5
 80030d4:	e008      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030da:	2303      	movs	r3, #3
 80030dc:	e004      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030de:	2302      	movs	r3, #2
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030e6:	2300      	movs	r3, #0
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f002 0203 	and.w	r2, r2, #3
 80030ee:	0092      	lsls	r2, r2, #2
 80030f0:	4093      	lsls	r3, r2
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f8:	4935      	ldr	r1, [pc, #212]	; (80031d0 <HAL_GPIO_Init+0x310>)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312a:	4a32      	ldr	r2, [pc, #200]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_GPIO_Init+0x334>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3301      	adds	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	f67f ae90 	bls.w	8002edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40013800 	.word	0x40013800
 80031d4:	40020000 	.word	0x40020000
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40020800 	.word	0x40020800
 80031e0:	40020c00 	.word	0x40020c00
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40021400 	.word	0x40021400
 80031ec:	40021800 	.word	0x40021800
 80031f0:	40021c00 	.word	0x40021c00
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e001      	b.n	800321a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800326c:	887a      	ldrh	r2, [r7, #2]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	041a      	lsls	r2, r3, #16
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43d9      	mvns	r1, r3
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	400b      	ands	r3, r1
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a6:	4a05      	ldr	r2, [pc, #20]	; (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fbc4 	bl	8000a3c <HAL_GPIO_EXTI_Callback>
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e12b      	b.n	800352a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fa82 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003324:	f002 fa2a 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a81      	ldr	r2, [pc, #516]	; (8003534 <HAL_I2C_Init+0x274>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d807      	bhi.n	8003344 <HAL_I2C_Init+0x84>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a80      	ldr	r2, [pc, #512]	; (8003538 <HAL_I2C_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e006      	b.n	8003352 <HAL_I2C_Init+0x92>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_I2C_Init+0x27c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0e7      	b.n	800352a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a78      	ldr	r2, [pc, #480]	; (8003540 <HAL_I2C_Init+0x280>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_I2C_Init+0x274>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d802      	bhi.n	8003394 <HAL_I2C_Init+0xd4>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3301      	adds	r3, #1
 8003392:	e009      	b.n	80033a8 <HAL_I2C_Init+0xe8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <HAL_I2C_Init+0x284>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	3301      	adds	r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	495c      	ldr	r1, [pc, #368]	; (8003534 <HAL_I2C_Init+0x274>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d819      	bhi.n	80033fc <HAL_I2C_Init+0x13c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e59      	subs	r1, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033dc:	400b      	ands	r3, r1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_I2C_Init+0x138>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e59      	subs	r1, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	e051      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e04f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <HAL_I2C_Init+0x168>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e012      	b.n	800344e <HAL_I2C_Init+0x18e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e58      	subs	r0, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	0099      	lsls	r1, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x196>
 8003452:	2301      	movs	r3, #1
 8003454:	e022      	b.n	800349c <HAL_I2C_Init+0x1dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_I2C_Init+0x1bc>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e58      	subs	r0, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	440b      	add	r3, r1
 800346c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347a:	e00f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	6809      	ldr	r1, [r1, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6911      	ldr	r1, [r2, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	000186a0 	.word	0x000186a0
 8003538:	001e847f 	.word	0x001e847f
 800353c:	003d08ff 	.word	0x003d08ff
 8003540:	431bde83 	.word	0x431bde83
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b80      	cmp	r3, #128	; 0x80
 800355c:	d103      	bne.n	8003566 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  }
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b088      	sub	sp, #32
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003592:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d003      	beq.n	80035aa <HAL_I2C_EV_IRQHandler+0x38>
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	f040 80b1 	bne.w	800370c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10d      	bne.n	80035e0 <HAL_I2C_EV_IRQHandler+0x6e>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035ca:	d003      	beq.n	80035d4 <HAL_I2C_EV_IRQHandler+0x62>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035d2:	d101      	bne.n	80035d8 <HAL_I2C_EV_IRQHandler+0x66>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_I2C_EV_IRQHandler+0x68>
 80035d8:	2300      	movs	r3, #0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	f000 8114 	beq.w	8003808 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0x90>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 fc75 	bl	8004ee4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fd7a 	bl	80040f4 <I2C_Master_SB>
 8003600:	e083      	b.n	800370a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_I2C_EV_IRQHandler+0xac>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fdf2 	bl	8004200 <I2C_Master_ADD10>
 800361c:	e075      	b.n	800370a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0xc8>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fe0e 	bl	8004254 <I2C_Master_ADDR>
 8003638:	e067      	b.n	800370a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d036      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003652:	f000 80db 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_I2C_EV_IRQHandler+0x10a>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_I2C_EV_IRQHandler+0x10a>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f9d6 	bl	8003a26 <I2C_MasterTransmit_TXE>
 800367a:	e046      	b.n	800370a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80c2 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80bc 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d103      	bne.n	80036a2 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa5f 	bl	8003b5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a0:	e0b4      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	f040 80b1 	bne.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 facd 	bl	8003c4a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b0:	e0ac      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c0:	f000 80a4 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <HAL_I2C_EV_IRQHandler+0x178>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_I2C_EV_IRQHandler+0x178>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb49 	bl	8003d7a <I2C_MasterReceive_RXNE>
 80036e8:	e00f      	b.n	800370a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 808b 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8085 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fc01 	bl	8003f0a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003708:	e080      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x29a>
 800370a:	e07f      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e007      	b.n	800372e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d011      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0x1ea>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003752:	69b9      	ldr	r1, [r7, #24]
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 ffcc 	bl	80046f2 <I2C_Slave_ADDR>
 800375a:	e05a      	b.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x206>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f001 f807 	bl	8004784 <I2C_Slave_STOPF>
 8003776:	e04c      	b.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	2b21      	cmp	r3, #33	; 0x21
 800377c:	d002      	beq.n	8003784 <HAL_I2C_EV_IRQHandler+0x212>
 800377e:	7bbb      	ldrb	r3, [r7, #14]
 8003780:	2b29      	cmp	r3, #41	; 0x29
 8003782:	d120      	bne.n	80037c6 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <HAL_I2C_EV_IRQHandler+0x238>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_I2C_EV_IRQHandler+0x238>
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fee7 	bl	8004576 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037a8:	e032      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02d      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x29e>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d028      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 ff16 	bl	80045f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c4:	e024      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <HAL_I2C_EV_IRQHandler+0x27a>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_I2C_EV_IRQHandler+0x27a>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 ff24 	bl	8004632 <I2C_SlaveReceive_RXNE>
 80037ea:	e012      	b.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 ff54 	bl	80046ae <I2C_SlaveReceive_BTF>
 8003806:	e004      	b.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003808:	bf00      	nop
 800380a:	e002      	b.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800380c:	bf00      	nop
 800380e:	e000      	b.n	8003812 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003810:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003830:	2300      	movs	r3, #0
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_I2C_ER_IRQHandler+0x4a>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003860:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00d      	beq.n	8003888 <HAL_I2C_ER_IRQHandler+0x70>
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003886:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03e      	beq.n	8003910 <HAL_I2C_ER_IRQHandler+0xf8>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d039      	beq.n	8003910 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800389c:	7efb      	ldrb	r3, [r7, #27]
 800389e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038b6:	7ebb      	ldrb	r3, [r7, #26]
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d112      	bne.n	80038e2 <HAL_I2C_ER_IRQHandler+0xca>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_I2C_ER_IRQHandler+0xca>
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b21      	cmp	r3, #33	; 0x21
 80038c6:	d008      	beq.n	80038da <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b29      	cmp	r3, #41	; 0x29
 80038cc:	d005      	beq.n	80038da <HAL_I2C_ER_IRQHandler+0xc2>
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	2b28      	cmp	r3, #40	; 0x28
 80038d2:	d106      	bne.n	80038e2 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b21      	cmp	r3, #33	; 0x21
 80038d8:	d103      	bne.n	80038e2 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f001 f882 	bl	80049e4 <I2C_Slave_AF>
 80038e0:	e016      	b.n	8003910 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ea:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038f4:	7efb      	ldrb	r3, [r7, #27]
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d002      	beq.n	8003900 <HAL_I2C_ER_IRQHandler+0xe8>
 80038fa:	7efb      	ldrb	r3, [r7, #27]
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d107      	bne.n	8003910 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <HAL_I2C_ER_IRQHandler+0x11e>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003934:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f001 f8bf 	bl	8004acc <I2C_ITError>
  }
}
 800394e:	bf00      	nop
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
 80039b2:	4613      	mov	r3, r2
 80039b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d150      	bne.n	8003aee <I2C_MasterTransmit_TXE+0xc8>
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b21      	cmp	r3, #33	; 0x21
 8003a50:	d14d      	bne.n	8003aee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d01d      	beq.n	8003a94 <I2C_MasterTransmit_TXE+0x6e>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d01a      	beq.n	8003a94 <I2C_MasterTransmit_TXE+0x6e>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a64:	d016      	beq.n	8003a94 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a74:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2211      	movs	r2, #17
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff62 	bl	8003956 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a92:	e060      	b.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d107      	bne.n	8003ade <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff7d 	bl	80039d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003adc:	e03b      	b.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff35 	bl	8003956 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aec:	e033      	b.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b21      	cmp	r3, #33	; 0x21
 8003af2:	d005      	beq.n	8003b00 <I2C_MasterTransmit_TXE+0xda>
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d12d      	bne.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b22      	cmp	r3, #34	; 0x22
 8003afe:	d12a      	bne.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b1a:	e01c      	b.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d103      	bne.n	8003b30 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f88e 	bl	8003c4a <I2C_MemoryTransmit_TXE_BTF>
}
 8003b2e:	e012      	b.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b54:	e7ff      	b.n	8003b56 <I2C_MasterTransmit_TXE+0x130>
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b21      	cmp	r3, #33	; 0x21
 8003b76:	d164      	bne.n	8003c42 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ba6:	e04c      	b.n	8003c42 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d01d      	beq.n	8003bea <I2C_MasterTransmit_BTF+0x8c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d01a      	beq.n	8003bea <I2C_MasterTransmit_BTF+0x8c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bba:	d016      	beq.n	8003bea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2211      	movs	r2, #17
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff feb7 	bl	8003956 <HAL_I2C_MasterTxCpltCallback>
}
 8003be8:	e02b      	b.n	8003c42 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bf8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c08:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d107      	bne.n	8003c34 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fed2 	bl	80039d6 <HAL_I2C_MemTxCpltCallback>
}
 8003c32:	e006      	b.n	8003c42 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fe8a 	bl	8003956 <HAL_I2C_MasterTxCpltCallback>
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11d      	bne.n	8003c9e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10b      	bne.n	8003c82 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003c80:	e077      	b.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	121b      	asrs	r3, r3, #8
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c9c:	e069      	b.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10b      	bne.n	8003cbe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cbc:	e059      	b.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d152      	bne.n	8003d6c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	2b22      	cmp	r3, #34	; 0x22
 8003cca:	d10d      	bne.n	8003ce8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cda:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ce6:	e044      	b.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b21      	cmp	r3, #33	; 0x21
 8003cf6:	d112      	bne.n	8003d1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d1c:	e029      	b.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d124      	bne.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b21      	cmp	r3, #33	; 0x21
 8003d2c:	d121      	bne.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d3c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fe36 	bl	80039d6 <HAL_I2C_MemTxCpltCallback>
}
 8003d6a:	e002      	b.n	8003d72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fbeb 	bl	8003548 <I2C_Flush_DR>
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b22      	cmp	r3, #34	; 0x22
 8003d8c:	f040 80b9 	bne.w	8003f02 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d921      	bls.n	8003de8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	f040 8096 	bne.w	8003f02 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003de6:	e08c      	b.n	8003f02 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d07f      	beq.n	8003ef0 <I2C_MasterReceive_RXNE+0x176>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d002      	beq.n	8003dfc <I2C_MasterReceive_RXNE+0x82>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d179      	bne.n	8003ef0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 f83f 	bl	8004e80 <I2C_WaitOnSTOPRequestThroughIT>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d14c      	bne.n	8003ea2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d10a      	bne.n	8003e78 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff fdba 	bl	80039ea <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e76:	e044      	b.n	8003f02 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d002      	beq.n	8003e8c <I2C_MasterReceive_RXNE+0x112>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d103      	bne.n	8003e94 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
 8003e92:	e002      	b.n	8003e9a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2212      	movs	r2, #18
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fd65 	bl	800396a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ea0:	e02f      	b.n	8003f02 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fd88 	bl	80039fe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eee:	e008      	b.n	8003f02 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efe:	605a      	str	r2, [r3, #4]
}
 8003f00:	e7ff      	b.n	8003f02 <I2C_MasterReceive_RXNE+0x188>
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d11b      	bne.n	8003f5a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f30:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f58:	e0c8      	b.n	80040ec <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d129      	bne.n	8003fb8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00a      	beq.n	8003f90 <I2C_MasterReceive_BTF+0x86>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d007      	beq.n	8003f90 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fb6:	e099      	b.n	80040ec <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	f040 8081 	bne.w	80040c6 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <I2C_MasterReceive_BTF+0xc6>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d108      	bne.n	8003fe2 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e019      	b.n	8004016 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d002      	beq.n	8003fee <I2C_MasterReceive_BTF+0xe4>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d108      	bne.n	8004000 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00a      	b.n	8004016 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b10      	cmp	r3, #16
 8004004:	d007      	beq.n	8004016 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004070:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d10a      	bne.n	800409c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fca8 	bl	80039ea <HAL_I2C_MemRxCpltCallback>
}
 800409a:	e027      	b.n	80040ec <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d002      	beq.n	80040b0 <I2C_MasterReceive_BTF+0x1a6>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d103      	bne.n	80040b8 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
 80040b6:	e002      	b.n	80040be <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2212      	movs	r2, #18
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fc53 	bl	800396a <HAL_I2C_MasterRxCpltCallback>
}
 80040c4:	e012      	b.n	80040ec <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d117      	bne.n	8004138 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004120:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004122:	e067      	b.n	80041f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]
}
 8004136:	e05d      	b.n	80041f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004140:	d133      	bne.n	80041aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b21      	cmp	r3, #33	; 0x21
 800414c:	d109      	bne.n	8004162 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800415e:	611a      	str	r2, [r3, #16]
 8004160:	e008      	b.n	8004174 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <I2C_Master_SB+0x92>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d032      	beq.n	80041f4 <I2C_Master_SB+0x100>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02d      	beq.n	80041f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a6:	605a      	str	r2, [r3, #4]
}
 80041a8:	e024      	b.n	80041f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	11db      	asrs	r3, r3, #7
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0306 	and.w	r3, r3, #6
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f063 030f 	orn	r3, r3, #15
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]
}
 80041ce:	e011      	b.n	80041f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10d      	bne.n	80041f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	b29b      	uxth	r3, r3
 80041de:	11db      	asrs	r3, r3, #7
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0306 	and.w	r3, r3, #6
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f063 030e 	orn	r3, r3, #14
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	b2da      	uxtb	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <I2C_Master_ADD10+0x26>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00c      	beq.n	8004248 <I2C_Master_ADD10+0x48>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004246:	605a      	str	r2, [r3, #4]
  }
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004254:	b480      	push	{r7}
 8004256:	b091      	sub	sp, #68	; 0x44
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004262:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b22      	cmp	r3, #34	; 0x22
 800427c:	f040 8169 	bne.w	8004552 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <I2C_Master_ADDR+0x54>
 8004288:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d10b      	bne.n	80042a8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004290:	2300      	movs	r3, #0
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	633b      	str	r3, [r7, #48]	; 0x30
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	e160      	b.n	800456a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11d      	bne.n	80042ec <I2C_Master_ADDR+0x98>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042b8:	d118      	bne.n	80042ec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ba:	2300      	movs	r3, #0
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042de:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
 80042ea:	e13e      	b.n	800456a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d113      	bne.n	800431e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e115      	b.n	800454a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	f040 808a 	bne.w	800443e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004330:	d137      	bne.n	80043a2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004340:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004350:	d113      	bne.n	800437a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	e0e7      	b.n	800454a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437a:	2300      	movs	r3, #0
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e0d3      	b.n	800454a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d02e      	beq.n	8004406 <I2C_Master_ADDR+0x1b2>
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d02b      	beq.n	8004406 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	2b12      	cmp	r3, #18
 80043b2:	d102      	bne.n	80043ba <I2C_Master_ADDR+0x166>
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d125      	bne.n	8004406 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d00e      	beq.n	80043de <I2C_Master_ADDR+0x18a>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d00b      	beq.n	80043de <I2C_Master_ADDR+0x18a>
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d008      	beq.n	80043de <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e007      	b.n	80043ee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	e0a1      	b.n	800454a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e085      	b.n	800454a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d14d      	bne.n	80044e4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b04      	cmp	r3, #4
 800444c:	d016      	beq.n	800447c <I2C_Master_ADDR+0x228>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b02      	cmp	r3, #2
 8004452:	d013      	beq.n	800447c <I2C_Master_ADDR+0x228>
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	2b10      	cmp	r3, #16
 8004458:	d010      	beq.n	800447c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e007      	b.n	800448c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800448a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449a:	d117      	bne.n	80044cc <I2C_Master_ADDR+0x278>
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a2:	d00b      	beq.n	80044bc <I2C_Master_ADDR+0x268>
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d008      	beq.n	80044bc <I2C_Master_ADDR+0x268>
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d005      	beq.n	80044bc <I2C_Master_ADDR+0x268>
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d002      	beq.n	80044bc <I2C_Master_ADDR+0x268>
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d107      	bne.n	80044cc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	e032      	b.n	800454a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004502:	d117      	bne.n	8004534 <I2C_Master_ADDR+0x2e0>
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800450a:	d00b      	beq.n	8004524 <I2C_Master_ADDR+0x2d0>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	2b01      	cmp	r3, #1
 8004510:	d008      	beq.n	8004524 <I2C_Master_ADDR+0x2d0>
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2b08      	cmp	r3, #8
 8004516:	d005      	beq.n	8004524 <I2C_Master_ADDR+0x2d0>
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	2b10      	cmp	r3, #16
 800451c:	d002      	beq.n	8004524 <I2C_Master_ADDR+0x2d0>
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b20      	cmp	r3, #32
 8004522:	d107      	bne.n	8004534 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004532:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004550:	e00b      	b.n	800456a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
}
 8004568:	e7ff      	b.n	800456a <I2C_Master_ADDR+0x316>
 800456a:	bf00      	nop
 800456c:	3744      	adds	r7, #68	; 0x44
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02b      	beq.n	80045e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d114      	bne.n	80045e8 <I2C_SlaveTransmit_TXE+0x72>
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b29      	cmp	r3, #41	; 0x29
 80045c2:	d111      	bne.n	80045e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2221      	movs	r2, #33	; 0x21
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2228      	movs	r2, #40	; 0x28
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff f9cb 	bl	800397e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d011      	beq.n	8004626 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02c      	beq.n	80046a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d114      	bne.n	80046a6 <I2C_SlaveReceive_RXNE+0x74>
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b2a      	cmp	r3, #42	; 0x2a
 8004680:	d111      	bne.n	80046a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2222      	movs	r2, #34	; 0x22
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2228      	movs	r2, #40	; 0x28
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff f976 	bl	8003992 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800470c:	2b28      	cmp	r3, #40	; 0x28
 800470e:	d125      	bne.n	800475c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	81bb      	strh	r3, [r7, #12]
 800473e:	e002      	b.n	8004746 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800474e:	89ba      	ldrh	r2, [r7, #12]
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff f926 	bl	80039a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800475a:	e00e      	b.n	800477a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004792:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d172      	bne.n	80048c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b22      	cmp	r3, #34	; 0x22
 80047e6:	d002      	beq.n	80047ee <I2C_Slave_STOPF+0x6a>
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b2a      	cmp	r3, #42	; 0x2a
 80047ec:	d135      	bne.n	800485a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004820:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fafd 	bl	8001e26 <HAL_DMA_GetState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d049      	beq.n	80048c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	4a69      	ldr	r2, [pc, #420]	; (80049dc <I2C_Slave_STOPF+0x258>)
 8004838:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd facf 	bl	8001de2 <HAL_DMA_Abort_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03d      	beq.n	80048c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004858:	e035      	b.n	80048c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800488c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd fac7 	bl	8001e26 <HAL_DMA_GetState>
 8004898:	4603      	mov	r3, r0
 800489a:	2b01      	cmp	r3, #1
 800489c:	d014      	beq.n	80048c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <I2C_Slave_STOPF+0x258>)
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fa99 	bl	8001de2 <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
 80048c4:	e000      	b.n	80048c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03e      	beq.n	8004950 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d112      	bne.n	8004906 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d112      	bne.n	800493a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f043 0204 	orr.w	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8b7 	bl	8004acc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800495e:	e039      	b.n	80049d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d109      	bne.n	800497a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2228      	movs	r2, #40	; 0x28
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff f80c 	bl	8003992 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b28      	cmp	r3, #40	; 0x28
 8004984:	d111      	bne.n	80049aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <I2C_Slave_STOPF+0x25c>)
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff f80d 	bl	80039c2 <HAL_I2C_ListenCpltCallback>
}
 80049a8:	e014      	b.n	80049d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	2b22      	cmp	r3, #34	; 0x22
 80049b0:	d002      	beq.n	80049b8 <I2C_Slave_STOPF+0x234>
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b22      	cmp	r3, #34	; 0x22
 80049b6:	d10d      	bne.n	80049d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fe ffdf 	bl	8003992 <HAL_I2C_SlaveRxCpltCallback>
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08004d31 	.word	0x08004d31
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d002      	beq.n	8004a06 <I2C_Slave_AF+0x22>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d129      	bne.n	8004a5a <I2C_Slave_AF+0x76>
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b28      	cmp	r3, #40	; 0x28
 8004a0a:	d126      	bne.n	8004a5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <I2C_Slave_AF+0xe4>)
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fe ffb5 	bl	80039c2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a58:	e031      	b.n	8004abe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b21      	cmp	r3, #33	; 0x21
 8004a5e:	d129      	bne.n	8004ab4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <I2C_Slave_AF+0xe4>)
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2221      	movs	r2, #33	; 0x21
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe fd4e 	bl	8003548 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fe ff66 	bl	800397e <HAL_I2C_SlaveTxCpltCallback>
}
 8004ab2:	e004      	b.n	8004abe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004abc:	615a      	str	r2, [r3, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	ffff0000 	.word	0xffff0000

08004acc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d002      	beq.n	8004af0 <I2C_ITError+0x24>
 8004aea:	7bbb      	ldrb	r3, [r7, #14]
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d10a      	bne.n	8004b06 <I2C_ITError+0x3a>
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	d107      	bne.n	8004b06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b0c:	2b28      	cmp	r3, #40	; 0x28
 8004b0e:	d107      	bne.n	8004b20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2228      	movs	r2, #40	; 0x28
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b1e:	e015      	b.n	8004b4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2e:	d00a      	beq.n	8004b46 <I2C_ITError+0x7a>
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b60      	cmp	r3, #96	; 0x60
 8004b34:	d007      	beq.n	8004b46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5a:	d162      	bne.n	8004c22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d020      	beq.n	8004bbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	4a6a      	ldr	r2, [pc, #424]	; (8004d28 <I2C_ITError+0x25c>)
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd f92b 	bl	8001de2 <HAL_DMA_Abort_IT>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8089 	beq.w	8004ca6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4798      	blx	r3
 8004bba:	e074      	b.n	8004ca6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	4a59      	ldr	r2, [pc, #356]	; (8004d28 <I2C_ITError+0x25c>)
 8004bc2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fd f90a 	bl	8001de2 <HAL_DMA_Abort_IT>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d068      	beq.n	8004ca6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d10b      	bne.n	8004bfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
 8004c20:	e041      	b.n	8004ca6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b60      	cmp	r3, #96	; 0x60
 8004c2c:	d125      	bne.n	8004c7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d10b      	bne.n	8004c62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fe fecd 	bl	8003a12 <HAL_I2C_AbortCpltCallback>
 8004c78:	e015      	b.n	8004ca6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d10b      	bne.n	8004ca0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fe feac 	bl	80039fe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10e      	bne.n	8004cd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d113      	bne.n	8004d20 <I2C_ITError+0x254>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b28      	cmp	r3, #40	; 0x28
 8004cfc:	d110      	bne.n	8004d20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <I2C_ITError+0x260>)
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fe fe51 	bl	80039c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	08004d31 	.word	0x08004d31
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d4a:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <I2C_DMAAbort+0x148>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <I2C_DMAAbort+0x14c>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0a1a      	lsrs	r2, r3, #8
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00da      	lsls	r2, r3, #3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d76:	e00a      	b.n	8004d8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d0ea      	beq.n	8004d64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	2200      	movs	r2, #0
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	2200      	movs	r2, #0
 8004de2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d10e      	bne.n	8004e1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e16:	6978      	ldr	r0, [r7, #20]
 8004e18:	f7fe fdfb 	bl	8003a12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e1c:	e027      	b.n	8004e6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e24:	2b28      	cmp	r3, #40	; 0x28
 8004e26:	d117      	bne.n	8004e58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2228      	movs	r2, #40	; 0x28
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e56:	e007      	b.n	8004e68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e68:	6978      	ldr	r0, [r7, #20]
 8004e6a:	f7fe fdc8 	bl	80039fe <HAL_I2C_ErrorCallback>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	14f8b589 	.word	0x14f8b589

08004e80 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	08db      	lsrs	r3, r3, #3
 8004e92:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	0a1a      	lsrs	r2, r3, #8
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d107      	bne.n	8004ebe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e008      	b.n	8004ed0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d0e9      	beq.n	8004ea2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	14f8b589 	.word	0x14f8b589

08004ee4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ef4:	d103      	bne.n	8004efe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004efc:	e007      	b.n	8004f0e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f06:	d102      	bne.n	8004f0e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e267      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d075      	beq.n	8005026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f3a:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d00c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f46:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d112      	bne.n	8004f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4b82      	ldr	r3, [pc, #520]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	4b7e      	ldr	r3, [pc, #504]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05b      	beq.n	8005024 <HAL_RCC_OscConfig+0x108>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d157      	bne.n	8005024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e242      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d106      	bne.n	8004f90 <HAL_RCC_OscConfig+0x74>
 8004f82:	4b76      	ldr	r3, [pc, #472]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a75      	ldr	r2, [pc, #468]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e01d      	b.n	8004fcc <HAL_RCC_OscConfig+0xb0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x98>
 8004f9a:	4b70      	ldr	r3, [pc, #448]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6f      	ldr	r2, [pc, #444]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	4b6d      	ldr	r3, [pc, #436]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6c      	ldr	r2, [pc, #432]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0xb0>
 8004fb4:	4b69      	ldr	r3, [pc, #420]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a68      	ldr	r2, [pc, #416]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b66      	ldr	r3, [pc, #408]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a65      	ldr	r2, [pc, #404]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d013      	beq.n	8004ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fd22 	bl	8001a1c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fc fd1e 	bl	8001a1c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e207      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0xc0>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fd0e 	bl	8001a1c <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005004:	f7fc fd0a 	bl	8001a1c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	; 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e1f3      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005016:	4b51      	ldr	r3, [pc, #324]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0xe8>
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d063      	beq.n	80050fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005046:	2b08      	cmp	r3, #8
 8005048:	d11c      	bne.n	8005084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504a:	4b44      	ldr	r3, [pc, #272]	; (800515c <HAL_RCC_OscConfig+0x240>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d116      	bne.n	8005084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <HAL_RCC_OscConfig+0x152>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e1c7      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4937      	ldr	r1, [pc, #220]	; (800515c <HAL_RCC_OscConfig+0x240>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005082:	e03a      	b.n	80050fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d020      	beq.n	80050ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCC_OscConfig+0x244>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fc fcc3 	bl	8001a1c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800509a:	f7fc fcbf 	bl	8001a1c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e1a8      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4925      	ldr	r1, [pc, #148]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]
 80050cc:	e015      	b.n	80050fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <HAL_RCC_OscConfig+0x244>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fc fca2 	bl	8001a1c <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050dc:	f7fc fc9e 	bl	8001a1c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e187      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d036      	beq.n	8005174 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510e:	4b15      	ldr	r3, [pc, #84]	; (8005164 <HAL_RCC_OscConfig+0x248>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fc fc82 	bl	8001a1c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511c:	f7fc fc7e 	bl	8001a1c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e167      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x200>
 800513a:	e01b      	b.n	8005174 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_RCC_OscConfig+0x248>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fc fc6b 	bl	8001a1c <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005148:	e00e      	b.n	8005168 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514a:	f7fc fc67 	bl	8001a1c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d907      	bls.n	8005168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e150      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
 800515c:	40023800 	.word	0x40023800
 8005160:	42470000 	.word	0x42470000
 8005164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005168:	4b88      	ldr	r3, [pc, #544]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800516a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ea      	bne.n	800514a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8097 	beq.w	80052b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005186:	4b81      	ldr	r3, [pc, #516]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	4b7d      	ldr	r3, [pc, #500]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	4a7c      	ldr	r2, [pc, #496]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6413      	str	r3, [r2, #64]	; 0x40
 80051a2:	4b7a      	ldr	r3, [pc, #488]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b77      	ldr	r3, [pc, #476]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d118      	bne.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051be:	4b74      	ldr	r3, [pc, #464]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a73      	ldr	r2, [pc, #460]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7fc fc27 	bl	8001a1c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fc fc23 	bl	8001a1c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e10c      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b6a      	ldr	r3, [pc, #424]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <HAL_RCC_OscConfig+0x2ea>
 80051f8:	4b64      	ldr	r3, [pc, #400]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
 8005204:	e01c      	b.n	8005240 <HAL_RCC_OscConfig+0x324>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x30c>
 800520e:	4b5f      	ldr	r3, [pc, #380]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a5e      	ldr	r2, [pc, #376]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	4b5c      	ldr	r3, [pc, #368]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a5b      	ldr	r2, [pc, #364]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0x324>
 8005228:	4b58      	ldr	r3, [pc, #352]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	4a57      	ldr	r2, [pc, #348]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	6713      	str	r3, [r2, #112]	; 0x70
 8005234:	4b55      	ldr	r3, [pc, #340]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	4a54      	ldr	r2, [pc, #336]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800523a:	f023 0304 	bic.w	r3, r3, #4
 800523e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fc fbe8 	bl	8001a1c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524e:	e00a      	b.n	8005266 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7fc fbe4 	bl	8001a1c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	; 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0cb      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	4b49      	ldr	r3, [pc, #292]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ee      	beq.n	8005250 <HAL_RCC_OscConfig+0x334>
 8005272:	e014      	b.n	800529e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005274:	f7fc fbd2 	bl	8001a1c <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7fc fbce 	bl	8001a1c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e0b5      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005292:	4b3e      	ldr	r3, [pc, #248]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ee      	bne.n	800527c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	4a38      	ldr	r2, [pc, #224]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80a1 	beq.w	80053fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ba:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d05c      	beq.n	8005380 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d141      	bne.n	8005352 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCC_OscConfig+0x478>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fc fba2 	bl	8001a1c <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fc fb9e 	bl	8001a1c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e087      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	061b      	lsls	r3, r3, #24
 800531e:	491b      	ldr	r1, [pc, #108]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_RCC_OscConfig+0x478>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532a:	f7fc fb77 	bl	8001a1c <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005332:	f7fc fb73 	bl	8001a1c <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e05c      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x416>
 8005350:	e054      	b.n	80053fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCC_OscConfig+0x478>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fc fb60 	bl	8001a1c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005360:	f7fc fb5c 	bl	8001a1c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e045      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x444>
 800537e:	e03d      	b.n	80053fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e038      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
 800538c:	40023800 	.word	0x40023800
 8005390:	40007000 	.word	0x40007000
 8005394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <HAL_RCC_OscConfig+0x4ec>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d028      	beq.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d121      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d11a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d111      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	3b01      	subs	r3, #1
 80053e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800

0800540c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0cc      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90c      	bls.n	8005448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0b8      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a58      	ldr	r2, [pc, #352]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005478:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a52      	ldr	r2, [pc, #328]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	494d      	ldr	r1, [pc, #308]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d044      	beq.n	800552c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d119      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d003      	beq.n	80054ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	4b3f      	ldr	r3, [pc, #252]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e06f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e067      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f023 0203 	bic.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4934      	ldr	r1, [pc, #208]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054fc:	f7fc fa8e 	bl	8001a1c <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005502:	e00a      	b.n	800551a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005504:	f7fc fa8a 	bl	8001a1c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e04f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551a:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 020c 	and.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	429a      	cmp	r2, r3
 800552a:	d1eb      	bne.n	8005504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d20c      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e032      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4916      	ldr	r1, [pc, #88]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	490e      	ldr	r1, [pc, #56]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005592:	f000 f821 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005596:	4602      	mov	r2, r0
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	490a      	ldr	r1, [pc, #40]	; (80055cc <HAL_RCC_ClockConfig+0x1c0>)
 80055a4:	5ccb      	ldrb	r3, [r1, r3]
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1c8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc f9ee 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40023c00 	.word	0x40023c00
 80055c8:	40023800 	.word	0x40023800
 80055cc:	080159e8 	.word	0x080159e8
 80055d0:	20000000 	.word	0x20000000
 80055d4:	20000004 	.word	0x20000004

080055d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055dc:	b090      	sub	sp, #64	; 0x40
 80055de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
 80055e4:	2300      	movs	r3, #0
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e8:	2300      	movs	r3, #0
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f0:	4b59      	ldr	r3, [pc, #356]	; (8005758 <HAL_RCC_GetSysClockFreq+0x180>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d00d      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x40>
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	f200 80a1 	bhi.w	8005744 <HAL_RCC_GetSysClockFreq+0x16c>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x34>
 8005606:	2b04      	cmp	r3, #4
 8005608:	d003      	beq.n	8005612 <HAL_RCC_GetSysClockFreq+0x3a>
 800560a:	e09b      	b.n	8005744 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800560c:	4b53      	ldr	r3, [pc, #332]	; (800575c <HAL_RCC_GetSysClockFreq+0x184>)
 800560e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005610:	e09b      	b.n	800574a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005612:	4b53      	ldr	r3, [pc, #332]	; (8005760 <HAL_RCC_GetSysClockFreq+0x188>)
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005616:	e098      	b.n	800574a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005618:	4b4f      	ldr	r3, [pc, #316]	; (8005758 <HAL_RCC_GetSysClockFreq+0x180>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005622:	4b4d      	ldr	r3, [pc, #308]	; (8005758 <HAL_RCC_GetSysClockFreq+0x180>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d028      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <HAL_RCC_GetSysClockFreq+0x180>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	2200      	movs	r2, #0
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	627a      	str	r2, [r7, #36]	; 0x24
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005640:	2100      	movs	r1, #0
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_RCC_GetSysClockFreq+0x188>)
 8005644:	fb03 f201 	mul.w	r2, r3, r1
 8005648:	2300      	movs	r3, #0
 800564a:	fb00 f303 	mul.w	r3, r0, r3
 800564e:	4413      	add	r3, r2
 8005650:	4a43      	ldr	r2, [pc, #268]	; (8005760 <HAL_RCC_GetSysClockFreq+0x188>)
 8005652:	fba0 1202 	umull	r1, r2, r0, r2
 8005656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005658:	460a      	mov	r2, r1
 800565a:	62ba      	str	r2, [r7, #40]	; 0x28
 800565c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565e:	4413      	add	r3, r2
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	2200      	movs	r2, #0
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	61fa      	str	r2, [r7, #28]
 800566a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005672:	f7fa fdfd 	bl	8000270 <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4613      	mov	r3, r2
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567e:	e053      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005680:	4b35      	ldr	r3, [pc, #212]	; (8005758 <HAL_RCC_GetSysClockFreq+0x180>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	099b      	lsrs	r3, r3, #6
 8005686:	2200      	movs	r2, #0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	617a      	str	r2, [r7, #20]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005692:	f04f 0b00 	mov.w	fp, #0
 8005696:	4652      	mov	r2, sl
 8005698:	465b      	mov	r3, fp
 800569a:	f04f 0000 	mov.w	r0, #0
 800569e:	f04f 0100 	mov.w	r1, #0
 80056a2:	0159      	lsls	r1, r3, #5
 80056a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056a8:	0150      	lsls	r0, r2, #5
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	ebb2 080a 	subs.w	r8, r2, sl
 80056b2:	eb63 090b 	sbc.w	r9, r3, fp
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056ca:	ebb2 0408 	subs.w	r4, r2, r8
 80056ce:	eb63 0509 	sbc.w	r5, r3, r9
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	00eb      	lsls	r3, r5, #3
 80056dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056e0:	00e2      	lsls	r2, r4, #3
 80056e2:	4614      	mov	r4, r2
 80056e4:	461d      	mov	r5, r3
 80056e6:	eb14 030a 	adds.w	r3, r4, sl
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	eb45 030b 	adc.w	r3, r5, fp
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056fe:	4629      	mov	r1, r5
 8005700:	028b      	lsls	r3, r1, #10
 8005702:	4621      	mov	r1, r4
 8005704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005708:	4621      	mov	r1, r4
 800570a:	028a      	lsls	r2, r1, #10
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	2200      	movs	r2, #0
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	60fa      	str	r2, [r7, #12]
 8005718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800571c:	f7fa fda8 	bl	8000270 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4613      	mov	r3, r2
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCC_GetSysClockFreq+0x180>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	3301      	adds	r3, #1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005738:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005742:	e002      	b.n	800574a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCC_GetSysClockFreq+0x184>)
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800574c:	4618      	mov	r0, r3
 800574e:	3740      	adds	r7, #64	; 0x40
 8005750:	46bd      	mov	sp, r7
 8005752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	00f42400 	.word	0x00f42400
 8005760:	017d7840 	.word	0x017d7840

08005764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <HAL_RCC_GetHCLKFreq+0x14>)
 800576a:	681b      	ldr	r3, [r3, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	20000000 	.word	0x20000000

0800577c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005780:	f7ff fff0 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	0a9b      	lsrs	r3, r3, #10
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4903      	ldr	r1, [pc, #12]	; (80057a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40023800 	.word	0x40023800
 80057a0:	080159f8 	.word	0x080159f8

080057a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057a8:	f7ff ffdc 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	0b5b      	lsrs	r3, r3, #13
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	4903      	ldr	r1, [pc, #12]	; (80057c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ba:	5ccb      	ldrb	r3, [r1, r3]
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40023800 	.word	0x40023800
 80057c8:	080159f8 	.word	0x080159f8

080057cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e041      	b.n	8005862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fdde 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 fda4 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e04e      	b.n	8005922 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a23      	ldr	r2, [pc, #140]	; (8005930 <HAL_TIM_Base_Start_IT+0xc4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d022      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ae:	d01d      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <HAL_TIM_Base_Start_IT+0xc8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d018      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <HAL_TIM_Base_Start_IT+0xcc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <HAL_TIM_Base_Start_IT+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <HAL_TIM_Base_Start_IT+0xd4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_TIM_Base_Start_IT+0xd8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x80>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_TIM_Base_Start_IT+0xdc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d111      	bne.n	8005910 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d010      	beq.n	8005920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590e:	e007      	b.n	8005920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40010400 	.word	0x40010400
 8005944:	40014000 	.word	0x40014000
 8005948:	40001800 	.word	0x40001800

0800594c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e041      	b.n	80059e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fc38 	bl	80011e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f000 fce4 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <HAL_TIM_PWM_Start+0x24>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	e022      	b.n	8005a56 <HAL_TIM_PWM_Start+0x6a>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d109      	bne.n	8005a2a <HAL_TIM_PWM_Start+0x3e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	bf14      	ite	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	2300      	moveq	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	e015      	b.n	8005a56 <HAL_TIM_PWM_Start+0x6a>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d109      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x58>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e008      	b.n	8005a56 <HAL_TIM_PWM_Start+0x6a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e07c      	b.n	8005b58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0x82>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a6c:	e013      	b.n	8005a96 <HAL_TIM_PWM_Start+0xaa>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_PWM_Start+0x92>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7c:	e00b      	b.n	8005a96 <HAL_TIM_PWM_Start+0xaa>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0xa2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8c:	e003      	b.n	8005a96 <HAL_TIM_PWM_Start+0xaa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 ffe0 	bl	8006a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2d      	ldr	r2, [pc, #180]	; (8005b60 <HAL_TIM_PWM_Start+0x174>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_TIM_PWM_Start+0xcc>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2c      	ldr	r2, [pc, #176]	; (8005b64 <HAL_TIM_PWM_Start+0x178>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_PWM_Start+0xd0>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_TIM_PWM_Start+0xd2>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <HAL_TIM_PWM_Start+0x174>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d01d      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <HAL_TIM_PWM_Start+0x17c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_TIM_PWM_Start+0x180>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_TIM_PWM_Start+0x184>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <HAL_TIM_PWM_Start+0x178>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_TIM_PWM_Start+0x188>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x136>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <HAL_TIM_PWM_Start+0x18c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d111      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b06      	cmp	r3, #6
 8005b32:	d010      	beq.n	8005b56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	e007      	b.n	8005b56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0201 	orr.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40001800 	.word	0x40001800

08005b7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e041      	b.n	8005c12 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb fb58 	bl	8001258 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fbcc 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_IC_Start_IT+0x1e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e013      	b.n	8005c62 <HAL_TIM_IC_Start_IT+0x46>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_IC_Start_IT+0x2e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e00b      	b.n	8005c62 <HAL_TIM_IC_Start_IT+0x46>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_IC_Start_IT+0x3e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	e003      	b.n	8005c62 <HAL_TIM_IC_Start_IT+0x46>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_TIM_IC_Start_IT+0x58>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e013      	b.n	8005c9c <HAL_TIM_IC_Start_IT+0x80>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d104      	bne.n	8005c84 <HAL_TIM_IC_Start_IT+0x68>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	e00b      	b.n	8005c9c <HAL_TIM_IC_Start_IT+0x80>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d104      	bne.n	8005c94 <HAL_TIM_IC_Start_IT+0x78>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e003      	b.n	8005c9c <HAL_TIM_IC_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d102      	bne.n	8005caa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca4:	7b7b      	ldrb	r3, [r7, #13]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d001      	beq.n	8005cae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e0cc      	b.n	8005e48 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_IC_Start_IT+0xa2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cbc:	e013      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0xca>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_IC_Start_IT+0xb2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ccc:	e00b      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0xca>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_IC_Start_IT+0xc2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cdc:	e003      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0xca>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_IC_Start_IT+0xda>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	e013      	b.n	8005d1e <HAL_TIM_IC_Start_IT+0x102>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_IC_Start_IT+0xea>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d04:	e00b      	b.n	8005d1e <HAL_TIM_IC_Start_IT+0x102>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIM_IC_Start_IT+0xfa>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d14:	e003      	b.n	8005d1e <HAL_TIM_IC_Start_IT+0x102>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d841      	bhi.n	8005da8 <HAL_TIM_IC_Start_IT+0x18c>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <HAL_TIM_IC_Start_IT+0x110>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005da9 	.word	0x08005da9
 8005d34:	08005da9 	.word	0x08005da9
 8005d38:	08005da9 	.word	0x08005da9
 8005d3c:	08005d73 	.word	0x08005d73
 8005d40:	08005da9 	.word	0x08005da9
 8005d44:	08005da9 	.word	0x08005da9
 8005d48:	08005da9 	.word	0x08005da9
 8005d4c:	08005d85 	.word	0x08005d85
 8005d50:	08005da9 	.word	0x08005da9
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005da9 	.word	0x08005da9
 8005d5c:	08005d97 	.word	0x08005d97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0202 	orr.w	r2, r2, #2
 8005d6e:	60da      	str	r2, [r3, #12]
      break;
 8005d70:	e01d      	b.n	8005dae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0204 	orr.w	r2, r2, #4
 8005d80:	60da      	str	r2, [r3, #12]
      break;
 8005d82:	e014      	b.n	8005dae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0208 	orr.w	r2, r2, #8
 8005d92:	60da      	str	r2, [r3, #12]
      break;
 8005d94:	e00b      	b.n	8005dae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0210 	orr.w	r2, r2, #16
 8005da4:	60da      	str	r2, [r3, #12]
      break;
 8005da6:	e002      	b.n	8005dae <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dac:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d148      	bne.n	8005e46 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fe51 	bl	8006a64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a22      	ldr	r2, [pc, #136]	; (8005e50 <HAL_TIM_IC_Start_IT+0x234>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d01d      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <HAL_TIM_IC_Start_IT+0x238>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_TIM_IC_Start_IT+0x23c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	; (8005e5c <HAL_TIM_IC_Start_IT+0x240>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <HAL_TIM_IC_Start_IT+0x244>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a18      	ldr	r2, [pc, #96]	; (8005e64 <HAL_TIM_IC_Start_IT+0x248>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <HAL_TIM_IC_Start_IT+0x24c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b06      	cmp	r3, #6
 8005e22:	d010      	beq.n	8005e46 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	e007      	b.n	8005e46 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40001800 	.word	0x40001800

08005e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0202 	mvn.w	r2, #2
 8005ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa30 	bl	800631c <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa22 	bl	8006308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa33 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0204 	mvn.w	r2, #4
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa0a 	bl	800631c <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9fc 	bl	8006308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa0d 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0208 	mvn.w	r2, #8
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9e4 	bl	800631c <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9d6 	bl	8006308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f9e7 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9be 	bl	800631c <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9b0 	bl	8006308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f9c1 	bl	8006330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fa fd58 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fe32 	bl	8006c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f992 	bl	8006344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0220 	mvn.w	r2, #32
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fe04 	bl	8006c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006066:	2302      	movs	r3, #2
 8006068:	e088      	b.n	800617c <HAL_TIM_IC_ConfigChannel+0x130>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d11b      	bne.n	80060b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006088:	f000 fbc2 	bl	8006810 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 020c 	bic.w	r2, r2, #12
 800609a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6999      	ldr	r1, [r3, #24]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	619a      	str	r2, [r3, #24]
 80060ae:	e060      	b.n	8006172 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d11c      	bne.n	80060f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80060c6:	f000 fc17 	bl	80068f8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6999      	ldr	r1, [r3, #24]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	021a      	lsls	r2, r3, #8
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	619a      	str	r2, [r3, #24]
 80060ee:	e040      	b.n	8006172 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d11b      	bne.n	800612e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006106:	f000 fc34 	bl	8006972 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 020c 	bic.w	r2, r2, #12
 8006118:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69d9      	ldr	r1, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	61da      	str	r2, [r3, #28]
 800612c:	e021      	b.n	8006172 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d11c      	bne.n	800616e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006144:	f000 fc51 	bl	80069ea <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006156:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69d9      	ldr	r1, [r3, #28]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	61da      	str	r2, [r3, #28]
 800616c:	e001      	b.n	8006172 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800619e:	2302      	movs	r3, #2
 80061a0:	e0ae      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	f200 809f 	bhi.w	80062f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061ed 	.word	0x080061ed
 80061bc:	080062f1 	.word	0x080062f1
 80061c0:	080062f1 	.word	0x080062f1
 80061c4:	080062f1 	.word	0x080062f1
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	080062f1 	.word	0x080062f1
 80061d0:	080062f1 	.word	0x080062f1
 80061d4:	080062f1 	.word	0x080062f1
 80061d8:	0800626f 	.word	0x0800626f
 80061dc:	080062f1 	.word	0x080062f1
 80061e0:	080062f1 	.word	0x080062f1
 80061e4:	080062f1 	.word	0x080062f1
 80061e8:	080062af 	.word	0x080062af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f95c 	bl	80064b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0208 	orr.w	r2, r2, #8
 8006206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	619a      	str	r2, [r3, #24]
      break;
 800622a:	e064      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f9ac 	bl	8006590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6999      	ldr	r1, [r3, #24]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	619a      	str	r2, [r3, #24]
      break;
 800626c:	e043      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fa01 	bl	800667c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0208 	orr.w	r2, r2, #8
 8006288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0204 	bic.w	r2, r2, #4
 8006298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	61da      	str	r2, [r3, #28]
      break;
 80062ac:	e023      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fa55 	bl	8006764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	021a      	lsls	r2, r3, #8
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	61da      	str	r2, [r3, #28]
      break;
 80062ee:	e002      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
      break;
 80062f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a46      	ldr	r2, [pc, #280]	; (8006484 <TIM_Base_SetConfig+0x12c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006376:	d00f      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a43      	ldr	r2, [pc, #268]	; (8006488 <TIM_Base_SetConfig+0x130>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00b      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a42      	ldr	r2, [pc, #264]	; (800648c <TIM_Base_SetConfig+0x134>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a41      	ldr	r2, [pc, #260]	; (8006490 <TIM_Base_SetConfig+0x138>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a40      	ldr	r2, [pc, #256]	; (8006494 <TIM_Base_SetConfig+0x13c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d108      	bne.n	80063aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a35      	ldr	r2, [pc, #212]	; (8006484 <TIM_Base_SetConfig+0x12c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d02b      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b8:	d027      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a32      	ldr	r2, [pc, #200]	; (8006488 <TIM_Base_SetConfig+0x130>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d023      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a31      	ldr	r2, [pc, #196]	; (800648c <TIM_Base_SetConfig+0x134>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d01f      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a30      	ldr	r2, [pc, #192]	; (8006490 <TIM_Base_SetConfig+0x138>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01b      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2f      	ldr	r2, [pc, #188]	; (8006494 <TIM_Base_SetConfig+0x13c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d017      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <TIM_Base_SetConfig+0x140>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2d      	ldr	r2, [pc, #180]	; (800649c <TIM_Base_SetConfig+0x144>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <TIM_Base_SetConfig+0x148>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <TIM_Base_SetConfig+0x14c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <TIM_Base_SetConfig+0x150>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <TIM_Base_SetConfig+0x154>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a10      	ldr	r2, [pc, #64]	; (8006484 <TIM_Base_SetConfig+0x12c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_Base_SetConfig+0xf8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a12      	ldr	r2, [pc, #72]	; (8006494 <TIM_Base_SetConfig+0x13c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d103      	bne.n	8006458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b01      	cmp	r3, #1
 8006468:	d105      	bne.n	8006476 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]
  }
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40010400 	.word	0x40010400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800
 80064a4:	40001800 	.word	0x40001800
 80064a8:	40001c00 	.word	0x40001c00
 80064ac:	40002000 	.word	0x40002000

080064b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0201 	bic.w	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0302 	bic.w	r3, r3, #2
 80064f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a20      	ldr	r2, [pc, #128]	; (8006588 <TIM_OC1_SetConfig+0xd8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_OC1_SetConfig+0x64>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a1f      	ldr	r2, [pc, #124]	; (800658c <TIM_OC1_SetConfig+0xdc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d10c      	bne.n	800652e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0308 	bic.w	r3, r3, #8
 800651a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <TIM_OC1_SetConfig+0xd8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_OC1_SetConfig+0x8e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a14      	ldr	r2, [pc, #80]	; (800658c <TIM_OC1_SetConfig+0xdc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d111      	bne.n	8006562 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	621a      	str	r2, [r3, #32]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400

08006590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f023 0210 	bic.w	r2, r3, #16
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0320 	bic.w	r3, r3, #32
 80065da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a22      	ldr	r2, [pc, #136]	; (8006674 <TIM_OC2_SetConfig+0xe4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC2_SetConfig+0x68>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a21      	ldr	r2, [pc, #132]	; (8006678 <TIM_OC2_SetConfig+0xe8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10d      	bne.n	8006614 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a17      	ldr	r2, [pc, #92]	; (8006674 <TIM_OC2_SetConfig+0xe4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC2_SetConfig+0x94>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <TIM_OC2_SetConfig+0xe8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d113      	bne.n	800664c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40010000 	.word	0x40010000
 8006678:	40010400 	.word	0x40010400

0800667c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0303 	bic.w	r3, r3, #3
 80066b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a21      	ldr	r2, [pc, #132]	; (800675c <TIM_OC3_SetConfig+0xe0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC3_SetConfig+0x66>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <TIM_OC3_SetConfig+0xe4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d10d      	bne.n	80066fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a16      	ldr	r2, [pc, #88]	; (800675c <TIM_OC3_SetConfig+0xe0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_OC3_SetConfig+0x92>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <TIM_OC3_SetConfig+0xe4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d113      	bne.n	8006736 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800671c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40010000 	.word	0x40010000
 8006760:	40010400 	.word	0x40010400

08006764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	031b      	lsls	r3, r3, #12
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a12      	ldr	r2, [pc, #72]	; (8006808 <TIM_OC4_SetConfig+0xa4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC4_SetConfig+0x68>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a11      	ldr	r2, [pc, #68]	; (800680c <TIM_OC4_SetConfig+0xa8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d109      	bne.n	80067e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	019b      	lsls	r3, r3, #6
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400

08006810 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 0201 	bic.w	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a28      	ldr	r2, [pc, #160]	; (80068dc <TIM_TI1_SetConfig+0xcc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01b      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006844:	d017      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <TIM_TI1_SetConfig+0xd0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <TIM_TI1_SetConfig+0xd4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00f      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <TIM_TI1_SetConfig+0xd8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00b      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_TI1_SetConfig+0xdc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d007      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_TI1_SetConfig+0xe0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_TI1_SetConfig+0x66>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a20      	ldr	r2, [pc, #128]	; (80068f4 <TIM_TI1_SetConfig+0xe4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d101      	bne.n	800687a <TIM_TI1_SetConfig+0x6a>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <TIM_TI1_SetConfig+0x6c>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e003      	b.n	800689a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f023 030a 	bic.w	r3, r3, #10
 80068b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f003 030a 	and.w	r3, r3, #10
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40001800 	.word	0x40001800

080068f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f023 0210 	bic.w	r2, r3, #16
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	031b      	lsls	r3, r3, #12
 800693c:	b29b      	uxth	r3, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800694a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80069c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b087      	sub	sp, #28
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	031b      	lsls	r3, r3, #12
 8006a42:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2201      	movs	r2, #1
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1a      	ldr	r2, [r3, #32]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e05a      	b.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a21      	ldr	r2, [pc, #132]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b14:	d01d      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1b      	ldr	r2, [pc, #108]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d10c      	bne.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40001800 	.word	0x40001800

08006ba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e03d      	b.n	8006c40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e042      	b.n	8006d0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fa fc7e 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2224      	movs	r2, #36	; 0x24
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fd69 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d175      	bne.n	8006e20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_UART_Transmit+0x2c>
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e06e      	b.n	8006e22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2221      	movs	r2, #33	; 0x21
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d52:	f7fa fe63 	bl	8001a1c <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	88fa      	ldrh	r2, [r7, #6]
 8006d62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6c:	d108      	bne.n	8006d80 <HAL_UART_Transmit+0x6c>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e003      	b.n	8006d88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d88:	e02e      	b.n	8006de8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fb05 	bl	80073a4 <UART_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e03a      	b.n	8006e22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	e007      	b.n	8006dda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1cb      	bne.n	8006d8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2140      	movs	r1, #64	; 0x40
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 fad1 	bl	80073a4 <UART_WaitOnFlagUntilTimeout>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e006      	b.n	8006e22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b0ba      	sub	sp, #232	; 0xe8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_UART_IRQHandler+0x66>
 8006e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fbc2 	bl	8007614 <UART_Receive_IT>
      return;
 8006e90:	e25b      	b.n	800734a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80de 	beq.w	8007058 <HAL_UART_IRQHandler+0x22c>
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80d1 	beq.w	8007058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_UART_IRQHandler+0xae>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <HAL_UART_IRQHandler+0xd2>
 8006ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	f043 0202 	orr.w	r2, r3, #2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <HAL_UART_IRQHandler+0xf6>
 8006f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	f043 0204 	orr.w	r2, r3, #4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <HAL_UART_IRQHandler+0x126>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4a:	f043 0208 	orr.w	r2, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 81f2 	beq.w	8007340 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <HAL_UART_IRQHandler+0x14e>
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb4d 	bl	8007614 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	bf0c      	ite	eq
 8006f88:	2301      	moveq	r3, #1
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x17a>
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d04f      	beq.n	8007046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa55 	bl	8007456 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d141      	bne.n	800703e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1d9      	bne.n	8006fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d013      	beq.n	8007036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	4a7e      	ldr	r2, [pc, #504]	; (800720c <HAL_UART_IRQHandler+0x3e0>)
 8007014:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	4618      	mov	r0, r3
 800701c:	f7fa fee1 	bl	8001de2 <HAL_DMA_Abort_IT>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00e      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f99e 	bl	8007378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e00a      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f99a 	bl	8007378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e006      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f996 	bl	8007378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007052:	e175      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	bf00      	nop
    return;
 8007056:	e173      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	2b01      	cmp	r3, #1
 800705e:	f040 814f 	bne.w	8007300 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8148 	beq.w	8007300 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8141 	beq.w	8007300 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	f040 80b6 	bne.w	8007210 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8145 	beq.w	8007344 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c2:	429a      	cmp	r2, r3
 80070c4:	f080 813e 	bcs.w	8007344 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070da:	f000 8088 	beq.w	80071ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800710a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800710e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1d9      	bne.n	80070de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800713a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3314      	adds	r3, #20
 800714a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800714e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007152:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007156:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800718a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800718c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e3      	bne.n	8007166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	330c      	adds	r3, #12
 80071cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80071d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e3      	bne.n	80071ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fa fd8a 	bl	8001d02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	b29b      	uxth	r3, r3
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8c1 	bl	800738c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800720a:	e09b      	b.n	8007344 <HAL_UART_IRQHandler+0x518>
 800720c:	0800751d 	.word	0x0800751d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007218:	b29b      	uxth	r3, r3
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 808e 	beq.w	8007348 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800722c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8089 	beq.w	8007348 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	330c      	adds	r3, #12
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800724c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800725a:	647a      	str	r2, [r7, #68]	; 0x44
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e3      	bne.n	8007236 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3314      	adds	r3, #20
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	623b      	str	r3, [r7, #32]
   return(result);
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3314      	adds	r3, #20
 800728e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007292:	633a      	str	r2, [r7, #48]	; 0x30
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e3      	bne.n	800726e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0310 	bic.w	r3, r3, #16
 80072ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072d8:	61fa      	str	r2, [r7, #28]
 80072da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	69b9      	ldr	r1, [r7, #24]
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	617b      	str	r3, [r7, #20]
   return(result);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e3      	bne.n	80072b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f847 	bl	800738c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072fe:	e023      	b.n	8007348 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b00      	cmp	r3, #0
 800730a:	d009      	beq.n	8007320 <HAL_UART_IRQHandler+0x4f4>
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f913 	bl	8007544 <UART_Transmit_IT>
    return;
 800731e:	e014      	b.n	800734a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00e      	beq.n	800734a <HAL_UART_IRQHandler+0x51e>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f953 	bl	80075e4 <UART_EndTransmit_IT>
    return;
 800733e:	e004      	b.n	800734a <HAL_UART_IRQHandler+0x51e>
    return;
 8007340:	bf00      	nop
 8007342:	e002      	b.n	800734a <HAL_UART_IRQHandler+0x51e>
      return;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <HAL_UART_IRQHandler+0x51e>
      return;
 8007348:	bf00      	nop
  }
}
 800734a:	37e8      	adds	r7, #232	; 0xe8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	4613      	mov	r3, r2
 80073b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b4:	e03b      	b.n	800742e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d037      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073be:	f7fa fb2d 	bl	8001a1c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d302      	bcc.n	80073d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e03a      	b.n	800744e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d023      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x8a>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b80      	cmp	r3, #128	; 0x80
 80073ea:	d020      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x8a>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d01d      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d116      	bne.n	800742e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f81d 	bl	8007456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2208      	movs	r2, #8
 8007420:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e00f      	b.n	800744e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d0b4      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007456:	b480      	push	{r7}
 8007458:	b095      	sub	sp, #84	; 0x54
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800747e:	643a      	str	r2, [r7, #64]	; 0x40
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e5      	bne.n	800745e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f023 0301 	bic.w	r3, r3, #1
 80074a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e5      	bne.n	8007492 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d119      	bne.n	8007502 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	647b      	str	r3, [r7, #68]	; 0x44
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ee:	61ba      	str	r2, [r7, #24]
 80074f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	613b      	str	r3, [r7, #16]
   return(result);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007510:	bf00      	nop
 8007512:	3754      	adds	r7, #84	; 0x54
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff ff1e 	bl	8007378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b21      	cmp	r3, #33	; 0x21
 8007556:	d13e      	bne.n	80075d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007560:	d114      	bne.n	800758c <UART_Transmit_IT+0x48>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d110      	bne.n	800758c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800757e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	1c9a      	adds	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]
 800758a:	e008      	b.n	800759e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	1c59      	adds	r1, r3, #1
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6211      	str	r1, [r2, #32]
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4619      	mov	r1, r3
 80075ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10f      	bne.n	80075d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e000      	b.n	80075d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075d6:	2302      	movs	r3, #2
  }
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fea3 	bl	8007350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08c      	sub	sp, #48	; 0x30
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b22      	cmp	r3, #34	; 0x22
 8007626:	f040 80ae 	bne.w	8007786 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007632:	d117      	bne.n	8007664 <UART_Receive_IT+0x50>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d113      	bne.n	8007664 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	b29b      	uxth	r3, r3
 800764e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007652:	b29a      	uxth	r2, r3
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	1c9a      	adds	r2, r3, #2
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	629a      	str	r2, [r3, #40]	; 0x28
 8007662:	e026      	b.n	80076b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007676:	d007      	beq.n	8007688 <UART_Receive_IT+0x74>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <UART_Receive_IT+0x82>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e008      	b.n	80076a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	4619      	mov	r1, r3
 80076c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d15d      	bne.n	8007782 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0220 	bic.w	r2, r2, #32
 80076d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695a      	ldr	r2, [r3, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	d135      	bne.n	8007778 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	613b      	str	r3, [r7, #16]
   return(result);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f023 0310 	bic.w	r3, r3, #16
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	330c      	adds	r3, #12
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	623a      	str	r2, [r7, #32]
 8007734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	69f9      	ldr	r1, [r7, #28]
 8007738:	6a3a      	ldr	r2, [r7, #32]
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b10      	cmp	r3, #16
 8007752:	d10a      	bne.n	800776a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fe0b 	bl	800738c <HAL_UARTEx_RxEventCallback>
 8007776:	e002      	b.n	800777e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff fdf3 	bl	8007364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	e002      	b.n	8007788 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3730      	adds	r7, #48	; 0x30
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b0c0      	sub	sp, #256	; 0x100
 8007796:	af00      	add	r7, sp, #0
 8007798:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	68d9      	ldr	r1, [r3, #12]
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	ea40 0301 	orr.w	r3, r0, r1
 80077b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077e8:	f021 010c 	bic.w	r1, r1, #12
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077f6:	430b      	orrs	r3, r1
 80077f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780a:	6999      	ldr	r1, [r3, #24]
 800780c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	ea40 0301 	orr.w	r3, r0, r1
 8007816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b8f      	ldr	r3, [pc, #572]	; (8007a5c <UART_SetConfig+0x2cc>)
 8007820:	429a      	cmp	r2, r3
 8007822:	d005      	beq.n	8007830 <UART_SetConfig+0xa0>
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4b8d      	ldr	r3, [pc, #564]	; (8007a60 <UART_SetConfig+0x2d0>)
 800782c:	429a      	cmp	r2, r3
 800782e:	d104      	bne.n	800783a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007830:	f7fd ffb8 	bl	80057a4 <HAL_RCC_GetPCLK2Freq>
 8007834:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007838:	e003      	b.n	8007842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800783a:	f7fd ff9f 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 800783e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784c:	f040 810c 	bne.w	8007a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800785a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800785e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	1891      	adds	r1, r2, r2
 8007868:	65b9      	str	r1, [r7, #88]	; 0x58
 800786a:	415b      	adcs	r3, r3
 800786c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800786e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007872:	4621      	mov	r1, r4
 8007874:	eb12 0801 	adds.w	r8, r2, r1
 8007878:	4629      	mov	r1, r5
 800787a:	eb43 0901 	adc.w	r9, r3, r1
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800788a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800788e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007892:	4690      	mov	r8, r2
 8007894:	4699      	mov	r9, r3
 8007896:	4623      	mov	r3, r4
 8007898:	eb18 0303 	adds.w	r3, r8, r3
 800789c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078a0:	462b      	mov	r3, r5
 80078a2:	eb49 0303 	adc.w	r3, r9, r3
 80078a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078be:	460b      	mov	r3, r1
 80078c0:	18db      	adds	r3, r3, r3
 80078c2:	653b      	str	r3, [r7, #80]	; 0x50
 80078c4:	4613      	mov	r3, r2
 80078c6:	eb42 0303 	adc.w	r3, r2, r3
 80078ca:	657b      	str	r3, [r7, #84]	; 0x54
 80078cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078d4:	f7f8 fccc 	bl	8000270 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <UART_SetConfig+0x2d4>)
 80078de:	fba3 2302 	umull	r2, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	011c      	lsls	r4, r3, #4
 80078e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80078f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	1891      	adds	r1, r2, r2
 80078fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8007900:	415b      	adcs	r3, r3
 8007902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007908:	4641      	mov	r1, r8
 800790a:	eb12 0a01 	adds.w	sl, r2, r1
 800790e:	4649      	mov	r1, r9
 8007910:	eb43 0b01 	adc.w	fp, r3, r1
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007928:	4692      	mov	sl, r2
 800792a:	469b      	mov	fp, r3
 800792c:	4643      	mov	r3, r8
 800792e:	eb1a 0303 	adds.w	r3, sl, r3
 8007932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007936:	464b      	mov	r3, r9
 8007938:	eb4b 0303 	adc.w	r3, fp, r3
 800793c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800794c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007954:	460b      	mov	r3, r1
 8007956:	18db      	adds	r3, r3, r3
 8007958:	643b      	str	r3, [r7, #64]	; 0x40
 800795a:	4613      	mov	r3, r2
 800795c:	eb42 0303 	adc.w	r3, r2, r3
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
 8007962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800796a:	f7f8 fc81 	bl	8000270 <__aeabi_uldivmod>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4611      	mov	r1, r2
 8007974:	4b3b      	ldr	r3, [pc, #236]	; (8007a64 <UART_SetConfig+0x2d4>)
 8007976:	fba3 2301 	umull	r2, r3, r3, r1
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	2264      	movs	r2, #100	; 0x64
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	1acb      	subs	r3, r1, r3
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800798a:	4b36      	ldr	r3, [pc, #216]	; (8007a64 <UART_SetConfig+0x2d4>)
 800798c:	fba3 2302 	umull	r2, r3, r3, r2
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007998:	441c      	add	r4, r3
 800799a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	1891      	adds	r1, r2, r2
 80079b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80079b4:	415b      	adcs	r3, r3
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079bc:	4641      	mov	r1, r8
 80079be:	1851      	adds	r1, r2, r1
 80079c0:	6339      	str	r1, [r7, #48]	; 0x30
 80079c2:	4649      	mov	r1, r9
 80079c4:	414b      	adcs	r3, r1
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80079d4:	4659      	mov	r1, fp
 80079d6:	00cb      	lsls	r3, r1, #3
 80079d8:	4651      	mov	r1, sl
 80079da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079de:	4651      	mov	r1, sl
 80079e0:	00ca      	lsls	r2, r1, #3
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	4642      	mov	r2, r8
 80079ea:	189b      	adds	r3, r3, r2
 80079ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f0:	464b      	mov	r3, r9
 80079f2:	460a      	mov	r2, r1
 80079f4:	eb42 0303 	adc.w	r3, r2, r3
 80079f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a10:	460b      	mov	r3, r1
 8007a12:	18db      	adds	r3, r3, r3
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a16:	4613      	mov	r3, r2
 8007a18:	eb42 0303 	adc.w	r3, r2, r3
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a26:	f7f8 fc23 	bl	8000270 <__aeabi_uldivmod>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <UART_SetConfig+0x2d4>)
 8007a30:	fba3 1302 	umull	r1, r3, r3, r2
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	2164      	movs	r1, #100	; 0x64
 8007a38:	fb01 f303 	mul.w	r3, r1, r3
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	3332      	adds	r3, #50	; 0x32
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <UART_SetConfig+0x2d4>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	f003 0207 	and.w	r2, r3, #7
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4422      	add	r2, r4
 8007a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a58:	e106      	b.n	8007c68 <UART_SetConfig+0x4d8>
 8007a5a:	bf00      	nop
 8007a5c:	40011000 	.word	0x40011000
 8007a60:	40011400 	.word	0x40011400
 8007a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	1891      	adds	r1, r2, r2
 8007a80:	6239      	str	r1, [r7, #32]
 8007a82:	415b      	adcs	r3, r3
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
 8007a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	1854      	adds	r4, r2, r1
 8007a8e:	4649      	mov	r1, r9
 8007a90:	eb43 0501 	adc.w	r5, r3, r1
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	00eb      	lsls	r3, r5, #3
 8007a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aa2:	00e2      	lsls	r2, r4, #3
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	4643      	mov	r3, r8
 8007aaa:	18e3      	adds	r3, r4, r3
 8007aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	eb45 0303 	adc.w	r3, r5, r3
 8007ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	008b      	lsls	r3, r1, #2
 8007ada:	4621      	mov	r1, r4
 8007adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	008a      	lsls	r2, r1, #2
 8007ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ae8:	f7f8 fbc2 	bl	8000270 <__aeabi_uldivmod>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4b60      	ldr	r3, [pc, #384]	; (8007c74 <UART_SetConfig+0x4e4>)
 8007af2:	fba3 2302 	umull	r2, r3, r3, r2
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	011c      	lsls	r4, r3, #4
 8007afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	1891      	adds	r1, r2, r2
 8007b12:	61b9      	str	r1, [r7, #24]
 8007b14:	415b      	adcs	r3, r3
 8007b16:	61fb      	str	r3, [r7, #28]
 8007b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	1851      	adds	r1, r2, r1
 8007b20:	6139      	str	r1, [r7, #16]
 8007b22:	4649      	mov	r1, r9
 8007b24:	414b      	adcs	r3, r1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b34:	4659      	mov	r1, fp
 8007b36:	00cb      	lsls	r3, r1, #3
 8007b38:	4651      	mov	r1, sl
 8007b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b3e:	4651      	mov	r1, sl
 8007b40:	00ca      	lsls	r2, r1, #3
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	4642      	mov	r2, r8
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b50:	464b      	mov	r3, r9
 8007b52:	460a      	mov	r2, r1
 8007b54:	eb42 0303 	adc.w	r3, r2, r3
 8007b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b74:	4649      	mov	r1, r9
 8007b76:	008b      	lsls	r3, r1, #2
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7e:	4641      	mov	r1, r8
 8007b80:	008a      	lsls	r2, r1, #2
 8007b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b86:	f7f8 fb73 	bl	8000270 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4b38      	ldr	r3, [pc, #224]	; (8007c74 <UART_SetConfig+0x4e4>)
 8007b92:	fba3 2301 	umull	r2, r3, r3, r1
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	2264      	movs	r2, #100	; 0x64
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	3332      	adds	r3, #50	; 0x32
 8007ba4:	4a33      	ldr	r2, [pc, #204]	; (8007c74 <UART_SetConfig+0x4e4>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bb0:	441c      	add	r4, r3
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	673b      	str	r3, [r7, #112]	; 0x70
 8007bba:	677a      	str	r2, [r7, #116]	; 0x74
 8007bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	1891      	adds	r1, r2, r2
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	415b      	adcs	r3, r3
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	1851      	adds	r1, r2, r1
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	414b      	adcs	r3, r1
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007be8:	4659      	mov	r1, fp
 8007bea:	00cb      	lsls	r3, r1, #3
 8007bec:	4651      	mov	r1, sl
 8007bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bf2:	4651      	mov	r1, sl
 8007bf4:	00ca      	lsls	r2, r1, #3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c02:	464b      	mov	r3, r9
 8007c04:	460a      	mov	r2, r1
 8007c06:	eb42 0303 	adc.w	r3, r2, r3
 8007c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	663b      	str	r3, [r7, #96]	; 0x60
 8007c16:	667a      	str	r2, [r7, #100]	; 0x64
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c24:	4649      	mov	r1, r9
 8007c26:	008b      	lsls	r3, r1, #2
 8007c28:	4641      	mov	r1, r8
 8007c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2e:	4641      	mov	r1, r8
 8007c30:	008a      	lsls	r2, r1, #2
 8007c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c36:	f7f8 fb1b 	bl	8000270 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <UART_SetConfig+0x4e4>)
 8007c40:	fba3 1302 	umull	r1, r3, r3, r2
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	2164      	movs	r1, #100	; 0x64
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	3332      	adds	r3, #50	; 0x32
 8007c52:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <UART_SetConfig+0x4e4>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4422      	add	r2, r4
 8007c66:	609a      	str	r2, [r3, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c74:	51eb851f 	.word	0x51eb851f

08007c78 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 8007c7e:	4b87      	ldr	r3, [pc, #540]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8007c84:	4b85      	ldr	r3, [pc, #532]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007c8a:	4b84      	ldr	r3, [pc, #528]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 8007c90:	4b82      	ldr	r3, [pc, #520]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8007c96:	4b82      	ldr	r3, [pc, #520]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8007c9c:	4b80      	ldr	r3, [pc, #512]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8007ca2:	4b7f      	ldr	r3, [pc, #508]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007ca8:	4b7d      	ldr	r3, [pc, #500]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007cae:	4b7d      	ldr	r3, [pc, #500]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007cb4:	4b7b      	ldr	r3, [pc, #492]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007cba:	4b7a      	ldr	r3, [pc, #488]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007cc0:	4b78      	ldr	r3, [pc, #480]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007cc6:	f000 fc4f 	bl	8008568 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007cca:	4b74      	ldr	r3, [pc, #464]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	061a      	lsls	r2, r3, #24
 8007cd0:	4b72      	ldr	r3, [pc, #456]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	041b      	lsls	r3, r3, #16
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	4b70      	ldr	r3, [pc, #448]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007cda:	789b      	ldrb	r3, [r3, #2]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	4a6e      	ldr	r2, [pc, #440]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007ce2:	78d2      	ldrb	r2, [r2, #3]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	061a      	lsls	r2, r3, #24
 8007ce8:	4b6c      	ldr	r3, [pc, #432]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	0619      	lsls	r1, r3, #24
 8007cee:	4b6b      	ldr	r3, [pc, #428]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	041b      	lsls	r3, r3, #16
 8007cf4:	4319      	orrs	r1, r3
 8007cf6:	4b69      	ldr	r3, [pc, #420]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007cf8:	789b      	ldrb	r3, [r3, #2]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	4967      	ldr	r1, [pc, #412]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d00:	78c9      	ldrb	r1, [r1, #3]
 8007d02:	430b      	orrs	r3, r1
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	4b63      	ldr	r3, [pc, #396]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	0619      	lsls	r1, r3, #24
 8007d12:	4b62      	ldr	r3, [pc, #392]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d14:	785b      	ldrb	r3, [r3, #1]
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	4319      	orrs	r1, r3
 8007d1a:	4b60      	ldr	r3, [pc, #384]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	430b      	orrs	r3, r1
 8007d22:	495e      	ldr	r1, [pc, #376]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d24:	78c9      	ldrb	r1, [r1, #3]
 8007d26:	430b      	orrs	r3, r1
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	4b5a      	ldr	r3, [pc, #360]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	0619      	lsls	r1, r3, #24
 8007d36:	4b59      	ldr	r3, [pc, #356]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	4319      	orrs	r1, r3
 8007d3e:	4b57      	ldr	r3, [pc, #348]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	430b      	orrs	r3, r1
 8007d46:	4955      	ldr	r1, [pc, #340]	; (8007e9c <MX_LWIP_Init+0x224>)
 8007d48:	78c9      	ldrb	r1, [r1, #3]
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	4a55      	ldr	r2, [pc, #340]	; (8007ea8 <MX_LWIP_Init+0x230>)
 8007d52:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007d54:	4b52      	ldr	r3, [pc, #328]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	061a      	lsls	r2, r3, #24
 8007d5a:	4b51      	ldr	r3, [pc, #324]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	041b      	lsls	r3, r3, #16
 8007d60:	431a      	orrs	r2, r3
 8007d62:	4b4f      	ldr	r3, [pc, #316]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d64:	789b      	ldrb	r3, [r3, #2]
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	4a4d      	ldr	r2, [pc, #308]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d6c:	78d2      	ldrb	r2, [r2, #3]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	061a      	lsls	r2, r3, #24
 8007d72:	4b4b      	ldr	r3, [pc, #300]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	0619      	lsls	r1, r3, #24
 8007d78:	4b49      	ldr	r3, [pc, #292]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	4319      	orrs	r1, r3
 8007d80:	4b47      	ldr	r3, [pc, #284]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d82:	789b      	ldrb	r3, [r3, #2]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	430b      	orrs	r3, r1
 8007d88:	4945      	ldr	r1, [pc, #276]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d8a:	78c9      	ldrb	r1, [r1, #3]
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d94:	431a      	orrs	r2, r3
 8007d96:	4b42      	ldr	r3, [pc, #264]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	0619      	lsls	r1, r3, #24
 8007d9c:	4b40      	ldr	r3, [pc, #256]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	4319      	orrs	r1, r3
 8007da4:	4b3e      	ldr	r3, [pc, #248]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007da6:	789b      	ldrb	r3, [r3, #2]
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	430b      	orrs	r3, r1
 8007dac:	493c      	ldr	r1, [pc, #240]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007dae:	78c9      	ldrb	r1, [r1, #3]
 8007db0:	430b      	orrs	r3, r1
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007db8:	431a      	orrs	r2, r3
 8007dba:	4b39      	ldr	r3, [pc, #228]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	0619      	lsls	r1, r3, #24
 8007dc0:	4b37      	ldr	r3, [pc, #220]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	4319      	orrs	r1, r3
 8007dc8:	4b35      	ldr	r3, [pc, #212]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007dca:	789b      	ldrb	r3, [r3, #2]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	4933      	ldr	r1, [pc, #204]	; (8007ea0 <MX_LWIP_Init+0x228>)
 8007dd2:	78c9      	ldrb	r1, [r1, #3]
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	0e1b      	lsrs	r3, r3, #24
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	4a34      	ldr	r2, [pc, #208]	; (8007eac <MX_LWIP_Init+0x234>)
 8007ddc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	061a      	lsls	r2, r3, #24
 8007de4:	4b2f      	ldr	r3, [pc, #188]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007de6:	785b      	ldrb	r3, [r3, #1]
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	431a      	orrs	r2, r3
 8007dec:	4b2d      	ldr	r3, [pc, #180]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007dee:	789b      	ldrb	r3, [r3, #2]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	4313      	orrs	r3, r2
 8007df4:	4a2b      	ldr	r2, [pc, #172]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007df6:	78d2      	ldrb	r2, [r2, #3]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	061a      	lsls	r2, r3, #24
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	0619      	lsls	r1, r3, #24
 8007e02:	4b28      	ldr	r3, [pc, #160]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	041b      	lsls	r3, r3, #16
 8007e08:	4319      	orrs	r1, r3
 8007e0a:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	430b      	orrs	r3, r1
 8007e12:	4924      	ldr	r1, [pc, #144]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e14:	78c9      	ldrb	r1, [r1, #3]
 8007e16:	430b      	orrs	r3, r1
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	4b20      	ldr	r3, [pc, #128]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	0619      	lsls	r1, r3, #24
 8007e26:	4b1f      	ldr	r3, [pc, #124]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	4319      	orrs	r1, r3
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e30:	789b      	ldrb	r3, [r3, #2]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	430b      	orrs	r3, r1
 8007e36:	491b      	ldr	r1, [pc, #108]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e38:	78c9      	ldrb	r1, [r1, #3]
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	0a1b      	lsrs	r3, r3, #8
 8007e3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e42:	431a      	orrs	r2, r3
 8007e44:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	0619      	lsls	r1, r3, #24
 8007e4a:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	4319      	orrs	r1, r3
 8007e52:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e54:	789b      	ldrb	r3, [r3, #2]
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	4912      	ldr	r1, [pc, #72]	; (8007ea4 <MX_LWIP_Init+0x22c>)
 8007e5c:	78c9      	ldrb	r1, [r1, #3]
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	0e1b      	lsrs	r3, r3, #24
 8007e62:	4313      	orrs	r3, r2
 8007e64:	4a12      	ldr	r2, [pc, #72]	; (8007eb0 <MX_LWIP_Init+0x238>)
 8007e66:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007e68:	4b12      	ldr	r3, [pc, #72]	; (8007eb4 <MX_LWIP_Init+0x23c>)
 8007e6a:	9302      	str	r3, [sp, #8]
 8007e6c:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <MX_LWIP_Init+0x240>)
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <MX_LWIP_Init+0x238>)
 8007e76:	4a0d      	ldr	r2, [pc, #52]	; (8007eac <MX_LWIP_Init+0x234>)
 8007e78:	490b      	ldr	r1, [pc, #44]	; (8007ea8 <MX_LWIP_Init+0x230>)
 8007e7a:	4810      	ldr	r0, [pc, #64]	; (8007ebc <MX_LWIP_Init+0x244>)
 8007e7c:	f001 f860 	bl	8008f40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007e80:	480e      	ldr	r0, [pc, #56]	; (8007ebc <MX_LWIP_Init+0x244>)
 8007e82:	f001 fa0f 	bl	80092a4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007e86:	480d      	ldr	r0, [pc, #52]	; (8007ebc <MX_LWIP_Init+0x244>)
 8007e88:	f001 fa1c 	bl	80092c4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007e8c:	490c      	ldr	r1, [pc, #48]	; (8007ec0 <MX_LWIP_Init+0x248>)
 8007e8e:	480b      	ldr	r0, [pc, #44]	; (8007ebc <MX_LWIP_Init+0x244>)
 8007e90:	f001 fb1a 	bl	80094c8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000300 	.word	0x20000300
 8007ea0:	20000304 	.word	0x20000304
 8007ea4:	20000308 	.word	0x20000308
 8007ea8:	200002f4 	.word	0x200002f4
 8007eac:	200002f8 	.word	0x200002f8
 8007eb0:	200002fc 	.word	0x200002fc
 8007eb4:	08011cc1 	.word	0x08011cc1
 8007eb8:	0800810d 	.word	0x0800810d
 8007ebc:	200002c0 	.word	0x200002c0
 8007ec0:	08007ec5 	.word	0x08007ec5

08007ec4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007ee4:	4b40      	ldr	r3, [pc, #256]	; (8007fe8 <low_level_init+0x110>)
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <low_level_init+0x114>)
 8007ee8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007eea:	2300      	movs	r3, #0
 8007eec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007eee:	2380      	movs	r3, #128	; 0x80
 8007ef0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007ef2:	23e1      	movs	r3, #225	; 0xe1
 8007ef4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007efa:	2300      	movs	r3, #0
 8007efc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007efe:	2300      	movs	r3, #0
 8007f00:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007f02:	4a39      	ldr	r2, [pc, #228]	; (8007fe8 <low_level_init+0x110>)
 8007f04:	f107 0308 	add.w	r3, r7, #8
 8007f08:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007f0a:	4b37      	ldr	r3, [pc, #220]	; (8007fe8 <low_level_init+0x110>)
 8007f0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007f10:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007f12:	4b35      	ldr	r3, [pc, #212]	; (8007fe8 <low_level_init+0x110>)
 8007f14:	4a36      	ldr	r2, [pc, #216]	; (8007ff0 <low_level_init+0x118>)
 8007f16:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007f18:	4b33      	ldr	r3, [pc, #204]	; (8007fe8 <low_level_init+0x110>)
 8007f1a:	4a36      	ldr	r2, [pc, #216]	; (8007ff4 <low_level_init+0x11c>)
 8007f1c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007f1e:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <low_level_init+0x110>)
 8007f20:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007f24:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007f26:	4830      	ldr	r0, [pc, #192]	; (8007fe8 <low_level_init+0x110>)
 8007f28:	f7f9 ff8c 	bl	8001e44 <HAL_ETH_Init>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007f30:	2238      	movs	r2, #56	; 0x38
 8007f32:	2100      	movs	r1, #0
 8007f34:	4830      	ldr	r0, [pc, #192]	; (8007ff8 <low_level_init+0x120>)
 8007f36:	f00a fb07 	bl	8012548 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <low_level_init+0x120>)
 8007f3c:	2221      	movs	r2, #33	; 0x21
 8007f3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007f40:	4b2d      	ldr	r3, [pc, #180]	; (8007ff8 <low_level_init+0x120>)
 8007f42:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007f46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007f48:	4b2b      	ldr	r3, [pc, #172]	; (8007ff8 <low_level_init+0x120>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007f4e:	482b      	ldr	r0, [pc, #172]	; (8007ffc <low_level_init+0x124>)
 8007f50:	f000 febe 	bl	8008cd0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2206      	movs	r2, #6
 8007f58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <low_level_init+0x110>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f68:	4b1f      	ldr	r3, [pc, #124]	; (8007fe8 <low_level_init+0x110>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	785a      	ldrb	r2, [r3, #1]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <low_level_init+0x110>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	789a      	ldrb	r2, [r3, #2]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f80:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <low_level_init+0x110>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	78da      	ldrb	r2, [r3, #3]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f8c:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <low_level_init+0x110>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	791a      	ldrb	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <low_level_init+0x110>)
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	795a      	ldrb	r2, [r3, #5]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007faa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fb2:	f043 030a 	orr.w	r3, r3, #10
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007fbe:	4910      	ldr	r1, [pc, #64]	; (8008000 <low_level_init+0x128>)
 8007fc0:	4810      	ldr	r0, [pc, #64]	; (8008004 <low_level_init+0x12c>)
 8007fc2:	f7f9 fb64 	bl	800168e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007fc6:	480f      	ldr	r0, [pc, #60]	; (8008004 <low_level_init+0x12c>)
 8007fc8:	f7f9 fb93 	bl	80016f2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9de 	bl	8008394 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007fd8:	e001      	b.n	8007fde <low_level_init+0x106>
    Error_Handler();
 8007fda:	f7f8 fd79 	bl	8000ad0 <Error_Handler>
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20004dd8 	.word	0x20004dd8
 8007fec:	40028000 	.word	0x40028000
 8007ff0:	20004d38 	.word	0x20004d38
 8007ff4:	20004c98 	.word	0x20004c98
 8007ff8:	20004e88 	.word	0x20004e88
 8007ffc:	08015a00 	.word	0x08015a00
 8008000:	2000000c 	.word	0x2000000c
 8008004:	20004ec0 	.word	0x20004ec0

08008008 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b092      	sub	sp, #72	; 0x48
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	2230      	movs	r2, #48	; 0x30
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f00a fa8d 	bl	8012548 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800802e:	f107 030c 	add.w	r3, r7, #12
 8008032:	2230      	movs	r2, #48	; 0x30
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f00a fa86 	bl	8012548 <memset>

  for(q = p; q != NULL; q = q->next)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	643b      	str	r3, [r7, #64]	; 0x40
 8008040:	e045      	b.n	80080ce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008044:	2b03      	cmp	r3, #3
 8008046:	d902      	bls.n	800804e <low_level_output+0x46>
      return ERR_IF;
 8008048:	f06f 030b 	mvn.w	r3, #11
 800804c:	e055      	b.n	80080fa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800804e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008050:	6859      	ldr	r1, [r3, #4]
 8008052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008054:	4613      	mov	r3, r2
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	3348      	adds	r3, #72	; 0x48
 800805e:	443b      	add	r3, r7
 8008060:	3b3c      	subs	r3, #60	; 0x3c
 8008062:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008066:	895b      	ldrh	r3, [r3, #10]
 8008068:	4619      	mov	r1, r3
 800806a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800806c:	4613      	mov	r3, r2
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	3348      	adds	r3, #72	; 0x48
 8008076:	443b      	add	r3, r7
 8008078:	3b38      	subs	r3, #56	; 0x38
 800807a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800807c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800807e:	2b00      	cmp	r3, #0
 8008080:	d011      	beq.n	80080a6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	1e5a      	subs	r2, r3, #1
 8008086:	f107 000c 	add.w	r0, r7, #12
 800808a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800808c:	460b      	mov	r3, r1
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	440b      	add	r3, r1
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	18c1      	adds	r1, r0, r3
 8008096:	4613      	mov	r3, r2
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	3348      	adds	r3, #72	; 0x48
 80080a0:	443b      	add	r3, r7
 80080a2:	3b34      	subs	r3, #52	; 0x34
 80080a4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80080a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80080ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b0:	4613      	mov	r3, r2
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	3348      	adds	r3, #72	; 0x48
 80080ba:	443b      	add	r3, r7
 80080bc:	3b34      	subs	r3, #52	; 0x34
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80080c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c4:	3301      	adds	r3, #1
 80080c6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80080c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	643b      	str	r3, [r7, #64]	; 0x40
 80080ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1b6      	bne.n	8008042 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	461a      	mov	r2, r3
 80080da:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <low_level_output+0xfc>)
 80080dc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80080de:	4a09      	ldr	r2, [pc, #36]	; (8008104 <low_level_output+0xfc>)
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80080e6:	4a07      	ldr	r2, [pc, #28]	; (8008104 <low_level_output+0xfc>)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80080ec:	2214      	movs	r2, #20
 80080ee:	4905      	ldr	r1, [pc, #20]	; (8008104 <low_level_output+0xfc>)
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <low_level_output+0x100>)
 80080f2:	f7f9 ffdd 	bl	80020b0 <HAL_ETH_Transmit>

  return errval;
 80080f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3748      	adds	r7, #72	; 0x48
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20004e88 	.word	0x20004e88
 8008108:	20004dd8 	.word	0x20004dd8

0800810c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <ethernetif_init+0x1c>
 800811a:	4b0e      	ldr	r3, [pc, #56]	; (8008154 <ethernetif_init+0x48>)
 800811c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008120:	490d      	ldr	r1, [pc, #52]	; (8008158 <ethernetif_init+0x4c>)
 8008122:	480e      	ldr	r0, [pc, #56]	; (800815c <ethernetif_init+0x50>)
 8008124:	f00a f8ba 	bl	801229c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2273      	movs	r2, #115	; 0x73
 800812c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2274      	movs	r2, #116	; 0x74
 8008134:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a09      	ldr	r2, [pc, #36]	; (8008160 <ethernetif_init+0x54>)
 800813c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a08      	ldr	r2, [pc, #32]	; (8008164 <ethernetif_init+0x58>)
 8008142:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fec7 	bl	8007ed8 <low_level_init>

  return ERR_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	08012fe0 	.word	0x08012fe0
 8008158:	08012ffc 	.word	0x08012ffc
 800815c:	0801300c 	.word	0x0801300c
 8008160:	08010179 	.word	0x08010179
 8008164:	08008009 	.word	0x08008009

08008168 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008174:	68f9      	ldr	r1, [r7, #12]
 8008176:	4807      	ldr	r0, [pc, #28]	; (8008194 <pbuf_free_custom+0x2c>)
 8008178:	f000 fe8c 	bl	8008e94 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <pbuf_free_custom+0x30>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d102      	bne.n	800818a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <pbuf_free_custom+0x30>)
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
  }
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	08015a00 	.word	0x08015a00
 8008198:	20004c94 	.word	0x20004c94

0800819c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081a0:	f7f9 fc3c 	bl	8001a1c <HAL_GetTick>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a46      	ldr	r2, [pc, #280]	; (80082e4 <HAL_ETH_MspInit+0x138>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	f040 8085 	bne.w	80082da <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80081d0:	2300      	movs	r3, #0
 80081d2:	623b      	str	r3, [r7, #32]
 80081d4:	4b44      	ldr	r3, [pc, #272]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	4a43      	ldr	r2, [pc, #268]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 80081da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081de:	6313      	str	r3, [r2, #48]	; 0x30
 80081e0:	4b41      	ldr	r3, [pc, #260]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2300      	movs	r3, #0
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	4b3d      	ldr	r3, [pc, #244]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	4a3c      	ldr	r2, [pc, #240]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 80081f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081fa:	6313      	str	r3, [r2, #48]	; 0x30
 80081fc:	4b3a      	ldr	r3, [pc, #232]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2300      	movs	r3, #0
 800820a:	61bb      	str	r3, [r7, #24]
 800820c:	4b36      	ldr	r3, [pc, #216]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	4a35      	ldr	r2, [pc, #212]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 8008212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008216:	6313      	str	r3, [r2, #48]	; 0x30
 8008218:	4b33      	ldr	r3, [pc, #204]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	4b2f      	ldr	r3, [pc, #188]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822c:	4a2e      	ldr	r2, [pc, #184]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 800822e:	f043 0304 	orr.w	r3, r3, #4
 8008232:	6313      	str	r3, [r2, #48]	; 0x30
 8008234:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 8008236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	4b28      	ldr	r3, [pc, #160]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	4a27      	ldr	r2, [pc, #156]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	6313      	str	r3, [r2, #48]	; 0x30
 8008250:	4b25      	ldr	r3, [pc, #148]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	4b21      	ldr	r3, [pc, #132]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	6313      	str	r3, [r2, #48]	; 0x30
 800826c:	4b1e      	ldr	r3, [pc, #120]	; (80082e8 <HAL_ETH_MspInit+0x13c>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008278:	2332      	movs	r3, #50	; 0x32
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800827c:	2302      	movs	r3, #2
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008280:	2300      	movs	r3, #0
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008284:	2303      	movs	r3, #3
 8008286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008288:	230b      	movs	r3, #11
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800828c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008290:	4619      	mov	r1, r3
 8008292:	4816      	ldr	r0, [pc, #88]	; (80082ec <HAL_ETH_MspInit+0x140>)
 8008294:	f7fa fe14 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008298:	2386      	movs	r3, #134	; 0x86
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829c:	2302      	movs	r3, #2
 800829e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a4:	2303      	movs	r3, #3
 80082a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082a8:	230b      	movs	r3, #11
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b0:	4619      	mov	r1, r3
 80082b2:	480f      	ldr	r0, [pc, #60]	; (80082f0 <HAL_ETH_MspInit+0x144>)
 80082b4:	f7fa fe04 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80082b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082be:	2302      	movs	r3, #2
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082c6:	2303      	movs	r3, #3
 80082c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082ca:	230b      	movs	r3, #11
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082d2:	4619      	mov	r1, r3
 80082d4:	4807      	ldr	r0, [pc, #28]	; (80082f4 <HAL_ETH_MspInit+0x148>)
 80082d6:	f7fa fdf3 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80082da:	bf00      	nop
 80082dc:	3738      	adds	r7, #56	; 0x38
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40028000 	.word	0x40028000
 80082e8:	40023800 	.word	0x40023800
 80082ec:	40020800 	.word	0x40020800
 80082f0:	40020000 	.word	0x40020000
 80082f4:	40020400 	.word	0x40020400

080082f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80082fc:	4802      	ldr	r0, [pc, #8]	; (8008308 <ETH_PHY_IO_Init+0x10>)
 80082fe:	f7fa f983 	bl	8002608 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20004dd8 	.word	0x20004dd8

0800830c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  return 0;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	4807      	ldr	r0, [pc, #28]	; (800834c <ETH_PHY_IO_ReadReg+0x30>)
 8008330:	f7f9 ffd2 	bl	80022d8 <HAL_ETH_ReadPHYRegister>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	e000      	b.n	8008342 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20004dd8 	.word	0x20004dd8

08008350 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	68f9      	ldr	r1, [r7, #12]
 8008362:	4807      	ldr	r0, [pc, #28]	; (8008380 <ETH_PHY_IO_WriteReg+0x30>)
 8008364:	f7fa f803 	bl	800236e <HAL_ETH_WritePHYRegister>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
 8008372:	e000      	b.n	8008376 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20004dd8 	.word	0x20004dd8

08008384 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008388:	f7f9 fb48 	bl	8001a1c <HAL_GetTick>
 800838c:	4603      	mov	r3, r0
}
 800838e:	4618      	mov	r0, r3
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b0a0      	sub	sp, #128	; 0x80
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800839c:	f107 030c 	add.w	r3, r7, #12
 80083a0:	2264      	movs	r2, #100	; 0x64
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f00a f8cf 	bl	8012548 <memset>
  int32_t PHYLinkState = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083b2:	2300      	movs	r3, #0
 80083b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80083b6:	2300      	movs	r3, #0
 80083b8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80083ba:	483a      	ldr	r0, [pc, #232]	; (80084a4 <ethernet_link_check_state+0x110>)
 80083bc:	f7f9 fa41 	bl	8001842 <LAN8742_GetLinkState>
 80083c0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083c8:	089b      	lsrs	r3, r3, #2
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00c      	beq.n	80083ee <ethernet_link_check_state+0x5a>
 80083d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	dc09      	bgt.n	80083ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80083da:	4833      	ldr	r0, [pc, #204]	; (80084a8 <ethernet_link_check_state+0x114>)
 80083dc:	f7f9 fe0f 	bl	8001ffe <HAL_ETH_Stop>
    netif_set_down(netif);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 ffdb 	bl	800939c <netif_set_down>
    netif_set_link_down(netif);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 f83e 	bl	8009468 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80083ec:	e055      	b.n	800849a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d14e      	bne.n	800849a <ethernet_link_check_state+0x106>
 80083fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083fe:	2b01      	cmp	r3, #1
 8008400:	dd4b      	ble.n	800849a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008404:	3b02      	subs	r3, #2
 8008406:	2b03      	cmp	r3, #3
 8008408:	d82a      	bhi.n	8008460 <ethernet_link_check_state+0xcc>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <ethernet_link_check_state+0x7c>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008421 	.word	0x08008421
 8008414:	08008433 	.word	0x08008433
 8008418:	08008443 	.word	0x08008443
 800841c:	08008453 	.word	0x08008453
      duplex = ETH_FULLDUPLEX_MODE;
 8008420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008424:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800842a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800842c:	2301      	movs	r3, #1
 800842e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008430:	e017      	b.n	8008462 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008432:	2300      	movs	r3, #0
 8008434:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008436:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800843a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800843c:	2301      	movs	r3, #1
 800843e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008440:	e00f      	b.n	8008462 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008446:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008448:	2300      	movs	r3, #0
 800844a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800844c:	2301      	movs	r3, #1
 800844e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008450:	e007      	b.n	8008462 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008452:	2300      	movs	r3, #0
 8008454:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008456:	2300      	movs	r3, #0
 8008458:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800845a:	2301      	movs	r3, #1
 800845c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800845e:	e000      	b.n	8008462 <ethernet_link_check_state+0xce>
      break;
 8008460:	bf00      	nop
    if(linkchanged)
 8008462:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d018      	beq.n	800849a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	4619      	mov	r1, r3
 800846e:	480e      	ldr	r0, [pc, #56]	; (80084a8 <ethernet_link_check_state+0x114>)
 8008470:	f7f9 ffc6 	bl	8002400 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8008478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800847a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800847c:	f107 030c 	add.w	r3, r7, #12
 8008480:	4619      	mov	r1, r3
 8008482:	4809      	ldr	r0, [pc, #36]	; (80084a8 <ethernet_link_check_state+0x114>)
 8008484:	f7fa f8a6 	bl	80025d4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8008488:	4807      	ldr	r0, [pc, #28]	; (80084a8 <ethernet_link_check_state+0x114>)
 800848a:	f7f9 fd59 	bl	8001f40 <HAL_ETH_Start>
      netif_set_up(netif);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 ff18 	bl	80092c4 <netif_set_up>
      netif_set_link_up(netif);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 ffb3 	bl	8009400 <netif_set_link_up>
}
 800849a:	bf00      	nop
 800849c:	3780      	adds	r7, #128	; 0x80
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20004ec0 	.word	0x20004ec0
 80084a8:	20004dd8 	.word	0x20004dd8

080084ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80084b4:	4812      	ldr	r0, [pc, #72]	; (8008500 <HAL_ETH_RxAllocateCallback+0x54>)
 80084b6:	f000 fc7f 	bl	8008db8 <memp_malloc_pool>
 80084ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d014      	beq.n	80084ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f103 0220 	add.w	r2, r3, #32
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4a0d      	ldr	r2, [pc, #52]	; (8008504 <HAL_ETH_RxAllocateCallback+0x58>)
 80084d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80084da:	9201      	str	r2, [sp, #4]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2241      	movs	r2, #65	; 0x41
 80084e2:	2100      	movs	r1, #0
 80084e4:	2000      	movs	r0, #0
 80084e6:	f001 f995 	bl	8009814 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80084ea:	e005      	b.n	80084f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <HAL_ETH_RxAllocateCallback+0x5c>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	08015a00 	.word	0x08015a00
 8008504:	08008169 	.word	0x08008169
 8008508:	20004c94 	.word	0x20004c94

0800850c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	b21a      	sxth	r2, r3
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	b29b      	uxth	r3, r3
 8008522:	b21b      	sxth	r3, r3
 8008524:	4313      	orrs	r3, r2
 8008526:	b21b      	sxth	r3, r3
 8008528:	b29b      	uxth	r3, r3
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	061a      	lsls	r2, r3, #24
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	0a1b      	lsrs	r3, r3, #8
 8008550:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	0e1b      	lsrs	r3, r3, #24
 800855a:	4313      	orrs	r3, r2
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008572:	f000 f8d5 	bl	8008720 <mem_init>
  memp_init();
 8008576:	f000 fbdb 	bl	8008d30 <memp_init>
  pbuf_init();
  netif_init();
 800857a:	f000 fcd9 	bl	8008f30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800857e:	f006 fff5 	bl	800f56c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008582:	f001 fd8f 	bl	800a0a4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008586:	f006 ffa9 	bl	800f4dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <ptr_to_mem+0x20>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	4413      	add	r3, r2
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	2000554c 	.word	0x2000554c

080085b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <mem_to_ptr+0x20>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	b29b      	uxth	r3, r3
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	2000554c 	.word	0x2000554c

080085dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80085dc:	b590      	push	{r4, r7, lr}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80085e4:	4b45      	ldr	r3, [pc, #276]	; (80086fc <plug_holes+0x120>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d206      	bcs.n	80085fc <plug_holes+0x20>
 80085ee:	4b44      	ldr	r3, [pc, #272]	; (8008700 <plug_holes+0x124>)
 80085f0:	f240 12df 	movw	r2, #479	; 0x1df
 80085f4:	4943      	ldr	r1, [pc, #268]	; (8008704 <plug_holes+0x128>)
 80085f6:	4844      	ldr	r0, [pc, #272]	; (8008708 <plug_holes+0x12c>)
 80085f8:	f009 fe50 	bl	801229c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80085fc:	4b43      	ldr	r3, [pc, #268]	; (800870c <plug_holes+0x130>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	429a      	cmp	r2, r3
 8008604:	d306      	bcc.n	8008614 <plug_holes+0x38>
 8008606:	4b3e      	ldr	r3, [pc, #248]	; (8008700 <plug_holes+0x124>)
 8008608:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800860c:	4940      	ldr	r1, [pc, #256]	; (8008710 <plug_holes+0x134>)
 800860e:	483e      	ldr	r0, [pc, #248]	; (8008708 <plug_holes+0x12c>)
 8008610:	f009 fe44 	bl	801229c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	791b      	ldrb	r3, [r3, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d006      	beq.n	800862a <plug_holes+0x4e>
 800861c:	4b38      	ldr	r3, [pc, #224]	; (8008700 <plug_holes+0x124>)
 800861e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008622:	493c      	ldr	r1, [pc, #240]	; (8008714 <plug_holes+0x138>)
 8008624:	4838      	ldr	r0, [pc, #224]	; (8008708 <plug_holes+0x12c>)
 8008626:	f009 fe39 	bl	801229c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008632:	d906      	bls.n	8008642 <plug_holes+0x66>
 8008634:	4b32      	ldr	r3, [pc, #200]	; (8008700 <plug_holes+0x124>)
 8008636:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800863a:	4937      	ldr	r1, [pc, #220]	; (8008718 <plug_holes+0x13c>)
 800863c:	4832      	ldr	r0, [pc, #200]	; (8008708 <plug_holes+0x12c>)
 800863e:	f009 fe2d 	bl	801229c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff ffa4 	bl	8008594 <ptr_to_mem>
 800864c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d024      	beq.n	80086a0 <plug_holes+0xc4>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	791b      	ldrb	r3, [r3, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d120      	bne.n	80086a0 <plug_holes+0xc4>
 800865e:	4b2b      	ldr	r3, [pc, #172]	; (800870c <plug_holes+0x130>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	429a      	cmp	r2, r3
 8008666:	d01b      	beq.n	80086a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008668:	4b2c      	ldr	r3, [pc, #176]	; (800871c <plug_holes+0x140>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	429a      	cmp	r2, r3
 8008670:	d102      	bne.n	8008678 <plug_holes+0x9c>
      lfree = mem;
 8008672:	4a2a      	ldr	r2, [pc, #168]	; (800871c <plug_holes+0x140>)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	881a      	ldrh	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008688:	d00a      	beq.n	80086a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff ff80 	bl	8008594 <ptr_to_mem>
 8008694:	4604      	mov	r4, r0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff ff8e 	bl	80085b8 <mem_to_ptr>
 800869c:	4603      	mov	r3, r0
 800869e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	885b      	ldrh	r3, [r3, #2]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff ff75 	bl	8008594 <ptr_to_mem>
 80086aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d01f      	beq.n	80086f4 <plug_holes+0x118>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	791b      	ldrb	r3, [r3, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11b      	bne.n	80086f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80086bc:	4b17      	ldr	r3, [pc, #92]	; (800871c <plug_holes+0x140>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d102      	bne.n	80086cc <plug_holes+0xf0>
      lfree = pmem;
 80086c6:	4a15      	ldr	r2, [pc, #84]	; (800871c <plug_holes+0x140>)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	881a      	ldrh	r2, [r3, #0]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80086dc:	d00a      	beq.n	80086f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff ff56 	bl	8008594 <ptr_to_mem>
 80086e8:	4604      	mov	r4, r0
 80086ea:	68b8      	ldr	r0, [r7, #8]
 80086ec:	f7ff ff64 	bl	80085b8 <mem_to_ptr>
 80086f0:	4603      	mov	r3, r0
 80086f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd90      	pop	{r4, r7, pc}
 80086fc:	2000554c 	.word	0x2000554c
 8008700:	08013034 	.word	0x08013034
 8008704:	08013064 	.word	0x08013064
 8008708:	0801307c 	.word	0x0801307c
 800870c:	20005550 	.word	0x20005550
 8008710:	080130a4 	.word	0x080130a4
 8008714:	080130c0 	.word	0x080130c0
 8008718:	080130dc 	.word	0x080130dc
 800871c:	20005554 	.word	0x20005554

08008720 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008726:	4b18      	ldr	r3, [pc, #96]	; (8008788 <mem_init+0x68>)
 8008728:	3303      	adds	r3, #3
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	461a      	mov	r2, r3
 8008730:	4b16      	ldr	r3, [pc, #88]	; (800878c <mem_init+0x6c>)
 8008732:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008734:	4b15      	ldr	r3, [pc, #84]	; (800878c <mem_init+0x6c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008740:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800874e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008752:	f7ff ff1f 	bl	8008594 <ptr_to_mem>
 8008756:	4603      	mov	r3, r0
 8008758:	4a0d      	ldr	r2, [pc, #52]	; (8008790 <mem_init+0x70>)
 800875a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <mem_init+0x70>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2201      	movs	r2, #1
 8008762:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <mem_init+0x70>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800876c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800876e:	4b08      	ldr	r3, [pc, #32]	; (8008790 <mem_init+0x70>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008776:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008778:	4b04      	ldr	r3, [pc, #16]	; (800878c <mem_init+0x6c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a05      	ldr	r2, [pc, #20]	; (8008794 <mem_init+0x74>)
 800877e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20004ef8 	.word	0x20004ef8
 800878c:	2000554c 	.word	0x2000554c
 8008790:	20005550 	.word	0x20005550
 8008794:	20005554 	.word	0x20005554

08008798 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ff09 	bl	80085b8 <mem_to_ptr>
 80087a6:	4603      	mov	r3, r0
 80087a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff fef0 	bl	8008594 <ptr_to_mem>
 80087b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff feea 	bl	8008594 <ptr_to_mem>
 80087c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087ca:	d818      	bhi.n	80087fe <mem_link_valid+0x66>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	885b      	ldrh	r3, [r3, #2]
 80087d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087d4:	d813      	bhi.n	80087fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087da:	8afa      	ldrh	r2, [r7, #22]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d004      	beq.n	80087ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	8afa      	ldrh	r2, [r7, #22]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d109      	bne.n	80087fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80087ea:	4b08      	ldr	r3, [pc, #32]	; (800880c <mem_link_valid+0x74>)
 80087ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d006      	beq.n	8008802 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	885b      	ldrh	r3, [r3, #2]
 80087f8:	8afa      	ldrh	r2, [r7, #22]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d001      	beq.n	8008802 <mem_link_valid+0x6a>
    return 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <mem_link_valid+0x6c>
  }
  return 1;
 8008802:	2301      	movs	r3, #1
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20005550 	.word	0x20005550

08008810 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d04c      	beq.n	80088b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008828:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <mem_free+0xb0>)
 800882a:	f240 2273 	movw	r2, #627	; 0x273
 800882e:	4925      	ldr	r1, [pc, #148]	; (80088c4 <mem_free+0xb4>)
 8008830:	4825      	ldr	r0, [pc, #148]	; (80088c8 <mem_free+0xb8>)
 8008832:	f009 fd33 	bl	801229c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008836:	e040      	b.n	80088ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3b08      	subs	r3, #8
 800883c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800883e:	4b23      	ldr	r3, [pc, #140]	; (80088cc <mem_free+0xbc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	429a      	cmp	r2, r3
 8008846:	d306      	bcc.n	8008856 <mem_free+0x46>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f103 020c 	add.w	r2, r3, #12
 800884e:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <mem_free+0xc0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d907      	bls.n	8008866 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008856:	4b1a      	ldr	r3, [pc, #104]	; (80088c0 <mem_free+0xb0>)
 8008858:	f240 227f 	movw	r2, #639	; 0x27f
 800885c:	491d      	ldr	r1, [pc, #116]	; (80088d4 <mem_free+0xc4>)
 800885e:	481a      	ldr	r0, [pc, #104]	; (80088c8 <mem_free+0xb8>)
 8008860:	f009 fd1c 	bl	801229c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008864:	e029      	b.n	80088ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d107      	bne.n	800887e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800886e:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <mem_free+0xb0>)
 8008870:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008874:	4918      	ldr	r1, [pc, #96]	; (80088d8 <mem_free+0xc8>)
 8008876:	4814      	ldr	r0, [pc, #80]	; (80088c8 <mem_free+0xb8>)
 8008878:	f009 fd10 	bl	801229c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800887c:	e01d      	b.n	80088ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7ff ff8a 	bl	8008798 <mem_link_valid>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d107      	bne.n	800889a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800888a:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <mem_free+0xb0>)
 800888c:	f240 2295 	movw	r2, #661	; 0x295
 8008890:	4912      	ldr	r1, [pc, #72]	; (80088dc <mem_free+0xcc>)
 8008892:	480d      	ldr	r0, [pc, #52]	; (80088c8 <mem_free+0xb8>)
 8008894:	f009 fd02 	bl	801229c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008898:	e00f      	b.n	80088ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <mem_free+0xd0>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d202      	bcs.n	80088b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80088aa:	4a0d      	ldr	r2, [pc, #52]	; (80088e0 <mem_free+0xd0>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7ff fe93 	bl	80085dc <plug_holes>
 80088b6:	e000      	b.n	80088ba <mem_free+0xaa>
    return;
 80088b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	08013034 	.word	0x08013034
 80088c4:	08013108 	.word	0x08013108
 80088c8:	0801307c 	.word	0x0801307c
 80088cc:	2000554c 	.word	0x2000554c
 80088d0:	20005550 	.word	0x20005550
 80088d4:	0801312c 	.word	0x0801312c
 80088d8:	08013148 	.word	0x08013148
 80088dc:	08013170 	.word	0x08013170
 80088e0:	20005554 	.word	0x20005554

080088e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80088f0:	887b      	ldrh	r3, [r7, #2]
 80088f2:	3303      	adds	r3, #3
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80088fc:	8bfb      	ldrh	r3, [r7, #30]
 80088fe:	2b0b      	cmp	r3, #11
 8008900:	d801      	bhi.n	8008906 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008902:	230c      	movs	r3, #12
 8008904:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008906:	8bfb      	ldrh	r3, [r7, #30]
 8008908:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800890c:	d803      	bhi.n	8008916 <mem_trim+0x32>
 800890e:	8bfa      	ldrh	r2, [r7, #30]
 8008910:	887b      	ldrh	r3, [r7, #2]
 8008912:	429a      	cmp	r2, r3
 8008914:	d201      	bcs.n	800891a <mem_trim+0x36>
    return NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	e0cc      	b.n	8008ab4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800891a:	4b68      	ldr	r3, [pc, #416]	; (8008abc <mem_trim+0x1d8>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	429a      	cmp	r2, r3
 8008922:	d304      	bcc.n	800892e <mem_trim+0x4a>
 8008924:	4b66      	ldr	r3, [pc, #408]	; (8008ac0 <mem_trim+0x1dc>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	429a      	cmp	r2, r3
 800892c:	d306      	bcc.n	800893c <mem_trim+0x58>
 800892e:	4b65      	ldr	r3, [pc, #404]	; (8008ac4 <mem_trim+0x1e0>)
 8008930:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008934:	4964      	ldr	r1, [pc, #400]	; (8008ac8 <mem_trim+0x1e4>)
 8008936:	4865      	ldr	r0, [pc, #404]	; (8008acc <mem_trim+0x1e8>)
 8008938:	f009 fcb0 	bl	801229c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800893c:	4b5f      	ldr	r3, [pc, #380]	; (8008abc <mem_trim+0x1d8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d304      	bcc.n	8008950 <mem_trim+0x6c>
 8008946:	4b5e      	ldr	r3, [pc, #376]	; (8008ac0 <mem_trim+0x1dc>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d301      	bcc.n	8008954 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	e0af      	b.n	8008ab4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3b08      	subs	r3, #8
 8008958:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800895a:	69b8      	ldr	r0, [r7, #24]
 800895c:	f7ff fe2c 	bl	80085b8 <mem_to_ptr>
 8008960:	4603      	mov	r3, r0
 8008962:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	881a      	ldrh	r2, [r3, #0]
 8008968:	8afb      	ldrh	r3, [r7, #22]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	b29b      	uxth	r3, r3
 800896e:	3b08      	subs	r3, #8
 8008970:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008972:	8bfa      	ldrh	r2, [r7, #30]
 8008974:	8abb      	ldrh	r3, [r7, #20]
 8008976:	429a      	cmp	r2, r3
 8008978:	d906      	bls.n	8008988 <mem_trim+0xa4>
 800897a:	4b52      	ldr	r3, [pc, #328]	; (8008ac4 <mem_trim+0x1e0>)
 800897c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008980:	4953      	ldr	r1, [pc, #332]	; (8008ad0 <mem_trim+0x1ec>)
 8008982:	4852      	ldr	r0, [pc, #328]	; (8008acc <mem_trim+0x1e8>)
 8008984:	f009 fc8a 	bl	801229c <iprintf>
  if (newsize > size) {
 8008988:	8bfa      	ldrh	r2, [r7, #30]
 800898a:	8abb      	ldrh	r3, [r7, #20]
 800898c:	429a      	cmp	r2, r3
 800898e:	d901      	bls.n	8008994 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	e08f      	b.n	8008ab4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008994:	8bfa      	ldrh	r2, [r7, #30]
 8008996:	8abb      	ldrh	r3, [r7, #20]
 8008998:	429a      	cmp	r2, r3
 800899a:	d101      	bne.n	80089a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	e089      	b.n	8008ab4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff fdf5 	bl	8008594 <ptr_to_mem>
 80089aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d13f      	bne.n	8008a34 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80089bc:	d106      	bne.n	80089cc <mem_trim+0xe8>
 80089be:	4b41      	ldr	r3, [pc, #260]	; (8008ac4 <mem_trim+0x1e0>)
 80089c0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80089c4:	4943      	ldr	r1, [pc, #268]	; (8008ad4 <mem_trim+0x1f0>)
 80089c6:	4841      	ldr	r0, [pc, #260]	; (8008acc <mem_trim+0x1e8>)
 80089c8:	f009 fc68 	bl	801229c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80089d2:	8afa      	ldrh	r2, [r7, #22]
 80089d4:	8bfb      	ldrh	r3, [r7, #30]
 80089d6:	4413      	add	r3, r2
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3308      	adds	r3, #8
 80089dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80089de:	4b3e      	ldr	r3, [pc, #248]	; (8008ad8 <mem_trim+0x1f4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d106      	bne.n	80089f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80089e8:	89fb      	ldrh	r3, [r7, #14]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fdd2 	bl	8008594 <ptr_to_mem>
 80089f0:	4603      	mov	r3, r0
 80089f2:	4a39      	ldr	r2, [pc, #228]	; (8008ad8 <mem_trim+0x1f4>)
 80089f4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80089f6:	89fb      	ldrh	r3, [r7, #14]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fdcb 	bl	8008594 <ptr_to_mem>
 80089fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2200      	movs	r2, #0
 8008a04:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	89ba      	ldrh	r2, [r7, #12]
 8008a0a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	8afa      	ldrh	r2, [r7, #22]
 8008a10:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	89fa      	ldrh	r2, [r7, #14]
 8008a16:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008a20:	d047      	beq.n	8008ab2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fdb4 	bl	8008594 <ptr_to_mem>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	89fb      	ldrh	r3, [r7, #14]
 8008a30:	8053      	strh	r3, [r2, #2]
 8008a32:	e03e      	b.n	8008ab2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008a34:	8bfb      	ldrh	r3, [r7, #30]
 8008a36:	f103 0214 	add.w	r2, r3, #20
 8008a3a:	8abb      	ldrh	r3, [r7, #20]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d838      	bhi.n	8008ab2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a40:	8afa      	ldrh	r2, [r7, #22]
 8008a42:	8bfb      	ldrh	r3, [r7, #30]
 8008a44:	4413      	add	r3, r2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3308      	adds	r3, #8
 8008a4a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008a54:	d106      	bne.n	8008a64 <mem_trim+0x180>
 8008a56:	4b1b      	ldr	r3, [pc, #108]	; (8008ac4 <mem_trim+0x1e0>)
 8008a58:	f240 3216 	movw	r2, #790	; 0x316
 8008a5c:	491d      	ldr	r1, [pc, #116]	; (8008ad4 <mem_trim+0x1f0>)
 8008a5e:	481b      	ldr	r0, [pc, #108]	; (8008acc <mem_trim+0x1e8>)
 8008a60:	f009 fc1c 	bl	801229c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008a64:	89fb      	ldrh	r3, [r7, #14]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fd94 	bl	8008594 <ptr_to_mem>
 8008a6c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008a6e:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <mem_trim+0x1f4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d202      	bcs.n	8008a7e <mem_trim+0x19a>
      lfree = mem2;
 8008a78:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <mem_trim+0x1f4>)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2200      	movs	r2, #0
 8008a82:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	881a      	ldrh	r2, [r3, #0]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	8afa      	ldrh	r2, [r7, #22]
 8008a90:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	89fa      	ldrh	r2, [r7, #14]
 8008a96:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008aa0:	d007      	beq.n	8008ab2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fd74 	bl	8008594 <ptr_to_mem>
 8008aac:	4602      	mov	r2, r0
 8008aae:	89fb      	ldrh	r3, [r7, #14]
 8008ab0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008ab2:	687b      	ldr	r3, [r7, #4]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	2000554c 	.word	0x2000554c
 8008ac0:	20005550 	.word	0x20005550
 8008ac4:	08013034 	.word	0x08013034
 8008ac8:	080131a4 	.word	0x080131a4
 8008acc:	0801307c 	.word	0x0801307c
 8008ad0:	080131bc 	.word	0x080131bc
 8008ad4:	080131dc 	.word	0x080131dc
 8008ad8:	20005554 	.word	0x20005554

08008adc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <mem_malloc+0x14>
    return NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	e0d9      	b.n	8008ca4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008af0:	88fb      	ldrh	r3, [r7, #6]
 8008af2:	3303      	adds	r3, #3
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008afc:	8bbb      	ldrh	r3, [r7, #28]
 8008afe:	2b0b      	cmp	r3, #11
 8008b00:	d801      	bhi.n	8008b06 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008b02:	230c      	movs	r3, #12
 8008b04:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008b06:	8bbb      	ldrh	r3, [r7, #28]
 8008b08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b0c:	d803      	bhi.n	8008b16 <mem_malloc+0x3a>
 8008b0e:	8bba      	ldrh	r2, [r7, #28]
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d201      	bcs.n	8008b1a <mem_malloc+0x3e>
    return NULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e0c4      	b.n	8008ca4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008b1a:	4b64      	ldr	r3, [pc, #400]	; (8008cac <mem_malloc+0x1d0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fd4a 	bl	80085b8 <mem_to_ptr>
 8008b24:	4603      	mov	r3, r0
 8008b26:	83fb      	strh	r3, [r7, #30]
 8008b28:	e0b4      	b.n	8008c94 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008b2a:	8bfb      	ldrh	r3, [r7, #30]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff fd31 	bl	8008594 <ptr_to_mem>
 8008b32:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	791b      	ldrb	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 80a4 	bne.w	8008c86 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	8bfb      	ldrh	r3, [r7, #30]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f1a3 0208 	sub.w	r2, r3, #8
 8008b4c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	f0c0 8099 	bcc.w	8008c86 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	8bfb      	ldrh	r3, [r7, #30]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	f1a3 0208 	sub.w	r2, r3, #8
 8008b62:	8bbb      	ldrh	r3, [r7, #28]
 8008b64:	3314      	adds	r3, #20
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d333      	bcc.n	8008bd2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008b6a:	8bfa      	ldrh	r2, [r7, #30]
 8008b6c:	8bbb      	ldrh	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3308      	adds	r3, #8
 8008b74:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008b76:	8a7b      	ldrh	r3, [r7, #18]
 8008b78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b7c:	d106      	bne.n	8008b8c <mem_malloc+0xb0>
 8008b7e:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <mem_malloc+0x1d4>)
 8008b80:	f240 3287 	movw	r2, #903	; 0x387
 8008b84:	494b      	ldr	r1, [pc, #300]	; (8008cb4 <mem_malloc+0x1d8>)
 8008b86:	484c      	ldr	r0, [pc, #304]	; (8008cb8 <mem_malloc+0x1dc>)
 8008b88:	f009 fb88 	bl	801229c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008b8c:	8a7b      	ldrh	r3, [r7, #18]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fd00 	bl	8008594 <ptr_to_mem>
 8008b94:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	881a      	ldrh	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8bfa      	ldrh	r2, [r7, #30]
 8008ba8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	8a7a      	ldrh	r2, [r7, #18]
 8008bae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008bbe:	d00b      	beq.n	8008bd8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fce5 	bl	8008594 <ptr_to_mem>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	8a7b      	ldrh	r3, [r7, #18]
 8008bce:	8053      	strh	r3, [r2, #2]
 8008bd0:	e002      	b.n	8008bd8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008bd8:	4b34      	ldr	r3, [pc, #208]	; (8008cac <mem_malloc+0x1d0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d127      	bne.n	8008c32 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008be2:	4b32      	ldr	r3, [pc, #200]	; (8008cac <mem_malloc+0x1d0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008be8:	e005      	b.n	8008bf6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fcd0 	bl	8008594 <ptr_to_mem>
 8008bf4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	791b      	ldrb	r3, [r3, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <mem_malloc+0x12c>
 8008bfe:	4b2f      	ldr	r3, [pc, #188]	; (8008cbc <mem_malloc+0x1e0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d1f0      	bne.n	8008bea <mem_malloc+0x10e>
          }
          lfree = cur;
 8008c08:	4a28      	ldr	r2, [pc, #160]	; (8008cac <mem_malloc+0x1d0>)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008c0e:	4b27      	ldr	r3, [pc, #156]	; (8008cac <mem_malloc+0x1d0>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <mem_malloc+0x1e0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d00b      	beq.n	8008c32 <mem_malloc+0x156>
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <mem_malloc+0x1d0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	791b      	ldrb	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d006      	beq.n	8008c32 <mem_malloc+0x156>
 8008c24:	4b22      	ldr	r3, [pc, #136]	; (8008cb0 <mem_malloc+0x1d4>)
 8008c26:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008c2a:	4925      	ldr	r1, [pc, #148]	; (8008cc0 <mem_malloc+0x1e4>)
 8008c2c:	4822      	ldr	r0, [pc, #136]	; (8008cb8 <mem_malloc+0x1dc>)
 8008c2e:	f009 fb35 	bl	801229c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008c32:	8bba      	ldrh	r2, [r7, #28]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	4413      	add	r3, r2
 8008c38:	3308      	adds	r3, #8
 8008c3a:	4a20      	ldr	r2, [pc, #128]	; (8008cbc <mem_malloc+0x1e0>)
 8008c3c:	6812      	ldr	r2, [r2, #0]
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d906      	bls.n	8008c50 <mem_malloc+0x174>
 8008c42:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <mem_malloc+0x1d4>)
 8008c44:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008c48:	491e      	ldr	r1, [pc, #120]	; (8008cc4 <mem_malloc+0x1e8>)
 8008c4a:	481b      	ldr	r0, [pc, #108]	; (8008cb8 <mem_malloc+0x1dc>)
 8008c4c:	f009 fb26 	bl	801229c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <mem_malloc+0x18c>
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <mem_malloc+0x1d4>)
 8008c5c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008c60:	4919      	ldr	r1, [pc, #100]	; (8008cc8 <mem_malloc+0x1ec>)
 8008c62:	4815      	ldr	r0, [pc, #84]	; (8008cb8 <mem_malloc+0x1dc>)
 8008c64:	f009 fb1a 	bl	801229c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <mem_malloc+0x1a4>
 8008c72:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <mem_malloc+0x1d4>)
 8008c74:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008c78:	4914      	ldr	r1, [pc, #80]	; (8008ccc <mem_malloc+0x1f0>)
 8008c7a:	480f      	ldr	r0, [pc, #60]	; (8008cb8 <mem_malloc+0x1dc>)
 8008c7c:	f009 fb0e 	bl	801229c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	3308      	adds	r3, #8
 8008c84:	e00e      	b.n	8008ca4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008c86:	8bfb      	ldrh	r3, [r7, #30]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fc83 	bl	8008594 <ptr_to_mem>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008c94:	8bfa      	ldrh	r2, [r7, #30]
 8008c96:	8bbb      	ldrh	r3, [r7, #28]
 8008c98:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	f4ff af44 	bcc.w	8008b2a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20005554 	.word	0x20005554
 8008cb0:	08013034 	.word	0x08013034
 8008cb4:	080131dc 	.word	0x080131dc
 8008cb8:	0801307c 	.word	0x0801307c
 8008cbc:	20005550 	.word	0x20005550
 8008cc0:	080131f0 	.word	0x080131f0
 8008cc4:	0801320c 	.word	0x0801320c
 8008cc8:	0801323c 	.word	0x0801323c
 8008ccc:	0801326c 	.word	0x0801326c

08008cd0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	3303      	adds	r3, #3
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e011      	b.n	8008d16 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	dbe7      	blt.n	8008cf2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008d36:	2300      	movs	r3, #0
 8008d38:	80fb      	strh	r3, [r7, #6]
 8008d3a:	e009      	b.n	8008d50 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <memp_init+0x30>)
 8008d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff ffc3 	bl	8008cd0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008d4a:	88fb      	ldrh	r3, [r7, #6]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	80fb      	strh	r3, [r7, #6]
 8008d50:	88fb      	ldrh	r3, [r7, #6]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d9f2      	bls.n	8008d3c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	08015a78 	.word	0x08015a78

08008d64 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d012      	beq.n	8008da0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d006      	beq.n	8008d9c <do_memp_malloc_pool+0x38>
 8008d8e:	4b07      	ldr	r3, [pc, #28]	; (8008dac <do_memp_malloc_pool+0x48>)
 8008d90:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008d94:	4906      	ldr	r1, [pc, #24]	; (8008db0 <do_memp_malloc_pool+0x4c>)
 8008d96:	4807      	ldr	r0, [pc, #28]	; (8008db4 <do_memp_malloc_pool+0x50>)
 8008d98:	f009 fa80 	bl	801229c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e000      	b.n	8008da2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	08013290 	.word	0x08013290
 8008db0:	080132c0 	.word	0x080132c0
 8008db4:	080132e4 	.word	0x080132e4

08008db8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <memp_malloc_pool+0x1c>
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <memp_malloc_pool+0x38>)
 8008dc8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008dcc:	4909      	ldr	r1, [pc, #36]	; (8008df4 <memp_malloc_pool+0x3c>)
 8008dce:	480a      	ldr	r0, [pc, #40]	; (8008df8 <memp_malloc_pool+0x40>)
 8008dd0:	f009 fa64 	bl	801229c <iprintf>
  if (desc == NULL) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <memp_malloc_pool+0x26>
    return NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e003      	b.n	8008de6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff ffc0 	bl	8008d64 <do_memp_malloc_pool>
 8008de4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	08013290 	.word	0x08013290
 8008df4:	0801330c 	.word	0x0801330c
 8008df8:	080132e4 	.word	0x080132e4

08008dfc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d908      	bls.n	8008e1e <memp_malloc+0x22>
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <memp_malloc+0x3c>)
 8008e0e:	f240 1257 	movw	r2, #343	; 0x157
 8008e12:	490a      	ldr	r1, [pc, #40]	; (8008e3c <memp_malloc+0x40>)
 8008e14:	480a      	ldr	r0, [pc, #40]	; (8008e40 <memp_malloc+0x44>)
 8008e16:	f009 fa41 	bl	801229c <iprintf>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e008      	b.n	8008e30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	4a08      	ldr	r2, [pc, #32]	; (8008e44 <memp_malloc+0x48>)
 8008e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff ff9c 	bl	8008d64 <do_memp_malloc_pool>
 8008e2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	08013290 	.word	0x08013290
 8008e3c:	08013320 	.word	0x08013320
 8008e40:	080132e4 	.word	0x080132e4
 8008e44:	08015a78 	.word	0x08015a78

08008e48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <do_memp_free_pool+0x22>
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <do_memp_free_pool+0x40>)
 8008e5e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008e62:	490a      	ldr	r1, [pc, #40]	; (8008e8c <do_memp_free_pool+0x44>)
 8008e64:	480a      	ldr	r0, [pc, #40]	; (8008e90 <do_memp_free_pool+0x48>)
 8008e66:	f009 fa19 	bl	801229c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	08013290 	.word	0x08013290
 8008e8c:	08013340 	.word	0x08013340
 8008e90:	080132e4 	.word	0x080132e4

08008e94 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <memp_free_pool+0x1e>
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <memp_free_pool+0x3c>)
 8008ea6:	f240 1295 	movw	r2, #405	; 0x195
 8008eaa:	490a      	ldr	r1, [pc, #40]	; (8008ed4 <memp_free_pool+0x40>)
 8008eac:	480a      	ldr	r0, [pc, #40]	; (8008ed8 <memp_free_pool+0x44>)
 8008eae:	f009 f9f5 	bl	801229c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d007      	beq.n	8008ec8 <memp_free_pool+0x34>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff ffc1 	bl	8008e48 <do_memp_free_pool>
 8008ec6:	e000      	b.n	8008eca <memp_free_pool+0x36>
    return;
 8008ec8:	bf00      	nop
}
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	08013290 	.word	0x08013290
 8008ed4:	0801330c 	.word	0x0801330c
 8008ed8:	080132e4 	.word	0x080132e4

08008edc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	2b08      	cmp	r3, #8
 8008eec:	d907      	bls.n	8008efe <memp_free+0x22>
 8008eee:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <memp_free+0x44>)
 8008ef0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008ef4:	490b      	ldr	r1, [pc, #44]	; (8008f24 <memp_free+0x48>)
 8008ef6:	480c      	ldr	r0, [pc, #48]	; (8008f28 <memp_free+0x4c>)
 8008ef8:	f009 f9d0 	bl	801229c <iprintf>
 8008efc:	e00c      	b.n	8008f18 <memp_free+0x3c>

  if (mem == NULL) {
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d008      	beq.n	8008f16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <memp_free+0x50>)
 8008f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff ff9a 	bl	8008e48 <do_memp_free_pool>
 8008f14:	e000      	b.n	8008f18 <memp_free+0x3c>
    return;
 8008f16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	08013290 	.word	0x08013290
 8008f24:	08013360 	.word	0x08013360
 8008f28:	080132e4 	.word	0x080132e4
 8008f2c:	08015a78 	.word	0x08015a78

08008f30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008f34:	bf00      	nop
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
	...

08008f40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d108      	bne.n	8008f66 <netif_add+0x26>
 8008f54:	4b57      	ldr	r3, [pc, #348]	; (80090b4 <netif_add+0x174>)
 8008f56:	f240 1227 	movw	r2, #295	; 0x127
 8008f5a:	4957      	ldr	r1, [pc, #348]	; (80090b8 <netif_add+0x178>)
 8008f5c:	4857      	ldr	r0, [pc, #348]	; (80090bc <netif_add+0x17c>)
 8008f5e:	f009 f99d 	bl	801229c <iprintf>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e0a2      	b.n	80090ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d108      	bne.n	8008f7e <netif_add+0x3e>
 8008f6c:	4b51      	ldr	r3, [pc, #324]	; (80090b4 <netif_add+0x174>)
 8008f6e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008f72:	4953      	ldr	r1, [pc, #332]	; (80090c0 <netif_add+0x180>)
 8008f74:	4851      	ldr	r0, [pc, #324]	; (80090bc <netif_add+0x17c>)
 8008f76:	f009 f991 	bl	801229c <iprintf>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e096      	b.n	80090ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008f84:	4b4f      	ldr	r3, [pc, #316]	; (80090c4 <netif_add+0x184>)
 8008f86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008f8e:	4b4d      	ldr	r3, [pc, #308]	; (80090c4 <netif_add+0x184>)
 8008f90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008f98:	4b4a      	ldr	r3, [pc, #296]	; (80090c4 <netif_add+0x184>)
 8008f9a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a45      	ldr	r2, [pc, #276]	; (80090c8 <netif_add+0x188>)
 8008fb2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a3a      	ldr	r2, [r7, #32]
 8008fcc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008fce:	4b3f      	ldr	r3, [pc, #252]	; (80090cc <netif_add+0x18c>)
 8008fd0:	781a      	ldrb	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fdc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f913 	bl	8009210 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	4798      	blx	r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <netif_add+0xba>
    return NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e058      	b.n	80090ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009000:	2bff      	cmp	r3, #255	; 0xff
 8009002:	d103      	bne.n	800900c <netif_add+0xcc>
        netif->num = 0;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009010:	4b2f      	ldr	r3, [pc, #188]	; (80090d0 <netif_add+0x190>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e02b      	b.n	8009070 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	429a      	cmp	r2, r3
 800901e:	d106      	bne.n	800902e <netif_add+0xee>
 8009020:	4b24      	ldr	r3, [pc, #144]	; (80090b4 <netif_add+0x174>)
 8009022:	f240 128b 	movw	r2, #395	; 0x18b
 8009026:	492b      	ldr	r1, [pc, #172]	; (80090d4 <netif_add+0x194>)
 8009028:	4824      	ldr	r0, [pc, #144]	; (80090bc <netif_add+0x17c>)
 800902a:	f009 f937 	bl	801229c <iprintf>
        num_netifs++;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3301      	adds	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	2bff      	cmp	r3, #255	; 0xff
 8009038:	dd06      	ble.n	8009048 <netif_add+0x108>
 800903a:	4b1e      	ldr	r3, [pc, #120]	; (80090b4 <netif_add+0x174>)
 800903c:	f240 128d 	movw	r2, #397	; 0x18d
 8009040:	4925      	ldr	r1, [pc, #148]	; (80090d8 <netif_add+0x198>)
 8009042:	481e      	ldr	r0, [pc, #120]	; (80090bc <netif_add+0x17c>)
 8009044:	f009 f92a 	bl	801229c <iprintf>
        if (netif2->num == netif->num) {
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009054:	429a      	cmp	r2, r3
 8009056:	d108      	bne.n	800906a <netif_add+0x12a>
          netif->num++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800905e:	3301      	adds	r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009068:	e005      	b.n	8009076 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1d0      	bne.n	8009018 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1be      	bne.n	8008ffa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009082:	2bfe      	cmp	r3, #254	; 0xfe
 8009084:	d103      	bne.n	800908e <netif_add+0x14e>
    netif_num = 0;
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <netif_add+0x18c>)
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
 800908c:	e006      	b.n	800909c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009094:	3301      	adds	r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <netif_add+0x18c>)
 800909a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800909c:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <netif_add+0x190>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80090a4:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <netif_add+0x190>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80090aa:	68fb      	ldr	r3, [r7, #12]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	0801337c 	.word	0x0801337c
 80090b8:	08013410 	.word	0x08013410
 80090bc:	080133cc 	.word	0x080133cc
 80090c0:	0801342c 	.word	0x0801342c
 80090c4:	08015adc 	.word	0x08015adc
 80090c8:	080094eb 	.word	0x080094eb
 80090cc:	2000844c 	.word	0x2000844c
 80090d0:	20008444 	.word	0x20008444
 80090d4:	08013450 	.word	0x08013450
 80090d8:	08013464 	.word	0x08013464

080090dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f002 fb23 	bl	800b734 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f006 fbc5 	bl	800f880 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <netif_do_set_ipaddr+0x20>
 8009112:	4b1d      	ldr	r3, [pc, #116]	; (8009188 <netif_do_set_ipaddr+0x88>)
 8009114:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009118:	491c      	ldr	r1, [pc, #112]	; (800918c <netif_do_set_ipaddr+0x8c>)
 800911a:	481d      	ldr	r0, [pc, #116]	; (8009190 <netif_do_set_ipaddr+0x90>)
 800911c:	f009 f8be 	bl	801229c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <netif_do_set_ipaddr+0x34>
 8009126:	4b18      	ldr	r3, [pc, #96]	; (8009188 <netif_do_set_ipaddr+0x88>)
 8009128:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800912c:	4917      	ldr	r1, [pc, #92]	; (800918c <netif_do_set_ipaddr+0x8c>)
 800912e:	4818      	ldr	r0, [pc, #96]	; (8009190 <netif_do_set_ipaddr+0x90>)
 8009130:	f009 f8b4 	bl	801229c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3304      	adds	r3, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d01c      	beq.n	800917c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3304      	adds	r3, #4
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009152:	f107 0314 	add.w	r3, r7, #20
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ffbf 	bl	80090dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <netif_do_set_ipaddr+0x6a>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	e000      	b.n	800916c <netif_do_set_ipaddr+0x6c>
 800916a:	2300      	movs	r3, #0
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009170:	2101      	movs	r1, #1
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 f8d2 	bl	800931c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	0801337c 	.word	0x0801337c
 800918c:	08013494 	.word	0x08013494
 8009190:	080133cc 	.word	0x080133cc

08009194 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3308      	adds	r3, #8
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d00a      	beq.n	80091c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <netif_do_set_netmask+0x26>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	e000      	b.n	80091bc <netif_do_set_netmask+0x28>
 80091ba:	2300      	movs	r3, #0
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	330c      	adds	r3, #12
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d00a      	beq.n	8009202 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <netif_do_set_gw+0x26>
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	e000      	b.n	80091fa <netif_do_set_gw+0x28>
 80091f8:	2300      	movs	r3, #0
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800922c:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <netif_set_addr+0x90>)
 800922e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009236:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <netif_set_addr+0x90>)
 8009238:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009240:	4b17      	ldr	r3, [pc, #92]	; (80092a0 <netif_set_addr+0x90>)
 8009242:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <netif_set_addr+0x42>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <netif_set_addr+0x46>
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <netif_set_addr+0x48>
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
  if (remove) {
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d006      	beq.n	800926e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009260:	f107 0310 	add.w	r3, r7, #16
 8009264:	461a      	mov	r2, r3
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff ff49 	bl	8009100 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff ff8e 	bl	8009194 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff ffa8 	bl	80091d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009288:	f107 0310 	add.w	r3, r7, #16
 800928c:	461a      	mov	r2, r3
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff ff35 	bl	8009100 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009296:	bf00      	nop
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	08015adc 	.word	0x08015adc

080092a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80092ac:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <netif_set_default+0x1c>)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20008448 	.word	0x20008448

080092c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d107      	bne.n	80092e2 <netif_set_up+0x1e>
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <netif_set_up+0x4c>)
 80092d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80092d8:	490e      	ldr	r1, [pc, #56]	; (8009314 <netif_set_up+0x50>)
 80092da:	480f      	ldr	r0, [pc, #60]	; (8009318 <netif_set_up+0x54>)
 80092dc:	f008 ffde 	bl	801229c <iprintf>
 80092e0:	e013      	b.n	800930a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10c      	bne.n	800930a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009302:	2103      	movs	r1, #3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f809 	bl	800931c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	0801337c 	.word	0x0801337c
 8009314:	08013504 	.word	0x08013504
 8009318:	080133cc 	.word	0x080133cc

0800931c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <netif_issue_reports+0x20>
 800932e:	4b18      	ldr	r3, [pc, #96]	; (8009390 <netif_issue_reports+0x74>)
 8009330:	f240 326d 	movw	r2, #877	; 0x36d
 8009334:	4917      	ldr	r1, [pc, #92]	; (8009394 <netif_issue_reports+0x78>)
 8009336:	4818      	ldr	r0, [pc, #96]	; (8009398 <netif_issue_reports+0x7c>)
 8009338:	f008 ffb0 	bl	801229c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01e      	beq.n	8009388 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009350:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009354:	2b00      	cmp	r3, #0
 8009356:	d017      	beq.n	8009388 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d013      	beq.n	800938a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3304      	adds	r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00e      	beq.n	800938a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f007 f9e7 	bl	8010754 <etharp_request>
 8009386:	e000      	b.n	800938a <netif_issue_reports+0x6e>
    return;
 8009388:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	0801337c 	.word	0x0801337c
 8009394:	08013520 	.word	0x08013520
 8009398:	080133cc 	.word	0x080133cc

0800939c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d107      	bne.n	80093ba <netif_set_down+0x1e>
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <netif_set_down+0x58>)
 80093ac:	f240 329b 	movw	r2, #923	; 0x39b
 80093b0:	4911      	ldr	r1, [pc, #68]	; (80093f8 <netif_set_down+0x5c>)
 80093b2:	4812      	ldr	r0, [pc, #72]	; (80093fc <netif_set_down+0x60>)
 80093b4:	f008 ff72 	bl	801229c <iprintf>
 80093b8:	e019      	b.n	80093ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d012      	beq.n	80093ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f006 fd71 	bl	800fed0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	0801337c 	.word	0x0801337c
 80093f8:	08013544 	.word	0x08013544
 80093fc:	080133cc 	.word	0x080133cc

08009400 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d107      	bne.n	800941e <netif_set_link_up+0x1e>
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <netif_set_link_up+0x5c>)
 8009410:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009414:	4912      	ldr	r1, [pc, #72]	; (8009460 <netif_set_link_up+0x60>)
 8009416:	4813      	ldr	r0, [pc, #76]	; (8009464 <netif_set_link_up+0x64>)
 8009418:	f008 ff40 	bl	801229c <iprintf>
 800941c:	e01b      	b.n	8009456 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d114      	bne.n	8009456 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009432:	f043 0304 	orr.w	r3, r3, #4
 8009436:	b2da      	uxtb	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800943e:	2103      	movs	r1, #3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ff6b 	bl	800931c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <netif_set_link_up+0x56>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	0801337c 	.word	0x0801337c
 8009460:	08013564 	.word	0x08013564
 8009464:	080133cc 	.word	0x080133cc

08009468 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d107      	bne.n	8009486 <netif_set_link_down+0x1e>
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <netif_set_link_down+0x54>)
 8009478:	f240 4206 	movw	r2, #1030	; 0x406
 800947c:	4910      	ldr	r1, [pc, #64]	; (80094c0 <netif_set_link_down+0x58>)
 800947e:	4811      	ldr	r0, [pc, #68]	; (80094c4 <netif_set_link_down+0x5c>)
 8009480:	f008 ff0c 	bl	801229c <iprintf>
 8009484:	e017      	b.n	80094b6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d010      	beq.n	80094b6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800949a:	f023 0304 	bic.w	r3, r3, #4
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <netif_set_link_down+0x4e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	0801337c 	.word	0x0801337c
 80094c0:	08013588 	.word	0x08013588
 80094c4:	080133cc 	.word	0x080133cc

080094c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	61da      	str	r2, [r3, #28]
  }
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80094f6:	f06f 030b 	mvn.w	r3, #11
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
	...

08009508 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d013      	beq.n	8009540 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009518:	4b0d      	ldr	r3, [pc, #52]	; (8009550 <netif_get_by_index+0x48>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	e00c      	b.n	800953a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009526:	3301      	adds	r3, #1
 8009528:	b2db      	uxtb	r3, r3
 800952a:	79fa      	ldrb	r2, [r7, #7]
 800952c:	429a      	cmp	r2, r3
 800952e:	d101      	bne.n	8009534 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	e006      	b.n	8009542 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1ef      	bne.n	8009520 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20008444 	.word	0x20008444

08009554 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009558:	4b03      	ldr	r3, [pc, #12]	; (8009568 <pbuf_pool_is_empty+0x14>)
 800955a:	2201      	movs	r2, #1
 800955c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800955e:	bf00      	nop
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	2000844d 	.word	0x2000844d

0800956c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4611      	mov	r1, r2
 8009578:	461a      	mov	r2, r3
 800957a:	460b      	mov	r3, r1
 800957c:	80fb      	strh	r3, [r7, #6]
 800957e:	4613      	mov	r3, r2
 8009580:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	88ba      	ldrh	r2, [r7, #4]
 8009598:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800959a:	8b3b      	ldrh	r3, [r7, #24]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	7f3a      	ldrb	r2, [r7, #28]
 80095a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	73da      	strb	r2, [r3, #15]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08c      	sub	sp, #48	; 0x30
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
 80095ca:	460b      	mov	r3, r1
 80095cc:	80bb      	strh	r3, [r7, #4]
 80095ce:	4613      	mov	r3, r2
 80095d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80095d6:	887b      	ldrh	r3, [r7, #2]
 80095d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80095dc:	d07f      	beq.n	80096de <pbuf_alloc+0x11e>
 80095de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80095e2:	f300 80c8 	bgt.w	8009776 <pbuf_alloc+0x1b6>
 80095e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80095ea:	d010      	beq.n	800960e <pbuf_alloc+0x4e>
 80095ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80095f0:	f300 80c1 	bgt.w	8009776 <pbuf_alloc+0x1b6>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d002      	beq.n	80095fe <pbuf_alloc+0x3e>
 80095f8:	2b41      	cmp	r3, #65	; 0x41
 80095fa:	f040 80bc 	bne.w	8009776 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80095fe:	887a      	ldrh	r2, [r7, #2]
 8009600:	88bb      	ldrh	r3, [r7, #4]
 8009602:	4619      	mov	r1, r3
 8009604:	2000      	movs	r0, #0
 8009606:	f000 f8d1 	bl	80097ac <pbuf_alloc_reference>
 800960a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800960c:	e0bd      	b.n	800978a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009616:	88bb      	ldrh	r3, [r7, #4]
 8009618:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800961a:	2008      	movs	r0, #8
 800961c:	f7ff fbee 	bl	8008dfc <memp_malloc>
 8009620:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d109      	bne.n	800963c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009628:	f7ff ff94 	bl	8009554 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009634:	f000 faa8 	bl	8009b88 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	e0a7      	b.n	800978c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800963c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800963e:	3303      	adds	r3, #3
 8009640:	b29b      	uxth	r3, r3
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	b29b      	uxth	r3, r3
 8009648:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800964c:	b29b      	uxth	r3, r3
 800964e:	8b7a      	ldrh	r2, [r7, #26]
 8009650:	4293      	cmp	r3, r2
 8009652:	bf28      	it	cs
 8009654:	4613      	movcs	r3, r2
 8009656:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800965a:	3310      	adds	r3, #16
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4413      	add	r3, r2
 8009660:	3303      	adds	r3, #3
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	4618      	mov	r0, r3
 8009668:	89f9      	ldrh	r1, [r7, #14]
 800966a:	8b7a      	ldrh	r2, [r7, #26]
 800966c:	2300      	movs	r3, #0
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	887b      	ldrh	r3, [r7, #2]
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	460b      	mov	r3, r1
 8009676:	4601      	mov	r1, r0
 8009678:	6938      	ldr	r0, [r7, #16]
 800967a:	f7ff ff77 	bl	800956c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d006      	beq.n	8009698 <pbuf_alloc+0xd8>
 800968a:	4b42      	ldr	r3, [pc, #264]	; (8009794 <pbuf_alloc+0x1d4>)
 800968c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009690:	4941      	ldr	r1, [pc, #260]	; (8009798 <pbuf_alloc+0x1d8>)
 8009692:	4842      	ldr	r0, [pc, #264]	; (800979c <pbuf_alloc+0x1dc>)
 8009694:	f008 fe02 	bl	801229c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800969a:	3303      	adds	r3, #3
 800969c:	f023 0303 	bic.w	r3, r3, #3
 80096a0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80096a4:	d106      	bne.n	80096b4 <pbuf_alloc+0xf4>
 80096a6:	4b3b      	ldr	r3, [pc, #236]	; (8009794 <pbuf_alloc+0x1d4>)
 80096a8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80096ac:	493c      	ldr	r1, [pc, #240]	; (80097a0 <pbuf_alloc+0x1e0>)
 80096ae:	483b      	ldr	r0, [pc, #236]	; (800979c <pbuf_alloc+0x1dc>)
 80096b0:	f008 fdf4 	bl	801229c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
 80096be:	e002      	b.n	80096c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80096ca:	8b7a      	ldrh	r2, [r7, #26]
 80096cc:	89fb      	ldrh	r3, [r7, #14]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80096d6:	8b7b      	ldrh	r3, [r7, #26]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d19e      	bne.n	800961a <pbuf_alloc+0x5a>
      break;
 80096dc:	e055      	b.n	800978a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80096de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096e0:	3303      	adds	r3, #3
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	f023 0303 	bic.w	r3, r3, #3
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	88bb      	ldrh	r3, [r7, #4]
 80096ec:	3303      	adds	r3, #3
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f023 0303 	bic.w	r3, r3, #3
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80096fa:	8b3b      	ldrh	r3, [r7, #24]
 80096fc:	3310      	adds	r3, #16
 80096fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009700:	8b3a      	ldrh	r2, [r7, #24]
 8009702:	88bb      	ldrh	r3, [r7, #4]
 8009704:	3303      	adds	r3, #3
 8009706:	f023 0303 	bic.w	r3, r3, #3
 800970a:	429a      	cmp	r2, r3
 800970c:	d306      	bcc.n	800971c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800970e:	8afa      	ldrh	r2, [r7, #22]
 8009710:	88bb      	ldrh	r3, [r7, #4]
 8009712:	3303      	adds	r3, #3
 8009714:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009718:	429a      	cmp	r2, r3
 800971a:	d201      	bcs.n	8009720 <pbuf_alloc+0x160>
        return NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	e035      	b.n	800978c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009720:	8afb      	ldrh	r3, [r7, #22]
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff f9da 	bl	8008adc <mem_malloc>
 8009728:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <pbuf_alloc+0x174>
        return NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	e02b      	b.n	800978c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009736:	3310      	adds	r3, #16
 8009738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973a:	4413      	add	r3, r2
 800973c:	3303      	adds	r3, #3
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	4618      	mov	r0, r3
 8009744:	88b9      	ldrh	r1, [r7, #4]
 8009746:	88ba      	ldrh	r2, [r7, #4]
 8009748:	2300      	movs	r3, #0
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	887b      	ldrh	r3, [r7, #2]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	460b      	mov	r3, r1
 8009752:	4601      	mov	r1, r0
 8009754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009756:	f7ff ff09 	bl	800956c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d010      	beq.n	8009788 <pbuf_alloc+0x1c8>
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <pbuf_alloc+0x1d4>)
 8009768:	f44f 7291 	mov.w	r2, #290	; 0x122
 800976c:	490d      	ldr	r1, [pc, #52]	; (80097a4 <pbuf_alloc+0x1e4>)
 800976e:	480b      	ldr	r0, [pc, #44]	; (800979c <pbuf_alloc+0x1dc>)
 8009770:	f008 fd94 	bl	801229c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009774:	e008      	b.n	8009788 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009776:	4b07      	ldr	r3, [pc, #28]	; (8009794 <pbuf_alloc+0x1d4>)
 8009778:	f240 1227 	movw	r2, #295	; 0x127
 800977c:	490a      	ldr	r1, [pc, #40]	; (80097a8 <pbuf_alloc+0x1e8>)
 800977e:	4807      	ldr	r0, [pc, #28]	; (800979c <pbuf_alloc+0x1dc>)
 8009780:	f008 fd8c 	bl	801229c <iprintf>
      return NULL;
 8009784:	2300      	movs	r3, #0
 8009786:	e001      	b.n	800978c <pbuf_alloc+0x1cc>
      break;
 8009788:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800978c:	4618      	mov	r0, r3
 800978e:	3728      	adds	r7, #40	; 0x28
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	080135ac 	.word	0x080135ac
 8009798:	080135dc 	.word	0x080135dc
 800979c:	0801360c 	.word	0x0801360c
 80097a0:	08013634 	.word	0x08013634
 80097a4:	08013668 	.word	0x08013668
 80097a8:	08013694 	.word	0x08013694

080097ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	807b      	strh	r3, [r7, #2]
 80097b8:	4613      	mov	r3, r2
 80097ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80097bc:	883b      	ldrh	r3, [r7, #0]
 80097be:	2b41      	cmp	r3, #65	; 0x41
 80097c0:	d009      	beq.n	80097d6 <pbuf_alloc_reference+0x2a>
 80097c2:	883b      	ldrh	r3, [r7, #0]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d006      	beq.n	80097d6 <pbuf_alloc_reference+0x2a>
 80097c8:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <pbuf_alloc_reference+0x5c>)
 80097ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80097ce:	490f      	ldr	r1, [pc, #60]	; (800980c <pbuf_alloc_reference+0x60>)
 80097d0:	480f      	ldr	r0, [pc, #60]	; (8009810 <pbuf_alloc_reference+0x64>)
 80097d2:	f008 fd63 	bl	801229c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80097d6:	2007      	movs	r0, #7
 80097d8:	f7ff fb10 	bl	8008dfc <memp_malloc>
 80097dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	e00b      	b.n	8009800 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80097e8:	8879      	ldrh	r1, [r7, #2]
 80097ea:	887a      	ldrh	r2, [r7, #2]
 80097ec:	2300      	movs	r3, #0
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	883b      	ldrh	r3, [r7, #0]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	460b      	mov	r3, r1
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff feb7 	bl	800956c <pbuf_init_alloced_pbuf>
  return p;
 80097fe:	68fb      	ldr	r3, [r7, #12]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	080135ac 	.word	0x080135ac
 800980c:	080136b0 	.word	0x080136b0
 8009810:	0801360c 	.word	0x0801360c

08009814 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af02      	add	r7, sp, #8
 800981a:	607b      	str	r3, [r7, #4]
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]
 8009820:	460b      	mov	r3, r1
 8009822:	81bb      	strh	r3, [r7, #12]
 8009824:	4613      	mov	r3, r2
 8009826:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800982c:	8a7b      	ldrh	r3, [r7, #18]
 800982e:	3303      	adds	r3, #3
 8009830:	f023 0203 	bic.w	r2, r3, #3
 8009834:	89bb      	ldrh	r3, [r7, #12]
 8009836:	441a      	add	r2, r3
 8009838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800983a:	429a      	cmp	r2, r3
 800983c:	d901      	bls.n	8009842 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	e018      	b.n	8009874 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009848:	8a7b      	ldrh	r3, [r7, #18]
 800984a:	3303      	adds	r3, #3
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	6a3a      	ldr	r2, [r7, #32]
 8009852:	4413      	add	r3, r2
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	e001      	b.n	800985c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	89b9      	ldrh	r1, [r7, #12]
 8009860:	89ba      	ldrh	r2, [r7, #12]
 8009862:	2302      	movs	r3, #2
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	897b      	ldrh	r3, [r7, #10]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	460b      	mov	r3, r1
 800986c:	6979      	ldr	r1, [r7, #20]
 800986e:	f7ff fe7d 	bl	800956c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009872:	687b      	ldr	r3, [r7, #4]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d106      	bne.n	800989c <pbuf_realloc+0x20>
 800988e:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <pbuf_realloc+0xfc>)
 8009890:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009894:	4939      	ldr	r1, [pc, #228]	; (800997c <pbuf_realloc+0x100>)
 8009896:	483a      	ldr	r0, [pc, #232]	; (8009980 <pbuf_realloc+0x104>)
 8009898:	f008 fd00 	bl	801229c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	891b      	ldrh	r3, [r3, #8]
 80098a0:	887a      	ldrh	r2, [r7, #2]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d263      	bcs.n	800996e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	891a      	ldrh	r2, [r3, #8]
 80098aa:	887b      	ldrh	r3, [r7, #2]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80098b0:	887b      	ldrh	r3, [r7, #2]
 80098b2:	817b      	strh	r3, [r7, #10]
  q = p;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80098b8:	e018      	b.n	80098ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	895b      	ldrh	r3, [r3, #10]
 80098be:	897a      	ldrh	r2, [r7, #10]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	891a      	ldrh	r2, [r3, #8]
 80098c8:	893b      	ldrh	r3, [r7, #8]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <pbuf_realloc+0x70>
 80098de:	4b26      	ldr	r3, [pc, #152]	; (8009978 <pbuf_realloc+0xfc>)
 80098e0:	f240 12af 	movw	r2, #431	; 0x1af
 80098e4:	4927      	ldr	r1, [pc, #156]	; (8009984 <pbuf_realloc+0x108>)
 80098e6:	4826      	ldr	r0, [pc, #152]	; (8009980 <pbuf_realloc+0x104>)
 80098e8:	f008 fcd8 	bl	801229c <iprintf>
  while (rem_len > q->len) {
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	895b      	ldrh	r3, [r3, #10]
 80098f0:	897a      	ldrh	r2, [r7, #10]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d8e1      	bhi.n	80098ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	7b1b      	ldrb	r3, [r3, #12]
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d121      	bne.n	8009946 <pbuf_realloc+0xca>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	895b      	ldrh	r3, [r3, #10]
 8009906:	897a      	ldrh	r2, [r7, #10]
 8009908:	429a      	cmp	r2, r3
 800990a:	d01c      	beq.n	8009946 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	7b5b      	ldrb	r3, [r3, #13]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d116      	bne.n	8009946 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	b29a      	uxth	r2, r3
 8009922:	897b      	ldrh	r3, [r7, #10]
 8009924:	4413      	add	r3, r2
 8009926:	b29b      	uxth	r3, r3
 8009928:	4619      	mov	r1, r3
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7fe ffda 	bl	80088e4 <mem_trim>
 8009930:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d106      	bne.n	8009946 <pbuf_realloc+0xca>
 8009938:	4b0f      	ldr	r3, [pc, #60]	; (8009978 <pbuf_realloc+0xfc>)
 800993a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800993e:	4912      	ldr	r1, [pc, #72]	; (8009988 <pbuf_realloc+0x10c>)
 8009940:	480f      	ldr	r0, [pc, #60]	; (8009980 <pbuf_realloc+0x104>)
 8009942:	f008 fcab 	bl	801229c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	897a      	ldrh	r2, [r7, #10]
 800994a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	895a      	ldrh	r2, [r3, #10]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d004      	beq.n	8009966 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f911 	bl	8009b88 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	e000      	b.n	8009970 <pbuf_realloc+0xf4>
    return;
 800996e:	bf00      	nop

}
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	080135ac 	.word	0x080135ac
 800997c:	080136c4 	.word	0x080136c4
 8009980:	0801360c 	.word	0x0801360c
 8009984:	080136dc 	.word	0x080136dc
 8009988:	080136f4 	.word	0x080136f4

0800998c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <pbuf_add_header_impl+0x22>
 80099a0:	4b2b      	ldr	r3, [pc, #172]	; (8009a50 <pbuf_add_header_impl+0xc4>)
 80099a2:	f240 12df 	movw	r2, #479	; 0x1df
 80099a6:	492b      	ldr	r1, [pc, #172]	; (8009a54 <pbuf_add_header_impl+0xc8>)
 80099a8:	482b      	ldr	r0, [pc, #172]	; (8009a58 <pbuf_add_header_impl+0xcc>)
 80099aa:	f008 fc77 	bl	801229c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <pbuf_add_header_impl+0x30>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ba:	d301      	bcc.n	80099c0 <pbuf_add_header_impl+0x34>
    return 1;
 80099bc:	2301      	movs	r3, #1
 80099be:	e043      	b.n	8009a48 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <pbuf_add_header_impl+0x3e>
    return 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	e03e      	b.n	8009a48 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	891a      	ldrh	r2, [r3, #8]
 80099d2:	8a7b      	ldrh	r3, [r7, #18]
 80099d4:	4413      	add	r3, r2
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8a7a      	ldrh	r2, [r7, #18]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d901      	bls.n	80099e2 <pbuf_add_header_impl+0x56>
    return 1;
 80099de:	2301      	movs	r3, #1
 80099e0:	e032      	b.n	8009a48 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	7b1b      	ldrb	r3, [r3, #12]
 80099e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80099e8:	8a3b      	ldrh	r3, [r7, #16]
 80099ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00c      	beq.n	8009a0c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	425b      	negs	r3, r3
 80099fa:	4413      	add	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3310      	adds	r3, #16
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d20d      	bcs.n	8009a24 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e01d      	b.n	8009a48 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d006      	beq.n	8009a20 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	425b      	negs	r3, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	e001      	b.n	8009a24 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e011      	b.n	8009a48 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	895a      	ldrh	r2, [r3, #10]
 8009a2e:	8a7b      	ldrh	r3, [r7, #18]
 8009a30:	4413      	add	r3, r2
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	891a      	ldrh	r2, [r3, #8]
 8009a3c:	8a7b      	ldrh	r3, [r7, #18]
 8009a3e:	4413      	add	r3, r2
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	811a      	strh	r2, [r3, #8]


  return 0;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	080135ac 	.word	0x080135ac
 8009a54:	08013710 	.word	0x08013710
 8009a58:	0801360c 	.word	0x0801360c

08009a5c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009a66:	2200      	movs	r2, #0
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff ff8e 	bl	800998c <pbuf_add_header_impl>
 8009a70:	4603      	mov	r3, r0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <pbuf_remove_header+0x1e>
 8009a8c:	4b20      	ldr	r3, [pc, #128]	; (8009b10 <pbuf_remove_header+0x94>)
 8009a8e:	f240 224b 	movw	r2, #587	; 0x24b
 8009a92:	4920      	ldr	r1, [pc, #128]	; (8009b14 <pbuf_remove_header+0x98>)
 8009a94:	4820      	ldr	r0, [pc, #128]	; (8009b18 <pbuf_remove_header+0x9c>)
 8009a96:	f008 fc01 	bl	801229c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <pbuf_remove_header+0x2c>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa6:	d301      	bcc.n	8009aac <pbuf_remove_header+0x30>
    return 1;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e02c      	b.n	8009b06 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <pbuf_remove_header+0x3a>
    return 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e027      	b.n	8009b06 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	895b      	ldrh	r3, [r3, #10]
 8009abe:	89fa      	ldrh	r2, [r7, #14]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d908      	bls.n	8009ad6 <pbuf_remove_header+0x5a>
 8009ac4:	4b12      	ldr	r3, [pc, #72]	; (8009b10 <pbuf_remove_header+0x94>)
 8009ac6:	f240 2255 	movw	r2, #597	; 0x255
 8009aca:	4914      	ldr	r1, [pc, #80]	; (8009b1c <pbuf_remove_header+0xa0>)
 8009acc:	4812      	ldr	r0, [pc, #72]	; (8009b18 <pbuf_remove_header+0x9c>)
 8009ace:	f008 fbe5 	bl	801229c <iprintf>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e017      	b.n	8009b06 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	441a      	add	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	895a      	ldrh	r2, [r3, #10]
 8009aec:	89fb      	ldrh	r3, [r7, #14]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	891a      	ldrh	r2, [r3, #8]
 8009afa:	89fb      	ldrh	r3, [r7, #14]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	080135ac 	.word	0x080135ac
 8009b14:	08013710 	.word	0x08013710
 8009b18:	0801360c 	.word	0x0801360c
 8009b1c:	0801371c 	.word	0x0801371c

08009b20 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	807b      	strh	r3, [r7, #2]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009b30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da08      	bge.n	8009b4a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff ff9b 	bl	8009a7c <pbuf_remove_header>
 8009b46:	4603      	mov	r3, r0
 8009b48:	e007      	b.n	8009b5a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b4e:	787a      	ldrb	r2, [r7, #1]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff ff1a 	bl	800998c <pbuf_add_header_impl>
 8009b58:	4603      	mov	r3, r0
  }
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009b6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b72:	2201      	movs	r2, #1
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff ffd2 	bl	8009b20 <pbuf_header_impl>
 8009b7c:	4603      	mov	r3, r0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <pbuf_free+0x22>
 8009b9c:	4b38      	ldr	r3, [pc, #224]	; (8009c80 <pbuf_free+0xf8>)
 8009b9e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009ba2:	4938      	ldr	r1, [pc, #224]	; (8009c84 <pbuf_free+0xfc>)
 8009ba4:	4838      	ldr	r0, [pc, #224]	; (8009c88 <pbuf_free+0x100>)
 8009ba6:	f008 fb79 	bl	801229c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e063      	b.n	8009c76 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009bb2:	e05c      	b.n	8009c6e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7b9b      	ldrb	r3, [r3, #14]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <pbuf_free+0x42>
 8009bbc:	4b30      	ldr	r3, [pc, #192]	; (8009c80 <pbuf_free+0xf8>)
 8009bbe:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009bc2:	4932      	ldr	r1, [pc, #200]	; (8009c8c <pbuf_free+0x104>)
 8009bc4:	4830      	ldr	r0, [pc, #192]	; (8009c88 <pbuf_free+0x100>)
 8009bc6:	f008 fb69 	bl	801229c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	7b9b      	ldrb	r3, [r3, #14]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	739a      	strb	r2, [r3, #14]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7b9b      	ldrb	r3, [r3, #14]
 8009bda:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009bdc:	7dbb      	ldrb	r3, [r7, #22]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d143      	bne.n	8009c6a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7b1b      	ldrb	r3, [r3, #12]
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7b5b      	ldrb	r3, [r3, #13]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d011      	beq.n	8009c22 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <pbuf_free+0x90>
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <pbuf_free+0xf8>)
 8009c0c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009c10:	491f      	ldr	r1, [pc, #124]	; (8009c90 <pbuf_free+0x108>)
 8009c12:	481d      	ldr	r0, [pc, #116]	; (8009c88 <pbuf_free+0x100>)
 8009c14:	f008 fb42 	bl	801229c <iprintf>
        pc->custom_free_function(p);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
 8009c20:	e01d      	b.n	8009c5e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d104      	bne.n	8009c32 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	2008      	movs	r0, #8
 8009c2c:	f7ff f956 	bl	8008edc <memp_free>
 8009c30:	e015      	b.n	8009c5e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d104      	bne.n	8009c42 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	2007      	movs	r0, #7
 8009c3c:	f7ff f94e 	bl	8008edc <memp_free>
 8009c40:	e00d      	b.n	8009c5e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <pbuf_free+0xc8>
          mem_free(p);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe fde1 	bl	8008810 <mem_free>
 8009c4e:	e006      	b.n	8009c5e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009c50:	4b0b      	ldr	r3, [pc, #44]	; (8009c80 <pbuf_free+0xf8>)
 8009c52:	f240 320f 	movw	r2, #783	; 0x30f
 8009c56:	490f      	ldr	r1, [pc, #60]	; (8009c94 <pbuf_free+0x10c>)
 8009c58:	480b      	ldr	r0, [pc, #44]	; (8009c88 <pbuf_free+0x100>)
 8009c5a:	f008 fb1f 	bl	801229c <iprintf>
        }
      }
      count++;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	3301      	adds	r3, #1
 8009c62:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	607b      	str	r3, [r7, #4]
 8009c68:	e001      	b.n	8009c6e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d19f      	bne.n	8009bb4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	080135ac 	.word	0x080135ac
 8009c84:	08013710 	.word	0x08013710
 8009c88:	0801360c 	.word	0x0801360c
 8009c8c:	0801373c 	.word	0x0801373c
 8009c90:	08013754 	.word	0x08013754
 8009c94:	08013778 	.word	0x08013778

08009c98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009ca4:	e005      	b.n	8009cb2 <pbuf_clen+0x1a>
    ++len;
 8009ca6:	89fb      	ldrh	r3, [r7, #14]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1f6      	bne.n	8009ca6 <pbuf_clen+0xe>
  }
  return len;
 8009cb8:	89fb      	ldrh	r3, [r7, #14]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
	...

08009cc8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d010      	beq.n	8009cf8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7b9b      	ldrb	r3, [r3, #14]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	7b9b      	ldrb	r3, [r3, #14]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <pbuf_ref+0x30>
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <pbuf_ref+0x38>)
 8009cec:	f240 3242 	movw	r2, #834	; 0x342
 8009cf0:	4904      	ldr	r1, [pc, #16]	; (8009d04 <pbuf_ref+0x3c>)
 8009cf2:	4805      	ldr	r0, [pc, #20]	; (8009d08 <pbuf_ref+0x40>)
 8009cf4:	f008 fad2 	bl	801229c <iprintf>
  }
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	080135ac 	.word	0x080135ac
 8009d04:	0801378c 	.word	0x0801378c
 8009d08:	0801360c 	.word	0x0801360c

08009d0c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <pbuf_cat+0x16>
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d107      	bne.n	8009d32 <pbuf_cat+0x26>
 8009d22:	4b20      	ldr	r3, [pc, #128]	; (8009da4 <pbuf_cat+0x98>)
 8009d24:	f240 3259 	movw	r2, #857	; 0x359
 8009d28:	491f      	ldr	r1, [pc, #124]	; (8009da8 <pbuf_cat+0x9c>)
 8009d2a:	4820      	ldr	r0, [pc, #128]	; (8009dac <pbuf_cat+0xa0>)
 8009d2c:	f008 fab6 	bl	801229c <iprintf>
 8009d30:	e034      	b.n	8009d9c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	e00a      	b.n	8009d4e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	891a      	ldrh	r2, [r3, #8]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	891b      	ldrh	r3, [r3, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1f0      	bne.n	8009d38 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	891a      	ldrh	r2, [r3, #8]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	895b      	ldrh	r3, [r3, #10]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d006      	beq.n	8009d70 <pbuf_cat+0x64>
 8009d62:	4b10      	ldr	r3, [pc, #64]	; (8009da4 <pbuf_cat+0x98>)
 8009d64:	f240 3262 	movw	r2, #866	; 0x362
 8009d68:	4911      	ldr	r1, [pc, #68]	; (8009db0 <pbuf_cat+0xa4>)
 8009d6a:	4810      	ldr	r0, [pc, #64]	; (8009dac <pbuf_cat+0xa0>)
 8009d6c:	f008 fa96 	bl	801229c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d006      	beq.n	8009d86 <pbuf_cat+0x7a>
 8009d78:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <pbuf_cat+0x98>)
 8009d7a:	f240 3263 	movw	r2, #867	; 0x363
 8009d7e:	490d      	ldr	r1, [pc, #52]	; (8009db4 <pbuf_cat+0xa8>)
 8009d80:	480a      	ldr	r0, [pc, #40]	; (8009dac <pbuf_cat+0xa0>)
 8009d82:	f008 fa8b 	bl	801229c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	891a      	ldrh	r2, [r3, #8]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	891b      	ldrh	r3, [r3, #8]
 8009d8e:	4413      	add	r3, r2
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	080135ac 	.word	0x080135ac
 8009da8:	080137a0 	.word	0x080137a0
 8009dac:	0801360c 	.word	0x0801360c
 8009db0:	080137d8 	.word	0x080137d8
 8009db4:	08013808 	.word	0x08013808

08009db8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <pbuf_copy+0x2a>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <pbuf_copy+0x2a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	891a      	ldrh	r2, [r3, #8]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	891b      	ldrh	r3, [r3, #8]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d209      	bcs.n	8009df6 <pbuf_copy+0x3e>
 8009de2:	4b57      	ldr	r3, [pc, #348]	; (8009f40 <pbuf_copy+0x188>)
 8009de4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009de8:	4956      	ldr	r1, [pc, #344]	; (8009f44 <pbuf_copy+0x18c>)
 8009dea:	4857      	ldr	r0, [pc, #348]	; (8009f48 <pbuf_copy+0x190>)
 8009dec:	f008 fa56 	bl	801229c <iprintf>
 8009df0:	f06f 030f 	mvn.w	r3, #15
 8009df4:	e09f      	b.n	8009f36 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	895b      	ldrh	r3, [r3, #10]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	895b      	ldrh	r3, [r3, #10]
 8009e04:	4619      	mov	r1, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1acb      	subs	r3, r1, r3
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d306      	bcc.n	8009e1c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	895b      	ldrh	r3, [r3, #10]
 8009e12:	461a      	mov	r2, r3
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	e005      	b.n	8009e28 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	895b      	ldrh	r3, [r3, #10]
 8009e20:	461a      	mov	r2, r3
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	18d0      	adds	r0, r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	4413      	add	r3, r2
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	f008 fc09 	bl	8012652 <memcpy>
    offset_to += len;
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	895b      	ldrh	r3, [r3, #10]
 8009e54:	461a      	mov	r2, r3
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d906      	bls.n	8009e6a <pbuf_copy+0xb2>
 8009e5c:	4b38      	ldr	r3, [pc, #224]	; (8009f40 <pbuf_copy+0x188>)
 8009e5e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009e62:	493a      	ldr	r1, [pc, #232]	; (8009f4c <pbuf_copy+0x194>)
 8009e64:	4838      	ldr	r0, [pc, #224]	; (8009f48 <pbuf_copy+0x190>)
 8009e66:	f008 fa19 	bl	801229c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	895b      	ldrh	r3, [r3, #10]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d906      	bls.n	8009e84 <pbuf_copy+0xcc>
 8009e76:	4b32      	ldr	r3, [pc, #200]	; (8009f40 <pbuf_copy+0x188>)
 8009e78:	f240 32da 	movw	r2, #986	; 0x3da
 8009e7c:	4934      	ldr	r1, [pc, #208]	; (8009f50 <pbuf_copy+0x198>)
 8009e7e:	4832      	ldr	r0, [pc, #200]	; (8009f48 <pbuf_copy+0x190>)
 8009e80:	f008 fa0c 	bl	801229c <iprintf>
    if (offset_from >= p_from->len) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	895b      	ldrh	r3, [r3, #10]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d304      	bcc.n	8009e9a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	895b      	ldrh	r3, [r3, #10]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d114      	bne.n	8009ed0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10c      	bne.n	8009ed0 <pbuf_copy+0x118>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d009      	beq.n	8009ed0 <pbuf_copy+0x118>
 8009ebc:	4b20      	ldr	r3, [pc, #128]	; (8009f40 <pbuf_copy+0x188>)
 8009ebe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009ec2:	4924      	ldr	r1, [pc, #144]	; (8009f54 <pbuf_copy+0x19c>)
 8009ec4:	4820      	ldr	r0, [pc, #128]	; (8009f48 <pbuf_copy+0x190>)
 8009ec6:	f008 f9e9 	bl	801229c <iprintf>
 8009eca:	f06f 030f 	mvn.w	r3, #15
 8009ece:	e032      	b.n	8009f36 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d013      	beq.n	8009efe <pbuf_copy+0x146>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	895a      	ldrh	r2, [r3, #10]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	891b      	ldrh	r3, [r3, #8]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d10d      	bne.n	8009efe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d009      	beq.n	8009efe <pbuf_copy+0x146>
 8009eea:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <pbuf_copy+0x188>)
 8009eec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009ef0:	4919      	ldr	r1, [pc, #100]	; (8009f58 <pbuf_copy+0x1a0>)
 8009ef2:	4815      	ldr	r0, [pc, #84]	; (8009f48 <pbuf_copy+0x190>)
 8009ef4:	f008 f9d2 	bl	801229c <iprintf>
 8009ef8:	f06f 0305 	mvn.w	r3, #5
 8009efc:	e01b      	b.n	8009f36 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d013      	beq.n	8009f2c <pbuf_copy+0x174>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	895a      	ldrh	r2, [r3, #10]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	891b      	ldrh	r3, [r3, #8]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d10d      	bne.n	8009f2c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <pbuf_copy+0x174>
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <pbuf_copy+0x188>)
 8009f1a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009f1e:	490e      	ldr	r1, [pc, #56]	; (8009f58 <pbuf_copy+0x1a0>)
 8009f20:	4809      	ldr	r0, [pc, #36]	; (8009f48 <pbuf_copy+0x190>)
 8009f22:	f008 f9bb 	bl	801229c <iprintf>
 8009f26:	f06f 0305 	mvn.w	r3, #5
 8009f2a:	e004      	b.n	8009f36 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f47f af61 	bne.w	8009df6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	080135ac 	.word	0x080135ac
 8009f44:	08013854 	.word	0x08013854
 8009f48:	0801360c 	.word	0x0801360c
 8009f4c:	08013884 	.word	0x08013884
 8009f50:	0801389c 	.word	0x0801389c
 8009f54:	080138b8 	.word	0x080138b8
 8009f58:	080138c8 	.word	0x080138c8

08009f5c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4611      	mov	r1, r2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	80fb      	strh	r3, [r7, #6]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d108      	bne.n	8009f92 <pbuf_copy_partial+0x36>
 8009f80:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <pbuf_copy_partial+0xd4>)
 8009f82:	f240 420a 	movw	r2, #1034	; 0x40a
 8009f86:	492b      	ldr	r1, [pc, #172]	; (800a034 <pbuf_copy_partial+0xd8>)
 8009f88:	482b      	ldr	r0, [pc, #172]	; (800a038 <pbuf_copy_partial+0xdc>)
 8009f8a:	f008 f987 	bl	801229c <iprintf>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e04a      	b.n	800a028 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d108      	bne.n	8009faa <pbuf_copy_partial+0x4e>
 8009f98:	4b25      	ldr	r3, [pc, #148]	; (800a030 <pbuf_copy_partial+0xd4>)
 8009f9a:	f240 420b 	movw	r2, #1035	; 0x40b
 8009f9e:	4927      	ldr	r1, [pc, #156]	; (800a03c <pbuf_copy_partial+0xe0>)
 8009fa0:	4825      	ldr	r0, [pc, #148]	; (800a038 <pbuf_copy_partial+0xdc>)
 8009fa2:	f008 f97b 	bl	801229c <iprintf>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e03e      	b.n	800a028 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	61fb      	str	r3, [r7, #28]
 8009fae:	e034      	b.n	800a01a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009fb0:	88bb      	ldrh	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <pbuf_copy_partial+0x70>
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	895b      	ldrh	r3, [r3, #10]
 8009fba:	88ba      	ldrh	r2, [r7, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d305      	bcc.n	8009fcc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	895b      	ldrh	r3, [r3, #10]
 8009fc4:	88ba      	ldrh	r2, [r7, #4]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	80bb      	strh	r3, [r7, #4]
 8009fca:	e023      	b.n	800a014 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	895a      	ldrh	r2, [r3, #10]
 8009fd0:	88bb      	ldrh	r3, [r7, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009fd6:	8b3a      	ldrh	r2, [r7, #24]
 8009fd8:	88fb      	ldrh	r3, [r7, #6]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d901      	bls.n	8009fe2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009fe2:	8b7b      	ldrh	r3, [r7, #26]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	18d0      	adds	r0, r2, r3
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	88bb      	ldrh	r3, [r7, #4]
 8009fee:	4413      	add	r3, r2
 8009ff0:	8b3a      	ldrh	r2, [r7, #24]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f008 fb2d 	bl	8012652 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009ff8:	8afa      	ldrh	r2, [r7, #22]
 8009ffa:	8b3b      	ldrh	r3, [r7, #24]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a000:	8b7a      	ldrh	r2, [r7, #26]
 800a002:	8b3b      	ldrh	r3, [r7, #24]
 800a004:	4413      	add	r3, r2
 800a006:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a008:	88fa      	ldrh	r2, [r7, #6]
 800a00a:	8b3b      	ldrh	r3, [r7, #24]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <pbuf_copy_partial+0xca>
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1c4      	bne.n	8009fb0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a026:	8afb      	ldrh	r3, [r7, #22]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3720      	adds	r7, #32
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	080135ac 	.word	0x080135ac
 800a034:	080138f4 	.word	0x080138f4
 800a038:	0801360c 	.word	0x0801360c
 800a03c:	08013914 	.word	0x08013914

0800a040 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	603a      	str	r2, [r7, #0]
 800a04a:	71fb      	strb	r3, [r7, #7]
 800a04c:	460b      	mov	r3, r1
 800a04e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	8919      	ldrh	r1, [r3, #8]
 800a054:	88ba      	ldrh	r2, [r7, #4]
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fab1 	bl	80095c0 <pbuf_alloc>
 800a05e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <pbuf_clone+0x2a>
    return NULL;
 800a066:	2300      	movs	r3, #0
 800a068:	e011      	b.n	800a08e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff fea3 	bl	8009db8 <pbuf_copy>
 800a072:	4603      	mov	r3, r0
 800a074:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a076:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d006      	beq.n	800a08c <pbuf_clone+0x4c>
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <pbuf_clone+0x58>)
 800a080:	f240 5224 	movw	r2, #1316	; 0x524
 800a084:	4905      	ldr	r1, [pc, #20]	; (800a09c <pbuf_clone+0x5c>)
 800a086:	4806      	ldr	r0, [pc, #24]	; (800a0a0 <pbuf_clone+0x60>)
 800a088:	f008 f908 	bl	801229c <iprintf>
  return q;
 800a08c:	68fb      	ldr	r3, [r7, #12]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	080135ac 	.word	0x080135ac
 800a09c:	08013a20 	.word	0x08013a20
 800a0a0:	0801360c 	.word	0x0801360c

0800a0a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a0a8:	f007 ffe6 	bl	8012078 <rand>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	4b01      	ldr	r3, [pc, #4]	; (800a0c4 <tcp_init+0x20>)
 800a0be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a0c0:	bf00      	nop
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000020 	.word	0x20000020

0800a0c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7d1b      	ldrb	r3, [r3, #20]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d105      	bne.n	800a0e4 <tcp_free+0x1c>
 800a0d8:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <tcp_free+0x2c>)
 800a0da:	22d4      	movs	r2, #212	; 0xd4
 800a0dc:	4906      	ldr	r1, [pc, #24]	; (800a0f8 <tcp_free+0x30>)
 800a0de:	4807      	ldr	r0, [pc, #28]	; (800a0fc <tcp_free+0x34>)
 800a0e0:	f008 f8dc 	bl	801229c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	f7fe fef8 	bl	8008edc <memp_free>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	08013aac 	.word	0x08013aac
 800a0f8:	08013adc 	.word	0x08013adc
 800a0fc:	08013af0 	.word	0x08013af0

0800a100 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	7d1b      	ldrb	r3, [r3, #20]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d105      	bne.n	800a11c <tcp_free_listen+0x1c>
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <tcp_free_listen+0x2c>)
 800a112:	22df      	movs	r2, #223	; 0xdf
 800a114:	4906      	ldr	r1, [pc, #24]	; (800a130 <tcp_free_listen+0x30>)
 800a116:	4807      	ldr	r0, [pc, #28]	; (800a134 <tcp_free_listen+0x34>)
 800a118:	f008 f8c0 	bl	801229c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a11c:	6879      	ldr	r1, [r7, #4]
 800a11e:	2002      	movs	r0, #2
 800a120:	f7fe fedc 	bl	8008edc <memp_free>
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	08013aac 	.word	0x08013aac
 800a130:	08013b18 	.word	0x08013b18
 800a134:	08013af0 	.word	0x08013af0

0800a138 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a13c:	f000 fea2 	bl	800ae84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <tcp_tmr+0x28>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	3301      	adds	r3, #1
 800a146:	b2da      	uxtb	r2, r3
 800a148:	4b05      	ldr	r3, [pc, #20]	; (800a160 <tcp_tmr+0x28>)
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <tcp_tmr+0x28>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a158:	f000 fb54 	bl	800a804 <tcp_slowtmr>
  }
}
 800a15c:	bf00      	nop
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20008465 	.word	0x20008465

0800a164 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d105      	bne.n	800a180 <tcp_remove_listener+0x1c>
 800a174:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <tcp_remove_listener+0x48>)
 800a176:	22ff      	movs	r2, #255	; 0xff
 800a178:	490d      	ldr	r1, [pc, #52]	; (800a1b0 <tcp_remove_listener+0x4c>)
 800a17a:	480e      	ldr	r0, [pc, #56]	; (800a1b4 <tcp_remove_listener+0x50>)
 800a17c:	f008 f88e 	bl	801229c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	e00a      	b.n	800a19c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d102      	bne.n	800a196 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f1      	bne.n	800a186 <tcp_remove_listener+0x22>
    }
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	08013aac 	.word	0x08013aac
 800a1b0:	08013b34 	.word	0x08013b34
 800a1b4:	08013af0 	.word	0x08013af0

0800a1b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <tcp_listen_closed+0x1c>
 800a1c6:	4b14      	ldr	r3, [pc, #80]	; (800a218 <tcp_listen_closed+0x60>)
 800a1c8:	f240 1211 	movw	r2, #273	; 0x111
 800a1cc:	4913      	ldr	r1, [pc, #76]	; (800a21c <tcp_listen_closed+0x64>)
 800a1ce:	4814      	ldr	r0, [pc, #80]	; (800a220 <tcp_listen_closed+0x68>)
 800a1d0:	f008 f864 	bl	801229c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7d1b      	ldrb	r3, [r3, #20]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d006      	beq.n	800a1ea <tcp_listen_closed+0x32>
 800a1dc:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <tcp_listen_closed+0x60>)
 800a1de:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a1e2:	4910      	ldr	r1, [pc, #64]	; (800a224 <tcp_listen_closed+0x6c>)
 800a1e4:	480e      	ldr	r0, [pc, #56]	; (800a220 <tcp_listen_closed+0x68>)
 800a1e6:	f008 f859 	bl	801229c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e00b      	b.n	800a208 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a1f0:	4a0d      	ldr	r2, [pc, #52]	; (800a228 <tcp_listen_closed+0x70>)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ffb1 	bl	800a164 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d9f0      	bls.n	800a1f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	08013aac 	.word	0x08013aac
 800a21c:	08013b5c 	.word	0x08013b5c
 800a220:	08013af0 	.word	0x08013af0
 800a224:	08013b68 	.word	0x08013b68
 800a228:	08015ab4 	.word	0x08015ab4

0800a22c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a22c:	b5b0      	push	{r4, r5, r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af04      	add	r7, sp, #16
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <tcp_close_shutdown+0x20>
 800a23e:	4b63      	ldr	r3, [pc, #396]	; (800a3cc <tcp_close_shutdown+0x1a0>)
 800a240:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a244:	4962      	ldr	r1, [pc, #392]	; (800a3d0 <tcp_close_shutdown+0x1a4>)
 800a246:	4863      	ldr	r0, [pc, #396]	; (800a3d4 <tcp_close_shutdown+0x1a8>)
 800a248:	f008 f828 	bl	801229c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d066      	beq.n	800a320 <tcp_close_shutdown+0xf4>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	2b04      	cmp	r3, #4
 800a258:	d003      	beq.n	800a262 <tcp_close_shutdown+0x36>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7d1b      	ldrb	r3, [r3, #20]
 800a25e:	2b07      	cmp	r3, #7
 800a260:	d15e      	bne.n	800a320 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a266:	2b00      	cmp	r3, #0
 800a268:	d104      	bne.n	800a274 <tcp_close_shutdown+0x48>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a26e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a272:	d055      	beq.n	800a320 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	8b5b      	ldrh	r3, [r3, #26]
 800a278:	f003 0310 	and.w	r3, r3, #16
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <tcp_close_shutdown+0x62>
 800a280:	4b52      	ldr	r3, [pc, #328]	; (800a3cc <tcp_close_shutdown+0x1a0>)
 800a282:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a286:	4954      	ldr	r1, [pc, #336]	; (800a3d8 <tcp_close_shutdown+0x1ac>)
 800a288:	4852      	ldr	r0, [pc, #328]	; (800a3d4 <tcp_close_shutdown+0x1a8>)
 800a28a:	f008 f807 	bl	801229c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a296:	687d      	ldr	r5, [r7, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	8ad2      	ldrh	r2, [r2, #22]
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	8b09      	ldrh	r1, [r1, #24]
 800a2a4:	9102      	str	r1, [sp, #8]
 800a2a6:	9201      	str	r2, [sp, #4]
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f004 fe91 	bl	800efd8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f8c6 	bl	800b448 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a2bc:	4b47      	ldr	r3, [pc, #284]	; (800a3dc <tcp_close_shutdown+0x1b0>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d105      	bne.n	800a2d2 <tcp_close_shutdown+0xa6>
 800a2c6:	4b45      	ldr	r3, [pc, #276]	; (800a3dc <tcp_close_shutdown+0x1b0>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	4a43      	ldr	r2, [pc, #268]	; (800a3dc <tcp_close_shutdown+0x1b0>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	e013      	b.n	800a2fa <tcp_close_shutdown+0xce>
 800a2d2:	4b42      	ldr	r3, [pc, #264]	; (800a3dc <tcp_close_shutdown+0x1b0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	e00c      	b.n	800a2f4 <tcp_close_shutdown+0xc8>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d104      	bne.n	800a2ee <tcp_close_shutdown+0xc2>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68da      	ldr	r2, [r3, #12]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	60da      	str	r2, [r3, #12]
 800a2ec:	e005      	b.n	800a2fa <tcp_close_shutdown+0xce>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1ef      	bne.n	800a2da <tcp_close_shutdown+0xae>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	60da      	str	r2, [r3, #12]
 800a300:	4b37      	ldr	r3, [pc, #220]	; (800a3e0 <tcp_close_shutdown+0x1b4>)
 800a302:	2201      	movs	r2, #1
 800a304:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a306:	4b37      	ldr	r3, [pc, #220]	; (800a3e4 <tcp_close_shutdown+0x1b8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d102      	bne.n	800a316 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a310:	f003 fd5e 	bl	800ddd0 <tcp_trigger_input_pcb_close>
 800a314:	e002      	b.n	800a31c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fed6 	bl	800a0c8 <tcp_free>
      }
      return ERR_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e050      	b.n	800a3c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7d1b      	ldrb	r3, [r3, #20]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d03b      	beq.n	800a3a0 <tcp_close_shutdown+0x174>
 800a328:	2b02      	cmp	r3, #2
 800a32a:	dc44      	bgt.n	800a3b6 <tcp_close_shutdown+0x18a>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <tcp_close_shutdown+0x10a>
 800a330:	2b01      	cmp	r3, #1
 800a332:	d02a      	beq.n	800a38a <tcp_close_shutdown+0x15e>
 800a334:	e03f      	b.n	800a3b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8adb      	ldrh	r3, [r3, #22]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d021      	beq.n	800a382 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a33e:	4b2a      	ldr	r3, [pc, #168]	; (800a3e8 <tcp_close_shutdown+0x1bc>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	429a      	cmp	r2, r3
 800a346:	d105      	bne.n	800a354 <tcp_close_shutdown+0x128>
 800a348:	4b27      	ldr	r3, [pc, #156]	; (800a3e8 <tcp_close_shutdown+0x1bc>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	4a26      	ldr	r2, [pc, #152]	; (800a3e8 <tcp_close_shutdown+0x1bc>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e013      	b.n	800a37c <tcp_close_shutdown+0x150>
 800a354:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <tcp_close_shutdown+0x1bc>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60bb      	str	r3, [r7, #8]
 800a35a:	e00c      	b.n	800a376 <tcp_close_shutdown+0x14a>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	429a      	cmp	r2, r3
 800a364:	d104      	bne.n	800a370 <tcp_close_shutdown+0x144>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	60da      	str	r2, [r3, #12]
 800a36e:	e005      	b.n	800a37c <tcp_close_shutdown+0x150>
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1ef      	bne.n	800a35c <tcp_close_shutdown+0x130>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff fea0 	bl	800a0c8 <tcp_free>
      break;
 800a388:	e01a      	b.n	800a3c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff ff14 	bl	800a1b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	4816      	ldr	r0, [pc, #88]	; (800a3ec <tcp_close_shutdown+0x1c0>)
 800a394:	f001 f8a8 	bl	800b4e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff feb1 	bl	800a100 <tcp_free_listen>
      break;
 800a39e:	e00f      	b.n	800a3c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	480e      	ldr	r0, [pc, #56]	; (800a3dc <tcp_close_shutdown+0x1b0>)
 800a3a4:	f001 f8a0 	bl	800b4e8 <tcp_pcb_remove>
 800a3a8:	4b0d      	ldr	r3, [pc, #52]	; (800a3e0 <tcp_close_shutdown+0x1b4>)
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff fe8a 	bl	800a0c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a3b4:	e004      	b.n	800a3c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f81a 	bl	800a3f0 <tcp_close_shutdown_fin>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	e000      	b.n	800a3c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08013aac 	.word	0x08013aac
 800a3d0:	08013b80 	.word	0x08013b80
 800a3d4:	08013af0 	.word	0x08013af0
 800a3d8:	08013ba0 	.word	0x08013ba0
 800a3dc:	2000845c 	.word	0x2000845c
 800a3e0:	20008464 	.word	0x20008464
 800a3e4:	2000849c 	.word	0x2000849c
 800a3e8:	20008454 	.word	0x20008454
 800a3ec:	20008458 	.word	0x20008458

0800a3f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <tcp_close_shutdown_fin+0x1c>
 800a3fe:	4b2e      	ldr	r3, [pc, #184]	; (800a4b8 <tcp_close_shutdown_fin+0xc8>)
 800a400:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a404:	492d      	ldr	r1, [pc, #180]	; (800a4bc <tcp_close_shutdown_fin+0xcc>)
 800a406:	482e      	ldr	r0, [pc, #184]	; (800a4c0 <tcp_close_shutdown_fin+0xd0>)
 800a408:	f007 ff48 	bl	801229c <iprintf>

  switch (pcb->state) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	7d1b      	ldrb	r3, [r3, #20]
 800a410:	2b07      	cmp	r3, #7
 800a412:	d020      	beq.n	800a456 <tcp_close_shutdown_fin+0x66>
 800a414:	2b07      	cmp	r3, #7
 800a416:	dc2b      	bgt.n	800a470 <tcp_close_shutdown_fin+0x80>
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d002      	beq.n	800a422 <tcp_close_shutdown_fin+0x32>
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d00d      	beq.n	800a43c <tcp_close_shutdown_fin+0x4c>
 800a420:	e026      	b.n	800a470 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f003 fee6 	bl	800e1f4 <tcp_send_fin>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11f      	bne.n	800a474 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2205      	movs	r2, #5
 800a438:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a43a:	e01b      	b.n	800a474 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f003 fed9 	bl	800e1f4 <tcp_send_fin>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d114      	bne.n	800a478 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2205      	movs	r2, #5
 800a452:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a454:	e010      	b.n	800a478 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f003 fecc 	bl	800e1f4 <tcp_send_fin>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2209      	movs	r2, #9
 800a46c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a46e:	e005      	b.n	800a47c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	e01c      	b.n	800a4ae <tcp_close_shutdown_fin+0xbe>
      break;
 800a474:	bf00      	nop
 800a476:	e002      	b.n	800a47e <tcp_close_shutdown_fin+0x8e>
      break;
 800a478:	bf00      	nop
 800a47a:	e000      	b.n	800a47e <tcp_close_shutdown_fin+0x8e>
      break;
 800a47c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d103      	bne.n	800a48e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f003 fff2 	bl	800e470 <tcp_output>
 800a48c:	e00d      	b.n	800a4aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a496:	d108      	bne.n	800a4aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	8b5b      	ldrh	r3, [r3, #26]
 800a49c:	f043 0308 	orr.w	r3, r3, #8
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e001      	b.n	800a4ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	08013aac 	.word	0x08013aac
 800a4bc:	08013b5c 	.word	0x08013b5c
 800a4c0:	08013af0 	.word	0x08013af0

0800a4c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <tcp_close+0x22>
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <tcp_close+0x4c>)
 800a4d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a4d8:	490e      	ldr	r1, [pc, #56]	; (800a514 <tcp_close+0x50>)
 800a4da:	480f      	ldr	r0, [pc, #60]	; (800a518 <tcp_close+0x54>)
 800a4dc:	f007 fede 	bl	801229c <iprintf>
 800a4e0:	f06f 030f 	mvn.w	r3, #15
 800a4e4:	e00f      	b.n	800a506 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d006      	beq.n	800a4fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	8b5b      	ldrh	r3, [r3, #26]
 800a4f2:	f043 0310 	orr.w	r3, r3, #16
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fe94 	bl	800a22c <tcp_close_shutdown>
 800a504:	4603      	mov	r3, r0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	08013aac 	.word	0x08013aac
 800a514:	08013bbc 	.word	0x08013bbc
 800a518:	08013af0 	.word	0x08013af0

0800a51c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08e      	sub	sp, #56	; 0x38
 800a520:	af04      	add	r7, sp, #16
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d107      	bne.n	800a53c <tcp_abandon+0x20>
 800a52c:	4b52      	ldr	r3, [pc, #328]	; (800a678 <tcp_abandon+0x15c>)
 800a52e:	f240 223d 	movw	r2, #573	; 0x23d
 800a532:	4952      	ldr	r1, [pc, #328]	; (800a67c <tcp_abandon+0x160>)
 800a534:	4852      	ldr	r0, [pc, #328]	; (800a680 <tcp_abandon+0x164>)
 800a536:	f007 feb1 	bl	801229c <iprintf>
 800a53a:	e099      	b.n	800a670 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7d1b      	ldrb	r3, [r3, #20]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d106      	bne.n	800a552 <tcp_abandon+0x36>
 800a544:	4b4c      	ldr	r3, [pc, #304]	; (800a678 <tcp_abandon+0x15c>)
 800a546:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a54a:	494e      	ldr	r1, [pc, #312]	; (800a684 <tcp_abandon+0x168>)
 800a54c:	484c      	ldr	r0, [pc, #304]	; (800a680 <tcp_abandon+0x164>)
 800a54e:	f007 fea5 	bl	801229c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	7d1b      	ldrb	r3, [r3, #20]
 800a556:	2b0a      	cmp	r3, #10
 800a558:	d107      	bne.n	800a56a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	484a      	ldr	r0, [pc, #296]	; (800a688 <tcp_abandon+0x16c>)
 800a55e:	f000 ffc3 	bl	800b4e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7ff fdb0 	bl	800a0c8 <tcp_free>
 800a568:	e082      	b.n	800a670 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a576:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a584:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	7d1b      	ldrb	r3, [r3, #20]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d126      	bne.n	800a5e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	8adb      	ldrh	r3, [r3, #22]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d02e      	beq.n	800a5fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a59c:	4b3b      	ldr	r3, [pc, #236]	; (800a68c <tcp_abandon+0x170>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d105      	bne.n	800a5b2 <tcp_abandon+0x96>
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <tcp_abandon+0x170>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	4a37      	ldr	r2, [pc, #220]	; (800a68c <tcp_abandon+0x170>)
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	e013      	b.n	800a5da <tcp_abandon+0xbe>
 800a5b2:	4b36      	ldr	r3, [pc, #216]	; (800a68c <tcp_abandon+0x170>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	61fb      	str	r3, [r7, #28]
 800a5b8:	e00c      	b.n	800a5d4 <tcp_abandon+0xb8>
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d104      	bne.n	800a5ce <tcp_abandon+0xb2>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	60da      	str	r2, [r3, #12]
 800a5cc:	e005      	b.n	800a5da <tcp_abandon+0xbe>
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1ef      	bne.n	800a5ba <tcp_abandon+0x9e>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	60da      	str	r2, [r3, #12]
 800a5e0:	e00b      	b.n	800a5fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	8adb      	ldrh	r3, [r3, #22]
 800a5ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	4828      	ldr	r0, [pc, #160]	; (800a690 <tcp_abandon+0x174>)
 800a5f0:	f000 ff7a 	bl	800b4e8 <tcp_pcb_remove>
 800a5f4:	4b27      	ldr	r3, [pc, #156]	; (800a694 <tcp_abandon+0x178>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fd1c 	bl	800b044 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fd13 	bl	800b044 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fd0a 	bl	800b044 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00e      	beq.n	800a654 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3304      	adds	r3, #4
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	8b12      	ldrh	r2, [r2, #24]
 800a640:	9202      	str	r2, [sp, #8]
 800a642:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a644:	9201      	str	r2, [sp, #4]
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	460b      	mov	r3, r1
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	69b9      	ldr	r1, [r7, #24]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f004 fcc2 	bl	800efd8 <tcp_rst>
    }
    last_state = pcb->state;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7d1b      	ldrb	r3, [r3, #20]
 800a658:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff fd34 	bl	800a0c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <tcp_abandon+0x154>
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f06f 010c 	mvn.w	r1, #12
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	4798      	blx	r3
  }
}
 800a670:	3728      	adds	r7, #40	; 0x28
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	08013aac 	.word	0x08013aac
 800a67c:	08013bf0 	.word	0x08013bf0
 800a680:	08013af0 	.word	0x08013af0
 800a684:	08013c0c 	.word	0x08013c0c
 800a688:	20008460 	.word	0x20008460
 800a68c:	20008454 	.word	0x20008454
 800a690:	2000845c 	.word	0x2000845c
 800a694:	20008464 	.word	0x20008464

0800a698 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff ff3a 	bl	800a51c <tcp_abandon>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <tcp_update_rcv_ann_wnd+0x1c>
 800a6be:	4b25      	ldr	r3, [pc, #148]	; (800a754 <tcp_update_rcv_ann_wnd+0xa4>)
 800a6c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a6c4:	4924      	ldr	r1, [pc, #144]	; (800a758 <tcp_update_rcv_ann_wnd+0xa8>)
 800a6c6:	4825      	ldr	r0, [pc, #148]	; (800a75c <tcp_update_rcv_ann_wnd+0xac>)
 800a6c8:	f007 fde8 	bl	801229c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a6d4:	4413      	add	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a6e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a6e4:	bf28      	it	cs
 800a6e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a6ea:	b292      	uxth	r2, r2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	db08      	blt.n	800a708 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	e020      	b.n	800a74a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	dd03      	ble.n	800a71e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a71c:	e014      	b.n	800a748 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a730:	d306      	bcc.n	800a740 <tcp_update_rcv_ann_wnd+0x90>
 800a732:	4b08      	ldr	r3, [pc, #32]	; (800a754 <tcp_update_rcv_ann_wnd+0xa4>)
 800a734:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a738:	4909      	ldr	r1, [pc, #36]	; (800a760 <tcp_update_rcv_ann_wnd+0xb0>)
 800a73a:	4808      	ldr	r0, [pc, #32]	; (800a75c <tcp_update_rcv_ann_wnd+0xac>)
 800a73c:	f007 fdae 	bl	801229c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	b29a      	uxth	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a748:	2300      	movs	r3, #0
  }
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	08013aac 	.word	0x08013aac
 800a758:	08013d08 	.word	0x08013d08
 800a75c:	08013af0 	.word	0x08013af0
 800a760:	08013d2c 	.word	0x08013d2c

0800a764 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d107      	bne.n	800a786 <tcp_recved+0x22>
 800a776:	4b1f      	ldr	r3, [pc, #124]	; (800a7f4 <tcp_recved+0x90>)
 800a778:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a77c:	491e      	ldr	r1, [pc, #120]	; (800a7f8 <tcp_recved+0x94>)
 800a77e:	481f      	ldr	r0, [pc, #124]	; (800a7fc <tcp_recved+0x98>)
 800a780:	f007 fd8c 	bl	801229c <iprintf>
 800a784:	e032      	b.n	800a7ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7d1b      	ldrb	r3, [r3, #20]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d106      	bne.n	800a79c <tcp_recved+0x38>
 800a78e:	4b19      	ldr	r3, [pc, #100]	; (800a7f4 <tcp_recved+0x90>)
 800a790:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a794:	491a      	ldr	r1, [pc, #104]	; (800a800 <tcp_recved+0x9c>)
 800a796:	4819      	ldr	r0, [pc, #100]	; (800a7fc <tcp_recved+0x98>)
 800a798:	f007 fd80 	bl	801229c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7a0:	887b      	ldrh	r3, [r7, #2]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a7a6:	89fb      	ldrh	r3, [r7, #14]
 800a7a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7ac:	d804      	bhi.n	800a7b8 <tcp_recved+0x54>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b2:	89fa      	ldrh	r2, [r7, #14]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d204      	bcs.n	800a7c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a7be:	851a      	strh	r2, [r3, #40]	; 0x28
 800a7c0:	e002      	b.n	800a7c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	89fa      	ldrh	r2, [r7, #14]
 800a7c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff ff71 	bl	800a6b0 <tcp_update_rcv_ann_wnd>
 800a7ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a7d6:	d309      	bcc.n	800a7ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	8b5b      	ldrh	r3, [r3, #26]
 800a7dc:	f043 0302 	orr.w	r3, r3, #2
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f003 fe42 	bl	800e470 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	08013aac 	.word	0x08013aac
 800a7f8:	08013d48 	.word	0x08013d48
 800a7fc:	08013af0 	.word	0x08013af0
 800a800:	08013d60 	.word	0x08013d60

0800a804 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a804:	b5b0      	push	{r4, r5, r7, lr}
 800a806:	b090      	sub	sp, #64	; 0x40
 800a808:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a810:	4b94      	ldr	r3, [pc, #592]	; (800aa64 <tcp_slowtmr+0x260>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3301      	adds	r3, #1
 800a816:	4a93      	ldr	r2, [pc, #588]	; (800aa64 <tcp_slowtmr+0x260>)
 800a818:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a81a:	4b93      	ldr	r3, [pc, #588]	; (800aa68 <tcp_slowtmr+0x264>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	3301      	adds	r3, #1
 800a820:	b2da      	uxtb	r2, r3
 800a822:	4b91      	ldr	r3, [pc, #580]	; (800aa68 <tcp_slowtmr+0x264>)
 800a824:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a82a:	4b90      	ldr	r3, [pc, #576]	; (800aa6c <tcp_slowtmr+0x268>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a830:	e29f      	b.n	800ad72 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	7d1b      	ldrb	r3, [r3, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <tcp_slowtmr+0x44>
 800a83a:	4b8d      	ldr	r3, [pc, #564]	; (800aa70 <tcp_slowtmr+0x26c>)
 800a83c:	f240 42be 	movw	r2, #1214	; 0x4be
 800a840:	498c      	ldr	r1, [pc, #560]	; (800aa74 <tcp_slowtmr+0x270>)
 800a842:	488d      	ldr	r0, [pc, #564]	; (800aa78 <tcp_slowtmr+0x274>)
 800a844:	f007 fd2a 	bl	801229c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84a:	7d1b      	ldrb	r3, [r3, #20]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d106      	bne.n	800a85e <tcp_slowtmr+0x5a>
 800a850:	4b87      	ldr	r3, [pc, #540]	; (800aa70 <tcp_slowtmr+0x26c>)
 800a852:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a856:	4989      	ldr	r1, [pc, #548]	; (800aa7c <tcp_slowtmr+0x278>)
 800a858:	4887      	ldr	r0, [pc, #540]	; (800aa78 <tcp_slowtmr+0x274>)
 800a85a:	f007 fd1f 	bl	801229c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	7d1b      	ldrb	r3, [r3, #20]
 800a862:	2b0a      	cmp	r3, #10
 800a864:	d106      	bne.n	800a874 <tcp_slowtmr+0x70>
 800a866:	4b82      	ldr	r3, [pc, #520]	; (800aa70 <tcp_slowtmr+0x26c>)
 800a868:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a86c:	4984      	ldr	r1, [pc, #528]	; (800aa80 <tcp_slowtmr+0x27c>)
 800a86e:	4882      	ldr	r0, [pc, #520]	; (800aa78 <tcp_slowtmr+0x274>)
 800a870:	f007 fd14 	bl	801229c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	7f9a      	ldrb	r2, [r3, #30]
 800a878:	4b7b      	ldr	r3, [pc, #492]	; (800aa68 <tcp_slowtmr+0x264>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d105      	bne.n	800a88c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a88a:	e272      	b.n	800ad72 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a88c:	4b76      	ldr	r3, [pc, #472]	; (800aa68 <tcp_slowtmr+0x264>)
 800a88e:	781a      	ldrb	r2, [r3, #0]
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	7d1b      	ldrb	r3, [r3, #20]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d10a      	bne.n	800a8be <tcp_slowtmr+0xba>
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d905      	bls.n	800a8be <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8bc:	e11e      	b.n	800aafc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8c4:	2b0b      	cmp	r3, #11
 800a8c6:	d905      	bls.n	800a8d4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8d2:	e113      	b.n	800aafc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d075      	beq.n	800a9ca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d006      	beq.n	800a8f4 <tcp_slowtmr+0xf0>
 800a8e6:	4b62      	ldr	r3, [pc, #392]	; (800aa70 <tcp_slowtmr+0x26c>)
 800a8e8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a8ec:	4965      	ldr	r1, [pc, #404]	; (800aa84 <tcp_slowtmr+0x280>)
 800a8ee:	4862      	ldr	r0, [pc, #392]	; (800aa78 <tcp_slowtmr+0x274>)
 800a8f0:	f007 fcd4 	bl	801229c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <tcp_slowtmr+0x106>
 800a8fc:	4b5c      	ldr	r3, [pc, #368]	; (800aa70 <tcp_slowtmr+0x26c>)
 800a8fe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a902:	4961      	ldr	r1, [pc, #388]	; (800aa88 <tcp_slowtmr+0x284>)
 800a904:	485c      	ldr	r0, [pc, #368]	; (800aa78 <tcp_slowtmr+0x274>)
 800a906:	f007 fcc9 	bl	801229c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a910:	2b0b      	cmp	r3, #11
 800a912:	d905      	bls.n	800a920 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a918:	3301      	adds	r3, #1
 800a91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a91e:	e0ed      	b.n	800aafc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a926:	3b01      	subs	r3, #1
 800a928:	4a58      	ldr	r2, [pc, #352]	; (800aa8c <tcp_slowtmr+0x288>)
 800a92a:	5cd3      	ldrb	r3, [r2, r3]
 800a92c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a934:	7c7a      	ldrb	r2, [r7, #17]
 800a936:	429a      	cmp	r2, r3
 800a938:	d907      	bls.n	800a94a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a940:	3301      	adds	r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a950:	7c7a      	ldrb	r2, [r7, #17]
 800a952:	429a      	cmp	r2, r3
 800a954:	f200 80d2 	bhi.w	800aafc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a958:	2301      	movs	r3, #1
 800a95a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a962:	2b00      	cmp	r3, #0
 800a964:	d108      	bne.n	800a978 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a968:	f004 fc2a 	bl	800f1c0 <tcp_zero_window_probe>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d014      	beq.n	800a99c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a972:	2300      	movs	r3, #0
 800a974:	623b      	str	r3, [r7, #32]
 800a976:	e011      	b.n	800a99c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a97e:	4619      	mov	r1, r3
 800a980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a982:	f003 faef 	bl	800df64 <tcp_split_unsent_seg>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d107      	bne.n	800a99c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a98e:	f003 fd6f 	bl	800e470 <tcp_output>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 80ac 	beq.w	800aafc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9b2:	2b06      	cmp	r3, #6
 800a9b4:	f200 80a2 	bhi.w	800aafc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9be:	3301      	adds	r3, #1
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a9c8:	e098      	b.n	800aafc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	db0f      	blt.n	800a9f4 <tcp_slowtmr+0x1f0>
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d008      	beq.n	800a9f4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	b21a      	sxth	r2, r3
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aa00:	429a      	cmp	r2, r3
 800aa02:	db7b      	blt.n	800aafc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aa04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa06:	f004 f827 	bl	800ea58 <tcp_rexmit_rto_prepare>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d007      	beq.n	800aa20 <tcp_slowtmr+0x21c>
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d171      	bne.n	800aafc <tcp_slowtmr+0x2f8>
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d06d      	beq.n	800aafc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	7d1b      	ldrb	r3, [r3, #20]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d03a      	beq.n	800aa9e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa2e:	2b0c      	cmp	r3, #12
 800aa30:	bf28      	it	cs
 800aa32:	230c      	movcs	r3, #12
 800aa34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa3c:	10db      	asrs	r3, r3, #3
 800aa3e:	b21b      	sxth	r3, r3
 800aa40:	461a      	mov	r2, r3
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa48:	4413      	add	r3, r2
 800aa4a:	7efa      	ldrb	r2, [r7, #27]
 800aa4c:	4910      	ldr	r1, [pc, #64]	; (800aa90 <tcp_slowtmr+0x28c>)
 800aa4e:	5c8a      	ldrb	r2, [r1, r2]
 800aa50:	4093      	lsls	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	dc1a      	bgt.n	800aa94 <tcp_slowtmr+0x290>
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	b21a      	sxth	r2, r3
 800aa62:	e019      	b.n	800aa98 <tcp_slowtmr+0x294>
 800aa64:	20008450 	.word	0x20008450
 800aa68:	20008466 	.word	0x20008466
 800aa6c:	2000845c 	.word	0x2000845c
 800aa70:	08013aac 	.word	0x08013aac
 800aa74:	08013df0 	.word	0x08013df0
 800aa78:	08013af0 	.word	0x08013af0
 800aa7c:	08013e1c 	.word	0x08013e1c
 800aa80:	08013e48 	.word	0x08013e48
 800aa84:	08013e78 	.word	0x08013e78
 800aa88:	08013eac 	.word	0x08013eac
 800aa8c:	08015aac 	.word	0x08015aac
 800aa90:	08015a9c 	.word	0x08015a9c
 800aa94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aab0:	4293      	cmp	r3, r2
 800aab2:	bf28      	it	cs
 800aab4:	4613      	movcs	r3, r2
 800aab6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800aab8:	8a7b      	ldrh	r3, [r7, #18]
 800aaba:	085b      	lsrs	r3, r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d206      	bcs.n	800aae4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800aaf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaf8:	f004 f81e 	bl	800eb38 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	7d1b      	ldrb	r3, [r3, #20]
 800ab00:	2b06      	cmp	r3, #6
 800ab02:	d111      	bne.n	800ab28 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ab04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab06:	8b5b      	ldrh	r3, [r3, #26]
 800ab08:	f003 0310 	and.w	r3, r3, #16
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab10:	4b9d      	ldr	r3, [pc, #628]	; (800ad88 <tcp_slowtmr+0x584>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	6a1b      	ldr	r3, [r3, #32]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b28      	cmp	r3, #40	; 0x28
 800ab1c:	d904      	bls.n	800ab28 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ab1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab22:	3301      	adds	r3, #1
 800ab24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	7a5b      	ldrb	r3, [r3, #9]
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d04c      	beq.n	800abce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d003      	beq.n	800ab44 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ab40:	2b07      	cmp	r3, #7
 800ab42:	d144      	bne.n	800abce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab44:	4b90      	ldr	r3, [pc, #576]	; (800ad88 <tcp_slowtmr+0x584>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab54:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ab58:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ab5c:	498b      	ldr	r1, [pc, #556]	; (800ad8c <tcp_slowtmr+0x588>)
 800ab5e:	fba1 1303 	umull	r1, r3, r1, r3
 800ab62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d90a      	bls.n	800ab7e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ab68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ab72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab76:	3301      	adds	r3, #1
 800ab78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab7c:	e027      	b.n	800abce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab7e:	4b82      	ldr	r3, [pc, #520]	; (800ad88 <tcp_slowtmr+0x584>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ab94:	4618      	mov	r0, r3
 800ab96:	4b7e      	ldr	r3, [pc, #504]	; (800ad90 <tcp_slowtmr+0x58c>)
 800ab98:	fb00 f303 	mul.w	r3, r0, r3
 800ab9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ab9e:	497b      	ldr	r1, [pc, #492]	; (800ad8c <tcp_slowtmr+0x588>)
 800aba0:	fba1 1303 	umull	r1, r3, r1, r3
 800aba4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d911      	bls.n	800abce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800abaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abac:	f004 fac8 	bl	800f140 <tcp_keepalive>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800abb6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d107      	bne.n	800abce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800abc4:	3301      	adds	r3, #1
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d011      	beq.n	800abfa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800abd6:	4b6c      	ldr	r3, [pc, #432]	; (800ad88 <tcp_slowtmr+0x584>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	1ad2      	subs	r2, r2, r3
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800abe6:	4619      	mov	r1, r3
 800abe8:	460b      	mov	r3, r1
 800abea:	005b      	lsls	r3, r3, #1
 800abec:	440b      	add	r3, r1
 800abee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d302      	bcc.n	800abfa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800abf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abf6:	f000 fddb 	bl	800b7b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	7d1b      	ldrb	r3, [r3, #20]
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d10b      	bne.n	800ac1a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac02:	4b61      	ldr	r3, [pc, #388]	; (800ad88 <tcp_slowtmr+0x584>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	2b28      	cmp	r3, #40	; 0x28
 800ac0e:	d904      	bls.n	800ac1a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ac10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac14:	3301      	adds	r3, #1
 800ac16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ac1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1c:	7d1b      	ldrb	r3, [r3, #20]
 800ac1e:	2b09      	cmp	r3, #9
 800ac20:	d10b      	bne.n	800ac3a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ac22:	4b59      	ldr	r3, [pc, #356]	; (800ad88 <tcp_slowtmr+0x584>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	2bf0      	cmp	r3, #240	; 0xf0
 800ac2e:	d904      	bls.n	800ac3a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ac30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac34:	3301      	adds	r3, #1
 800ac36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ac3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d060      	beq.n	800ad04 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac48:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ac4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac4c:	f000 fbfc 	bl	800b448 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d010      	beq.n	800ac78 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ac56:	4b4f      	ldr	r3, [pc, #316]	; (800ad94 <tcp_slowtmr+0x590>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d106      	bne.n	800ac6e <tcp_slowtmr+0x46a>
 800ac60:	4b4d      	ldr	r3, [pc, #308]	; (800ad98 <tcp_slowtmr+0x594>)
 800ac62:	f240 526d 	movw	r2, #1389	; 0x56d
 800ac66:	494d      	ldr	r1, [pc, #308]	; (800ad9c <tcp_slowtmr+0x598>)
 800ac68:	484d      	ldr	r0, [pc, #308]	; (800ada0 <tcp_slowtmr+0x59c>)
 800ac6a:	f007 fb17 	bl	801229c <iprintf>
        prev->next = pcb->next;
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	68da      	ldr	r2, [r3, #12]
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	60da      	str	r2, [r3, #12]
 800ac76:	e00f      	b.n	800ac98 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ac78:	4b46      	ldr	r3, [pc, #280]	; (800ad94 <tcp_slowtmr+0x590>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d006      	beq.n	800ac90 <tcp_slowtmr+0x48c>
 800ac82:	4b45      	ldr	r3, [pc, #276]	; (800ad98 <tcp_slowtmr+0x594>)
 800ac84:	f240 5271 	movw	r2, #1393	; 0x571
 800ac88:	4946      	ldr	r1, [pc, #280]	; (800ada4 <tcp_slowtmr+0x5a0>)
 800ac8a:	4845      	ldr	r0, [pc, #276]	; (800ada0 <tcp_slowtmr+0x59c>)
 800ac8c:	f007 fb06 	bl	801229c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	4a3f      	ldr	r2, [pc, #252]	; (800ad94 <tcp_slowtmr+0x590>)
 800ac96:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ac98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d013      	beq.n	800acc8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aca8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	3304      	adds	r3, #4
 800acae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb0:	8ad2      	ldrh	r2, [r2, #22]
 800acb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acb4:	8b09      	ldrh	r1, [r1, #24]
 800acb6:	9102      	str	r1, [sp, #8]
 800acb8:	9201      	str	r2, [sp, #4]
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	462b      	mov	r3, r5
 800acbe:	4622      	mov	r2, r4
 800acc0:	4601      	mov	r1, r0
 800acc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acc4:	f004 f988 	bl	800efd8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	7d1b      	ldrb	r3, [r3, #20]
 800acd2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800acde:	6838      	ldr	r0, [r7, #0]
 800ace0:	f7ff f9f2 	bl	800a0c8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ace4:	4b30      	ldr	r3, [pc, #192]	; (800ada8 <tcp_slowtmr+0x5a4>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d004      	beq.n	800acfa <tcp_slowtmr+0x4f6>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f06f 010c 	mvn.w	r1, #12
 800acf6:	68b8      	ldr	r0, [r7, #8]
 800acf8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800acfa:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <tcp_slowtmr+0x5a4>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d037      	beq.n	800ad72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ad02:	e590      	b.n	800a826 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	7f1b      	ldrb	r3, [r3, #28]
 800ad12:	3301      	adds	r3, #1
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	7f1a      	ldrb	r2, [r3, #28]
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	7f5b      	ldrb	r3, [r3, #29]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d325      	bcc.n	800ad72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	2200      	movs	r2, #0
 800ad2a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ad2c:	4b1e      	ldr	r3, [pc, #120]	; (800ada8 <tcp_slowtmr+0x5a4>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <tcp_slowtmr+0x550>
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad44:	6912      	ldr	r2, [r2, #16]
 800ad46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ad52:	e002      	b.n	800ad5a <tcp_slowtmr+0x556>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ad5a:	4b13      	ldr	r3, [pc, #76]	; (800ada8 <tcp_slowtmr+0x5a4>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d000      	beq.n	800ad64 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ad62:	e560      	b.n	800a826 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ad64:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ad6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad6e:	f003 fb7f 	bl	800e470 <tcp_output>
  while (pcb != NULL) {
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f47f ad5c 	bne.w	800a832 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ad7e:	4b0b      	ldr	r3, [pc, #44]	; (800adac <tcp_slowtmr+0x5a8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ad84:	e067      	b.n	800ae56 <tcp_slowtmr+0x652>
 800ad86:	bf00      	nop
 800ad88:	20008450 	.word	0x20008450
 800ad8c:	10624dd3 	.word	0x10624dd3
 800ad90:	000124f8 	.word	0x000124f8
 800ad94:	2000845c 	.word	0x2000845c
 800ad98:	08013aac 	.word	0x08013aac
 800ad9c:	08013ee4 	.word	0x08013ee4
 800ada0:	08013af0 	.word	0x08013af0
 800ada4:	08013f10 	.word	0x08013f10
 800ada8:	20008464 	.word	0x20008464
 800adac:	20008460 	.word	0x20008460
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	7d1b      	ldrb	r3, [r3, #20]
 800adb4:	2b0a      	cmp	r3, #10
 800adb6:	d006      	beq.n	800adc6 <tcp_slowtmr+0x5c2>
 800adb8:	4b2b      	ldr	r3, [pc, #172]	; (800ae68 <tcp_slowtmr+0x664>)
 800adba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800adbe:	492b      	ldr	r1, [pc, #172]	; (800ae6c <tcp_slowtmr+0x668>)
 800adc0:	482b      	ldr	r0, [pc, #172]	; (800ae70 <tcp_slowtmr+0x66c>)
 800adc2:	f007 fa6b 	bl	801229c <iprintf>
    pcb_remove = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800adcc:	4b29      	ldr	r3, [pc, #164]	; (800ae74 <tcp_slowtmr+0x670>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	2bf0      	cmp	r3, #240	; 0xf0
 800add8:	d904      	bls.n	800ade4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800adda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adde:	3301      	adds	r3, #1
 800ade0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ade4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d02f      	beq.n	800ae4c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800adec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adee:	f000 fb2b 	bl	800b448 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d010      	beq.n	800ae1a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800adf8:	4b1f      	ldr	r3, [pc, #124]	; (800ae78 <tcp_slowtmr+0x674>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d106      	bne.n	800ae10 <tcp_slowtmr+0x60c>
 800ae02:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <tcp_slowtmr+0x664>)
 800ae04:	f240 52af 	movw	r2, #1455	; 0x5af
 800ae08:	491c      	ldr	r1, [pc, #112]	; (800ae7c <tcp_slowtmr+0x678>)
 800ae0a:	4819      	ldr	r0, [pc, #100]	; (800ae70 <tcp_slowtmr+0x66c>)
 800ae0c:	f007 fa46 	bl	801229c <iprintf>
        prev->next = pcb->next;
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	68da      	ldr	r2, [r3, #12]
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	60da      	str	r2, [r3, #12]
 800ae18:	e00f      	b.n	800ae3a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ae1a:	4b17      	ldr	r3, [pc, #92]	; (800ae78 <tcp_slowtmr+0x674>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d006      	beq.n	800ae32 <tcp_slowtmr+0x62e>
 800ae24:	4b10      	ldr	r3, [pc, #64]	; (800ae68 <tcp_slowtmr+0x664>)
 800ae26:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ae2a:	4915      	ldr	r1, [pc, #84]	; (800ae80 <tcp_slowtmr+0x67c>)
 800ae2c:	4810      	ldr	r0, [pc, #64]	; (800ae70 <tcp_slowtmr+0x66c>)
 800ae2e:	f007 fa35 	bl	801229c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	4a10      	ldr	r2, [pc, #64]	; (800ae78 <tcp_slowtmr+0x674>)
 800ae38:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ae44:	69f8      	ldr	r0, [r7, #28]
 800ae46:	f7ff f93f 	bl	800a0c8 <tcp_free>
 800ae4a:	e004      	b.n	800ae56 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1a9      	bne.n	800adb0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	3730      	adds	r7, #48	; 0x30
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bdb0      	pop	{r4, r5, r7, pc}
 800ae66:	bf00      	nop
 800ae68:	08013aac 	.word	0x08013aac
 800ae6c:	08013f3c 	.word	0x08013f3c
 800ae70:	08013af0 	.word	0x08013af0
 800ae74:	20008450 	.word	0x20008450
 800ae78:	20008460 	.word	0x20008460
 800ae7c:	08013f6c 	.word	0x08013f6c
 800ae80:	08013f94 	.word	0x08013f94

0800ae84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ae8a:	4b2d      	ldr	r3, [pc, #180]	; (800af40 <tcp_fasttmr+0xbc>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	4b2b      	ldr	r3, [pc, #172]	; (800af40 <tcp_fasttmr+0xbc>)
 800ae94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ae96:	4b2b      	ldr	r3, [pc, #172]	; (800af44 <tcp_fasttmr+0xc0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ae9c:	e048      	b.n	800af30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7f9a      	ldrb	r2, [r3, #30]
 800aea2:	4b27      	ldr	r3, [pc, #156]	; (800af40 <tcp_fasttmr+0xbc>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d03f      	beq.n	800af2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800aeaa:	4b25      	ldr	r3, [pc, #148]	; (800af40 <tcp_fasttmr+0xbc>)
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	8b5b      	ldrh	r3, [r3, #26]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d010      	beq.n	800aee0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	8b5b      	ldrh	r3, [r3, #26]
 800aec2:	f043 0302 	orr.w	r3, r3, #2
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f003 facf 	bl	800e470 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	8b5b      	ldrh	r3, [r3, #26]
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	8b5b      	ldrh	r3, [r3, #26]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d009      	beq.n	800af00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	8b5b      	ldrh	r3, [r3, #26]
 800aef0:	f023 0308 	bic.w	r3, r3, #8
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff fa78 	bl	800a3f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00a      	beq.n	800af24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800af0e:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <tcp_fasttmr+0xc4>)
 800af10:	2200      	movs	r2, #0
 800af12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f819 	bl	800af4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800af1a:	4b0b      	ldr	r3, [pc, #44]	; (800af48 <tcp_fasttmr+0xc4>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d000      	beq.n	800af24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800af22:	e7b8      	b.n	800ae96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	607b      	str	r3, [r7, #4]
 800af28:	e002      	b.n	800af30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1b3      	bne.n	800ae9e <tcp_fasttmr+0x1a>
    }
  }
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20008466 	.word	0x20008466
 800af44:	2000845c 	.word	0x2000845c
 800af48:	20008464 	.word	0x20008464

0800af4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800af4c:	b590      	push	{r4, r7, lr}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d109      	bne.n	800af6e <tcp_process_refused_data+0x22>
 800af5a:	4b37      	ldr	r3, [pc, #220]	; (800b038 <tcp_process_refused_data+0xec>)
 800af5c:	f240 6209 	movw	r2, #1545	; 0x609
 800af60:	4936      	ldr	r1, [pc, #216]	; (800b03c <tcp_process_refused_data+0xf0>)
 800af62:	4837      	ldr	r0, [pc, #220]	; (800b040 <tcp_process_refused_data+0xf4>)
 800af64:	f007 f99a 	bl	801229c <iprintf>
 800af68:	f06f 030f 	mvn.w	r3, #15
 800af6c:	e060      	b.n	800b030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af72:	7b5b      	ldrb	r3, [r3, #13]
 800af74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00b      	beq.n	800afa4 <tcp_process_refused_data+0x58>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6918      	ldr	r0, [r3, #16]
 800af96:	2300      	movs	r3, #0
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	47a0      	blx	r4
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
 800afa2:	e007      	b.n	800afb4 <tcp_process_refused_data+0x68>
 800afa4:	2300      	movs	r3, #0
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	2000      	movs	r0, #0
 800afac:	f000 f8a4 	bl	800b0f8 <tcp_recv_null>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800afb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d12a      	bne.n	800b012 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	f003 0320 	and.w	r3, r3, #32
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d033      	beq.n	800b02e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800afce:	d005      	beq.n	800afdc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd4:	3301      	adds	r3, #1
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00b      	beq.n	800affe <tcp_process_refused_data+0xb2>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6918      	ldr	r0, [r3, #16]
 800aff0:	2300      	movs	r3, #0
 800aff2:	2200      	movs	r2, #0
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	47a0      	blx	r4
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]
 800affc:	e001      	b.n	800b002 <tcp_process_refused_data+0xb6>
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b006:	f113 0f0d 	cmn.w	r3, #13
 800b00a:	d110      	bne.n	800b02e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b00c:	f06f 030c 	mvn.w	r3, #12
 800b010:	e00e      	b.n	800b030 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b016:	f113 0f0d 	cmn.w	r3, #13
 800b01a:	d102      	bne.n	800b022 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b01c:	f06f 030c 	mvn.w	r3, #12
 800b020:	e006      	b.n	800b030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b028:	f06f 0304 	mvn.w	r3, #4
 800b02c:	e000      	b.n	800b030 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	bd90      	pop	{r4, r7, pc}
 800b038:	08013aac 	.word	0x08013aac
 800b03c:	08013fbc 	.word	0x08013fbc
 800b040:	08013af0 	.word	0x08013af0

0800b044 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b04c:	e007      	b.n	800b05e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f80a 	bl	800b06e <tcp_seg_free>
    seg = next;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f4      	bne.n	800b04e <tcp_segs_free+0xa>
  }
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00c      	beq.n	800b096 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fd7d 	bl	8009b88 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	2003      	movs	r0, #3
 800b092:	f7fd ff23 	bl	8008edc <memp_free>
  }
}
 800b096:	bf00      	nop
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <tcp_seg_copy+0x1c>
 800b0ae:	4b0f      	ldr	r3, [pc, #60]	; (800b0ec <tcp_seg_copy+0x4c>)
 800b0b0:	f240 6282 	movw	r2, #1666	; 0x682
 800b0b4:	490e      	ldr	r1, [pc, #56]	; (800b0f0 <tcp_seg_copy+0x50>)
 800b0b6:	480f      	ldr	r0, [pc, #60]	; (800b0f4 <tcp_seg_copy+0x54>)
 800b0b8:	f007 f8f0 	bl	801229c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b0bc:	2003      	movs	r0, #3
 800b0be:	f7fd fe9d 	bl	8008dfc <memp_malloc>
 800b0c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <tcp_seg_copy+0x2e>
    return NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e00a      	b.n	800b0e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b0ce:	2210      	movs	r2, #16
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f007 fabd 	bl	8012652 <memcpy>
  pbuf_ref(cseg->p);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe fdf3 	bl	8009cc8 <pbuf_ref>
  return cseg;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	08013aac 	.word	0x08013aac
 800b0f0:	08014000 	.word	0x08014000
 800b0f4:	08013af0 	.word	0x08013af0

0800b0f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d109      	bne.n	800b120 <tcp_recv_null+0x28>
 800b10c:	4b12      	ldr	r3, [pc, #72]	; (800b158 <tcp_recv_null+0x60>)
 800b10e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b112:	4912      	ldr	r1, [pc, #72]	; (800b15c <tcp_recv_null+0x64>)
 800b114:	4812      	ldr	r0, [pc, #72]	; (800b160 <tcp_recv_null+0x68>)
 800b116:	f007 f8c1 	bl	801229c <iprintf>
 800b11a:	f06f 030f 	mvn.w	r3, #15
 800b11e:	e016      	b.n	800b14e <tcp_recv_null+0x56>

  if (p != NULL) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	891b      	ldrh	r3, [r3, #8]
 800b12a:	4619      	mov	r1, r3
 800b12c:	68b8      	ldr	r0, [r7, #8]
 800b12e:	f7ff fb19 	bl	800a764 <tcp_recved>
    pbuf_free(p);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7fe fd28 	bl	8009b88 <pbuf_free>
 800b138:	e008      	b.n	800b14c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b13a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d104      	bne.n	800b14c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f7ff f9be 	bl	800a4c4 <tcp_close>
 800b148:	4603      	mov	r3, r0
 800b14a:	e000      	b.n	800b14e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	08013aac 	.word	0x08013aac
 800b15c:	0801401c 	.word	0x0801401c
 800b160:	08013af0 	.word	0x08013af0

0800b164 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b16e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b172:	2b00      	cmp	r3, #0
 800b174:	db01      	blt.n	800b17a <tcp_kill_prio+0x16>
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	e000      	b.n	800b17c <tcp_kill_prio+0x18>
 800b17a:	237f      	movs	r3, #127	; 0x7f
 800b17c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d034      	beq.n	800b1ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b184:	7afb      	ldrb	r3, [r7, #11]
 800b186:	3b01      	subs	r3, #1
 800b188:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b192:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <tcp_kill_prio+0x94>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	e01f      	b.n	800b1da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	7d5b      	ldrb	r3, [r3, #21]
 800b19e:	7afa      	ldrb	r2, [r7, #11]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d80c      	bhi.n	800b1be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b1a8:	7afa      	ldrb	r2, [r7, #11]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d112      	bne.n	800b1d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <tcp_kill_prio+0x98>)
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d80a      	bhi.n	800b1d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <tcp_kill_prio+0x98>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	7d5b      	ldrb	r3, [r3, #21]
 800b1d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1dc      	bne.n	800b19a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b1e6:	6938      	ldr	r0, [r7, #16]
 800b1e8:	f7ff fa56 	bl	800a698 <tcp_abort>
 800b1ec:	e000      	b.n	800b1f0 <tcp_kill_prio+0x8c>
    return;
 800b1ee:	bf00      	nop
  }
}
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	2000845c 	.word	0x2000845c
 800b1fc:	20008450 	.word	0x20008450

0800b200 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	2b08      	cmp	r3, #8
 800b20e:	d009      	beq.n	800b224 <tcp_kill_state+0x24>
 800b210:	79fb      	ldrb	r3, [r7, #7]
 800b212:	2b09      	cmp	r3, #9
 800b214:	d006      	beq.n	800b224 <tcp_kill_state+0x24>
 800b216:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <tcp_kill_state+0x80>)
 800b218:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b21c:	4919      	ldr	r1, [pc, #100]	; (800b284 <tcp_kill_state+0x84>)
 800b21e:	481a      	ldr	r0, [pc, #104]	; (800b288 <tcp_kill_state+0x88>)
 800b220:	f007 f83c 	bl	801229c <iprintf>

  inactivity = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b22c:	4b17      	ldr	r3, [pc, #92]	; (800b28c <tcp_kill_state+0x8c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	617b      	str	r3, [r7, #20]
 800b232:	e017      	b.n	800b264 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	7d1b      	ldrb	r3, [r3, #20]
 800b238:	79fa      	ldrb	r2, [r7, #7]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d10f      	bne.n	800b25e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b23e:	4b14      	ldr	r3, [pc, #80]	; (800b290 <tcp_kill_state+0x90>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d807      	bhi.n	800b25e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b24e:	4b10      	ldr	r3, [pc, #64]	; (800b290 <tcp_kill_state+0x90>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e4      	bne.n	800b234 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b270:	2100      	movs	r1, #0
 800b272:	6938      	ldr	r0, [r7, #16]
 800b274:	f7ff f952 	bl	800a51c <tcp_abandon>
  }
}
 800b278:	bf00      	nop
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	08013aac 	.word	0x08013aac
 800b284:	08014038 	.word	0x08014038
 800b288:	08013af0 	.word	0x08013af0
 800b28c:	2000845c 	.word	0x2000845c
 800b290:	20008450 	.word	0x20008450

0800b294 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2a2:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <tcp_kill_timewait+0x58>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e012      	b.n	800b2d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b2aa:	4b11      	ldr	r3, [pc, #68]	; (800b2f0 <tcp_kill_timewait+0x5c>)
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d807      	bhi.n	800b2ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <tcp_kill_timewait+0x5c>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e9      	bne.n	800b2aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b2dc:	68b8      	ldr	r0, [r7, #8]
 800b2de:	f7ff f9db 	bl	800a698 <tcp_abort>
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20008460 	.word	0x20008460
 800b2f0:	20008450 	.word	0x20008450

0800b2f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b2fa:	4b10      	ldr	r3, [pc, #64]	; (800b33c <tcp_handle_closepend+0x48>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b300:	e014      	b.n	800b32c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	8b5b      	ldrh	r3, [r3, #26]
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b00      	cmp	r3, #0
 800b312:	d009      	beq.n	800b328 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	8b5b      	ldrh	r3, [r3, #26]
 800b318:	f023 0308 	bic.w	r3, r3, #8
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff f864 	bl	800a3f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1e7      	bne.n	800b302 <tcp_handle_closepend+0xe>
  }
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	2000845c 	.word	0x2000845c

0800b340 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b34a:	2001      	movs	r0, #1
 800b34c:	f7fd fd56 	bl	8008dfc <memp_malloc>
 800b350:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d126      	bne.n	800b3a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b358:	f7ff ffcc 	bl	800b2f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b35c:	f7ff ff9a 	bl	800b294 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b360:	2001      	movs	r0, #1
 800b362:	f7fd fd4b 	bl	8008dfc <memp_malloc>
 800b366:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d11b      	bne.n	800b3a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b36e:	2009      	movs	r0, #9
 800b370:	f7ff ff46 	bl	800b200 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b374:	2001      	movs	r0, #1
 800b376:	f7fd fd41 	bl	8008dfc <memp_malloc>
 800b37a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d111      	bne.n	800b3a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b382:	2008      	movs	r0, #8
 800b384:	f7ff ff3c 	bl	800b200 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b388:	2001      	movs	r0, #1
 800b38a:	f7fd fd37 	bl	8008dfc <memp_malloc>
 800b38e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d107      	bne.n	800b3a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff fee3 	bl	800b164 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f7fd fd2c 	bl	8008dfc <memp_malloc>
 800b3a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d03f      	beq.n	800b42c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b3ac:	229c      	movs	r2, #156	; 0x9c
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f007 f8c9 	bl	8012548 <memset>
    pcb->prio = prio;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	79fa      	ldrb	r2, [r7, #7]
 800b3ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b3c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b3cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	22ff      	movs	r2, #255	; 0xff
 800b3da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b3e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2206      	movs	r2, #6
 800b3e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2206      	movs	r2, #6
 800b3f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b402:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <tcp_alloc+0xf8>)
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <tcp_alloc+0xfc>)
 800b40c:	781a      	ldrb	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b418:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4a08      	ldr	r2, [pc, #32]	; (800b440 <tcp_alloc+0x100>)
 800b420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4a07      	ldr	r2, [pc, #28]	; (800b444 <tcp_alloc+0x104>)
 800b428:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b42c:	68fb      	ldr	r3, [r7, #12]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20008450 	.word	0x20008450
 800b43c:	20008466 	.word	0x20008466
 800b440:	0800b0f9 	.word	0x0800b0f9
 800b444:	006ddd00 	.word	0x006ddd00

0800b448 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d107      	bne.n	800b466 <tcp_pcb_purge+0x1e>
 800b456:	4b21      	ldr	r3, [pc, #132]	; (800b4dc <tcp_pcb_purge+0x94>)
 800b458:	f640 0251 	movw	r2, #2129	; 0x851
 800b45c:	4920      	ldr	r1, [pc, #128]	; (800b4e0 <tcp_pcb_purge+0x98>)
 800b45e:	4821      	ldr	r0, [pc, #132]	; (800b4e4 <tcp_pcb_purge+0x9c>)
 800b460:	f006 ff1c 	bl	801229c <iprintf>
 800b464:	e037      	b.n	800b4d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	7d1b      	ldrb	r3, [r3, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d033      	beq.n	800b4d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b472:	2b0a      	cmp	r3, #10
 800b474:	d02f      	beq.n	800b4d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d02b      	beq.n	800b4d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b482:	2b00      	cmp	r3, #0
 800b484:	d007      	beq.n	800b496 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe fb7c 	bl	8009b88 <pbuf_free>
      pcb->refused_data = NULL;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f986 	bl	800b7b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fdc7 	bl	800b044 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff fdc2 	bl	800b044 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	66da      	str	r2, [r3, #108]	; 0x6c
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	08013aac 	.word	0x08013aac
 800b4e0:	080140f8 	.word	0x080140f8
 800b4e4:	08013af0 	.word	0x08013af0

0800b4e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <tcp_pcb_remove+0x1e>
 800b4f8:	4b3e      	ldr	r3, [pc, #248]	; (800b5f4 <tcp_pcb_remove+0x10c>)
 800b4fa:	f640 0283 	movw	r2, #2179	; 0x883
 800b4fe:	493e      	ldr	r1, [pc, #248]	; (800b5f8 <tcp_pcb_remove+0x110>)
 800b500:	483e      	ldr	r0, [pc, #248]	; (800b5fc <tcp_pcb_remove+0x114>)
 800b502:	f006 fecb 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d106      	bne.n	800b51a <tcp_pcb_remove+0x32>
 800b50c:	4b39      	ldr	r3, [pc, #228]	; (800b5f4 <tcp_pcb_remove+0x10c>)
 800b50e:	f640 0284 	movw	r2, #2180	; 0x884
 800b512:	493b      	ldr	r1, [pc, #236]	; (800b600 <tcp_pcb_remove+0x118>)
 800b514:	4839      	ldr	r0, [pc, #228]	; (800b5fc <tcp_pcb_remove+0x114>)
 800b516:	f006 fec1 	bl	801229c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	429a      	cmp	r2, r3
 800b522:	d105      	bne.n	800b530 <tcp_pcb_remove+0x48>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	e013      	b.n	800b558 <tcp_pcb_remove+0x70>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	e00c      	b.n	800b552 <tcp_pcb_remove+0x6a>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d104      	bne.n	800b54c <tcp_pcb_remove+0x64>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	e005      	b.n	800b558 <tcp_pcb_remove+0x70>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1ef      	bne.n	800b538 <tcp_pcb_remove+0x50>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2200      	movs	r2, #0
 800b55c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b55e:	6838      	ldr	r0, [r7, #0]
 800b560:	f7ff ff72 	bl	800b448 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	7d1b      	ldrb	r3, [r3, #20]
 800b568:	2b0a      	cmp	r3, #10
 800b56a:	d013      	beq.n	800b594 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b570:	2b01      	cmp	r3, #1
 800b572:	d00f      	beq.n	800b594 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	8b5b      	ldrh	r3, [r3, #26]
 800b578:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	8b5b      	ldrh	r3, [r3, #26]
 800b584:	f043 0302 	orr.w	r3, r3, #2
 800b588:	b29a      	uxth	r2, r3
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b58e:	6838      	ldr	r0, [r7, #0]
 800b590:	f002 ff6e 	bl	800e470 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	7d1b      	ldrb	r3, [r3, #20]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d020      	beq.n	800b5de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <tcp_pcb_remove+0xca>
 800b5a4:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <tcp_pcb_remove+0x10c>)
 800b5a6:	f640 0293 	movw	r2, #2195	; 0x893
 800b5aa:	4916      	ldr	r1, [pc, #88]	; (800b604 <tcp_pcb_remove+0x11c>)
 800b5ac:	4813      	ldr	r0, [pc, #76]	; (800b5fc <tcp_pcb_remove+0x114>)
 800b5ae:	f006 fe75 	bl	801229c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d006      	beq.n	800b5c8 <tcp_pcb_remove+0xe0>
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <tcp_pcb_remove+0x10c>)
 800b5bc:	f640 0294 	movw	r2, #2196	; 0x894
 800b5c0:	4911      	ldr	r1, [pc, #68]	; (800b608 <tcp_pcb_remove+0x120>)
 800b5c2:	480e      	ldr	r0, [pc, #56]	; (800b5fc <tcp_pcb_remove+0x114>)
 800b5c4:	f006 fe6a 	bl	801229c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <tcp_pcb_remove+0xf6>
 800b5d0:	4b08      	ldr	r3, [pc, #32]	; (800b5f4 <tcp_pcb_remove+0x10c>)
 800b5d2:	f640 0296 	movw	r2, #2198	; 0x896
 800b5d6:	490d      	ldr	r1, [pc, #52]	; (800b60c <tcp_pcb_remove+0x124>)
 800b5d8:	4808      	ldr	r0, [pc, #32]	; (800b5fc <tcp_pcb_remove+0x114>)
 800b5da:	f006 fe5f 	bl	801229c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	08013aac 	.word	0x08013aac
 800b5f8:	08014114 	.word	0x08014114
 800b5fc:	08013af0 	.word	0x08013af0
 800b600:	08014130 	.word	0x08014130
 800b604:	08014150 	.word	0x08014150
 800b608:	08014168 	.word	0x08014168
 800b60c:	08014184 	.word	0x08014184

0800b610 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <tcp_next_iss+0x1c>
 800b61e:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <tcp_next_iss+0x38>)
 800b620:	f640 02af 	movw	r2, #2223	; 0x8af
 800b624:	4909      	ldr	r1, [pc, #36]	; (800b64c <tcp_next_iss+0x3c>)
 800b626:	480a      	ldr	r0, [pc, #40]	; (800b650 <tcp_next_iss+0x40>)
 800b628:	f006 fe38 	bl	801229c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b62c:	4b09      	ldr	r3, [pc, #36]	; (800b654 <tcp_next_iss+0x44>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <tcp_next_iss+0x48>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4413      	add	r3, r2
 800b636:	4a07      	ldr	r2, [pc, #28]	; (800b654 <tcp_next_iss+0x44>)
 800b638:	6013      	str	r3, [r2, #0]
  return iss;
 800b63a:	4b06      	ldr	r3, [pc, #24]	; (800b654 <tcp_next_iss+0x44>)
 800b63c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	08013aac 	.word	0x08013aac
 800b64c:	0801419c 	.word	0x0801419c
 800b650:	08013af0 	.word	0x08013af0
 800b654:	20000024 	.word	0x20000024
 800b658:	20008450 	.word	0x20008450

0800b65c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <tcp_eff_send_mss_netif+0x22>
 800b670:	4b14      	ldr	r3, [pc, #80]	; (800b6c4 <tcp_eff_send_mss_netif+0x68>)
 800b672:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b676:	4914      	ldr	r1, [pc, #80]	; (800b6c8 <tcp_eff_send_mss_netif+0x6c>)
 800b678:	4814      	ldr	r0, [pc, #80]	; (800b6cc <tcp_eff_send_mss_netif+0x70>)
 800b67a:	f006 fe0f 	bl	801229c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b684:	89fb      	ldrh	r3, [r7, #14]
 800b686:	e019      	b.n	800b6bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b68c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b68e:	8afb      	ldrh	r3, [r7, #22]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d012      	beq.n	800b6ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b694:	2328      	movs	r3, #40	; 0x28
 800b696:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b698:	8afa      	ldrh	r2, [r7, #22]
 800b69a:	8abb      	ldrh	r3, [r7, #20]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d904      	bls.n	800b6aa <tcp_eff_send_mss_netif+0x4e>
 800b6a0:	8afa      	ldrh	r2, [r7, #22]
 800b6a2:	8abb      	ldrh	r3, [r7, #20]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	e000      	b.n	800b6ac <tcp_eff_send_mss_netif+0x50>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b6ae:	8a7a      	ldrh	r2, [r7, #18]
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	bf28      	it	cs
 800b6b6:	4613      	movcs	r3, r2
 800b6b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	08013aac 	.word	0x08013aac
 800b6c8:	080141b8 	.word	0x080141b8
 800b6cc:	08013af0 	.word	0x08013af0

0800b6d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d119      	bne.n	800b718 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b6e4:	4b10      	ldr	r3, [pc, #64]	; (800b728 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b6e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b6ea:	4910      	ldr	r1, [pc, #64]	; (800b72c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b6ec:	4810      	ldr	r0, [pc, #64]	; (800b730 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b6ee:	f006 fdd5 	bl	801229c <iprintf>

  while (pcb != NULL) {
 800b6f2:	e011      	b.n	800b718 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d108      	bne.n	800b712 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7fe ffc6 	bl	800a698 <tcp_abort>
      pcb = next;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	e002      	b.n	800b718 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1ea      	bne.n	800b6f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b71e:	bf00      	nop
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	08013aac 	.word	0x08013aac
 800b72c:	080141e0 	.word	0x080141e0
 800b730:	08013af0 	.word	0x08013af0

0800b734 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d02a      	beq.n	800b79a <tcp_netif_ip_addr_changed+0x66>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d026      	beq.n	800b79a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b74c:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <tcp_netif_ip_addr_changed+0x70>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff ffbc 	bl	800b6d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b758:	4b13      	ldr	r3, [pc, #76]	; (800b7a8 <tcp_netif_ip_addr_changed+0x74>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff ffb6 	bl	800b6d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d017      	beq.n	800b79a <tcp_netif_ip_addr_changed+0x66>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d013      	beq.n	800b79a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b772:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <tcp_netif_ip_addr_changed+0x78>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e00c      	b.n	800b794 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	429a      	cmp	r2, r3
 800b784:	d103      	bne.n	800b78e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1ef      	bne.n	800b77a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	2000845c 	.word	0x2000845c
 800b7a8:	20008454 	.word	0x20008454
 800b7ac:	20008458 	.word	0x20008458

0800b7b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff fc3d 	bl	800b044 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b08d      	sub	sp, #52	; 0x34
 800b7dc:	af04      	add	r7, sp, #16
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d105      	bne.n	800b7f4 <tcp_input+0x1c>
 800b7e8:	4b9b      	ldr	r3, [pc, #620]	; (800ba58 <tcp_input+0x280>)
 800b7ea:	2283      	movs	r2, #131	; 0x83
 800b7ec:	499b      	ldr	r1, [pc, #620]	; (800ba5c <tcp_input+0x284>)
 800b7ee:	489c      	ldr	r0, [pc, #624]	; (800ba60 <tcp_input+0x288>)
 800b7f0:	f006 fd54 	bl	801229c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	4a9a      	ldr	r2, [pc, #616]	; (800ba64 <tcp_input+0x28c>)
 800b7fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	895b      	ldrh	r3, [r3, #10]
 800b800:	2b13      	cmp	r3, #19
 800b802:	f240 83d1 	bls.w	800bfa8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b806:	4b98      	ldr	r3, [pc, #608]	; (800ba68 <tcp_input+0x290>)
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	4a97      	ldr	r2, [pc, #604]	; (800ba68 <tcp_input+0x290>)
 800b80c:	6812      	ldr	r2, [r2, #0]
 800b80e:	4611      	mov	r1, r2
 800b810:	4618      	mov	r0, r3
 800b812:	f005 fbd5 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f040 83c7 	bne.w	800bfac <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b81e:	4b92      	ldr	r3, [pc, #584]	; (800ba68 <tcp_input+0x290>)
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b826:	2be0      	cmp	r3, #224	; 0xe0
 800b828:	f000 83c0 	beq.w	800bfac <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b82c:	4b8d      	ldr	r3, [pc, #564]	; (800ba64 <tcp_input+0x28c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	899b      	ldrh	r3, [r3, #12]
 800b832:	b29b      	uxth	r3, r3
 800b834:	4618      	mov	r0, r3
 800b836:	f7fc fe69 	bl	800850c <lwip_htons>
 800b83a:	4603      	mov	r3, r0
 800b83c:	0b1b      	lsrs	r3, r3, #12
 800b83e:	b29b      	uxth	r3, r3
 800b840:	b2db      	uxtb	r3, r3
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b846:	7cbb      	ldrb	r3, [r7, #18]
 800b848:	2b13      	cmp	r3, #19
 800b84a:	f240 83b1 	bls.w	800bfb0 <tcp_input+0x7d8>
 800b84e:	7cbb      	ldrb	r3, [r7, #18]
 800b850:	b29a      	uxth	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	891b      	ldrh	r3, [r3, #8]
 800b856:	429a      	cmp	r2, r3
 800b858:	f200 83aa 	bhi.w	800bfb0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b85c:	7cbb      	ldrb	r3, [r7, #18]
 800b85e:	b29b      	uxth	r3, r3
 800b860:	3b14      	subs	r3, #20
 800b862:	b29a      	uxth	r2, r3
 800b864:	4b81      	ldr	r3, [pc, #516]	; (800ba6c <tcp_input+0x294>)
 800b866:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b868:	4b81      	ldr	r3, [pc, #516]	; (800ba70 <tcp_input+0x298>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	895a      	ldrh	r2, [r3, #10]
 800b872:	7cbb      	ldrb	r3, [r7, #18]
 800b874:	b29b      	uxth	r3, r3
 800b876:	429a      	cmp	r2, r3
 800b878:	d309      	bcc.n	800b88e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b87a:	4b7c      	ldr	r3, [pc, #496]	; (800ba6c <tcp_input+0x294>)
 800b87c:	881a      	ldrh	r2, [r3, #0]
 800b87e:	4b7d      	ldr	r3, [pc, #500]	; (800ba74 <tcp_input+0x29c>)
 800b880:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b882:	7cbb      	ldrb	r3, [r7, #18]
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7fe f8f8 	bl	8009a7c <pbuf_remove_header>
 800b88c:	e04e      	b.n	800b92c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <tcp_input+0xca>
 800b896:	4b70      	ldr	r3, [pc, #448]	; (800ba58 <tcp_input+0x280>)
 800b898:	22c2      	movs	r2, #194	; 0xc2
 800b89a:	4977      	ldr	r1, [pc, #476]	; (800ba78 <tcp_input+0x2a0>)
 800b89c:	4870      	ldr	r0, [pc, #448]	; (800ba60 <tcp_input+0x288>)
 800b89e:	f006 fcfd 	bl	801229c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b8a2:	2114      	movs	r1, #20
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7fe f8e9 	bl	8009a7c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	895a      	ldrh	r2, [r3, #10]
 800b8ae:	4b71      	ldr	r3, [pc, #452]	; (800ba74 <tcp_input+0x29c>)
 800b8b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b8b2:	4b6e      	ldr	r3, [pc, #440]	; (800ba6c <tcp_input+0x294>)
 800b8b4:	881a      	ldrh	r2, [r3, #0]
 800b8b6:	4b6f      	ldr	r3, [pc, #444]	; (800ba74 <tcp_input+0x29c>)
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b8be:	4b6d      	ldr	r3, [pc, #436]	; (800ba74 <tcp_input+0x29c>)
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7fe f8d9 	bl	8009a7c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	895b      	ldrh	r3, [r3, #10]
 800b8d0:	8a3a      	ldrh	r2, [r7, #16]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	f200 836e 	bhi.w	800bfb4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	4a64      	ldr	r2, [pc, #400]	; (800ba70 <tcp_input+0x298>)
 800b8e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	8a3a      	ldrh	r2, [r7, #16]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe f8c6 	bl	8009a7c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	891a      	ldrh	r2, [r3, #8]
 800b8f4:	8a3b      	ldrh	r3, [r7, #16]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	895b      	ldrh	r3, [r3, #10]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <tcp_input+0x13a>
 800b906:	4b54      	ldr	r3, [pc, #336]	; (800ba58 <tcp_input+0x280>)
 800b908:	22df      	movs	r2, #223	; 0xdf
 800b90a:	495c      	ldr	r1, [pc, #368]	; (800ba7c <tcp_input+0x2a4>)
 800b90c:	4854      	ldr	r0, [pc, #336]	; (800ba60 <tcp_input+0x288>)
 800b90e:	f006 fcc5 	bl	801229c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	891a      	ldrh	r2, [r3, #8]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	891b      	ldrh	r3, [r3, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d005      	beq.n	800b92c <tcp_input+0x154>
 800b920:	4b4d      	ldr	r3, [pc, #308]	; (800ba58 <tcp_input+0x280>)
 800b922:	22e0      	movs	r2, #224	; 0xe0
 800b924:	4956      	ldr	r1, [pc, #344]	; (800ba80 <tcp_input+0x2a8>)
 800b926:	484e      	ldr	r0, [pc, #312]	; (800ba60 <tcp_input+0x288>)
 800b928:	f006 fcb8 	bl	801229c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b92c:	4b4d      	ldr	r3, [pc, #308]	; (800ba64 <tcp_input+0x28c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	4a4b      	ldr	r2, [pc, #300]	; (800ba64 <tcp_input+0x28c>)
 800b936:	6814      	ldr	r4, [r2, #0]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fc fde7 	bl	800850c <lwip_htons>
 800b93e:	4603      	mov	r3, r0
 800b940:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b942:	4b48      	ldr	r3, [pc, #288]	; (800ba64 <tcp_input+0x28c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	885b      	ldrh	r3, [r3, #2]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	4a46      	ldr	r2, [pc, #280]	; (800ba64 <tcp_input+0x28c>)
 800b94c:	6814      	ldr	r4, [r2, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fc fddc 	bl	800850c <lwip_htons>
 800b954:	4603      	mov	r3, r0
 800b956:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b958:	4b42      	ldr	r3, [pc, #264]	; (800ba64 <tcp_input+0x28c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	4a41      	ldr	r2, [pc, #260]	; (800ba64 <tcp_input+0x28c>)
 800b960:	6814      	ldr	r4, [r2, #0]
 800b962:	4618      	mov	r0, r3
 800b964:	f7fc fde7 	bl	8008536 <lwip_htonl>
 800b968:	4603      	mov	r3, r0
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	4a45      	ldr	r2, [pc, #276]	; (800ba84 <tcp_input+0x2ac>)
 800b970:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b972:	4b3c      	ldr	r3, [pc, #240]	; (800ba64 <tcp_input+0x28c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	4a3a      	ldr	r2, [pc, #232]	; (800ba64 <tcp_input+0x28c>)
 800b97a:	6814      	ldr	r4, [r2, #0]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fc fdda 	bl	8008536 <lwip_htonl>
 800b982:	4603      	mov	r3, r0
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	4a3f      	ldr	r2, [pc, #252]	; (800ba88 <tcp_input+0x2b0>)
 800b98a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b98c:	4b35      	ldr	r3, [pc, #212]	; (800ba64 <tcp_input+0x28c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	89db      	ldrh	r3, [r3, #14]
 800b992:	b29b      	uxth	r3, r3
 800b994:	4a33      	ldr	r2, [pc, #204]	; (800ba64 <tcp_input+0x28c>)
 800b996:	6814      	ldr	r4, [r2, #0]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fc fdb7 	bl	800850c <lwip_htons>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b9a2:	4b30      	ldr	r3, [pc, #192]	; (800ba64 <tcp_input+0x28c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	899b      	ldrh	r3, [r3, #12]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fc fdae 	bl	800850c <lwip_htons>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	4b34      	ldr	r3, [pc, #208]	; (800ba8c <tcp_input+0x2b4>)
 800b9bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	891a      	ldrh	r2, [r3, #8]
 800b9c2:	4b33      	ldr	r3, [pc, #204]	; (800ba90 <tcp_input+0x2b8>)
 800b9c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b9c6:	4b31      	ldr	r3, [pc, #196]	; (800ba8c <tcp_input+0x2b4>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0303 	and.w	r3, r3, #3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00c      	beq.n	800b9ec <tcp_input+0x214>
    tcplen++;
 800b9d2:	4b2f      	ldr	r3, [pc, #188]	; (800ba90 <tcp_input+0x2b8>)
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	4b2d      	ldr	r3, [pc, #180]	; (800ba90 <tcp_input+0x2b8>)
 800b9dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	891a      	ldrh	r2, [r3, #8]
 800b9e2:	4b2b      	ldr	r3, [pc, #172]	; (800ba90 <tcp_input+0x2b8>)
 800b9e4:	881b      	ldrh	r3, [r3, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	f200 82e6 	bhi.w	800bfb8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9f0:	4b28      	ldr	r3, [pc, #160]	; (800ba94 <tcp_input+0x2bc>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	e09d      	b.n	800bb34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	7d1b      	ldrb	r3, [r3, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <tcp_input+0x234>
 800ba00:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <tcp_input+0x280>)
 800ba02:	22fb      	movs	r2, #251	; 0xfb
 800ba04:	4924      	ldr	r1, [pc, #144]	; (800ba98 <tcp_input+0x2c0>)
 800ba06:	4816      	ldr	r0, [pc, #88]	; (800ba60 <tcp_input+0x288>)
 800ba08:	f006 fc48 	bl	801229c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	7d1b      	ldrb	r3, [r3, #20]
 800ba10:	2b0a      	cmp	r3, #10
 800ba12:	d105      	bne.n	800ba20 <tcp_input+0x248>
 800ba14:	4b10      	ldr	r3, [pc, #64]	; (800ba58 <tcp_input+0x280>)
 800ba16:	22fc      	movs	r2, #252	; 0xfc
 800ba18:	4920      	ldr	r1, [pc, #128]	; (800ba9c <tcp_input+0x2c4>)
 800ba1a:	4811      	ldr	r0, [pc, #68]	; (800ba60 <tcp_input+0x288>)
 800ba1c:	f006 fc3e 	bl	801229c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	7d1b      	ldrb	r3, [r3, #20]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d105      	bne.n	800ba34 <tcp_input+0x25c>
 800ba28:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <tcp_input+0x280>)
 800ba2a:	22fd      	movs	r2, #253	; 0xfd
 800ba2c:	491c      	ldr	r1, [pc, #112]	; (800baa0 <tcp_input+0x2c8>)
 800ba2e:	480c      	ldr	r0, [pc, #48]	; (800ba60 <tcp_input+0x288>)
 800ba30:	f006 fc34 	bl	801229c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	7a1b      	ldrb	r3, [r3, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d033      	beq.n	800baa4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	7a1a      	ldrb	r2, [r3, #8]
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <tcp_input+0x290>)
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba48:	3301      	adds	r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d029      	beq.n	800baa4 <tcp_input+0x2cc>
      prev = pcb;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	61bb      	str	r3, [r7, #24]
      continue;
 800ba54:	e06b      	b.n	800bb2e <tcp_input+0x356>
 800ba56:	bf00      	nop
 800ba58:	08014214 	.word	0x08014214
 800ba5c:	08014248 	.word	0x08014248
 800ba60:	08014260 	.word	0x08014260
 800ba64:	20008478 	.word	0x20008478
 800ba68:	20004ee0 	.word	0x20004ee0
 800ba6c:	2000847c 	.word	0x2000847c
 800ba70:	20008480 	.word	0x20008480
 800ba74:	2000847e 	.word	0x2000847e
 800ba78:	08014288 	.word	0x08014288
 800ba7c:	08014298 	.word	0x08014298
 800ba80:	080142a4 	.word	0x080142a4
 800ba84:	20008488 	.word	0x20008488
 800ba88:	2000848c 	.word	0x2000848c
 800ba8c:	20008494 	.word	0x20008494
 800ba90:	20008492 	.word	0x20008492
 800ba94:	2000845c 	.word	0x2000845c
 800ba98:	080142c4 	.word	0x080142c4
 800ba9c:	080142ec 	.word	0x080142ec
 800baa0:	08014318 	.word	0x08014318
    }

    if (pcb->remote_port == tcphdr->src &&
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	8b1a      	ldrh	r2, [r3, #24]
 800baa8:	4b72      	ldr	r3, [pc, #456]	; (800bc74 <tcp_input+0x49c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d13a      	bne.n	800bb2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	8ada      	ldrh	r2, [r3, #22]
 800bab8:	4b6e      	ldr	r3, [pc, #440]	; (800bc74 <tcp_input+0x49c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	885b      	ldrh	r3, [r3, #2]
 800babe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d132      	bne.n	800bb2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	4b6b      	ldr	r3, [pc, #428]	; (800bc78 <tcp_input+0x4a0>)
 800baca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bacc:	429a      	cmp	r2, r3
 800bace:	d12c      	bne.n	800bb2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b68      	ldr	r3, [pc, #416]	; (800bc78 <tcp_input+0x4a0>)
 800bad6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bad8:	429a      	cmp	r2, r3
 800bada:	d126      	bne.n	800bb2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	69fa      	ldr	r2, [r7, #28]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d106      	bne.n	800baf4 <tcp_input+0x31c>
 800bae6:	4b65      	ldr	r3, [pc, #404]	; (800bc7c <tcp_input+0x4a4>)
 800bae8:	f240 120d 	movw	r2, #269	; 0x10d
 800baec:	4964      	ldr	r1, [pc, #400]	; (800bc80 <tcp_input+0x4a8>)
 800baee:	4865      	ldr	r0, [pc, #404]	; (800bc84 <tcp_input+0x4ac>)
 800baf0:	f006 fbd4 	bl	801229c <iprintf>
      if (prev != NULL) {
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <tcp_input+0x338>
        prev->next = pcb->next;
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bb02:	4b61      	ldr	r3, [pc, #388]	; (800bc88 <tcp_input+0x4b0>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bb0a:	4a5f      	ldr	r2, [pc, #380]	; (800bc88 <tcp_input+0x4b0>)
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d111      	bne.n	800bb3e <tcp_input+0x366>
 800bb1a:	4b58      	ldr	r3, [pc, #352]	; (800bc7c <tcp_input+0x4a4>)
 800bb1c:	f240 1215 	movw	r2, #277	; 0x115
 800bb20:	495a      	ldr	r1, [pc, #360]	; (800bc8c <tcp_input+0x4b4>)
 800bb22:	4858      	ldr	r0, [pc, #352]	; (800bc84 <tcp_input+0x4ac>)
 800bb24:	f006 fbba 	bl	801229c <iprintf>
      break;
 800bb28:	e009      	b.n	800bb3e <tcp_input+0x366>
    }
    prev = pcb;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f47f af5e 	bne.w	800b9f8 <tcp_input+0x220>
 800bb3c:	e000      	b.n	800bb40 <tcp_input+0x368>
      break;
 800bb3e:	bf00      	nop
  }

  if (pcb == NULL) {
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f040 80aa 	bne.w	800bc9c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb48:	4b51      	ldr	r3, [pc, #324]	; (800bc90 <tcp_input+0x4b8>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	61fb      	str	r3, [r7, #28]
 800bb4e:	e03f      	b.n	800bbd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	7d1b      	ldrb	r3, [r3, #20]
 800bb54:	2b0a      	cmp	r3, #10
 800bb56:	d006      	beq.n	800bb66 <tcp_input+0x38e>
 800bb58:	4b48      	ldr	r3, [pc, #288]	; (800bc7c <tcp_input+0x4a4>)
 800bb5a:	f240 121f 	movw	r2, #287	; 0x11f
 800bb5e:	494d      	ldr	r1, [pc, #308]	; (800bc94 <tcp_input+0x4bc>)
 800bb60:	4848      	ldr	r0, [pc, #288]	; (800bc84 <tcp_input+0x4ac>)
 800bb62:	f006 fb9b 	bl	801229c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	7a1b      	ldrb	r3, [r3, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	7a1a      	ldrb	r2, [r3, #8]
 800bb72:	4b41      	ldr	r3, [pc, #260]	; (800bc78 <tcp_input+0x4a0>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d122      	bne.n	800bbc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	8b1a      	ldrh	r2, [r3, #24]
 800bb86:	4b3b      	ldr	r3, [pc, #236]	; (800bc74 <tcp_input+0x49c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d11b      	bne.n	800bbca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	8ada      	ldrh	r2, [r3, #22]
 800bb96:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <tcp_input+0x49c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d113      	bne.n	800bbca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	4b34      	ldr	r3, [pc, #208]	; (800bc78 <tcp_input+0x4a0>)
 800bba8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d10d      	bne.n	800bbca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b31      	ldr	r3, [pc, #196]	; (800bc78 <tcp_input+0x4a0>)
 800bbb4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d107      	bne.n	800bbca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bbba:	69f8      	ldr	r0, [r7, #28]
 800bbbc:	f000 fb56 	bl	800c26c <tcp_timewait_input>
        }
        pbuf_free(p);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7fd ffe1 	bl	8009b88 <pbuf_free>
        return;
 800bbc6:	e1fd      	b.n	800bfc4 <tcp_input+0x7ec>
        continue;
 800bbc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	61fb      	str	r3, [r7, #28]
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1bc      	bne.n	800bb50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bbda:	4b2f      	ldr	r3, [pc, #188]	; (800bc98 <tcp_input+0x4c0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	617b      	str	r3, [r7, #20]
 800bbe0:	e02a      	b.n	800bc38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	7a1b      	ldrb	r3, [r3, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00c      	beq.n	800bc04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	7a1a      	ldrb	r2, [r3, #8]
 800bbee:	4b22      	ldr	r3, [pc, #136]	; (800bc78 <tcp_input+0x4a0>)
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d002      	beq.n	800bc04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	61bb      	str	r3, [r7, #24]
        continue;
 800bc02:	e016      	b.n	800bc32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	8ada      	ldrh	r2, [r3, #22]
 800bc08:	4b1a      	ldr	r3, [pc, #104]	; (800bc74 <tcp_input+0x49c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	885b      	ldrh	r3, [r3, #2]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d10c      	bne.n	800bc2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	4b17      	ldr	r3, [pc, #92]	; (800bc78 <tcp_input+0x4a0>)
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d00f      	beq.n	800bc40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00d      	beq.n	800bc42 <tcp_input+0x46a>
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1d1      	bne.n	800bbe2 <tcp_input+0x40a>
 800bc3e:	e000      	b.n	800bc42 <tcp_input+0x46a>
            break;
 800bc40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d029      	beq.n	800bc9c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00a      	beq.n	800bc64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	68da      	ldr	r2, [r3, #12]
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bc56:	4b10      	ldr	r3, [pc, #64]	; (800bc98 <tcp_input+0x4c0>)
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bc5e:	4a0e      	ldr	r2, [pc, #56]	; (800bc98 <tcp_input+0x4c0>)
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bc64:	6978      	ldr	r0, [r7, #20]
 800bc66:	f000 fa03 	bl	800c070 <tcp_listen_input>
      }
      pbuf_free(p);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7fd ff8c 	bl	8009b88 <pbuf_free>
      return;
 800bc70:	e1a8      	b.n	800bfc4 <tcp_input+0x7ec>
 800bc72:	bf00      	nop
 800bc74:	20008478 	.word	0x20008478
 800bc78:	20004ee0 	.word	0x20004ee0
 800bc7c:	08014214 	.word	0x08014214
 800bc80:	08014340 	.word	0x08014340
 800bc84:	08014260 	.word	0x08014260
 800bc88:	2000845c 	.word	0x2000845c
 800bc8c:	0801436c 	.word	0x0801436c
 800bc90:	20008460 	.word	0x20008460
 800bc94:	08014398 	.word	0x08014398
 800bc98:	20008458 	.word	0x20008458
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 8158 	beq.w	800bf54 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bca4:	4b95      	ldr	r3, [pc, #596]	; (800befc <tcp_input+0x724>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	891a      	ldrh	r2, [r3, #8]
 800bcae:	4b93      	ldr	r3, [pc, #588]	; (800befc <tcp_input+0x724>)
 800bcb0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bcb2:	4a92      	ldr	r2, [pc, #584]	; (800befc <tcp_input+0x724>)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bcb8:	4b91      	ldr	r3, [pc, #580]	; (800bf00 <tcp_input+0x728>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a8f      	ldr	r2, [pc, #572]	; (800befc <tcp_input+0x724>)
 800bcbe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bcc0:	4b90      	ldr	r3, [pc, #576]	; (800bf04 <tcp_input+0x72c>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bcc6:	4b90      	ldr	r3, [pc, #576]	; (800bf08 <tcp_input+0x730>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bccc:	4b8f      	ldr	r3, [pc, #572]	; (800bf0c <tcp_input+0x734>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bcd2:	4b8f      	ldr	r3, [pc, #572]	; (800bf10 <tcp_input+0x738>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	f003 0308 	and.w	r3, r3, #8
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d006      	beq.n	800bcec <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	7b5b      	ldrb	r3, [r3, #13]
 800bce2:	f043 0301 	orr.w	r3, r3, #1
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d017      	beq.n	800bd24 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bcf4:	69f8      	ldr	r0, [r7, #28]
 800bcf6:	f7ff f929 	bl	800af4c <tcp_process_refused_data>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f113 0f0d 	cmn.w	r3, #13
 800bd00:	d007      	beq.n	800bd12 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd0a:	4b82      	ldr	r3, [pc, #520]	; (800bf14 <tcp_input+0x73c>)
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d008      	beq.n	800bd24 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 80e3 	bne.w	800bee2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bd1c:	69f8      	ldr	r0, [r7, #28]
 800bd1e:	f003 f9ad 	bl	800f07c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bd22:	e0de      	b.n	800bee2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bd24:	4a7c      	ldr	r2, [pc, #496]	; (800bf18 <tcp_input+0x740>)
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bd2a:	69f8      	ldr	r0, [r7, #28]
 800bd2c:	f000 fb18 	bl	800c360 <tcp_process>
 800bd30:	4603      	mov	r3, r0
 800bd32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bd34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd38:	f113 0f0d 	cmn.w	r3, #13
 800bd3c:	f000 80d3 	beq.w	800bee6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bd40:	4b71      	ldr	r3, [pc, #452]	; (800bf08 <tcp_input+0x730>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	f003 0308 	and.w	r3, r3, #8
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d015      	beq.n	800bd78 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d008      	beq.n	800bd68 <tcp_input+0x590>
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd5c:	69fa      	ldr	r2, [r7, #28]
 800bd5e:	6912      	ldr	r2, [r2, #16]
 800bd60:	f06f 010d 	mvn.w	r1, #13
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bd68:	69f9      	ldr	r1, [r7, #28]
 800bd6a:	486c      	ldr	r0, [pc, #432]	; (800bf1c <tcp_input+0x744>)
 800bd6c:	f7ff fbbc 	bl	800b4e8 <tcp_pcb_remove>
        tcp_free(pcb);
 800bd70:	69f8      	ldr	r0, [r7, #28]
 800bd72:	f7fe f9a9 	bl	800a0c8 <tcp_free>
 800bd76:	e0da      	b.n	800bf2e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bd7c:	4b63      	ldr	r3, [pc, #396]	; (800bf0c <tcp_input+0x734>)
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01d      	beq.n	800bdc0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bd84:	4b61      	ldr	r3, [pc, #388]	; (800bf0c <tcp_input+0x734>)
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00a      	beq.n	800bdaa <tcp_input+0x5d2>
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd9a:	69fa      	ldr	r2, [r7, #28]
 800bd9c:	6910      	ldr	r0, [r2, #16]
 800bd9e:	89fa      	ldrh	r2, [r7, #14]
 800bda0:	69f9      	ldr	r1, [r7, #28]
 800bda2:	4798      	blx	r3
 800bda4:	4603      	mov	r3, r0
 800bda6:	74fb      	strb	r3, [r7, #19]
 800bda8:	e001      	b.n	800bdae <tcp_input+0x5d6>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bdae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdb2:	f113 0f0d 	cmn.w	r3, #13
 800bdb6:	f000 8098 	beq.w	800beea <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bdba:	4b54      	ldr	r3, [pc, #336]	; (800bf0c <tcp_input+0x734>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bdc0:	69f8      	ldr	r0, [r7, #28]
 800bdc2:	f000 f915 	bl	800bff0 <tcp_input_delayed_close>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f040 8090 	bne.w	800beee <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bdce:	4b4d      	ldr	r3, [pc, #308]	; (800bf04 <tcp_input+0x72c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d041      	beq.n	800be5a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d006      	beq.n	800bdec <tcp_input+0x614>
 800bdde:	4b50      	ldr	r3, [pc, #320]	; (800bf20 <tcp_input+0x748>)
 800bde0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bde4:	494f      	ldr	r1, [pc, #316]	; (800bf24 <tcp_input+0x74c>)
 800bde6:	4850      	ldr	r0, [pc, #320]	; (800bf28 <tcp_input+0x750>)
 800bde8:	f006 fa58 	bl	801229c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	8b5b      	ldrh	r3, [r3, #26]
 800bdf0:	f003 0310 	and.w	r3, r3, #16
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d008      	beq.n	800be0a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bdf8:	4b42      	ldr	r3, [pc, #264]	; (800bf04 <tcp_input+0x72c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fd fec3 	bl	8009b88 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800be02:	69f8      	ldr	r0, [r7, #28]
 800be04:	f7fe fc48 	bl	800a698 <tcp_abort>
            goto aborted;
 800be08:	e091      	b.n	800bf2e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00c      	beq.n	800be2e <tcp_input+0x656>
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	6918      	ldr	r0, [r3, #16]
 800be1e:	4b39      	ldr	r3, [pc, #228]	; (800bf04 <tcp_input+0x72c>)
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	2300      	movs	r3, #0
 800be24:	69f9      	ldr	r1, [r7, #28]
 800be26:	47a0      	blx	r4
 800be28:	4603      	mov	r3, r0
 800be2a:	74fb      	strb	r3, [r7, #19]
 800be2c:	e008      	b.n	800be40 <tcp_input+0x668>
 800be2e:	4b35      	ldr	r3, [pc, #212]	; (800bf04 <tcp_input+0x72c>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	2300      	movs	r3, #0
 800be34:	69f9      	ldr	r1, [r7, #28]
 800be36:	2000      	movs	r0, #0
 800be38:	f7ff f95e 	bl	800b0f8 <tcp_recv_null>
 800be3c:	4603      	mov	r3, r0
 800be3e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800be40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be44:	f113 0f0d 	cmn.w	r3, #13
 800be48:	d053      	beq.n	800bef2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800be4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800be52:	4b2c      	ldr	r3, [pc, #176]	; (800bf04 <tcp_input+0x72c>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800be5a:	4b2b      	ldr	r3, [pc, #172]	; (800bf08 <tcp_input+0x730>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b00      	cmp	r3, #0
 800be64:	d030      	beq.n	800bec8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d009      	beq.n	800be82 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be72:	7b5a      	ldrb	r2, [r3, #13]
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be78:	f042 0220 	orr.w	r2, r2, #32
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	735a      	strb	r2, [r3, #13]
 800be80:	e022      	b.n	800bec8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be8a:	d005      	beq.n	800be98 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be90:	3301      	adds	r3, #1
 800be92:	b29a      	uxth	r2, r3
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <tcp_input+0x6e2>
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	6918      	ldr	r0, [r3, #16]
 800beac:	2300      	movs	r3, #0
 800beae:	2200      	movs	r2, #0
 800beb0:	69f9      	ldr	r1, [r7, #28]
 800beb2:	47a0      	blx	r4
 800beb4:	4603      	mov	r3, r0
 800beb6:	74fb      	strb	r3, [r7, #19]
 800beb8:	e001      	b.n	800bebe <tcp_input+0x6e6>
 800beba:	2300      	movs	r3, #0
 800bebc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bec2:	f113 0f0d 	cmn.w	r3, #13
 800bec6:	d016      	beq.n	800bef6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bec8:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <tcp_input+0x740>)
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bece:	69f8      	ldr	r0, [r7, #28]
 800bed0:	f000 f88e 	bl	800bff0 <tcp_input_delayed_close>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d128      	bne.n	800bf2c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800beda:	69f8      	ldr	r0, [r7, #28]
 800bedc:	f002 fac8 	bl	800e470 <tcp_output>
 800bee0:	e025      	b.n	800bf2e <tcp_input+0x756>
        goto aborted;
 800bee2:	bf00      	nop
 800bee4:	e023      	b.n	800bf2e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bee6:	bf00      	nop
 800bee8:	e021      	b.n	800bf2e <tcp_input+0x756>
              goto aborted;
 800beea:	bf00      	nop
 800beec:	e01f      	b.n	800bf2e <tcp_input+0x756>
          goto aborted;
 800beee:	bf00      	nop
 800bef0:	e01d      	b.n	800bf2e <tcp_input+0x756>
            goto aborted;
 800bef2:	bf00      	nop
 800bef4:	e01b      	b.n	800bf2e <tcp_input+0x756>
              goto aborted;
 800bef6:	bf00      	nop
 800bef8:	e019      	b.n	800bf2e <tcp_input+0x756>
 800befa:	bf00      	nop
 800befc:	20008468 	.word	0x20008468
 800bf00:	20008478 	.word	0x20008478
 800bf04:	20008498 	.word	0x20008498
 800bf08:	20008495 	.word	0x20008495
 800bf0c:	20008490 	.word	0x20008490
 800bf10:	20008494 	.word	0x20008494
 800bf14:	20008492 	.word	0x20008492
 800bf18:	2000849c 	.word	0x2000849c
 800bf1c:	2000845c 	.word	0x2000845c
 800bf20:	08014214 	.word	0x08014214
 800bf24:	080143c8 	.word	0x080143c8
 800bf28:	08014260 	.word	0x08014260
          goto aborted;
 800bf2c:	bf00      	nop
    tcp_input_pcb = NULL;
 800bf2e:	4b27      	ldr	r3, [pc, #156]	; (800bfcc <tcp_input+0x7f4>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bf34:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <tcp_input+0x7f8>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bf3a:	4b26      	ldr	r3, [pc, #152]	; (800bfd4 <tcp_input+0x7fc>)
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d03f      	beq.n	800bfc2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bf42:	4b24      	ldr	r3, [pc, #144]	; (800bfd4 <tcp_input+0x7fc>)
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fd fe1e 	bl	8009b88 <pbuf_free>
      inseg.p = NULL;
 800bf4c:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <tcp_input+0x7fc>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bf52:	e036      	b.n	800bfc2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bf54:	4b20      	ldr	r3, [pc, #128]	; (800bfd8 <tcp_input+0x800>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	899b      	ldrh	r3, [r3, #12]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fc fad5 	bl	800850c <lwip_htons>
 800bf62:	4603      	mov	r3, r0
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d118      	bne.n	800bfa0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf6e:	4b1b      	ldr	r3, [pc, #108]	; (800bfdc <tcp_input+0x804>)
 800bf70:	6819      	ldr	r1, [r3, #0]
 800bf72:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <tcp_input+0x808>)
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	4b1a      	ldr	r3, [pc, #104]	; (800bfe4 <tcp_input+0x80c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf7e:	4b16      	ldr	r3, [pc, #88]	; (800bfd8 <tcp_input+0x800>)
 800bf80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf82:	885b      	ldrh	r3, [r3, #2]
 800bf84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf86:	4a14      	ldr	r2, [pc, #80]	; (800bfd8 <tcp_input+0x800>)
 800bf88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf8a:	8812      	ldrh	r2, [r2, #0]
 800bf8c:	b292      	uxth	r2, r2
 800bf8e:	9202      	str	r2, [sp, #8]
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <tcp_input+0x810>)
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	4b15      	ldr	r3, [pc, #84]	; (800bfec <tcp_input+0x814>)
 800bf98:	4602      	mov	r2, r0
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	f003 f81c 	bl	800efd8 <tcp_rst>
    pbuf_free(p);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7fd fdf1 	bl	8009b88 <pbuf_free>
  return;
 800bfa6:	e00c      	b.n	800bfc2 <tcp_input+0x7ea>
    goto dropped;
 800bfa8:	bf00      	nop
 800bfaa:	e006      	b.n	800bfba <tcp_input+0x7e2>
    goto dropped;
 800bfac:	bf00      	nop
 800bfae:	e004      	b.n	800bfba <tcp_input+0x7e2>
    goto dropped;
 800bfb0:	bf00      	nop
 800bfb2:	e002      	b.n	800bfba <tcp_input+0x7e2>
      goto dropped;
 800bfb4:	bf00      	nop
 800bfb6:	e000      	b.n	800bfba <tcp_input+0x7e2>
      goto dropped;
 800bfb8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7fd fde4 	bl	8009b88 <pbuf_free>
 800bfc0:	e000      	b.n	800bfc4 <tcp_input+0x7ec>
  return;
 800bfc2:	bf00      	nop
}
 800bfc4:	3724      	adds	r7, #36	; 0x24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd90      	pop	{r4, r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	2000849c 	.word	0x2000849c
 800bfd0:	20008498 	.word	0x20008498
 800bfd4:	20008468 	.word	0x20008468
 800bfd8:	20008478 	.word	0x20008478
 800bfdc:	2000848c 	.word	0x2000848c
 800bfe0:	20008492 	.word	0x20008492
 800bfe4:	20008488 	.word	0x20008488
 800bfe8:	20004ef0 	.word	0x20004ef0
 800bfec:	20004ef4 	.word	0x20004ef4

0800bff0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <tcp_input_delayed_close+0x1c>
 800bffe:	4b17      	ldr	r3, [pc, #92]	; (800c05c <tcp_input_delayed_close+0x6c>)
 800c000:	f240 225a 	movw	r2, #602	; 0x25a
 800c004:	4916      	ldr	r1, [pc, #88]	; (800c060 <tcp_input_delayed_close+0x70>)
 800c006:	4817      	ldr	r0, [pc, #92]	; (800c064 <tcp_input_delayed_close+0x74>)
 800c008:	f006 f948 	bl	801229c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c00c:	4b16      	ldr	r3, [pc, #88]	; (800c068 <tcp_input_delayed_close+0x78>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 0310 	and.w	r3, r3, #16
 800c014:	2b00      	cmp	r3, #0
 800c016:	d01c      	beq.n	800c052 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	8b5b      	ldrh	r3, [r3, #26]
 800c01c:	f003 0310 	and.w	r3, r3, #16
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10d      	bne.n	800c040 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d008      	beq.n	800c040 <tcp_input_delayed_close+0x50>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	6912      	ldr	r2, [r2, #16]
 800c038:	f06f 010e 	mvn.w	r1, #14
 800c03c:	4610      	mov	r0, r2
 800c03e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c040:	6879      	ldr	r1, [r7, #4]
 800c042:	480a      	ldr	r0, [pc, #40]	; (800c06c <tcp_input_delayed_close+0x7c>)
 800c044:	f7ff fa50 	bl	800b4e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7fe f83d 	bl	800a0c8 <tcp_free>
    return 1;
 800c04e:	2301      	movs	r3, #1
 800c050:	e000      	b.n	800c054 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	08014214 	.word	0x08014214
 800c060:	080143e4 	.word	0x080143e4
 800c064:	08014260 	.word	0x08014260
 800c068:	20008495 	.word	0x20008495
 800c06c:	2000845c 	.word	0x2000845c

0800c070 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c070:	b590      	push	{r4, r7, lr}
 800c072:	b08b      	sub	sp, #44	; 0x2c
 800c074:	af04      	add	r7, sp, #16
 800c076:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c078:	4b6f      	ldr	r3, [pc, #444]	; (800c238 <tcp_listen_input+0x1c8>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b00      	cmp	r3, #0
 800c082:	f040 80d2 	bne.w	800c22a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <tcp_listen_input+0x2a>
 800c08c:	4b6b      	ldr	r3, [pc, #428]	; (800c23c <tcp_listen_input+0x1cc>)
 800c08e:	f240 2281 	movw	r2, #641	; 0x281
 800c092:	496b      	ldr	r1, [pc, #428]	; (800c240 <tcp_listen_input+0x1d0>)
 800c094:	486b      	ldr	r0, [pc, #428]	; (800c244 <tcp_listen_input+0x1d4>)
 800c096:	f006 f901 	bl	801229c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c09a:	4b67      	ldr	r3, [pc, #412]	; (800c238 <tcp_listen_input+0x1c8>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	f003 0310 	and.w	r3, r3, #16
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d019      	beq.n	800c0da <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0a6:	4b68      	ldr	r3, [pc, #416]	; (800c248 <tcp_listen_input+0x1d8>)
 800c0a8:	6819      	ldr	r1, [r3, #0]
 800c0aa:	4b68      	ldr	r3, [pc, #416]	; (800c24c <tcp_listen_input+0x1dc>)
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4b67      	ldr	r3, [pc, #412]	; (800c250 <tcp_listen_input+0x1e0>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0b6:	4b67      	ldr	r3, [pc, #412]	; (800c254 <tcp_listen_input+0x1e4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ba:	885b      	ldrh	r3, [r3, #2]
 800c0bc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0be:	4a65      	ldr	r2, [pc, #404]	; (800c254 <tcp_listen_input+0x1e4>)
 800c0c0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0c2:	8812      	ldrh	r2, [r2, #0]
 800c0c4:	b292      	uxth	r2, r2
 800c0c6:	9202      	str	r2, [sp, #8]
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	4b63      	ldr	r3, [pc, #396]	; (800c258 <tcp_listen_input+0x1e8>)
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	4b63      	ldr	r3, [pc, #396]	; (800c25c <tcp_listen_input+0x1ec>)
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f002 ff80 	bl	800efd8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c0d8:	e0a9      	b.n	800c22e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c0da:	4b57      	ldr	r3, [pc, #348]	; (800c238 <tcp_listen_input+0x1c8>)
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	f003 0302 	and.w	r3, r3, #2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 80a3 	beq.w	800c22e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7d5b      	ldrb	r3, [r3, #21]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff f927 	bl	800b340 <tcp_alloc>
 800c0f2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d111      	bne.n	800c11e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00a      	beq.n	800c118 <tcp_listen_input+0xa8>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6910      	ldr	r0, [r2, #16]
 800c10a:	f04f 32ff 	mov.w	r2, #4294967295
 800c10e:	2100      	movs	r1, #0
 800c110:	4798      	blx	r3
 800c112:	4603      	mov	r3, r0
 800c114:	73bb      	strb	r3, [r7, #14]
      return;
 800c116:	e08b      	b.n	800c230 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c118:	23f0      	movs	r3, #240	; 0xf0
 800c11a:	73bb      	strb	r3, [r7, #14]
      return;
 800c11c:	e088      	b.n	800c230 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c11e:	4b50      	ldr	r3, [pc, #320]	; (800c260 <tcp_listen_input+0x1f0>)
 800c120:	695a      	ldr	r2, [r3, #20]
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c126:	4b4e      	ldr	r3, [pc, #312]	; (800c260 <tcp_listen_input+0x1f0>)
 800c128:	691a      	ldr	r2, [r3, #16]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8ada      	ldrh	r2, [r3, #22]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c136:	4b47      	ldr	r3, [pc, #284]	; (800c254 <tcp_listen_input+0x1e4>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2203      	movs	r2, #3
 800c146:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c148:	4b41      	ldr	r3, [pc, #260]	; (800c250 <tcp_listen_input+0x1e0>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c15a:	6978      	ldr	r0, [r7, #20]
 800c15c:	f7ff fa58 	bl	800b610 <tcp_next_iss>
 800c160:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c17a:	4b35      	ldr	r3, [pc, #212]	; (800c250 <tcp_listen_input+0x1e0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	1e5a      	subs	r2, r3, #1
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	691a      	ldr	r2, [r3, #16]
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7a5b      	ldrb	r3, [r3, #9]
 800c196:	f003 030c 	and.w	r3, r3, #12
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	7a1a      	ldrb	r2, [r3, #8]
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c1a8:	4b2e      	ldr	r3, [pc, #184]	; (800c264 <tcp_listen_input+0x1f4>)
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	60da      	str	r2, [r3, #12]
 800c1b0:	4a2c      	ldr	r2, [pc, #176]	; (800c264 <tcp_listen_input+0x1f4>)
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	f003 f8d1 	bl	800f35c <tcp_timer_needed>
 800c1ba:	4b2b      	ldr	r3, [pc, #172]	; (800c268 <tcp_listen_input+0x1f8>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c1c0:	6978      	ldr	r0, [r7, #20]
 800c1c2:	f001 fd8f 	bl	800dce4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c1c6:	4b23      	ldr	r3, [pc, #140]	; (800c254 <tcp_listen_input+0x1e4>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	89db      	ldrh	r3, [r3, #14]
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f004 fc53 	bl	8010a94 <ip4_route>
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7ff fa30 	bl	800b65c <tcp_eff_send_mss_netif>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	461a      	mov	r2, r3
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c204:	2112      	movs	r1, #18
 800c206:	6978      	ldr	r0, [r7, #20]
 800c208:	f002 f844 	bl	800e294 <tcp_enqueue_flags>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d004      	beq.n	800c222 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c218:	2100      	movs	r1, #0
 800c21a:	6978      	ldr	r0, [r7, #20]
 800c21c:	f7fe f97e 	bl	800a51c <tcp_abandon>
      return;
 800c220:	e006      	b.n	800c230 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c222:	6978      	ldr	r0, [r7, #20]
 800c224:	f002 f924 	bl	800e470 <tcp_output>
  return;
 800c228:	e001      	b.n	800c22e <tcp_listen_input+0x1be>
    return;
 800c22a:	bf00      	nop
 800c22c:	e000      	b.n	800c230 <tcp_listen_input+0x1c0>
  return;
 800c22e:	bf00      	nop
}
 800c230:	371c      	adds	r7, #28
 800c232:	46bd      	mov	sp, r7
 800c234:	bd90      	pop	{r4, r7, pc}
 800c236:	bf00      	nop
 800c238:	20008494 	.word	0x20008494
 800c23c:	08014214 	.word	0x08014214
 800c240:	0801440c 	.word	0x0801440c
 800c244:	08014260 	.word	0x08014260
 800c248:	2000848c 	.word	0x2000848c
 800c24c:	20008492 	.word	0x20008492
 800c250:	20008488 	.word	0x20008488
 800c254:	20008478 	.word	0x20008478
 800c258:	20004ef0 	.word	0x20004ef0
 800c25c:	20004ef4 	.word	0x20004ef4
 800c260:	20004ee0 	.word	0x20004ee0
 800c264:	2000845c 	.word	0x2000845c
 800c268:	20008464 	.word	0x20008464

0800c26c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af04      	add	r7, sp, #16
 800c272:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c274:	4b2f      	ldr	r3, [pc, #188]	; (800c334 <tcp_timewait_input+0xc8>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d153      	bne.n	800c328 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d106      	bne.n	800c294 <tcp_timewait_input+0x28>
 800c286:	4b2c      	ldr	r3, [pc, #176]	; (800c338 <tcp_timewait_input+0xcc>)
 800c288:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c28c:	492b      	ldr	r1, [pc, #172]	; (800c33c <tcp_timewait_input+0xd0>)
 800c28e:	482c      	ldr	r0, [pc, #176]	; (800c340 <tcp_timewait_input+0xd4>)
 800c290:	f006 f804 	bl	801229c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c294:	4b27      	ldr	r3, [pc, #156]	; (800c334 <tcp_timewait_input+0xc8>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 0302 	and.w	r3, r3, #2
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d02a      	beq.n	800c2f6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c2a0:	4b28      	ldr	r3, [pc, #160]	; (800c344 <tcp_timewait_input+0xd8>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	db2d      	blt.n	800c30a <tcp_timewait_input+0x9e>
 800c2ae:	4b25      	ldr	r3, [pc, #148]	; (800c344 <tcp_timewait_input+0xd8>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2ba:	440b      	add	r3, r1
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dc23      	bgt.n	800c30a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2c2:	4b21      	ldr	r3, [pc, #132]	; (800c348 <tcp_timewait_input+0xdc>)
 800c2c4:	6819      	ldr	r1, [r3, #0]
 800c2c6:	4b21      	ldr	r3, [pc, #132]	; (800c34c <tcp_timewait_input+0xe0>)
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	4b1d      	ldr	r3, [pc, #116]	; (800c344 <tcp_timewait_input+0xd8>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2d2:	4b1f      	ldr	r3, [pc, #124]	; (800c350 <tcp_timewait_input+0xe4>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2d6:	885b      	ldrh	r3, [r3, #2]
 800c2d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2da:	4a1d      	ldr	r2, [pc, #116]	; (800c350 <tcp_timewait_input+0xe4>)
 800c2dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2de:	8812      	ldrh	r2, [r2, #0]
 800c2e0:	b292      	uxth	r2, r2
 800c2e2:	9202      	str	r2, [sp, #8]
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	4b1b      	ldr	r3, [pc, #108]	; (800c354 <tcp_timewait_input+0xe8>)
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	4b1b      	ldr	r3, [pc, #108]	; (800c358 <tcp_timewait_input+0xec>)
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f002 fe72 	bl	800efd8 <tcp_rst>
      return;
 800c2f4:	e01b      	b.n	800c32e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <tcp_timewait_input+0xc8>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c302:	4b16      	ldr	r3, [pc, #88]	; (800c35c <tcp_timewait_input+0xf0>)
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c30a:	4b10      	ldr	r3, [pc, #64]	; (800c34c <tcp_timewait_input+0xe0>)
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	8b5b      	ldrh	r3, [r3, #26]
 800c316:	f043 0302 	orr.w	r3, r3, #2
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f002 f8a5 	bl	800e470 <tcp_output>
  }
  return;
 800c326:	e001      	b.n	800c32c <tcp_timewait_input+0xc0>
    return;
 800c328:	bf00      	nop
 800c32a:	e000      	b.n	800c32e <tcp_timewait_input+0xc2>
  return;
 800c32c:	bf00      	nop
}
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20008494 	.word	0x20008494
 800c338:	08014214 	.word	0x08014214
 800c33c:	0801442c 	.word	0x0801442c
 800c340:	08014260 	.word	0x08014260
 800c344:	20008488 	.word	0x20008488
 800c348:	2000848c 	.word	0x2000848c
 800c34c:	20008492 	.word	0x20008492
 800c350:	20008478 	.word	0x20008478
 800c354:	20004ef0 	.word	0x20004ef0
 800c358:	20004ef4 	.word	0x20004ef4
 800c35c:	20008450 	.word	0x20008450

0800c360 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b08d      	sub	sp, #52	; 0x34
 800c364:	af04      	add	r7, sp, #16
 800c366:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d106      	bne.n	800c384 <tcp_process+0x24>
 800c376:	4b9d      	ldr	r3, [pc, #628]	; (800c5ec <tcp_process+0x28c>)
 800c378:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c37c:	499c      	ldr	r1, [pc, #624]	; (800c5f0 <tcp_process+0x290>)
 800c37e:	489d      	ldr	r0, [pc, #628]	; (800c5f4 <tcp_process+0x294>)
 800c380:	f005 ff8c 	bl	801229c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c384:	4b9c      	ldr	r3, [pc, #624]	; (800c5f8 <tcp_process+0x298>)
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d04e      	beq.n	800c42e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7d1b      	ldrb	r3, [r3, #20]
 800c394:	2b02      	cmp	r3, #2
 800c396:	d108      	bne.n	800c3aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c39c:	4b97      	ldr	r3, [pc, #604]	; (800c5fc <tcp_process+0x29c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d123      	bne.n	800c3ec <tcp_process+0x8c>
        acceptable = 1;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	76fb      	strb	r3, [r7, #27]
 800c3a8:	e020      	b.n	800c3ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ae:	4b94      	ldr	r3, [pc, #592]	; (800c600 <tcp_process+0x2a0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d102      	bne.n	800c3bc <tcp_process+0x5c>
        acceptable = 1;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	76fb      	strb	r3, [r7, #27]
 800c3ba:	e017      	b.n	800c3ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c3bc:	4b90      	ldr	r3, [pc, #576]	; (800c600 <tcp_process+0x2a0>)
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	db10      	blt.n	800c3ec <tcp_process+0x8c>
 800c3ca:	4b8d      	ldr	r3, [pc, #564]	; (800c600 <tcp_process+0x2a0>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c3d6:	440b      	add	r3, r1
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	dc06      	bgt.n	800c3ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8b5b      	ldrh	r3, [r3, #26]
 800c3e2:	f043 0302 	orr.w	r3, r3, #2
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c3ec:	7efb      	ldrb	r3, [r7, #27]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d01b      	beq.n	800c42a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7d1b      	ldrb	r3, [r3, #20]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <tcp_process+0xa8>
 800c3fa:	4b7c      	ldr	r3, [pc, #496]	; (800c5ec <tcp_process+0x28c>)
 800c3fc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c400:	4980      	ldr	r1, [pc, #512]	; (800c604 <tcp_process+0x2a4>)
 800c402:	487c      	ldr	r0, [pc, #496]	; (800c5f4 <tcp_process+0x294>)
 800c404:	f005 ff4a 	bl	801229c <iprintf>
      recv_flags |= TF_RESET;
 800c408:	4b7f      	ldr	r3, [pc, #508]	; (800c608 <tcp_process+0x2a8>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	f043 0308 	orr.w	r3, r3, #8
 800c410:	b2da      	uxtb	r2, r3
 800c412:	4b7d      	ldr	r3, [pc, #500]	; (800c608 <tcp_process+0x2a8>)
 800c414:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	8b5b      	ldrh	r3, [r3, #26]
 800c41a:	f023 0301 	bic.w	r3, r3, #1
 800c41e:	b29a      	uxth	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c424:	f06f 030d 	mvn.w	r3, #13
 800c428:	e37a      	b.n	800cb20 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e378      	b.n	800cb20 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c42e:	4b72      	ldr	r3, [pc, #456]	; (800c5f8 <tcp_process+0x298>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d010      	beq.n	800c45c <tcp_process+0xfc>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	7d1b      	ldrb	r3, [r3, #20]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d00c      	beq.n	800c45c <tcp_process+0xfc>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	7d1b      	ldrb	r3, [r3, #20]
 800c446:	2b03      	cmp	r3, #3
 800c448:	d008      	beq.n	800c45c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8b5b      	ldrh	r3, [r3, #26]
 800c44e:	f043 0302 	orr.w	r3, r3, #2
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c458:	2300      	movs	r3, #0
 800c45a:	e361      	b.n	800cb20 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	8b5b      	ldrh	r3, [r3, #26]
 800c460:	f003 0310 	and.w	r3, r3, #16
 800c464:	2b00      	cmp	r3, #0
 800c466:	d103      	bne.n	800c470 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c468:	4b68      	ldr	r3, [pc, #416]	; (800c60c <tcp_process+0x2ac>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f001 fc2f 	bl	800dce4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7d1b      	ldrb	r3, [r3, #20]
 800c48a:	3b02      	subs	r3, #2
 800c48c:	2b07      	cmp	r3, #7
 800c48e:	f200 8337 	bhi.w	800cb00 <tcp_process+0x7a0>
 800c492:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <tcp_process+0x138>)
 800c494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c498:	0800c4b9 	.word	0x0800c4b9
 800c49c:	0800c6e9 	.word	0x0800c6e9
 800c4a0:	0800c861 	.word	0x0800c861
 800c4a4:	0800c88b 	.word	0x0800c88b
 800c4a8:	0800c9af 	.word	0x0800c9af
 800c4ac:	0800c861 	.word	0x0800c861
 800c4b0:	0800ca3b 	.word	0x0800ca3b
 800c4b4:	0800cacb 	.word	0x0800cacb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c4b8:	4b4f      	ldr	r3, [pc, #316]	; (800c5f8 <tcp_process+0x298>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	f003 0310 	and.w	r3, r3, #16
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 80e4 	beq.w	800c68e <tcp_process+0x32e>
 800c4c6:	4b4c      	ldr	r3, [pc, #304]	; (800c5f8 <tcp_process+0x298>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 80dd 	beq.w	800c68e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	4b48      	ldr	r3, [pc, #288]	; (800c5fc <tcp_process+0x29c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	f040 80d5 	bne.w	800c68e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c4e4:	4b46      	ldr	r3, [pc, #280]	; (800c600 <tcp_process+0x2a0>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c4f6:	4b41      	ldr	r3, [pc, #260]	; (800c5fc <tcp_process+0x29c>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c4fe:	4b44      	ldr	r3, [pc, #272]	; (800c610 <tcp_process+0x2b0>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	89db      	ldrh	r3, [r3, #14]
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c518:	4b39      	ldr	r3, [pc, #228]	; (800c600 <tcp_process+0x2a0>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	1e5a      	subs	r2, r3, #1
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2204      	movs	r2, #4
 800c526:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3304      	adds	r3, #4
 800c530:	4618      	mov	r0, r3
 800c532:	f004 faaf 	bl	8010a94 <ip4_route>
 800c536:	4601      	mov	r1, r0
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3304      	adds	r3, #4
 800c53c:	461a      	mov	r2, r3
 800c53e:	4620      	mov	r0, r4
 800c540:	f7ff f88c 	bl	800b65c <tcp_eff_send_mss_netif>
 800c544:	4603      	mov	r3, r0
 800c546:	461a      	mov	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c550:	009a      	lsls	r2, r3, #2
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	f241 111c 	movw	r1, #4380	; 0x111c
 800c55c:	428b      	cmp	r3, r1
 800c55e:	bf38      	it	cc
 800c560:	460b      	movcc	r3, r1
 800c562:	429a      	cmp	r2, r3
 800c564:	d204      	bcs.n	800c570 <tcp_process+0x210>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	e00d      	b.n	800c58c <tcp_process+0x22c>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	f241 121c 	movw	r2, #4380	; 0x111c
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d904      	bls.n	800c588 <tcp_process+0x228>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	b29b      	uxth	r3, r3
 800c586:	e001      	b.n	800c58c <tcp_process+0x22c>
 800c588:	f241 131c 	movw	r3, #4380	; 0x111c
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <tcp_process+0x24a>
 800c59c:	4b13      	ldr	r3, [pc, #76]	; (800c5ec <tcp_process+0x28c>)
 800c59e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c5a2:	491c      	ldr	r1, [pc, #112]	; (800c614 <tcp_process+0x2b4>)
 800c5a4:	4813      	ldr	r0, [pc, #76]	; (800c5f4 <tcp_process+0x294>)
 800c5a6:	f005 fe79 	bl	801229c <iprintf>
        --pcb->snd_queuelen;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5be:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d12a      	bne.n	800c61c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <tcp_process+0x280>
 800c5d2:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <tcp_process+0x28c>)
 800c5d4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c5d8:	490f      	ldr	r1, [pc, #60]	; (800c618 <tcp_process+0x2b8>)
 800c5da:	4806      	ldr	r0, [pc, #24]	; (800c5f4 <tcp_process+0x294>)
 800c5dc:	f005 fe5e 	bl	801229c <iprintf>
          pcb->unsent = rseg->next;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	66da      	str	r2, [r3, #108]	; 0x6c
 800c5e8:	e01c      	b.n	800c624 <tcp_process+0x2c4>
 800c5ea:	bf00      	nop
 800c5ec:	08014214 	.word	0x08014214
 800c5f0:	0801444c 	.word	0x0801444c
 800c5f4:	08014260 	.word	0x08014260
 800c5f8:	20008494 	.word	0x20008494
 800c5fc:	2000848c 	.word	0x2000848c
 800c600:	20008488 	.word	0x20008488
 800c604:	08014468 	.word	0x08014468
 800c608:	20008495 	.word	0x20008495
 800c60c:	20008450 	.word	0x20008450
 800c610:	20008478 	.word	0x20008478
 800c614:	08014488 	.word	0x08014488
 800c618:	080144a0 	.word	0x080144a0
        } else {
          pcb->unacked = rseg->next;
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c624:	69f8      	ldr	r0, [r7, #28]
 800c626:	f7fe fd22 	bl	800b06e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d104      	bne.n	800c63c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c638:	861a      	strh	r2, [r3, #48]	; 0x30
 800c63a:	e006      	b.n	800c64a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00a      	beq.n	800c66a <tcp_process+0x30a>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6910      	ldr	r0, [r2, #16]
 800c65e:	2200      	movs	r2, #0
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	4798      	blx	r3
 800c664:	4603      	mov	r3, r0
 800c666:	76bb      	strb	r3, [r7, #26]
 800c668:	e001      	b.n	800c66e <tcp_process+0x30e>
 800c66a:	2300      	movs	r3, #0
 800c66c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c66e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c672:	f113 0f0d 	cmn.w	r3, #13
 800c676:	d102      	bne.n	800c67e <tcp_process+0x31e>
          return ERR_ABRT;
 800c678:	f06f 030c 	mvn.w	r3, #12
 800c67c:	e250      	b.n	800cb20 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8b5b      	ldrh	r3, [r3, #26]
 800c682:	f043 0302 	orr.w	r3, r3, #2
 800c686:	b29a      	uxth	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c68c:	e23a      	b.n	800cb04 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c68e:	4b98      	ldr	r3, [pc, #608]	; (800c8f0 <tcp_process+0x590>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	f003 0310 	and.w	r3, r3, #16
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 8234 	beq.w	800cb04 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c69c:	4b95      	ldr	r3, [pc, #596]	; (800c8f4 <tcp_process+0x594>)
 800c69e:	6819      	ldr	r1, [r3, #0]
 800c6a0:	4b95      	ldr	r3, [pc, #596]	; (800c8f8 <tcp_process+0x598>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4b95      	ldr	r3, [pc, #596]	; (800c8fc <tcp_process+0x59c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6ac:	4b94      	ldr	r3, [pc, #592]	; (800c900 <tcp_process+0x5a0>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6b0:	885b      	ldrh	r3, [r3, #2]
 800c6b2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6b4:	4a92      	ldr	r2, [pc, #584]	; (800c900 <tcp_process+0x5a0>)
 800c6b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6b8:	8812      	ldrh	r2, [r2, #0]
 800c6ba:	b292      	uxth	r2, r2
 800c6bc:	9202      	str	r2, [sp, #8]
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	4b90      	ldr	r3, [pc, #576]	; (800c904 <tcp_process+0x5a4>)
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	4b90      	ldr	r3, [pc, #576]	; (800c908 <tcp_process+0x5a8>)
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f002 fc85 	bl	800efd8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6d4:	2b05      	cmp	r3, #5
 800c6d6:	f200 8215 	bhi.w	800cb04 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f002 fa51 	bl	800eb88 <tcp_rexmit_rto>
      break;
 800c6e6:	e20d      	b.n	800cb04 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c6e8:	4b81      	ldr	r3, [pc, #516]	; (800c8f0 <tcp_process+0x590>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	f003 0310 	and.w	r3, r3, #16
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 80a1 	beq.w	800c838 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6f6:	4b7f      	ldr	r3, [pc, #508]	; (800c8f4 <tcp_process+0x594>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	3b01      	subs	r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	db7e      	blt.n	800c804 <tcp_process+0x4a4>
 800c706:	4b7b      	ldr	r3, [pc, #492]	; (800c8f4 <tcp_process+0x594>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	dc77      	bgt.n	800c804 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2204      	movs	r2, #4
 800c718:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c722:	23fa      	movs	r3, #250	; 0xfa
 800c724:	76bb      	strb	r3, [r7, #26]
 800c726:	e01d      	b.n	800c764 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d106      	bne.n	800c740 <tcp_process+0x3e0>
 800c732:	4b76      	ldr	r3, [pc, #472]	; (800c90c <tcp_process+0x5ac>)
 800c734:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c738:	4975      	ldr	r1, [pc, #468]	; (800c910 <tcp_process+0x5b0>)
 800c73a:	4876      	ldr	r0, [pc, #472]	; (800c914 <tcp_process+0x5b4>)
 800c73c:	f005 fdae 	bl	801229c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <tcp_process+0x400>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c74e:	699b      	ldr	r3, [r3, #24]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	6910      	ldr	r0, [r2, #16]
 800c754:	2200      	movs	r2, #0
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	4798      	blx	r3
 800c75a:	4603      	mov	r3, r0
 800c75c:	76bb      	strb	r3, [r7, #26]
 800c75e:	e001      	b.n	800c764 <tcp_process+0x404>
 800c760:	23f0      	movs	r3, #240	; 0xf0
 800c762:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c764:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00a      	beq.n	800c782 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c76c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c770:	f113 0f0d 	cmn.w	r3, #13
 800c774:	d002      	beq.n	800c77c <tcp_process+0x41c>
              tcp_abort(pcb);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7fd ff8e 	bl	800a698 <tcp_abort>
            }
            return ERR_ABRT;
 800c77c:	f06f 030c 	mvn.w	r3, #12
 800c780:	e1ce      	b.n	800cb20 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fae0 	bl	800cd48 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c788:	4b63      	ldr	r3, [pc, #396]	; (800c918 <tcp_process+0x5b8>)
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <tcp_process+0x43c>
            recv_acked--;
 800c790:	4b61      	ldr	r3, [pc, #388]	; (800c918 <tcp_process+0x5b8>)
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	3b01      	subs	r3, #1
 800c796:	b29a      	uxth	r2, r3
 800c798:	4b5f      	ldr	r3, [pc, #380]	; (800c918 <tcp_process+0x5b8>)
 800c79a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7a0:	009a      	lsls	r2, r3, #2
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	f241 111c 	movw	r1, #4380	; 0x111c
 800c7ac:	428b      	cmp	r3, r1
 800c7ae:	bf38      	it	cc
 800c7b0:	460b      	movcc	r3, r1
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d204      	bcs.n	800c7c0 <tcp_process+0x460>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	e00d      	b.n	800c7dc <tcp_process+0x47c>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d904      	bls.n	800c7d8 <tcp_process+0x478>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	e001      	b.n	800c7dc <tcp_process+0x47c>
 800c7d8:	f241 131c 	movw	r3, #4380	; 0x111c
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c7e2:	4b4e      	ldr	r3, [pc, #312]	; (800c91c <tcp_process+0x5bc>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	f003 0320 	and.w	r3, r3, #32
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d037      	beq.n	800c85e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8b5b      	ldrh	r3, [r3, #26]
 800c7f2:	f043 0302 	orr.w	r3, r3, #2
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2207      	movs	r2, #7
 800c800:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c802:	e02c      	b.n	800c85e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c804:	4b3b      	ldr	r3, [pc, #236]	; (800c8f4 <tcp_process+0x594>)
 800c806:	6819      	ldr	r1, [r3, #0]
 800c808:	4b3b      	ldr	r3, [pc, #236]	; (800c8f8 <tcp_process+0x598>)
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	4b3b      	ldr	r3, [pc, #236]	; (800c8fc <tcp_process+0x59c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c814:	4b3a      	ldr	r3, [pc, #232]	; (800c900 <tcp_process+0x5a0>)
 800c816:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c81c:	4a38      	ldr	r2, [pc, #224]	; (800c900 <tcp_process+0x5a0>)
 800c81e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c820:	8812      	ldrh	r2, [r2, #0]
 800c822:	b292      	uxth	r2, r2
 800c824:	9202      	str	r2, [sp, #8]
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	4b36      	ldr	r3, [pc, #216]	; (800c904 <tcp_process+0x5a4>)
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	4b36      	ldr	r3, [pc, #216]	; (800c908 <tcp_process+0x5a8>)
 800c82e:	4602      	mov	r2, r0
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f002 fbd1 	bl	800efd8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c836:	e167      	b.n	800cb08 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c838:	4b2d      	ldr	r3, [pc, #180]	; (800c8f0 <tcp_process+0x590>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	f003 0302 	and.w	r3, r3, #2
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 8161 	beq.w	800cb08 <tcp_process+0x7a8>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	1e5a      	subs	r2, r3, #1
 800c84c:	4b2b      	ldr	r3, [pc, #172]	; (800c8fc <tcp_process+0x59c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	429a      	cmp	r2, r3
 800c852:	f040 8159 	bne.w	800cb08 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f002 f9b8 	bl	800ebcc <tcp_rexmit>
      break;
 800c85c:	e154      	b.n	800cb08 <tcp_process+0x7a8>
 800c85e:	e153      	b.n	800cb08 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fa71 	bl	800cd48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c866:	4b2d      	ldr	r3, [pc, #180]	; (800c91c <tcp_process+0x5bc>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f003 0320 	and.w	r3, r3, #32
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 814c 	beq.w	800cb0c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	8b5b      	ldrh	r3, [r3, #26]
 800c878:	f043 0302 	orr.w	r3, r3, #2
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2207      	movs	r2, #7
 800c886:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c888:	e140      	b.n	800cb0c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fa5c 	bl	800cd48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c890:	4b22      	ldr	r3, [pc, #136]	; (800c91c <tcp_process+0x5bc>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	f003 0320 	and.w	r3, r3, #32
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d071      	beq.n	800c980 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c89c:	4b14      	ldr	r3, [pc, #80]	; (800c8f0 <tcp_process+0x590>)
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d060      	beq.n	800c96a <tcp_process+0x60a>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8ac:	4b11      	ldr	r3, [pc, #68]	; (800c8f4 <tcp_process+0x594>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d15a      	bne.n	800c96a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d156      	bne.n	800c96a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	8b5b      	ldrh	r3, [r3, #26]
 800c8c0:	f043 0302 	orr.w	r3, r3, #2
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7fe fdbc 	bl	800b448 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c8d0:	4b13      	ldr	r3, [pc, #76]	; (800c920 <tcp_process+0x5c0>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d105      	bne.n	800c8e6 <tcp_process+0x586>
 800c8da:	4b11      	ldr	r3, [pc, #68]	; (800c920 <tcp_process+0x5c0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	4a0f      	ldr	r2, [pc, #60]	; (800c920 <tcp_process+0x5c0>)
 800c8e2:	6013      	str	r3, [r2, #0]
 800c8e4:	e02e      	b.n	800c944 <tcp_process+0x5e4>
 800c8e6:	4b0e      	ldr	r3, [pc, #56]	; (800c920 <tcp_process+0x5c0>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e027      	b.n	800c93e <tcp_process+0x5de>
 800c8ee:	bf00      	nop
 800c8f0:	20008494 	.word	0x20008494
 800c8f4:	2000848c 	.word	0x2000848c
 800c8f8:	20008492 	.word	0x20008492
 800c8fc:	20008488 	.word	0x20008488
 800c900:	20008478 	.word	0x20008478
 800c904:	20004ef0 	.word	0x20004ef0
 800c908:	20004ef4 	.word	0x20004ef4
 800c90c:	08014214 	.word	0x08014214
 800c910:	080144b4 	.word	0x080144b4
 800c914:	08014260 	.word	0x08014260
 800c918:	20008490 	.word	0x20008490
 800c91c:	20008495 	.word	0x20008495
 800c920:	2000845c 	.word	0x2000845c
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d104      	bne.n	800c938 <tcp_process+0x5d8>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	60da      	str	r2, [r3, #12]
 800c936:	e005      	b.n	800c944 <tcp_process+0x5e4>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	617b      	str	r3, [r7, #20]
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1ef      	bne.n	800c924 <tcp_process+0x5c4>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	60da      	str	r2, [r3, #12]
 800c94a:	4b77      	ldr	r3, [pc, #476]	; (800cb28 <tcp_process+0x7c8>)
 800c94c:	2201      	movs	r2, #1
 800c94e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	220a      	movs	r2, #10
 800c954:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c956:	4b75      	ldr	r3, [pc, #468]	; (800cb2c <tcp_process+0x7cc>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60da      	str	r2, [r3, #12]
 800c95e:	4a73      	ldr	r2, [pc, #460]	; (800cb2c <tcp_process+0x7cc>)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6013      	str	r3, [r2, #0]
 800c964:	f002 fcfa 	bl	800f35c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c968:	e0d2      	b.n	800cb10 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b5b      	ldrh	r3, [r3, #26]
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2208      	movs	r2, #8
 800c97c:	751a      	strb	r2, [r3, #20]
      break;
 800c97e:	e0c7      	b.n	800cb10 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c980:	4b6b      	ldr	r3, [pc, #428]	; (800cb30 <tcp_process+0x7d0>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	f003 0310 	and.w	r3, r3, #16
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f000 80c1 	beq.w	800cb10 <tcp_process+0x7b0>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c992:	4b68      	ldr	r3, [pc, #416]	; (800cb34 <tcp_process+0x7d4>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	f040 80ba 	bne.w	800cb10 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f040 80b5 	bne.w	800cb10 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2206      	movs	r2, #6
 800c9aa:	751a      	strb	r2, [r3, #20]
      break;
 800c9ac:	e0b0      	b.n	800cb10 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f9ca 	bl	800cd48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c9b4:	4b60      	ldr	r3, [pc, #384]	; (800cb38 <tcp_process+0x7d8>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	f003 0320 	and.w	r3, r3, #32
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 80a9 	beq.w	800cb14 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8b5b      	ldrh	r3, [r3, #26]
 800c9c6:	f043 0302 	orr.w	r3, r3, #2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7fe fd39 	bl	800b448 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c9d6:	4b59      	ldr	r3, [pc, #356]	; (800cb3c <tcp_process+0x7dc>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d105      	bne.n	800c9ec <tcp_process+0x68c>
 800c9e0:	4b56      	ldr	r3, [pc, #344]	; (800cb3c <tcp_process+0x7dc>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	4a55      	ldr	r2, [pc, #340]	; (800cb3c <tcp_process+0x7dc>)
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	e013      	b.n	800ca14 <tcp_process+0x6b4>
 800c9ec:	4b53      	ldr	r3, [pc, #332]	; (800cb3c <tcp_process+0x7dc>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	613b      	str	r3, [r7, #16]
 800c9f2:	e00c      	b.n	800ca0e <tcp_process+0x6ae>
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d104      	bne.n	800ca08 <tcp_process+0x6a8>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68da      	ldr	r2, [r3, #12]
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	60da      	str	r2, [r3, #12]
 800ca06:	e005      	b.n	800ca14 <tcp_process+0x6b4>
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	613b      	str	r3, [r7, #16]
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1ef      	bne.n	800c9f4 <tcp_process+0x694>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	60da      	str	r2, [r3, #12]
 800ca1a:	4b43      	ldr	r3, [pc, #268]	; (800cb28 <tcp_process+0x7c8>)
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	220a      	movs	r2, #10
 800ca24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca26:	4b41      	ldr	r3, [pc, #260]	; (800cb2c <tcp_process+0x7cc>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	60da      	str	r2, [r3, #12]
 800ca2e:	4a3f      	ldr	r2, [pc, #252]	; (800cb2c <tcp_process+0x7cc>)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	f002 fc92 	bl	800f35c <tcp_timer_needed>
      }
      break;
 800ca38:	e06c      	b.n	800cb14 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f984 	bl	800cd48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca40:	4b3b      	ldr	r3, [pc, #236]	; (800cb30 <tcp_process+0x7d0>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	f003 0310 	and.w	r3, r3, #16
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d065      	beq.n	800cb18 <tcp_process+0x7b8>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca50:	4b38      	ldr	r3, [pc, #224]	; (800cb34 <tcp_process+0x7d4>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d15f      	bne.n	800cb18 <tcp_process+0x7b8>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d15b      	bne.n	800cb18 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7fe fcf1 	bl	800b448 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ca66:	4b35      	ldr	r3, [pc, #212]	; (800cb3c <tcp_process+0x7dc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d105      	bne.n	800ca7c <tcp_process+0x71c>
 800ca70:	4b32      	ldr	r3, [pc, #200]	; (800cb3c <tcp_process+0x7dc>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	4a31      	ldr	r2, [pc, #196]	; (800cb3c <tcp_process+0x7dc>)
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	e013      	b.n	800caa4 <tcp_process+0x744>
 800ca7c:	4b2f      	ldr	r3, [pc, #188]	; (800cb3c <tcp_process+0x7dc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60fb      	str	r3, [r7, #12]
 800ca82:	e00c      	b.n	800ca9e <tcp_process+0x73e>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d104      	bne.n	800ca98 <tcp_process+0x738>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	60da      	str	r2, [r3, #12]
 800ca96:	e005      	b.n	800caa4 <tcp_process+0x744>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1ef      	bne.n	800ca84 <tcp_process+0x724>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	60da      	str	r2, [r3, #12]
 800caaa:	4b1f      	ldr	r3, [pc, #124]	; (800cb28 <tcp_process+0x7c8>)
 800caac:	2201      	movs	r2, #1
 800caae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	220a      	movs	r2, #10
 800cab4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cab6:	4b1d      	ldr	r3, [pc, #116]	; (800cb2c <tcp_process+0x7cc>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60da      	str	r2, [r3, #12]
 800cabe:	4a1b      	ldr	r2, [pc, #108]	; (800cb2c <tcp_process+0x7cc>)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	f002 fc4a 	bl	800f35c <tcp_timer_needed>
      }
      break;
 800cac8:	e026      	b.n	800cb18 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 f93c 	bl	800cd48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cad0:	4b17      	ldr	r3, [pc, #92]	; (800cb30 <tcp_process+0x7d0>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	f003 0310 	and.w	r3, r3, #16
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01f      	beq.n	800cb1c <tcp_process+0x7bc>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cae0:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <tcp_process+0x7d4>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d119      	bne.n	800cb1c <tcp_process+0x7bc>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d115      	bne.n	800cb1c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800caf0:	4b11      	ldr	r3, [pc, #68]	; (800cb38 <tcp_process+0x7d8>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f043 0310 	orr.w	r3, r3, #16
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <tcp_process+0x7d8>)
 800cafc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cafe:	e00d      	b.n	800cb1c <tcp_process+0x7bc>
    default:
      break;
 800cb00:	bf00      	nop
 800cb02:	e00c      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb04:	bf00      	nop
 800cb06:	e00a      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb08:	bf00      	nop
 800cb0a:	e008      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb0c:	bf00      	nop
 800cb0e:	e006      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb10:	bf00      	nop
 800cb12:	e004      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb14:	bf00      	nop
 800cb16:	e002      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb18:	bf00      	nop
 800cb1a:	e000      	b.n	800cb1e <tcp_process+0x7be>
      break;
 800cb1c:	bf00      	nop
  }
  return ERR_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3724      	adds	r7, #36	; 0x24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd90      	pop	{r4, r7, pc}
 800cb28:	20008464 	.word	0x20008464
 800cb2c:	20008460 	.word	0x20008460
 800cb30:	20008494 	.word	0x20008494
 800cb34:	2000848c 	.word	0x2000848c
 800cb38:	20008495 	.word	0x20008495
 800cb3c:	2000845c 	.word	0x2000845c

0800cb40 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cb40:	b590      	push	{r4, r7, lr}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <tcp_oos_insert_segment+0x1e>
 800cb50:	4b3b      	ldr	r3, [pc, #236]	; (800cc40 <tcp_oos_insert_segment+0x100>)
 800cb52:	f240 421f 	movw	r2, #1055	; 0x41f
 800cb56:	493b      	ldr	r1, [pc, #236]	; (800cc44 <tcp_oos_insert_segment+0x104>)
 800cb58:	483b      	ldr	r0, [pc, #236]	; (800cc48 <tcp_oos_insert_segment+0x108>)
 800cb5a:	f005 fb9f 	bl	801229c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	899b      	ldrh	r3, [r3, #12]
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fb fcd0 	bl	800850c <lwip_htons>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d028      	beq.n	800cbca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cb78:	6838      	ldr	r0, [r7, #0]
 800cb7a:	f7fe fa63 	bl	800b044 <tcp_segs_free>
    next = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	603b      	str	r3, [r7, #0]
 800cb82:	e056      	b.n	800cc32 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	899b      	ldrh	r3, [r3, #12]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fb fcbd 	bl	800850c <lwip_htons>
 800cb92:	4603      	mov	r3, r0
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00d      	beq.n	800cbba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	899b      	ldrh	r3, [r3, #12]
 800cba4:	b29c      	uxth	r4, r3
 800cba6:	2001      	movs	r0, #1
 800cba8:	f7fb fcb0 	bl	800850c <lwip_htons>
 800cbac:	4603      	mov	r3, r0
 800cbae:	461a      	mov	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	4322      	orrs	r2, r4
 800cbb6:	b292      	uxth	r2, r2
 800cbb8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f7fe fa52 	bl	800b06e <tcp_seg_free>
    while (next &&
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00e      	beq.n	800cbee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	891b      	ldrh	r3, [r3, #8]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <tcp_oos_insert_segment+0x10c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	441a      	add	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	8909      	ldrh	r1, [r1, #8]
 800cbe6:	440b      	add	r3, r1
 800cbe8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	daca      	bge.n	800cb84 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d01e      	beq.n	800cc32 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	891b      	ldrh	r3, [r3, #8]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4b14      	ldr	r3, [pc, #80]	; (800cc4c <tcp_oos_insert_segment+0x10c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	441a      	add	r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	dd12      	ble.n	800cc32 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <tcp_oos_insert_segment+0x10c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	891b      	ldrh	r3, [r3, #8]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f7fc fe25 	bl	800987c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	601a      	str	r2, [r3, #0]
}
 800cc38:	bf00      	nop
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd90      	pop	{r4, r7, pc}
 800cc40:	08014214 	.word	0x08014214
 800cc44:	080144d4 	.word	0x080144d4
 800cc48:	08014260 	.word	0x08014260
 800cc4c:	20008488 	.word	0x20008488

0800cc50 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cc50:	b5b0      	push	{r4, r5, r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cc5e:	e03e      	b.n	800ccde <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fd f812 	bl	8009c98 <pbuf_clen>
 800cc74:	4603      	mov	r3, r0
 800cc76:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc7e:	8a7a      	ldrh	r2, [r7, #18]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d906      	bls.n	800cc92 <tcp_free_acked_segments+0x42>
 800cc84:	4b2a      	ldr	r3, [pc, #168]	; (800cd30 <tcp_free_acked_segments+0xe0>)
 800cc86:	f240 4257 	movw	r2, #1111	; 0x457
 800cc8a:	492a      	ldr	r1, [pc, #168]	; (800cd34 <tcp_free_acked_segments+0xe4>)
 800cc8c:	482a      	ldr	r0, [pc, #168]	; (800cd38 <tcp_free_acked_segments+0xe8>)
 800cc8e:	f005 fb05 	bl	801229c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cc98:	8a7b      	ldrh	r3, [r7, #18]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	891a      	ldrh	r2, [r3, #8]
 800cca8:	4b24      	ldr	r3, [pc, #144]	; (800cd3c <tcp_free_acked_segments+0xec>)
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	4413      	add	r3, r2
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <tcp_free_acked_segments+0xec>)
 800ccb2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ccb4:	6978      	ldr	r0, [r7, #20]
 800ccb6:	f7fe f9da 	bl	800b06e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00c      	beq.n	800ccde <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d109      	bne.n	800ccde <tcp_free_acked_segments+0x8e>
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d106      	bne.n	800ccde <tcp_free_acked_segments+0x8e>
 800ccd0:	4b17      	ldr	r3, [pc, #92]	; (800cd30 <tcp_free_acked_segments+0xe0>)
 800ccd2:	f240 4261 	movw	r2, #1121	; 0x461
 800ccd6:	491a      	ldr	r1, [pc, #104]	; (800cd40 <tcp_free_acked_segments+0xf0>)
 800ccd8:	4817      	ldr	r0, [pc, #92]	; (800cd38 <tcp_free_acked_segments+0xe8>)
 800ccda:	f005 fadf 	bl	801229c <iprintf>
  while (seg_list != NULL &&
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d020      	beq.n	800cd26 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fb fc23 	bl	8008536 <lwip_htonl>
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	891b      	ldrh	r3, [r3, #8]
 800ccf6:	461d      	mov	r5, r3
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	899b      	ldrh	r3, [r3, #12]
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fb fc03 	bl	800850c <lwip_htons>
 800cd06:	4603      	mov	r3, r0
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f003 0303 	and.w	r3, r3, #3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <tcp_free_acked_segments+0xc6>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e000      	b.n	800cd18 <tcp_free_acked_segments+0xc8>
 800cd16:	2300      	movs	r3, #0
 800cd18:	442b      	add	r3, r5
 800cd1a:	18e2      	adds	r2, r4, r3
 800cd1c:	4b09      	ldr	r3, [pc, #36]	; (800cd44 <tcp_free_acked_segments+0xf4>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	dd9c      	ble.n	800cc60 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cd26:	68bb      	ldr	r3, [r7, #8]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bdb0      	pop	{r4, r5, r7, pc}
 800cd30:	08014214 	.word	0x08014214
 800cd34:	080144fc 	.word	0x080144fc
 800cd38:	08014260 	.word	0x08014260
 800cd3c:	20008490 	.word	0x20008490
 800cd40:	08014524 	.word	0x08014524
 800cd44:	2000848c 	.word	0x2000848c

0800cd48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cd48:	b5b0      	push	{r4, r5, r7, lr}
 800cd4a:	b094      	sub	sp, #80	; 0x50
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <tcp_receive+0x20>
 800cd5a:	4b91      	ldr	r3, [pc, #580]	; (800cfa0 <tcp_receive+0x258>)
 800cd5c:	f240 427b 	movw	r2, #1147	; 0x47b
 800cd60:	4990      	ldr	r1, [pc, #576]	; (800cfa4 <tcp_receive+0x25c>)
 800cd62:	4891      	ldr	r0, [pc, #580]	; (800cfa8 <tcp_receive+0x260>)
 800cd64:	f005 fa9a 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7d1b      	ldrb	r3, [r3, #20]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d806      	bhi.n	800cd7e <tcp_receive+0x36>
 800cd70:	4b8b      	ldr	r3, [pc, #556]	; (800cfa0 <tcp_receive+0x258>)
 800cd72:	f240 427c 	movw	r2, #1148	; 0x47c
 800cd76:	498d      	ldr	r1, [pc, #564]	; (800cfac <tcp_receive+0x264>)
 800cd78:	488b      	ldr	r0, [pc, #556]	; (800cfa8 <tcp_receive+0x260>)
 800cd7a:	f005 fa8f 	bl	801229c <iprintf>

  if (flags & TCP_ACK) {
 800cd7e:	4b8c      	ldr	r3, [pc, #560]	; (800cfb0 <tcp_receive+0x268>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	f003 0310 	and.w	r3, r3, #16
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 8264 	beq.w	800d254 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd92:	461a      	mov	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd98:	4413      	add	r3, r2
 800cd9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cda0:	4b84      	ldr	r3, [pc, #528]	; (800cfb4 <tcp_receive+0x26c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	db1b      	blt.n	800cde2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdae:	4b81      	ldr	r3, [pc, #516]	; (800cfb4 <tcp_receive+0x26c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d106      	bne.n	800cdc4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdba:	4b7f      	ldr	r3, [pc, #508]	; (800cfb8 <tcp_receive+0x270>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	db0e      	blt.n	800cde2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdc8:	4b7b      	ldr	r3, [pc, #492]	; (800cfb8 <tcp_receive+0x270>)
 800cdca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d125      	bne.n	800ce1c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cdd0:	4b7a      	ldr	r3, [pc, #488]	; (800cfbc <tcp_receive+0x274>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	89db      	ldrh	r3, [r3, #14]
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d91c      	bls.n	800ce1c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cde2:	4b76      	ldr	r3, [pc, #472]	; (800cfbc <tcp_receive+0x274>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	89db      	ldrh	r3, [r3, #14]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d205      	bcs.n	800ce0c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ce0c:	4b69      	ldr	r3, [pc, #420]	; (800cfb4 <tcp_receive+0x26c>)
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ce14:	4b68      	ldr	r3, [pc, #416]	; (800cfb8 <tcp_receive+0x270>)
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ce1c:	4b66      	ldr	r3, [pc, #408]	; (800cfb8 <tcp_receive+0x270>)
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	dc58      	bgt.n	800cedc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ce2a:	4b65      	ldr	r3, [pc, #404]	; (800cfc0 <tcp_receive+0x278>)
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d14b      	bne.n	800ceca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ce3c:	4413      	add	r3, r2
 800ce3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d142      	bne.n	800ceca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	db3d      	blt.n	800ceca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce52:	4b59      	ldr	r3, [pc, #356]	; (800cfb8 <tcp_receive+0x270>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d137      	bne.n	800ceca <tcp_receive+0x182>
              found_dupack = 1;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce64:	2bff      	cmp	r3, #255	; 0xff
 800ce66:	d007      	beq.n	800ce78 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	d91b      	bls.n	800ceba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce8c:	4413      	add	r3, r2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d30a      	bcc.n	800ceb0 <tcp_receive+0x168>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cea4:	4413      	add	r3, r2
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ceae:	e004      	b.n	800ceba <tcp_receive+0x172>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d902      	bls.n	800ceca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f001 feed 	bl	800eca4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ceca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f040 8161 	bne.w	800d194 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ceda:	e15b      	b.n	800d194 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cedc:	4b36      	ldr	r3, [pc, #216]	; (800cfb8 <tcp_receive+0x270>)
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	3b01      	subs	r3, #1
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f2c0 814e 	blt.w	800d18a <tcp_receive+0x442>
 800ceee:	4b32      	ldr	r3, [pc, #200]	; (800cfb8 <tcp_receive+0x270>)
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f300 8146 	bgt.w	800d18a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8b5b      	ldrh	r3, [r3, #26]
 800cf02:	f003 0304 	and.w	r3, r3, #4
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d010      	beq.n	800cf2c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	8b5b      	ldrh	r3, [r3, #26]
 800cf0e:	f023 0304 	bic.w	r3, r3, #4
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf3a:	10db      	asrs	r3, r3, #3
 800cf3c:	b21b      	sxth	r3, r3
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	4413      	add	r3, r2
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	b21a      	sxth	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cf54:	4b18      	ldr	r3, [pc, #96]	; (800cfb8 <tcp_receive+0x270>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cf6c:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <tcp_receive+0x270>)
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	7d1b      	ldrb	r3, [r3, #20]
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	f240 8097 	bls.w	800d0ac <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d245      	bcs.n	800d01a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	8b5b      	ldrh	r3, [r3, #26]
 800cf92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d014      	beq.n	800cfc4 <tcp_receive+0x27c>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e013      	b.n	800cfc6 <tcp_receive+0x27e>
 800cf9e:	bf00      	nop
 800cfa0:	08014214 	.word	0x08014214
 800cfa4:	08014544 	.word	0x08014544
 800cfa8:	08014260 	.word	0x08014260
 800cfac:	08014560 	.word	0x08014560
 800cfb0:	20008494 	.word	0x20008494
 800cfb4:	20008488 	.word	0x20008488
 800cfb8:	2000848c 	.word	0x2000848c
 800cfbc:	20008478 	.word	0x20008478
 800cfc0:	20008492 	.word	0x20008492
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cfca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfd4:	fb12 f303 	smulbb	r3, r2, r3
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	bf28      	it	cs
 800cfe0:	4613      	movcs	r3, r2
 800cfe2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfec:	4413      	add	r3, r2
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d309      	bcc.n	800d00e <tcp_receive+0x2c6>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d002:	4413      	add	r3, r2
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d00c:	e04e      	b.n	800d0ac <tcp_receive+0x364>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d018:	e048      	b.n	800d0ac <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d020:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d022:	4413      	add	r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d309      	bcc.n	800d044 <tcp_receive+0x2fc>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d038:	4413      	add	r3, r2
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d042:	e004      	b.n	800d04e <tcp_receive+0x306>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d04a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d326      	bcc.n	800d0ac <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d07e:	4413      	add	r3, r2
 800d080:	b29a      	uxth	r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d088:	429a      	cmp	r2, r3
 800d08a:	d30a      	bcc.n	800d0a2 <tcp_receive+0x35a>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d096:	4413      	add	r3, r2
 800d098:	b29a      	uxth	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d0a0:	e004      	b.n	800d0ac <tcp_receive+0x364>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b4:	4a98      	ldr	r2, [pc, #608]	; (800d318 <tcp_receive+0x5d0>)
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7ff fdca 	bl	800cc50 <tcp_free_acked_segments>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ca:	4a94      	ldr	r2, [pc, #592]	; (800d31c <tcp_receive+0x5d4>)
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff fdbf 	bl	800cc50 <tcp_free_acked_segments>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d104      	bne.n	800d0ea <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0e6:	861a      	strh	r2, [r3, #48]	; 0x30
 800d0e8:	e002      	b.n	800d0f0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d103      	bne.n	800d106 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d10c:	4b84      	ldr	r3, [pc, #528]	; (800d320 <tcp_receive+0x5d8>)
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	4413      	add	r3, r2
 800d112:	b29a      	uxth	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	8b5b      	ldrh	r3, [r3, #26]
 800d11e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d122:	2b00      	cmp	r3, #0
 800d124:	d035      	beq.n	800d192 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d118      	bne.n	800d160 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00c      	beq.n	800d150 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	4618      	mov	r0, r3
 800d144:	f7fb f9f7 	bl	8008536 <lwip_htonl>
 800d148:	4603      	mov	r3, r0
 800d14a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dc20      	bgt.n	800d192 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	8b5b      	ldrh	r3, [r3, #26]
 800d154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d158:	b29a      	uxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d15e:	e018      	b.n	800d192 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fb f9e2 	bl	8008536 <lwip_htonl>
 800d172:	4603      	mov	r3, r0
 800d174:	1ae3      	subs	r3, r4, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	dc0b      	bgt.n	800d192 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	8b5b      	ldrh	r3, [r3, #26]
 800d17e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d182:	b29a      	uxth	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d188:	e003      	b.n	800d192 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f001 ff76 	bl	800f07c <tcp_send_empty_ack>
 800d190:	e000      	b.n	800d194 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d192:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d05b      	beq.n	800d254 <tcp_receive+0x50c>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1a0:	4b60      	ldr	r3, [pc, #384]	; (800d324 <tcp_receive+0x5dc>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	da54      	bge.n	800d254 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d1aa:	4b5f      	ldr	r3, [pc, #380]	; (800d328 <tcp_receive+0x5e0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d1be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d1c8:	10db      	asrs	r3, r3, #3
 800d1ca:	b21b      	sxth	r3, r3
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d1e2:	4413      	add	r3, r2
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	b21a      	sxth	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d1ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	da05      	bge.n	800d200 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d1f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d1f8:	425b      	negs	r3, r3
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d200:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d20a:	109b      	asrs	r3, r3, #2
 800d20c:	b21b      	sxth	r3, r3
 800d20e:	b29b      	uxth	r3, r3
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	b29b      	uxth	r3, r3
 800d214:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d21e:	b29a      	uxth	r2, r3
 800d220:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d224:	4413      	add	r3, r2
 800d226:	b29b      	uxth	r3, r3
 800d228:	b21a      	sxth	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d234:	10db      	asrs	r3, r3, #3
 800d236:	b21b      	sxth	r3, r3
 800d238:	b29a      	uxth	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d240:	b29b      	uxth	r3, r3
 800d242:	4413      	add	r3, r2
 800d244:	b29b      	uxth	r3, r3
 800d246:	b21a      	sxth	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d254:	4b35      	ldr	r3, [pc, #212]	; (800d32c <tcp_receive+0x5e4>)
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 84e2 	beq.w	800dc22 <tcp_receive+0xeda>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7d1b      	ldrb	r3, [r3, #20]
 800d262:	2b06      	cmp	r3, #6
 800d264:	f200 84dd 	bhi.w	800dc22 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d26c:	4b30      	ldr	r3, [pc, #192]	; (800d330 <tcp_receive+0x5e8>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	3b01      	subs	r3, #1
 800d274:	2b00      	cmp	r3, #0
 800d276:	f2c0 808f 	blt.w	800d398 <tcp_receive+0x650>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d27e:	4b2b      	ldr	r3, [pc, #172]	; (800d32c <tcp_receive+0x5e4>)
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	4619      	mov	r1, r3
 800d284:	4b2a      	ldr	r3, [pc, #168]	; (800d330 <tcp_receive+0x5e8>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	440b      	add	r3, r1
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	3301      	adds	r3, #1
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f300 8082 	bgt.w	800d398 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d294:	4b27      	ldr	r3, [pc, #156]	; (800d334 <tcp_receive+0x5ec>)
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d29e:	4b24      	ldr	r3, [pc, #144]	; (800d330 <tcp_receive+0x5e8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d2a6:	4b23      	ldr	r3, [pc, #140]	; (800d334 <tcp_receive+0x5ec>)
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <tcp_receive+0x574>
 800d2ae:	4b22      	ldr	r3, [pc, #136]	; (800d338 <tcp_receive+0x5f0>)
 800d2b0:	f240 5294 	movw	r2, #1428	; 0x594
 800d2b4:	4921      	ldr	r1, [pc, #132]	; (800d33c <tcp_receive+0x5f4>)
 800d2b6:	4822      	ldr	r0, [pc, #136]	; (800d340 <tcp_receive+0x5f8>)
 800d2b8:	f004 fff0 	bl	801229c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d906      	bls.n	800d2d4 <tcp_receive+0x58c>
 800d2c6:	4b1c      	ldr	r3, [pc, #112]	; (800d338 <tcp_receive+0x5f0>)
 800d2c8:	f240 5295 	movw	r2, #1429	; 0x595
 800d2cc:	491d      	ldr	r1, [pc, #116]	; (800d344 <tcp_receive+0x5fc>)
 800d2ce:	481c      	ldr	r0, [pc, #112]	; (800d340 <tcp_receive+0x5f8>)
 800d2d0:	f004 ffe4 	bl	801229c <iprintf>
      off = (u16_t)off32;
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d2da:	4b16      	ldr	r3, [pc, #88]	; (800d334 <tcp_receive+0x5ec>)
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	891b      	ldrh	r3, [r3, #8]
 800d2e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d906      	bls.n	800d2f6 <tcp_receive+0x5ae>
 800d2e8:	4b13      	ldr	r3, [pc, #76]	; (800d338 <tcp_receive+0x5f0>)
 800d2ea:	f240 5297 	movw	r2, #1431	; 0x597
 800d2ee:	4916      	ldr	r1, [pc, #88]	; (800d348 <tcp_receive+0x600>)
 800d2f0:	4813      	ldr	r0, [pc, #76]	; (800d340 <tcp_receive+0x5f8>)
 800d2f2:	f004 ffd3 	bl	801229c <iprintf>
      inseg.len -= off;
 800d2f6:	4b0f      	ldr	r3, [pc, #60]	; (800d334 <tcp_receive+0x5ec>)
 800d2f8:	891a      	ldrh	r2, [r3, #8]
 800d2fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	b29a      	uxth	r2, r3
 800d302:	4b0c      	ldr	r3, [pc, #48]	; (800d334 <tcp_receive+0x5ec>)
 800d304:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d306:	4b0b      	ldr	r3, [pc, #44]	; (800d334 <tcp_receive+0x5ec>)
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	891a      	ldrh	r2, [r3, #8]
 800d30c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d314:	e02a      	b.n	800d36c <tcp_receive+0x624>
 800d316:	bf00      	nop
 800d318:	0801457c 	.word	0x0801457c
 800d31c:	08014584 	.word	0x08014584
 800d320:	20008490 	.word	0x20008490
 800d324:	2000848c 	.word	0x2000848c
 800d328:	20008450 	.word	0x20008450
 800d32c:	20008492 	.word	0x20008492
 800d330:	20008488 	.word	0x20008488
 800d334:	20008468 	.word	0x20008468
 800d338:	08014214 	.word	0x08014214
 800d33c:	0801458c 	.word	0x0801458c
 800d340:	08014260 	.word	0x08014260
 800d344:	0801459c 	.word	0x0801459c
 800d348:	080145ac 	.word	0x080145ac
        off -= p->len;
 800d34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d34e:	895b      	ldrh	r3, [r3, #10]
 800d350:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d35c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d35e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d362:	2200      	movs	r2, #0
 800d364:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d36e:	895b      	ldrh	r3, [r3, #10]
 800d370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d374:	429a      	cmp	r2, r3
 800d376:	d8e9      	bhi.n	800d34c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d37c:	4619      	mov	r1, r3
 800d37e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d380:	f7fc fb7c 	bl	8009a7c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d388:	4a91      	ldr	r2, [pc, #580]	; (800d5d0 <tcp_receive+0x888>)
 800d38a:	6013      	str	r3, [r2, #0]
 800d38c:	4b91      	ldr	r3, [pc, #580]	; (800d5d4 <tcp_receive+0x88c>)
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	4a8f      	ldr	r2, [pc, #572]	; (800d5d0 <tcp_receive+0x888>)
 800d392:	6812      	ldr	r2, [r2, #0]
 800d394:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d396:	e00d      	b.n	800d3b4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d398:	4b8d      	ldr	r3, [pc, #564]	; (800d5d0 <tcp_receive+0x888>)
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	da06      	bge.n	800d3b4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	8b5b      	ldrh	r3, [r3, #26]
 800d3aa:	f043 0302 	orr.w	r3, r3, #2
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3b4:	4b86      	ldr	r3, [pc, #536]	; (800d5d0 <tcp_receive+0x888>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f2c0 842a 	blt.w	800dc18 <tcp_receive+0xed0>
 800d3c4:	4b82      	ldr	r3, [pc, #520]	; (800d5d0 <tcp_receive+0x888>)
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3d0:	440b      	add	r3, r1
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f300 841e 	bgt.w	800dc18 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e0:	4b7b      	ldr	r3, [pc, #492]	; (800d5d0 <tcp_receive+0x888>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	f040 829a 	bne.w	800d91e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d3ea:	4b7a      	ldr	r3, [pc, #488]	; (800d5d4 <tcp_receive+0x88c>)
 800d3ec:	891c      	ldrh	r4, [r3, #8]
 800d3ee:	4b79      	ldr	r3, [pc, #484]	; (800d5d4 <tcp_receive+0x88c>)
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	899b      	ldrh	r3, [r3, #12]
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fb f888 	bl	800850c <lwip_htons>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	f003 0303 	and.w	r3, r3, #3
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <tcp_receive+0x6c4>
 800d408:	2301      	movs	r3, #1
 800d40a:	e000      	b.n	800d40e <tcp_receive+0x6c6>
 800d40c:	2300      	movs	r3, #0
 800d40e:	4423      	add	r3, r4
 800d410:	b29a      	uxth	r2, r3
 800d412:	4b71      	ldr	r3, [pc, #452]	; (800d5d8 <tcp_receive+0x890>)
 800d414:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d41a:	4b6f      	ldr	r3, [pc, #444]	; (800d5d8 <tcp_receive+0x890>)
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d275      	bcs.n	800d50e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d422:	4b6c      	ldr	r3, [pc, #432]	; (800d5d4 <tcp_receive+0x88c>)
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	899b      	ldrh	r3, [r3, #12]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fb f86e 	bl	800850c <lwip_htons>
 800d430:	4603      	mov	r3, r0
 800d432:	b2db      	uxtb	r3, r3
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01f      	beq.n	800d47c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d43c:	4b65      	ldr	r3, [pc, #404]	; (800d5d4 <tcp_receive+0x88c>)
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	899b      	ldrh	r3, [r3, #12]
 800d442:	b29b      	uxth	r3, r3
 800d444:	b21b      	sxth	r3, r3
 800d446:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d44a:	b21c      	sxth	r4, r3
 800d44c:	4b61      	ldr	r3, [pc, #388]	; (800d5d4 <tcp_receive+0x88c>)
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	899b      	ldrh	r3, [r3, #12]
 800d452:	b29b      	uxth	r3, r3
 800d454:	4618      	mov	r0, r3
 800d456:	f7fb f859 	bl	800850c <lwip_htons>
 800d45a:	4603      	mov	r3, r0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d464:	b29b      	uxth	r3, r3
 800d466:	4618      	mov	r0, r3
 800d468:	f7fb f850 	bl	800850c <lwip_htons>
 800d46c:	4603      	mov	r3, r0
 800d46e:	b21b      	sxth	r3, r3
 800d470:	4323      	orrs	r3, r4
 800d472:	b21a      	sxth	r2, r3
 800d474:	4b57      	ldr	r3, [pc, #348]	; (800d5d4 <tcp_receive+0x88c>)
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	b292      	uxth	r2, r2
 800d47a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d480:	4b54      	ldr	r3, [pc, #336]	; (800d5d4 <tcp_receive+0x88c>)
 800d482:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d484:	4b53      	ldr	r3, [pc, #332]	; (800d5d4 <tcp_receive+0x88c>)
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	899b      	ldrh	r3, [r3, #12]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fb f83d 	bl	800850c <lwip_htons>
 800d492:	4603      	mov	r3, r0
 800d494:	b2db      	uxtb	r3, r3
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d005      	beq.n	800d4aa <tcp_receive+0x762>
            inseg.len -= 1;
 800d49e:	4b4d      	ldr	r3, [pc, #308]	; (800d5d4 <tcp_receive+0x88c>)
 800d4a0:	891b      	ldrh	r3, [r3, #8]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	4b4b      	ldr	r3, [pc, #300]	; (800d5d4 <tcp_receive+0x88c>)
 800d4a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d4aa:	4b4a      	ldr	r3, [pc, #296]	; (800d5d4 <tcp_receive+0x88c>)
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	4a49      	ldr	r2, [pc, #292]	; (800d5d4 <tcp_receive+0x88c>)
 800d4b0:	8912      	ldrh	r2, [r2, #8]
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fc f9e1 	bl	800987c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d4ba:	4b46      	ldr	r3, [pc, #280]	; (800d5d4 <tcp_receive+0x88c>)
 800d4bc:	891c      	ldrh	r4, [r3, #8]
 800d4be:	4b45      	ldr	r3, [pc, #276]	; (800d5d4 <tcp_receive+0x88c>)
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	899b      	ldrh	r3, [r3, #12]
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fb f820 	bl	800850c <lwip_htons>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f003 0303 	and.w	r3, r3, #3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <tcp_receive+0x794>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <tcp_receive+0x796>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4423      	add	r3, r4
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	4b3d      	ldr	r3, [pc, #244]	; (800d5d8 <tcp_receive+0x890>)
 800d4e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d4e6:	4b3c      	ldr	r3, [pc, #240]	; (800d5d8 <tcp_receive+0x890>)
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	4b38      	ldr	r3, [pc, #224]	; (800d5d0 <tcp_receive+0x888>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	441a      	add	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4fa:	440b      	add	r3, r1
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d006      	beq.n	800d50e <tcp_receive+0x7c6>
 800d500:	4b36      	ldr	r3, [pc, #216]	; (800d5dc <tcp_receive+0x894>)
 800d502:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d506:	4936      	ldr	r1, [pc, #216]	; (800d5e0 <tcp_receive+0x898>)
 800d508:	4836      	ldr	r0, [pc, #216]	; (800d5e4 <tcp_receive+0x89c>)
 800d50a:	f004 fec7 	bl	801229c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d512:	2b00      	cmp	r3, #0
 800d514:	f000 80e7 	beq.w	800d6e6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d518:	4b2e      	ldr	r3, [pc, #184]	; (800d5d4 <tcp_receive+0x88c>)
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	899b      	ldrh	r3, [r3, #12]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	4618      	mov	r0, r3
 800d522:	f7fa fff3 	bl	800850c <lwip_htons>
 800d526:	4603      	mov	r3, r0
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d010      	beq.n	800d554 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d532:	e00a      	b.n	800d54a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d538:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7fd fd92 	bl	800b06e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1f0      	bne.n	800d534 <tcp_receive+0x7ec>
 800d552:	e0c8      	b.n	800d6e6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d558:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d55a:	e052      	b.n	800d602 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	899b      	ldrh	r3, [r3, #12]
 800d562:	b29b      	uxth	r3, r3
 800d564:	4618      	mov	r0, r3
 800d566:	f7fa ffd1 	bl	800850c <lwip_htons>
 800d56a:	4603      	mov	r3, r0
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d03d      	beq.n	800d5f2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d576:	4b17      	ldr	r3, [pc, #92]	; (800d5d4 <tcp_receive+0x88c>)
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	899b      	ldrh	r3, [r3, #12]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fa ffc4 	bl	800850c <lwip_htons>
 800d584:	4603      	mov	r3, r0
 800d586:	b2db      	uxtb	r3, r3
 800d588:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d130      	bne.n	800d5f2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d590:	4b10      	ldr	r3, [pc, #64]	; (800d5d4 <tcp_receive+0x88c>)
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	899b      	ldrh	r3, [r3, #12]
 800d596:	b29c      	uxth	r4, r3
 800d598:	2001      	movs	r0, #1
 800d59a:	f7fa ffb7 	bl	800850c <lwip_htons>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4b0c      	ldr	r3, [pc, #48]	; (800d5d4 <tcp_receive+0x88c>)
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	4322      	orrs	r2, r4
 800d5a8:	b292      	uxth	r2, r2
 800d5aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d5ac:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <tcp_receive+0x88c>)
 800d5ae:	891c      	ldrh	r4, [r3, #8]
 800d5b0:	4b08      	ldr	r3, [pc, #32]	; (800d5d4 <tcp_receive+0x88c>)
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	899b      	ldrh	r3, [r3, #12]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fa ffa7 	bl	800850c <lwip_htons>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	f003 0303 	and.w	r3, r3, #3
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00e      	beq.n	800d5e8 <tcp_receive+0x8a0>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e00d      	b.n	800d5ea <tcp_receive+0x8a2>
 800d5ce:	bf00      	nop
 800d5d0:	20008488 	.word	0x20008488
 800d5d4:	20008468 	.word	0x20008468
 800d5d8:	20008492 	.word	0x20008492
 800d5dc:	08014214 	.word	0x08014214
 800d5e0:	080145bc 	.word	0x080145bc
 800d5e4:	08014260 	.word	0x08014260
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	4423      	add	r3, r4
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	4b98      	ldr	r3, [pc, #608]	; (800d850 <tcp_receive+0xb08>)
 800d5f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d5fc:	6938      	ldr	r0, [r7, #16]
 800d5fe:	f7fd fd36 	bl	800b06e <tcp_seg_free>
            while (next &&
 800d602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00e      	beq.n	800d626 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d608:	4b91      	ldr	r3, [pc, #580]	; (800d850 <tcp_receive+0xb08>)
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	461a      	mov	r2, r3
 800d60e:	4b91      	ldr	r3, [pc, #580]	; (800d854 <tcp_receive+0xb0c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	441a      	add	r2, r3
 800d614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d61c:	8909      	ldrh	r1, [r1, #8]
 800d61e:	440b      	add	r3, r1
 800d620:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d622:	2b00      	cmp	r3, #0
 800d624:	da9a      	bge.n	800d55c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d059      	beq.n	800d6e0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d62c:	4b88      	ldr	r3, [pc, #544]	; (800d850 <tcp_receive+0xb08>)
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	461a      	mov	r2, r3
 800d632:	4b88      	ldr	r3, [pc, #544]	; (800d854 <tcp_receive+0xb0c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	441a      	add	r2, r3
 800d638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d640:	2b00      	cmp	r3, #0
 800d642:	dd4d      	ble.n	800d6e0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	4b81      	ldr	r3, [pc, #516]	; (800d854 <tcp_receive+0xb0c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	b29b      	uxth	r3, r3
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	b29a      	uxth	r2, r3
 800d656:	4b80      	ldr	r3, [pc, #512]	; (800d858 <tcp_receive+0xb10>)
 800d658:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d65a:	4b7f      	ldr	r3, [pc, #508]	; (800d858 <tcp_receive+0xb10>)
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	899b      	ldrh	r3, [r3, #12]
 800d660:	b29b      	uxth	r3, r3
 800d662:	4618      	mov	r0, r3
 800d664:	f7fa ff52 	bl	800850c <lwip_htons>
 800d668:	4603      	mov	r3, r0
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	f003 0302 	and.w	r3, r3, #2
 800d670:	2b00      	cmp	r3, #0
 800d672:	d005      	beq.n	800d680 <tcp_receive+0x938>
                inseg.len -= 1;
 800d674:	4b78      	ldr	r3, [pc, #480]	; (800d858 <tcp_receive+0xb10>)
 800d676:	891b      	ldrh	r3, [r3, #8]
 800d678:	3b01      	subs	r3, #1
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	4b76      	ldr	r3, [pc, #472]	; (800d858 <tcp_receive+0xb10>)
 800d67e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d680:	4b75      	ldr	r3, [pc, #468]	; (800d858 <tcp_receive+0xb10>)
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	4a74      	ldr	r2, [pc, #464]	; (800d858 <tcp_receive+0xb10>)
 800d686:	8912      	ldrh	r2, [r2, #8]
 800d688:	4611      	mov	r1, r2
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fc f8f6 	bl	800987c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d690:	4b71      	ldr	r3, [pc, #452]	; (800d858 <tcp_receive+0xb10>)
 800d692:	891c      	ldrh	r4, [r3, #8]
 800d694:	4b70      	ldr	r3, [pc, #448]	; (800d858 <tcp_receive+0xb10>)
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	899b      	ldrh	r3, [r3, #12]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fa ff35 	bl	800850c <lwip_htons>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	f003 0303 	and.w	r3, r3, #3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d001      	beq.n	800d6b2 <tcp_receive+0x96a>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e000      	b.n	800d6b4 <tcp_receive+0x96c>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4423      	add	r3, r4
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	4b65      	ldr	r3, [pc, #404]	; (800d850 <tcp_receive+0xb08>)
 800d6ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d6bc:	4b64      	ldr	r3, [pc, #400]	; (800d850 <tcp_receive+0xb08>)
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	4b64      	ldr	r3, [pc, #400]	; (800d854 <tcp_receive+0xb0c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	441a      	add	r2, r3
 800d6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d006      	beq.n	800d6e0 <tcp_receive+0x998>
 800d6d2:	4b62      	ldr	r3, [pc, #392]	; (800d85c <tcp_receive+0xb14>)
 800d6d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d6d8:	4961      	ldr	r1, [pc, #388]	; (800d860 <tcp_receive+0xb18>)
 800d6da:	4862      	ldr	r0, [pc, #392]	; (800d864 <tcp_receive+0xb1c>)
 800d6dc:	f004 fdde 	bl	801229c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d6e6:	4b5a      	ldr	r3, [pc, #360]	; (800d850 <tcp_receive+0xb08>)
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	4b59      	ldr	r3, [pc, #356]	; (800d854 <tcp_receive+0xb0c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	441a      	add	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d6fa:	4b55      	ldr	r3, [pc, #340]	; (800d850 <tcp_receive+0xb08>)
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d206      	bcs.n	800d710 <tcp_receive+0x9c8>
 800d702:	4b56      	ldr	r3, [pc, #344]	; (800d85c <tcp_receive+0xb14>)
 800d704:	f240 6207 	movw	r2, #1543	; 0x607
 800d708:	4957      	ldr	r1, [pc, #348]	; (800d868 <tcp_receive+0xb20>)
 800d70a:	4856      	ldr	r0, [pc, #344]	; (800d864 <tcp_receive+0xb1c>)
 800d70c:	f004 fdc6 	bl	801229c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d714:	4b4e      	ldr	r3, [pc, #312]	; (800d850 <tcp_receive+0xb08>)
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	b29a      	uxth	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7fc ffc5 	bl	800a6b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d726:	4b4c      	ldr	r3, [pc, #304]	; (800d858 <tcp_receive+0xb10>)
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	891b      	ldrh	r3, [r3, #8]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d730:	4b49      	ldr	r3, [pc, #292]	; (800d858 <tcp_receive+0xb10>)
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	4a4d      	ldr	r2, [pc, #308]	; (800d86c <tcp_receive+0xb24>)
 800d736:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d738:	4b47      	ldr	r3, [pc, #284]	; (800d858 <tcp_receive+0xb10>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d73e:	4b46      	ldr	r3, [pc, #280]	; (800d858 <tcp_receive+0xb10>)
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	899b      	ldrh	r3, [r3, #12]
 800d744:	b29b      	uxth	r3, r3
 800d746:	4618      	mov	r0, r3
 800d748:	f7fa fee0 	bl	800850c <lwip_htons>
 800d74c:	4603      	mov	r3, r0
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	f003 0301 	and.w	r3, r3, #1
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 80b8 	beq.w	800d8ca <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d75a:	4b45      	ldr	r3, [pc, #276]	; (800d870 <tcp_receive+0xb28>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	f043 0320 	orr.w	r3, r3, #32
 800d762:	b2da      	uxtb	r2, r3
 800d764:	4b42      	ldr	r3, [pc, #264]	; (800d870 <tcp_receive+0xb28>)
 800d766:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d768:	e0af      	b.n	800d8ca <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d76e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	4a36      	ldr	r2, [pc, #216]	; (800d854 <tcp_receive+0xb0c>)
 800d77a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	891b      	ldrh	r3, [r3, #8]
 800d780:	461c      	mov	r4, r3
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	899b      	ldrh	r3, [r3, #12]
 800d788:	b29b      	uxth	r3, r3
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fa febe 	bl	800850c <lwip_htons>
 800d790:	4603      	mov	r3, r0
 800d792:	b2db      	uxtb	r3, r3
 800d794:	f003 0303 	and.w	r3, r3, #3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <tcp_receive+0xa58>
 800d79c:	2301      	movs	r3, #1
 800d79e:	e000      	b.n	800d7a2 <tcp_receive+0xa5a>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	191a      	adds	r2, r3, r4
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a8:	441a      	add	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7b2:	461c      	mov	r4, r3
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	891b      	ldrh	r3, [r3, #8]
 800d7b8:	461d      	mov	r5, r3
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	899b      	ldrh	r3, [r3, #12]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fa fea2 	bl	800850c <lwip_htons>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	f003 0303 	and.w	r3, r3, #3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <tcp_receive+0xa90>
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e000      	b.n	800d7da <tcp_receive+0xa92>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	442b      	add	r3, r5
 800d7dc:	429c      	cmp	r4, r3
 800d7de:	d206      	bcs.n	800d7ee <tcp_receive+0xaa6>
 800d7e0:	4b1e      	ldr	r3, [pc, #120]	; (800d85c <tcp_receive+0xb14>)
 800d7e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800d7e6:	4923      	ldr	r1, [pc, #140]	; (800d874 <tcp_receive+0xb2c>)
 800d7e8:	481e      	ldr	r0, [pc, #120]	; (800d864 <tcp_receive+0xb1c>)
 800d7ea:	f004 fd57 	bl	801229c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	891b      	ldrh	r3, [r3, #8]
 800d7f2:	461c      	mov	r4, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	899b      	ldrh	r3, [r3, #12]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fa fe85 	bl	800850c <lwip_htons>
 800d802:	4603      	mov	r3, r0
 800d804:	b2db      	uxtb	r3, r3
 800d806:	f003 0303 	and.w	r3, r3, #3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <tcp_receive+0xaca>
 800d80e:	2301      	movs	r3, #1
 800d810:	e000      	b.n	800d814 <tcp_receive+0xacc>
 800d812:	2300      	movs	r3, #0
 800d814:	1919      	adds	r1, r3, r4
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d81a:	b28b      	uxth	r3, r1
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	b29a      	uxth	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7fc ff43 	bl	800a6b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	891b      	ldrh	r3, [r3, #8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d028      	beq.n	800d886 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d834:	4b0d      	ldr	r3, [pc, #52]	; (800d86c <tcp_receive+0xb24>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d01d      	beq.n	800d878 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d83c:	4b0b      	ldr	r3, [pc, #44]	; (800d86c <tcp_receive+0xb24>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7fc fa60 	bl	8009d0c <pbuf_cat>
 800d84c:	e018      	b.n	800d880 <tcp_receive+0xb38>
 800d84e:	bf00      	nop
 800d850:	20008492 	.word	0x20008492
 800d854:	20008488 	.word	0x20008488
 800d858:	20008468 	.word	0x20008468
 800d85c:	08014214 	.word	0x08014214
 800d860:	080145f4 	.word	0x080145f4
 800d864:	08014260 	.word	0x08014260
 800d868:	08014630 	.word	0x08014630
 800d86c:	20008498 	.word	0x20008498
 800d870:	20008495 	.word	0x20008495
 800d874:	08014650 	.word	0x08014650
            } else {
              recv_data = cseg->p;
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	4a70      	ldr	r2, [pc, #448]	; (800da40 <tcp_receive+0xcf8>)
 800d87e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2200      	movs	r2, #0
 800d884:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	899b      	ldrh	r3, [r3, #12]
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fa fe3c 	bl	800850c <lwip_htons>
 800d894:	4603      	mov	r3, r0
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00d      	beq.n	800d8bc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d8a0:	4b68      	ldr	r3, [pc, #416]	; (800da44 <tcp_receive+0xcfc>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	f043 0320 	orr.w	r3, r3, #32
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	4b66      	ldr	r3, [pc, #408]	; (800da44 <tcp_receive+0xcfc>)
 800d8ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	7d1b      	ldrb	r3, [r3, #20]
 800d8b2:	2b04      	cmp	r3, #4
 800d8b4:	d102      	bne.n	800d8bc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2207      	movs	r2, #7
 800d8ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d8c4:	68b8      	ldr	r0, [r7, #8]
 800d8c6:	f7fd fbd2 	bl	800b06e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d008      	beq.n	800d8e4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	f43f af43 	beq.w	800d76a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8b5b      	ldrh	r3, [r3, #26]
 800d8e8:	f003 0301 	and.w	r3, r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00e      	beq.n	800d90e <tcp_receive+0xbc6>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8b5b      	ldrh	r3, [r3, #26]
 800d8f4:	f023 0301 	bic.w	r3, r3, #1
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	835a      	strh	r2, [r3, #26]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	8b5b      	ldrh	r3, [r3, #26]
 800d902:	f043 0302 	orr.w	r3, r3, #2
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d90c:	e188      	b.n	800dc20 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8b5b      	ldrh	r3, [r3, #26]
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	b29a      	uxth	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d91c:	e180      	b.n	800dc20 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d922:	2b00      	cmp	r3, #0
 800d924:	d106      	bne.n	800d934 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d926:	4848      	ldr	r0, [pc, #288]	; (800da48 <tcp_receive+0xd00>)
 800d928:	f7fd fbba 	bl	800b0a0 <tcp_seg_copy>
 800d92c:	4602      	mov	r2, r0
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	675a      	str	r2, [r3, #116]	; 0x74
 800d932:	e16d      	b.n	800dc10 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d934:	2300      	movs	r3, #0
 800d936:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d93c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d93e:	e157      	b.n	800dbf0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	685a      	ldr	r2, [r3, #4]
 800d946:	4b41      	ldr	r3, [pc, #260]	; (800da4c <tcp_receive+0xd04>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d11d      	bne.n	800d98a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d94e:	4b3e      	ldr	r3, [pc, #248]	; (800da48 <tcp_receive+0xd00>)
 800d950:	891a      	ldrh	r2, [r3, #8]
 800d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d954:	891b      	ldrh	r3, [r3, #8]
 800d956:	429a      	cmp	r2, r3
 800d958:	f240 814f 	bls.w	800dbfa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d95c:	483a      	ldr	r0, [pc, #232]	; (800da48 <tcp_receive+0xd00>)
 800d95e:	f7fd fb9f 	bl	800b0a0 <tcp_seg_copy>
 800d962:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 8149 	beq.w	800dbfe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d003      	beq.n	800d97a <tcp_receive+0xc32>
                    prev->next = cseg;
 800d972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	e002      	b.n	800d980 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d980:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d982:	6978      	ldr	r0, [r7, #20]
 800d984:	f7ff f8dc 	bl	800cb40 <tcp_oos_insert_segment>
                }
                break;
 800d988:	e139      	b.n	800dbfe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d117      	bne.n	800d9c0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d990:	4b2e      	ldr	r3, [pc, #184]	; (800da4c <tcp_receive+0xd04>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da57      	bge.n	800da50 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9a0:	4829      	ldr	r0, [pc, #164]	; (800da48 <tcp_receive+0xd00>)
 800d9a2:	f7fd fb7d 	bl	800b0a0 <tcp_seg_copy>
 800d9a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 8129 	beq.w	800dc02 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	69ba      	ldr	r2, [r7, #24]
 800d9b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d9b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9b8:	69b8      	ldr	r0, [r7, #24]
 800d9ba:	f7ff f8c1 	bl	800cb40 <tcp_oos_insert_segment>
                  }
                  break;
 800d9be:	e120      	b.n	800dc02 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d9c0:	4b22      	ldr	r3, [pc, #136]	; (800da4c <tcp_receive+0xd04>)
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	db3e      	blt.n	800da50 <tcp_receive+0xd08>
 800d9d2:	4b1e      	ldr	r3, [pc, #120]	; (800da4c <tcp_receive+0xd04>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	3301      	adds	r3, #1
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	dc35      	bgt.n	800da50 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9e4:	4818      	ldr	r0, [pc, #96]	; (800da48 <tcp_receive+0xd00>)
 800d9e6:	f7fd fb5b 	bl	800b0a0 <tcp_seg_copy>
 800d9ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f000 8109 	beq.w	800dc06 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9fc:	8912      	ldrh	r2, [r2, #8]
 800d9fe:	441a      	add	r2, r3
 800da00:	4b12      	ldr	r3, [pc, #72]	; (800da4c <tcp_receive+0xd04>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	dd12      	ble.n	800da30 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800da0a:	4b10      	ldr	r3, [pc, #64]	; (800da4c <tcp_receive+0xd04>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	b29a      	uxth	r2, r3
 800da10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	b29b      	uxth	r3, r3
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da1e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800da20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da26:	891b      	ldrh	r3, [r3, #8]
 800da28:	4619      	mov	r1, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	f7fb ff26 	bl	800987c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800da30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da32:	69fa      	ldr	r2, [r7, #28]
 800da34:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800da36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da38:	69f8      	ldr	r0, [r7, #28]
 800da3a:	f7ff f881 	bl	800cb40 <tcp_oos_insert_segment>
                  }
                  break;
 800da3e:	e0e2      	b.n	800dc06 <tcp_receive+0xebe>
 800da40:	20008498 	.word	0x20008498
 800da44:	20008495 	.word	0x20008495
 800da48:	20008468 	.word	0x20008468
 800da4c:	20008488 	.word	0x20008488
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f040 80c6 	bne.w	800dbea <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800da5e:	4b80      	ldr	r3, [pc, #512]	; (800dc60 <tcp_receive+0xf18>)
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f340 80bd 	ble.w	800dbea <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800da70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	899b      	ldrh	r3, [r3, #12]
 800da76:	b29b      	uxth	r3, r3
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fa fd47 	bl	800850c <lwip_htons>
 800da7e:	4603      	mov	r3, r0
 800da80:	b2db      	uxtb	r3, r3
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	f040 80bf 	bne.w	800dc0a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800da8c:	4875      	ldr	r0, [pc, #468]	; (800dc64 <tcp_receive+0xf1c>)
 800da8e:	f7fd fb07 	bl	800b0a0 <tcp_seg_copy>
 800da92:	4602      	mov	r2, r0
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800da98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f000 80b6 	beq.w	800dc0e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daaa:	8912      	ldrh	r2, [r2, #8]
 800daac:	441a      	add	r2, r3
 800daae:	4b6c      	ldr	r3, [pc, #432]	; (800dc60 <tcp_receive+0xf18>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dd12      	ble.n	800dade <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dab8:	4b69      	ldr	r3, [pc, #420]	; (800dc60 <tcp_receive+0xf18>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	b29a      	uxth	r2, r3
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad0:	685a      	ldr	r2, [r3, #4]
 800dad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7fb fecf 	bl	800987c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dade:	4b62      	ldr	r3, [pc, #392]	; (800dc68 <tcp_receive+0xf20>)
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	4b5e      	ldr	r3, [pc, #376]	; (800dc60 <tcp_receive+0xf18>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	441a      	add	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	6879      	ldr	r1, [r7, #4]
 800daf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800daf2:	440b      	add	r3, r1
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f340 8089 	ble.w	800dc0e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	899b      	ldrh	r3, [r3, #12]
 800db04:	b29b      	uxth	r3, r3
 800db06:	4618      	mov	r0, r3
 800db08:	f7fa fd00 	bl	800850c <lwip_htons>
 800db0c:	4603      	mov	r3, r0
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	f003 0301 	and.w	r3, r3, #1
 800db14:	2b00      	cmp	r3, #0
 800db16:	d022      	beq.n	800db5e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	899b      	ldrh	r3, [r3, #12]
 800db20:	b29b      	uxth	r3, r3
 800db22:	b21b      	sxth	r3, r3
 800db24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800db28:	b21c      	sxth	r4, r3
 800db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	899b      	ldrh	r3, [r3, #12]
 800db32:	b29b      	uxth	r3, r3
 800db34:	4618      	mov	r0, r3
 800db36:	f7fa fce9 	bl	800850c <lwip_htons>
 800db3a:	4603      	mov	r3, r0
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800db44:	b29b      	uxth	r3, r3
 800db46:	4618      	mov	r0, r3
 800db48:	f7fa fce0 	bl	800850c <lwip_htons>
 800db4c:	4603      	mov	r3, r0
 800db4e:	b21b      	sxth	r3, r3
 800db50:	4323      	orrs	r3, r4
 800db52:	b21a      	sxth	r2, r3
 800db54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	b292      	uxth	r2, r2
 800db5c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db62:	b29a      	uxth	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db68:	4413      	add	r3, r2
 800db6a:	b299      	uxth	r1, r3
 800db6c:	4b3c      	ldr	r3, [pc, #240]	; (800dc60 <tcp_receive+0xf18>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	b29a      	uxth	r2, r3
 800db72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	1a8a      	subs	r2, r1, r2
 800db78:	b292      	uxth	r2, r2
 800db7a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800db7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	891b      	ldrh	r3, [r3, #8]
 800db88:	4619      	mov	r1, r3
 800db8a:	4610      	mov	r0, r2
 800db8c:	f7fb fe76 	bl	800987c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800db90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	891c      	ldrh	r4, [r3, #8]
 800db96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	899b      	ldrh	r3, [r3, #12]
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fa fcb3 	bl	800850c <lwip_htons>
 800dba6:	4603      	mov	r3, r0
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	f003 0303 	and.w	r3, r3, #3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <tcp_receive+0xe6e>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e000      	b.n	800dbb8 <tcp_receive+0xe70>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	4423      	add	r3, r4
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	4b2a      	ldr	r3, [pc, #168]	; (800dc68 <tcp_receive+0xf20>)
 800dbbe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dbc0:	4b29      	ldr	r3, [pc, #164]	; (800dc68 <tcp_receive+0xf20>)
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	4b26      	ldr	r3, [pc, #152]	; (800dc60 <tcp_receive+0xf18>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	441a      	add	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbd4:	440b      	add	r3, r1
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d019      	beq.n	800dc0e <tcp_receive+0xec6>
 800dbda:	4b24      	ldr	r3, [pc, #144]	; (800dc6c <tcp_receive+0xf24>)
 800dbdc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dbe0:	4923      	ldr	r1, [pc, #140]	; (800dc70 <tcp_receive+0xf28>)
 800dbe2:	4824      	ldr	r0, [pc, #144]	; (800dc74 <tcp_receive+0xf2c>)
 800dbe4:	f004 fb5a 	bl	801229c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dbe8:	e011      	b.n	800dc0e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f47f aea4 	bne.w	800d940 <tcp_receive+0xbf8>
 800dbf8:	e00a      	b.n	800dc10 <tcp_receive+0xec8>
                break;
 800dbfa:	bf00      	nop
 800dbfc:	e008      	b.n	800dc10 <tcp_receive+0xec8>
                break;
 800dbfe:	bf00      	nop
 800dc00:	e006      	b.n	800dc10 <tcp_receive+0xec8>
                  break;
 800dc02:	bf00      	nop
 800dc04:	e004      	b.n	800dc10 <tcp_receive+0xec8>
                  break;
 800dc06:	bf00      	nop
 800dc08:	e002      	b.n	800dc10 <tcp_receive+0xec8>
                  break;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <tcp_receive+0xec8>
                break;
 800dc0e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f001 fa33 	bl	800f07c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dc16:	e003      	b.n	800dc20 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f001 fa2f 	bl	800f07c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc1e:	e01a      	b.n	800dc56 <tcp_receive+0xf0e>
 800dc20:	e019      	b.n	800dc56 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dc22:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <tcp_receive+0xf18>)
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	db0a      	blt.n	800dc46 <tcp_receive+0xefe>
 800dc30:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <tcp_receive+0xf18>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc3c:	440b      	add	r3, r1
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	3301      	adds	r3, #1
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	dd07      	ble.n	800dc56 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	8b5b      	ldrh	r3, [r3, #26]
 800dc4a:	f043 0302 	orr.w	r3, r3, #2
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dc54:	e7ff      	b.n	800dc56 <tcp_receive+0xf0e>
 800dc56:	bf00      	nop
 800dc58:	3750      	adds	r7, #80	; 0x50
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	20008488 	.word	0x20008488
 800dc64:	20008468 	.word	0x20008468
 800dc68:	20008492 	.word	0x20008492
 800dc6c:	08014214 	.word	0x08014214
 800dc70:	080145bc 	.word	0x080145bc
 800dc74:	08014260 	.word	0x08014260

0800dc78 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dc7e:	4b15      	ldr	r3, [pc, #84]	; (800dcd4 <tcp_get_next_optbyte+0x5c>)
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	b291      	uxth	r1, r2
 800dc86:	4a13      	ldr	r2, [pc, #76]	; (800dcd4 <tcp_get_next_optbyte+0x5c>)
 800dc88:	8011      	strh	r1, [r2, #0]
 800dc8a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dc8c:	4b12      	ldr	r3, [pc, #72]	; (800dcd8 <tcp_get_next_optbyte+0x60>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d004      	beq.n	800dc9e <tcp_get_next_optbyte+0x26>
 800dc94:	4b11      	ldr	r3, [pc, #68]	; (800dcdc <tcp_get_next_optbyte+0x64>)
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	88fa      	ldrh	r2, [r7, #6]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d208      	bcs.n	800dcb0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dc9e:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <tcp_get_next_optbyte+0x68>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3314      	adds	r3, #20
 800dca4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	4413      	add	r3, r2
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	e00b      	b.n	800dcc8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dcb0:	88fb      	ldrh	r3, [r7, #6]
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <tcp_get_next_optbyte+0x64>)
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dcbe:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <tcp_get_next_optbyte+0x60>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	797b      	ldrb	r3, [r7, #5]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	20008484 	.word	0x20008484
 800dcd8:	20008480 	.word	0x20008480
 800dcdc:	2000847e 	.word	0x2000847e
 800dce0:	20008478 	.word	0x20008478

0800dce4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d106      	bne.n	800dd00 <tcp_parseopt+0x1c>
 800dcf2:	4b32      	ldr	r3, [pc, #200]	; (800ddbc <tcp_parseopt+0xd8>)
 800dcf4:	f240 727d 	movw	r2, #1917	; 0x77d
 800dcf8:	4931      	ldr	r1, [pc, #196]	; (800ddc0 <tcp_parseopt+0xdc>)
 800dcfa:	4832      	ldr	r0, [pc, #200]	; (800ddc4 <tcp_parseopt+0xe0>)
 800dcfc:	f004 face 	bl	801229c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dd00:	4b31      	ldr	r3, [pc, #196]	; (800ddc8 <tcp_parseopt+0xe4>)
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d055      	beq.n	800ddb4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd08:	4b30      	ldr	r3, [pc, #192]	; (800ddcc <tcp_parseopt+0xe8>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	801a      	strh	r2, [r3, #0]
 800dd0e:	e045      	b.n	800dd9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800dd10:	f7ff ffb2 	bl	800dc78 <tcp_get_next_optbyte>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d006      	beq.n	800dd2c <tcp_parseopt+0x48>
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	dc2b      	bgt.n	800dd7a <tcp_parseopt+0x96>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d041      	beq.n	800ddaa <tcp_parseopt+0xc6>
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d127      	bne.n	800dd7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800dd2a:	e037      	b.n	800dd9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dd2c:	f7ff ffa4 	bl	800dc78 <tcp_get_next_optbyte>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b04      	cmp	r3, #4
 800dd34:	d13b      	bne.n	800ddae <tcp_parseopt+0xca>
 800dd36:	4b25      	ldr	r3, [pc, #148]	; (800ddcc <tcp_parseopt+0xe8>)
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	4a22      	ldr	r2, [pc, #136]	; (800ddc8 <tcp_parseopt+0xe4>)
 800dd3e:	8812      	ldrh	r2, [r2, #0]
 800dd40:	4293      	cmp	r3, r2
 800dd42:	da34      	bge.n	800ddae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dd44:	f7ff ff98 	bl	800dc78 <tcp_get_next_optbyte>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	021b      	lsls	r3, r3, #8
 800dd4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dd50:	f7ff ff92 	bl	800dc78 <tcp_get_next_optbyte>
 800dd54:	4603      	mov	r3, r0
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	89bb      	ldrh	r3, [r7, #12]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dd5e:	89bb      	ldrh	r3, [r7, #12]
 800dd60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dd64:	d804      	bhi.n	800dd70 <tcp_parseopt+0x8c>
 800dd66:	89bb      	ldrh	r3, [r7, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d001      	beq.n	800dd70 <tcp_parseopt+0x8c>
 800dd6c:	89ba      	ldrh	r2, [r7, #12]
 800dd6e:	e001      	b.n	800dd74 <tcp_parseopt+0x90>
 800dd70:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800dd78:	e010      	b.n	800dd9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dd7a:	f7ff ff7d 	bl	800dc78 <tcp_get_next_optbyte>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dd82:	7afb      	ldrb	r3, [r7, #11]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d914      	bls.n	800ddb2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dd88:	7afb      	ldrb	r3, [r7, #11]
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <tcp_parseopt+0xe8>)
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	4413      	add	r3, r2
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	3b02      	subs	r3, #2
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	4b0c      	ldr	r3, [pc, #48]	; (800ddcc <tcp_parseopt+0xe8>)
 800dd9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd9c:	4b0b      	ldr	r3, [pc, #44]	; (800ddcc <tcp_parseopt+0xe8>)
 800dd9e:	881a      	ldrh	r2, [r3, #0]
 800dda0:	4b09      	ldr	r3, [pc, #36]	; (800ddc8 <tcp_parseopt+0xe4>)
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d3b3      	bcc.n	800dd10 <tcp_parseopt+0x2c>
 800dda8:	e004      	b.n	800ddb4 <tcp_parseopt+0xd0>
          return;
 800ddaa:	bf00      	nop
 800ddac:	e002      	b.n	800ddb4 <tcp_parseopt+0xd0>
            return;
 800ddae:	bf00      	nop
 800ddb0:	e000      	b.n	800ddb4 <tcp_parseopt+0xd0>
            return;
 800ddb2:	bf00      	nop
      }
    }
  }
}
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	08014214 	.word	0x08014214
 800ddc0:	08014678 	.word	0x08014678
 800ddc4:	08014260 	.word	0x08014260
 800ddc8:	2000847c 	.word	0x2000847c
 800ddcc:	20008484 	.word	0x20008484

0800ddd0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ddd4:	4b05      	ldr	r3, [pc, #20]	; (800ddec <tcp_trigger_input_pcb_close+0x1c>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	f043 0310 	orr.w	r3, r3, #16
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	4b03      	ldr	r3, [pc, #12]	; (800ddec <tcp_trigger_input_pcb_close+0x1c>)
 800dde0:	701a      	strb	r2, [r3, #0]
}
 800dde2:	bf00      	nop
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	20008495 	.word	0x20008495

0800ddf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <tcp_route+0x28>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	7a1b      	ldrb	r3, [r3, #8]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d006      	beq.n	800de18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	7a1b      	ldrb	r3, [r3, #8]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fb fb7a 	bl	8009508 <netif_get_by_index>
 800de14:	4603      	mov	r3, r0
 800de16:	e003      	b.n	800de20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f002 fe3b 	bl	8010a94 <ip4_route>
 800de1e:	4603      	mov	r3, r0
  }
}
 800de20:	4618      	mov	r0, r3
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800de28:	b590      	push	{r4, r7, lr}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	4613      	mov	r3, r2
 800de36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d105      	bne.n	800de4a <tcp_create_segment+0x22>
 800de3e:	4b44      	ldr	r3, [pc, #272]	; (800df50 <tcp_create_segment+0x128>)
 800de40:	22a3      	movs	r2, #163	; 0xa3
 800de42:	4944      	ldr	r1, [pc, #272]	; (800df54 <tcp_create_segment+0x12c>)
 800de44:	4844      	ldr	r0, [pc, #272]	; (800df58 <tcp_create_segment+0x130>)
 800de46:	f004 fa29 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d105      	bne.n	800de5c <tcp_create_segment+0x34>
 800de50:	4b3f      	ldr	r3, [pc, #252]	; (800df50 <tcp_create_segment+0x128>)
 800de52:	22a4      	movs	r2, #164	; 0xa4
 800de54:	4941      	ldr	r1, [pc, #260]	; (800df5c <tcp_create_segment+0x134>)
 800de56:	4840      	ldr	r0, [pc, #256]	; (800df58 <tcp_create_segment+0x130>)
 800de58:	f004 fa20 	bl	801229c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f003 0304 	and.w	r3, r3, #4
 800de68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800de6a:	2003      	movs	r0, #3
 800de6c:	f7fa ffc6 	bl	8008dfc <memp_malloc>
 800de70:	6138      	str	r0, [r7, #16]
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d104      	bne.n	800de82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800de78:	68b8      	ldr	r0, [r7, #8]
 800de7a:	f7fb fe85 	bl	8009b88 <pbuf_free>
    return NULL;
 800de7e:	2300      	movs	r3, #0
 800de80:	e061      	b.n	800df46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800de88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	891a      	ldrh	r2, [r3, #8]
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d205      	bcs.n	800deae <tcp_create_segment+0x86>
 800dea2:	4b2b      	ldr	r3, [pc, #172]	; (800df50 <tcp_create_segment+0x128>)
 800dea4:	22b0      	movs	r2, #176	; 0xb0
 800dea6:	492e      	ldr	r1, [pc, #184]	; (800df60 <tcp_create_segment+0x138>)
 800dea8:	482b      	ldr	r0, [pc, #172]	; (800df58 <tcp_create_segment+0x130>)
 800deaa:	f004 f9f7 	bl	801229c <iprintf>
  seg->len = p->tot_len - optlen;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	891a      	ldrh	r2, [r3, #8]
 800deb2:	7dfb      	ldrb	r3, [r7, #23]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	b29a      	uxth	r2, r3
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800debe:	2114      	movs	r1, #20
 800dec0:	68b8      	ldr	r0, [r7, #8]
 800dec2:	f7fb fdcb 	bl	8009a5c <pbuf_add_header>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d004      	beq.n	800ded6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800decc:	6938      	ldr	r0, [r7, #16]
 800dece:	f7fd f8ce 	bl	800b06e <tcp_seg_free>
    return NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	e037      	b.n	800df46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	685a      	ldr	r2, [r3, #4]
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	8ada      	ldrh	r2, [r3, #22]
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	68dc      	ldr	r4, [r3, #12]
 800dee8:	4610      	mov	r0, r2
 800deea:	f7fa fb0f 	bl	800850c <lwip_htons>
 800deee:	4603      	mov	r3, r0
 800def0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	8b1a      	ldrh	r2, [r3, #24]
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	68dc      	ldr	r4, [r3, #12]
 800defa:	4610      	mov	r0, r2
 800defc:	f7fa fb06 	bl	800850c <lwip_htons>
 800df00:	4603      	mov	r3, r0
 800df02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	68dc      	ldr	r4, [r3, #12]
 800df08:	6838      	ldr	r0, [r7, #0]
 800df0a:	f7fa fb14 	bl	8008536 <lwip_htonl>
 800df0e:	4603      	mov	r3, r0
 800df10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	089b      	lsrs	r3, r3, #2
 800df16:	b2db      	uxtb	r3, r3
 800df18:	b29b      	uxth	r3, r3
 800df1a:	3305      	adds	r3, #5
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	031b      	lsls	r3, r3, #12
 800df20:	b29a      	uxth	r2, r3
 800df22:	79fb      	ldrb	r3, [r7, #7]
 800df24:	b29b      	uxth	r3, r3
 800df26:	4313      	orrs	r3, r2
 800df28:	b29a      	uxth	r2, r3
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	68dc      	ldr	r4, [r3, #12]
 800df2e:	4610      	mov	r0, r2
 800df30:	f7fa faec 	bl	800850c <lwip_htons>
 800df34:	4603      	mov	r3, r0
 800df36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	749a      	strb	r2, [r3, #18]
 800df40:	2200      	movs	r2, #0
 800df42:	74da      	strb	r2, [r3, #19]
  return seg;
 800df44:	693b      	ldr	r3, [r7, #16]
}
 800df46:	4618      	mov	r0, r3
 800df48:	371c      	adds	r7, #28
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd90      	pop	{r4, r7, pc}
 800df4e:	bf00      	nop
 800df50:	08014694 	.word	0x08014694
 800df54:	080146c8 	.word	0x080146c8
 800df58:	080146e8 	.word	0x080146e8
 800df5c:	08014710 	.word	0x08014710
 800df60:	08014734 	.word	0x08014734

0800df64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800df64:	b590      	push	{r4, r7, lr}
 800df66:	b08b      	sub	sp, #44	; 0x2c
 800df68:	af02      	add	r7, sp, #8
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	460b      	mov	r3, r1
 800df6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800df70:	2300      	movs	r3, #0
 800df72:	61fb      	str	r3, [r7, #28]
 800df74:	2300      	movs	r3, #0
 800df76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800df78:	2300      	movs	r3, #0
 800df7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d106      	bne.n	800df90 <tcp_split_unsent_seg+0x2c>
 800df82:	4b95      	ldr	r3, [pc, #596]	; (800e1d8 <tcp_split_unsent_seg+0x274>)
 800df84:	f240 324b 	movw	r2, #843	; 0x34b
 800df88:	4994      	ldr	r1, [pc, #592]	; (800e1dc <tcp_split_unsent_seg+0x278>)
 800df8a:	4895      	ldr	r0, [pc, #596]	; (800e1e0 <tcp_split_unsent_seg+0x27c>)
 800df8c:	f004 f986 	bl	801229c <iprintf>

  useg = pcb->unsent;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d102      	bne.n	800dfa2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800df9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa0:	e116      	b.n	800e1d0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800dfa2:	887b      	ldrh	r3, [r7, #2]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d109      	bne.n	800dfbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dfa8:	4b8b      	ldr	r3, [pc, #556]	; (800e1d8 <tcp_split_unsent_seg+0x274>)
 800dfaa:	f240 3253 	movw	r2, #851	; 0x353
 800dfae:	498d      	ldr	r1, [pc, #564]	; (800e1e4 <tcp_split_unsent_seg+0x280>)
 800dfb0:	488b      	ldr	r0, [pc, #556]	; (800e1e0 <tcp_split_unsent_seg+0x27c>)
 800dfb2:	f004 f973 	bl	801229c <iprintf>
    return ERR_VAL;
 800dfb6:	f06f 0305 	mvn.w	r3, #5
 800dfba:	e109      	b.n	800e1d0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	891b      	ldrh	r3, [r3, #8]
 800dfc0:	887a      	ldrh	r2, [r7, #2]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d301      	bcc.n	800dfca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e102      	b.n	800e1d0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfce:	887a      	ldrh	r2, [r7, #2]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d906      	bls.n	800dfe2 <tcp_split_unsent_seg+0x7e>
 800dfd4:	4b80      	ldr	r3, [pc, #512]	; (800e1d8 <tcp_split_unsent_seg+0x274>)
 800dfd6:	f240 325b 	movw	r2, #859	; 0x35b
 800dfda:	4983      	ldr	r1, [pc, #524]	; (800e1e8 <tcp_split_unsent_seg+0x284>)
 800dfdc:	4880      	ldr	r0, [pc, #512]	; (800e1e0 <tcp_split_unsent_seg+0x27c>)
 800dfde:	f004 f95d 	bl	801229c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	891b      	ldrh	r3, [r3, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d106      	bne.n	800dff8 <tcp_split_unsent_seg+0x94>
 800dfea:	4b7b      	ldr	r3, [pc, #492]	; (800e1d8 <tcp_split_unsent_seg+0x274>)
 800dfec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800dff0:	497e      	ldr	r1, [pc, #504]	; (800e1ec <tcp_split_unsent_seg+0x288>)
 800dff2:	487b      	ldr	r0, [pc, #492]	; (800e1e0 <tcp_split_unsent_seg+0x27c>)
 800dff4:	f004 f952 	bl	801229c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	7a9b      	ldrb	r3, [r3, #10]
 800dffc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	b2db      	uxtb	r3, r3
 800e004:	f003 0304 	and.w	r3, r3, #4
 800e008:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	891a      	ldrh	r2, [r3, #8]
 800e00e:	887b      	ldrh	r3, [r7, #2]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	b29a      	uxth	r2, r3
 800e018:	89bb      	ldrh	r3, [r7, #12]
 800e01a:	4413      	add	r3, r2
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e022:	4619      	mov	r1, r3
 800e024:	2036      	movs	r0, #54	; 0x36
 800e026:	f7fb facb 	bl	80095c0 <pbuf_alloc>
 800e02a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f000 80b7 	beq.w	800e1a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	891a      	ldrh	r2, [r3, #8]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	891b      	ldrh	r3, [r3, #8]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	b29a      	uxth	r2, r3
 800e042:	887b      	ldrh	r3, [r7, #2]
 800e044:	4413      	add	r3, r2
 800e046:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	6858      	ldr	r0, [r3, #4]
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	7bbb      	ldrb	r3, [r7, #14]
 800e052:	18d1      	adds	r1, r2, r3
 800e054:	897b      	ldrh	r3, [r7, #10]
 800e056:	89ba      	ldrh	r2, [r7, #12]
 800e058:	f7fb ff80 	bl	8009f5c <pbuf_copy_partial>
 800e05c:	4603      	mov	r3, r0
 800e05e:	461a      	mov	r2, r3
 800e060:	89bb      	ldrh	r3, [r7, #12]
 800e062:	4293      	cmp	r3, r2
 800e064:	f040 809f 	bne.w	800e1a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	899b      	ldrh	r3, [r3, #12]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	4618      	mov	r0, r3
 800e072:	f7fa fa4b 	bl	800850c <lwip_htons>
 800e076:	4603      	mov	r3, r0
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e07e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e080:	2300      	movs	r3, #0
 800e082:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e084:	7efb      	ldrb	r3, [r7, #27]
 800e086:	f003 0308 	and.w	r3, r3, #8
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d007      	beq.n	800e09e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e08e:	7efb      	ldrb	r3, [r7, #27]
 800e090:	f023 0308 	bic.w	r3, r3, #8
 800e094:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e096:	7ebb      	ldrb	r3, [r7, #26]
 800e098:	f043 0308 	orr.w	r3, r3, #8
 800e09c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e09e:	7efb      	ldrb	r3, [r7, #27]
 800e0a0:	f003 0301 	and.w	r3, r3, #1
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d007      	beq.n	800e0b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e0a8:	7efb      	ldrb	r3, [r7, #27]
 800e0aa:	f023 0301 	bic.w	r3, r3, #1
 800e0ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e0b0:	7ebb      	ldrb	r3, [r7, #26]
 800e0b2:	f043 0301 	orr.w	r3, r3, #1
 800e0b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fa fa39 	bl	8008536 <lwip_htonl>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	887b      	ldrh	r3, [r7, #2]
 800e0c8:	18d1      	adds	r1, r2, r3
 800e0ca:	7eba      	ldrb	r2, [r7, #26]
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	6939      	ldr	r1, [r7, #16]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff fea7 	bl	800de28 <tcp_create_segment>
 800e0da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d063      	beq.n	800e1aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fb fdd6 	bl	8009c98 <pbuf_clen>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e0f6:	1a9b      	subs	r3, r3, r2
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	6858      	ldr	r0, [r3, #4]
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	891a      	ldrh	r2, [r3, #8]
 800e10a:	89bb      	ldrh	r3, [r7, #12]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4619      	mov	r1, r3
 800e112:	f7fb fbb3 	bl	800987c <pbuf_realloc>
  useg->len -= remainder;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	891a      	ldrh	r2, [r3, #8]
 800e11a:	89bb      	ldrh	r3, [r7, #12]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	b29a      	uxth	r2, r3
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	899b      	ldrh	r3, [r3, #12]
 800e12a:	b29c      	uxth	r4, r3
 800e12c:	7efb      	ldrb	r3, [r7, #27]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4618      	mov	r0, r3
 800e132:	f7fa f9eb 	bl	800850c <lwip_htons>
 800e136:	4603      	mov	r3, r0
 800e138:	461a      	mov	r2, r3
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	4322      	orrs	r2, r4
 800e140:	b292      	uxth	r2, r2
 800e142:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fb fda5 	bl	8009c98 <pbuf_clen>
 800e14e:	4603      	mov	r3, r0
 800e150:	461a      	mov	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e158:	4413      	add	r3, r2
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	4618      	mov	r0, r3
 800e168:	f7fb fd96 	bl	8009c98 <pbuf_clen>
 800e16c:	4603      	mov	r3, r0
 800e16e:	461a      	mov	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e176:	4413      	add	r3, r2
 800e178:	b29a      	uxth	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	69fa      	ldr	r2, [r7, #28]
 800e18c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d103      	bne.n	800e19e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e016      	b.n	800e1d0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e1a2:	bf00      	nop
 800e1a4:	e002      	b.n	800e1ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e1a6:	bf00      	nop
 800e1a8:	e000      	b.n	800e1ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e1aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d006      	beq.n	800e1c0 <tcp_split_unsent_seg+0x25c>
 800e1b2:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <tcp_split_unsent_seg+0x274>)
 800e1b4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e1b8:	490d      	ldr	r1, [pc, #52]	; (800e1f0 <tcp_split_unsent_seg+0x28c>)
 800e1ba:	4809      	ldr	r0, [pc, #36]	; (800e1e0 <tcp_split_unsent_seg+0x27c>)
 800e1bc:	f004 f86e 	bl	801229c <iprintf>
  if (p != NULL) {
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d002      	beq.n	800e1cc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e1c6:	6938      	ldr	r0, [r7, #16]
 800e1c8:	f7fb fcde 	bl	8009b88 <pbuf_free>
  }

  return ERR_MEM;
 800e1cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3724      	adds	r7, #36	; 0x24
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd90      	pop	{r4, r7, pc}
 800e1d8:	08014694 	.word	0x08014694
 800e1dc:	08014a28 	.word	0x08014a28
 800e1e0:	080146e8 	.word	0x080146e8
 800e1e4:	08014a4c 	.word	0x08014a4c
 800e1e8:	08014a70 	.word	0x08014a70
 800e1ec:	08014a80 	.word	0x08014a80
 800e1f0:	08014a90 	.word	0x08014a90

0800e1f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e1f4:	b590      	push	{r4, r7, lr}
 800e1f6:	b085      	sub	sp, #20
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <tcp_send_fin+0x1c>
 800e202:	4b21      	ldr	r3, [pc, #132]	; (800e288 <tcp_send_fin+0x94>)
 800e204:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e208:	4920      	ldr	r1, [pc, #128]	; (800e28c <tcp_send_fin+0x98>)
 800e20a:	4821      	ldr	r0, [pc, #132]	; (800e290 <tcp_send_fin+0x9c>)
 800e20c:	f004 f846 	bl	801229c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d02e      	beq.n	800e276 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	e002      	b.n	800e226 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1f8      	bne.n	800e220 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	899b      	ldrh	r3, [r3, #12]
 800e234:	b29b      	uxth	r3, r3
 800e236:	4618      	mov	r0, r3
 800e238:	f7fa f968 	bl	800850c <lwip_htons>
 800e23c:	4603      	mov	r3, r0
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	f003 0307 	and.w	r3, r3, #7
 800e244:	2b00      	cmp	r3, #0
 800e246:	d116      	bne.n	800e276 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	899b      	ldrh	r3, [r3, #12]
 800e24e:	b29c      	uxth	r4, r3
 800e250:	2001      	movs	r0, #1
 800e252:	f7fa f95b 	bl	800850c <lwip_htons>
 800e256:	4603      	mov	r3, r0
 800e258:	461a      	mov	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	4322      	orrs	r2, r4
 800e260:	b292      	uxth	r2, r2
 800e262:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	8b5b      	ldrh	r3, [r3, #26]
 800e268:	f043 0320 	orr.w	r3, r3, #32
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	e004      	b.n	800e280 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e276:	2101      	movs	r1, #1
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f80b 	bl	800e294 <tcp_enqueue_flags>
 800e27e:	4603      	mov	r3, r0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	bd90      	pop	{r4, r7, pc}
 800e288:	08014694 	.word	0x08014694
 800e28c:	08014a9c 	.word	0x08014a9c
 800e290:	080146e8 	.word	0x080146e8

0800e294 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b08a      	sub	sp, #40	; 0x28
 800e298:	af02      	add	r7, sp, #8
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	460b      	mov	r3, r1
 800e29e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	f003 0303 	and.w	r3, r3, #3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d106      	bne.n	800e2c0 <tcp_enqueue_flags+0x2c>
 800e2b2:	4b67      	ldr	r3, [pc, #412]	; (800e450 <tcp_enqueue_flags+0x1bc>)
 800e2b4:	f240 4211 	movw	r2, #1041	; 0x411
 800e2b8:	4966      	ldr	r1, [pc, #408]	; (800e454 <tcp_enqueue_flags+0x1c0>)
 800e2ba:	4867      	ldr	r0, [pc, #412]	; (800e458 <tcp_enqueue_flags+0x1c4>)
 800e2bc:	f003 ffee 	bl	801229c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d106      	bne.n	800e2d4 <tcp_enqueue_flags+0x40>
 800e2c6:	4b62      	ldr	r3, [pc, #392]	; (800e450 <tcp_enqueue_flags+0x1bc>)
 800e2c8:	f240 4213 	movw	r2, #1043	; 0x413
 800e2cc:	4963      	ldr	r1, [pc, #396]	; (800e45c <tcp_enqueue_flags+0x1c8>)
 800e2ce:	4862      	ldr	r0, [pc, #392]	; (800e458 <tcp_enqueue_flags+0x1c4>)
 800e2d0:	f003 ffe4 	bl	801229c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e2d4:	78fb      	ldrb	r3, [r7, #3]
 800e2d6:	f003 0302 	and.w	r3, r3, #2
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e2e2:	7ffb      	ldrb	r3, [r7, #31]
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	2036      	movs	r0, #54	; 0x36
 800e2fa:	f7fb f961 	bl	80095c0 <pbuf_alloc>
 800e2fe:	6138      	str	r0, [r7, #16]
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d109      	bne.n	800e31a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	8b5b      	ldrh	r3, [r3, #26]
 800e30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e314:	f04f 33ff 	mov.w	r3, #4294967295
 800e318:	e095      	b.n	800e446 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	895a      	ldrh	r2, [r3, #10]
 800e31e:	7dfb      	ldrb	r3, [r7, #23]
 800e320:	b29b      	uxth	r3, r3
 800e322:	429a      	cmp	r2, r3
 800e324:	d206      	bcs.n	800e334 <tcp_enqueue_flags+0xa0>
 800e326:	4b4a      	ldr	r3, [pc, #296]	; (800e450 <tcp_enqueue_flags+0x1bc>)
 800e328:	f240 4239 	movw	r2, #1081	; 0x439
 800e32c:	494c      	ldr	r1, [pc, #304]	; (800e460 <tcp_enqueue_flags+0x1cc>)
 800e32e:	484a      	ldr	r0, [pc, #296]	; (800e458 <tcp_enqueue_flags+0x1c4>)
 800e330:	f003 ffb4 	bl	801229c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e338:	78fa      	ldrb	r2, [r7, #3]
 800e33a:	7ffb      	ldrb	r3, [r7, #31]
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	460b      	mov	r3, r1
 800e340:	6939      	ldr	r1, [r7, #16]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff fd70 	bl	800de28 <tcp_create_segment>
 800e348:	60f8      	str	r0, [r7, #12]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d109      	bne.n	800e364 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	8b5b      	ldrh	r3, [r3, #26]
 800e354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e358:	b29a      	uxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e35e:	f04f 33ff 	mov.w	r3, #4294967295
 800e362:	e070      	b.n	800e446 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	f003 0303 	and.w	r3, r3, #3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d006      	beq.n	800e37e <tcp_enqueue_flags+0xea>
 800e370:	4b37      	ldr	r3, [pc, #220]	; (800e450 <tcp_enqueue_flags+0x1bc>)
 800e372:	f240 4242 	movw	r2, #1090	; 0x442
 800e376:	493b      	ldr	r1, [pc, #236]	; (800e464 <tcp_enqueue_flags+0x1d0>)
 800e378:	4837      	ldr	r0, [pc, #220]	; (800e458 <tcp_enqueue_flags+0x1c4>)
 800e37a:	f003 ff8f 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	891b      	ldrh	r3, [r3, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d006      	beq.n	800e394 <tcp_enqueue_flags+0x100>
 800e386:	4b32      	ldr	r3, [pc, #200]	; (800e450 <tcp_enqueue_flags+0x1bc>)
 800e388:	f240 4243 	movw	r2, #1091	; 0x443
 800e38c:	4936      	ldr	r1, [pc, #216]	; (800e468 <tcp_enqueue_flags+0x1d4>)
 800e38e:	4832      	ldr	r0, [pc, #200]	; (800e458 <tcp_enqueue_flags+0x1c4>)
 800e390:	f003 ff84 	bl	801229c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d103      	bne.n	800e3a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e3a2:	e00d      	b.n	800e3c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3a8:	61bb      	str	r3, [r7, #24]
 800e3aa:	e002      	b.n	800e3b2 <tcp_enqueue_flags+0x11e>
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	61bb      	str	r3, [r7, #24]
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1f8      	bne.n	800e3ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e3c8:	78fb      	ldrb	r3, [r7, #3]
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d104      	bne.n	800e3dc <tcp_enqueue_flags+0x148>
 800e3d2:	78fb      	ldrb	r3, [r7, #3]
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d004      	beq.n	800e3e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e3e6:	78fb      	ldrb	r3, [r7, #3]
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d006      	beq.n	800e3fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	8b5b      	ldrh	r3, [r3, #26]
 800e3f4:	f043 0320 	orr.w	r3, r3, #32
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	4618      	mov	r0, r3
 800e404:	f7fb fc48 	bl	8009c98 <pbuf_clen>
 800e408:	4603      	mov	r3, r0
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e412:	4413      	add	r3, r2
 800e414:	b29a      	uxth	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00e      	beq.n	800e444 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10a      	bne.n	800e444 <tcp_enqueue_flags+0x1b0>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e432:	2b00      	cmp	r3, #0
 800e434:	d106      	bne.n	800e444 <tcp_enqueue_flags+0x1b0>
 800e436:	4b06      	ldr	r3, [pc, #24]	; (800e450 <tcp_enqueue_flags+0x1bc>)
 800e438:	f240 4265 	movw	r2, #1125	; 0x465
 800e43c:	490b      	ldr	r1, [pc, #44]	; (800e46c <tcp_enqueue_flags+0x1d8>)
 800e43e:	4806      	ldr	r0, [pc, #24]	; (800e458 <tcp_enqueue_flags+0x1c4>)
 800e440:	f003 ff2c 	bl	801229c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3720      	adds	r7, #32
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	08014694 	.word	0x08014694
 800e454:	08014ab8 	.word	0x08014ab8
 800e458:	080146e8 	.word	0x080146e8
 800e45c:	08014b10 	.word	0x08014b10
 800e460:	08014b30 	.word	0x08014b30
 800e464:	08014b6c 	.word	0x08014b6c
 800e468:	08014b84 	.word	0x08014b84
 800e46c:	08014bb0 	.word	0x08014bb0

0800e470 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e470:	b5b0      	push	{r4, r5, r7, lr}
 800e472:	b08a      	sub	sp, #40	; 0x28
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d106      	bne.n	800e48c <tcp_output+0x1c>
 800e47e:	4b8a      	ldr	r3, [pc, #552]	; (800e6a8 <tcp_output+0x238>)
 800e480:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e484:	4989      	ldr	r1, [pc, #548]	; (800e6ac <tcp_output+0x23c>)
 800e486:	488a      	ldr	r0, [pc, #552]	; (800e6b0 <tcp_output+0x240>)
 800e488:	f003 ff08 	bl	801229c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	7d1b      	ldrb	r3, [r3, #20]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d106      	bne.n	800e4a2 <tcp_output+0x32>
 800e494:	4b84      	ldr	r3, [pc, #528]	; (800e6a8 <tcp_output+0x238>)
 800e496:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e49a:	4986      	ldr	r1, [pc, #536]	; (800e6b4 <tcp_output+0x244>)
 800e49c:	4884      	ldr	r0, [pc, #528]	; (800e6b0 <tcp_output+0x240>)
 800e49e:	f003 fefd 	bl	801229c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e4a2:	4b85      	ldr	r3, [pc, #532]	; (800e6b8 <tcp_output+0x248>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d101      	bne.n	800e4b0 <tcp_output+0x40>
    return ERR_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	e1ce      	b.n	800e84e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	bf28      	it	cs
 800e4c0:	4613      	movcs	r3, r2
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10b      	bne.n	800e4ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	8b5b      	ldrh	r3, [r3, #26]
 800e4d6:	f003 0302 	and.w	r3, r3, #2
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 81aa 	beq.w	800e834 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fdcb 	bl	800f07c <tcp_send_empty_ack>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	e1b1      	b.n	800e84e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e4ea:	6879      	ldr	r1, [r7, #4]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff fc7c 	bl	800ddf0 <tcp_route>
 800e4f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d102      	bne.n	800e506 <tcp_output+0x96>
    return ERR_RTE;
 800e500:	f06f 0303 	mvn.w	r3, #3
 800e504:	e1a3      	b.n	800e84e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <tcp_output+0xa4>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d111      	bne.n	800e538 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <tcp_output+0xb0>
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	3304      	adds	r3, #4
 800e51e:	e000      	b.n	800e522 <tcp_output+0xb2>
 800e520:	2300      	movs	r3, #0
 800e522:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <tcp_output+0xc0>
      return ERR_RTE;
 800e52a:	f06f 0303 	mvn.w	r3, #3
 800e52e:	e18e      	b.n	800e84e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7f9 fff9 	bl	8008536 <lwip_htonl>
 800e544:	4602      	mov	r2, r0
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e54e:	8912      	ldrh	r2, [r2, #8]
 800e550:	4413      	add	r3, r2
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	429a      	cmp	r2, r3
 800e556:	d227      	bcs.n	800e5a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e55e:	461a      	mov	r2, r3
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	4293      	cmp	r3, r2
 800e564:	d114      	bne.n	800e590 <tcp_output+0x120>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d110      	bne.n	800e590 <tcp_output+0x120>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10b      	bne.n	800e590 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	8b5b      	ldrh	r3, [r3, #26]
 800e594:	f003 0302 	and.w	r3, r3, #2
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 814d 	beq.w	800e838 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fd6c 	bl	800f07c <tcp_send_empty_ack>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	e152      	b.n	800e84e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 811c 	beq.w	800e7f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e5be:	e002      	b.n	800e5c6 <tcp_output+0x156>
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	623b      	str	r3, [r7, #32]
 800e5c6:	6a3b      	ldr	r3, [r7, #32]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1f8      	bne.n	800e5c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e5ce:	e112      	b.n	800e7f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	899b      	ldrh	r3, [r3, #12]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7f9 ff97 	bl	800850c <lwip_htons>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	f003 0304 	and.w	r3, r3, #4
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d006      	beq.n	800e5f8 <tcp_output+0x188>
 800e5ea:	4b2f      	ldr	r3, [pc, #188]	; (800e6a8 <tcp_output+0x238>)
 800e5ec:	f240 5236 	movw	r2, #1334	; 0x536
 800e5f0:	4932      	ldr	r1, [pc, #200]	; (800e6bc <tcp_output+0x24c>)
 800e5f2:	482f      	ldr	r0, [pc, #188]	; (800e6b0 <tcp_output+0x240>)
 800e5f4:	f003 fe52 	bl	801229c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01f      	beq.n	800e640 <tcp_output+0x1d0>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	8b5b      	ldrh	r3, [r3, #26]
 800e604:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d119      	bne.n	800e640 <tcp_output+0x1d0>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00b      	beq.n	800e62c <tcp_output+0x1bc>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d110      	bne.n	800e640 <tcp_output+0x1d0>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e622:	891a      	ldrh	r2, [r3, #8]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e628:	429a      	cmp	r2, r3
 800e62a:	d209      	bcs.n	800e640 <tcp_output+0x1d0>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e632:	2b00      	cmp	r3, #0
 800e634:	d004      	beq.n	800e640 <tcp_output+0x1d0>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e63c:	2b08      	cmp	r3, #8
 800e63e:	d901      	bls.n	800e644 <tcp_output+0x1d4>
 800e640:	2301      	movs	r3, #1
 800e642:	e000      	b.n	800e646 <tcp_output+0x1d6>
 800e644:	2300      	movs	r3, #0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	8b5b      	ldrh	r3, [r3, #26]
 800e64e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 80e4 	beq.w	800e820 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	7d1b      	ldrb	r3, [r3, #20]
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	d00d      	beq.n	800e67c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	899b      	ldrh	r3, [r3, #12]
 800e666:	b29c      	uxth	r4, r3
 800e668:	2010      	movs	r0, #16
 800e66a:	f7f9 ff4f 	bl	800850c <lwip_htons>
 800e66e:	4603      	mov	r3, r0
 800e670:	461a      	mov	r2, r3
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	4322      	orrs	r2, r4
 800e678:	b292      	uxth	r2, r2
 800e67a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e67c:	697a      	ldr	r2, [r7, #20]
 800e67e:	6879      	ldr	r1, [r7, #4]
 800e680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e682:	f000 f909 	bl	800e898 <tcp_output_segment>
 800e686:	4603      	mov	r3, r0
 800e688:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d016      	beq.n	800e6c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	8b5b      	ldrh	r3, [r3, #26]
 800e696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	835a      	strh	r2, [r3, #26]
      return err;
 800e6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6a4:	e0d3      	b.n	800e84e <tcp_output+0x3de>
 800e6a6:	bf00      	nop
 800e6a8:	08014694 	.word	0x08014694
 800e6ac:	08014bd8 	.word	0x08014bd8
 800e6b0:	080146e8 	.word	0x080146e8
 800e6b4:	08014bf0 	.word	0x08014bf0
 800e6b8:	2000849c 	.word	0x2000849c
 800e6bc:	08014c18 	.word	0x08014c18
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	7d1b      	ldrb	r3, [r3, #20]
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d006      	beq.n	800e6de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	8b5b      	ldrh	r3, [r3, #26]
 800e6d4:	f023 0303 	bic.w	r3, r3, #3
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7f9 ff26 	bl	8008536 <lwip_htonl>
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	891b      	ldrh	r3, [r3, #8]
 800e6f0:	461d      	mov	r5, r3
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	899b      	ldrh	r3, [r3, #12]
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f9 ff06 	bl	800850c <lwip_htons>
 800e700:	4603      	mov	r3, r0
 800e702:	b2db      	uxtb	r3, r3
 800e704:	f003 0303 	and.w	r3, r3, #3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <tcp_output+0x2a0>
 800e70c:	2301      	movs	r3, #1
 800e70e:	e000      	b.n	800e712 <tcp_output+0x2a2>
 800e710:	2300      	movs	r3, #0
 800e712:	442b      	add	r3, r5
 800e714:	4423      	add	r3, r4
 800e716:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	da02      	bge.n	800e72a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	891b      	ldrh	r3, [r3, #8]
 800e72e:	461c      	mov	r4, r3
 800e730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	899b      	ldrh	r3, [r3, #12]
 800e736:	b29b      	uxth	r3, r3
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f9 fee7 	bl	800850c <lwip_htons>
 800e73e:	4603      	mov	r3, r0
 800e740:	b2db      	uxtb	r3, r3
 800e742:	f003 0303 	and.w	r3, r3, #3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <tcp_output+0x2de>
 800e74a:	2301      	movs	r3, #1
 800e74c:	e000      	b.n	800e750 <tcp_output+0x2e0>
 800e74e:	2300      	movs	r3, #0
 800e750:	4423      	add	r3, r4
 800e752:	2b00      	cmp	r3, #0
 800e754:	d049      	beq.n	800e7ea <tcp_output+0x37a>
      seg->next = NULL;
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e758:	2200      	movs	r2, #0
 800e75a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e760:	2b00      	cmp	r3, #0
 800e762:	d105      	bne.n	800e770 <tcp_output+0x300>
        pcb->unacked = seg;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e768:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76c:	623b      	str	r3, [r7, #32]
 800e76e:	e03f      	b.n	800e7f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	4618      	mov	r0, r3
 800e778:	f7f9 fedd 	bl	8008536 <lwip_htonl>
 800e77c:	4604      	mov	r4, r0
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	4618      	mov	r0, r3
 800e786:	f7f9 fed6 	bl	8008536 <lwip_htonl>
 800e78a:	4603      	mov	r3, r0
 800e78c:	1ae3      	subs	r3, r4, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	da24      	bge.n	800e7dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	3370      	adds	r3, #112	; 0x70
 800e796:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e798:	e002      	b.n	800e7a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d011      	beq.n	800e7cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f9 fec0 	bl	8008536 <lwip_htonl>
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7f9 feb9 	bl	8008536 <lwip_htonl>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	dbe6      	blt.n	800e79a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	e009      	b.n	800e7f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	623b      	str	r3, [r7, #32]
 800e7e8:	e002      	b.n	800e7f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e7ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7ec:	f7fc fc3f 	bl	800b06e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d012      	beq.n	800e822 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	4618      	mov	r0, r3
 800e804:	f7f9 fe97 	bl	8008536 <lwip_htonl>
 800e808:	4602      	mov	r2, r0
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80e:	1ad3      	subs	r3, r2, r3
 800e810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e812:	8912      	ldrh	r2, [r2, #8]
 800e814:	4413      	add	r3, r2
  while (seg != NULL &&
 800e816:	69ba      	ldr	r2, [r7, #24]
 800e818:	429a      	cmp	r2, r3
 800e81a:	f4bf aed9 	bcs.w	800e5d0 <tcp_output+0x160>
 800e81e:	e000      	b.n	800e822 <tcp_output+0x3b2>
      break;
 800e820:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d108      	bne.n	800e83c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e832:	e004      	b.n	800e83e <tcp_output+0x3ce>
    goto output_done;
 800e834:	bf00      	nop
 800e836:	e002      	b.n	800e83e <tcp_output+0x3ce>
    goto output_done;
 800e838:	bf00      	nop
 800e83a:	e000      	b.n	800e83e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e83c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	8b5b      	ldrh	r3, [r3, #26]
 800e842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e846:	b29a      	uxth	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3728      	adds	r7, #40	; 0x28
 800e852:	46bd      	mov	sp, r7
 800e854:	bdb0      	pop	{r4, r5, r7, pc}
 800e856:	bf00      	nop

0800e858 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d106      	bne.n	800e874 <tcp_output_segment_busy+0x1c>
 800e866:	4b09      	ldr	r3, [pc, #36]	; (800e88c <tcp_output_segment_busy+0x34>)
 800e868:	f240 529a 	movw	r2, #1434	; 0x59a
 800e86c:	4908      	ldr	r1, [pc, #32]	; (800e890 <tcp_output_segment_busy+0x38>)
 800e86e:	4809      	ldr	r0, [pc, #36]	; (800e894 <tcp_output_segment_busy+0x3c>)
 800e870:	f003 fd14 	bl	801229c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	7b9b      	ldrb	r3, [r3, #14]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d001      	beq.n	800e882 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e87e:	2301      	movs	r3, #1
 800e880:	e000      	b.n	800e884 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	08014694 	.word	0x08014694
 800e890:	08014c30 	.word	0x08014c30
 800e894:	080146e8 	.word	0x080146e8

0800e898 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e898:	b5b0      	push	{r4, r5, r7, lr}
 800e89a:	b08c      	sub	sp, #48	; 0x30
 800e89c:	af04      	add	r7, sp, #16
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <tcp_output_segment+0x20>
 800e8aa:	4b64      	ldr	r3, [pc, #400]	; (800ea3c <tcp_output_segment+0x1a4>)
 800e8ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e8b0:	4963      	ldr	r1, [pc, #396]	; (800ea40 <tcp_output_segment+0x1a8>)
 800e8b2:	4864      	ldr	r0, [pc, #400]	; (800ea44 <tcp_output_segment+0x1ac>)
 800e8b4:	f003 fcf2 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <tcp_output_segment+0x34>
 800e8be:	4b5f      	ldr	r3, [pc, #380]	; (800ea3c <tcp_output_segment+0x1a4>)
 800e8c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e8c4:	4960      	ldr	r1, [pc, #384]	; (800ea48 <tcp_output_segment+0x1b0>)
 800e8c6:	485f      	ldr	r0, [pc, #380]	; (800ea44 <tcp_output_segment+0x1ac>)
 800e8c8:	f003 fce8 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d106      	bne.n	800e8e0 <tcp_output_segment+0x48>
 800e8d2:	4b5a      	ldr	r3, [pc, #360]	; (800ea3c <tcp_output_segment+0x1a4>)
 800e8d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e8d8:	495c      	ldr	r1, [pc, #368]	; (800ea4c <tcp_output_segment+0x1b4>)
 800e8da:	485a      	ldr	r0, [pc, #360]	; (800ea44 <tcp_output_segment+0x1ac>)
 800e8dc:	f003 fcde 	bl	801229c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f7ff ffb9 	bl	800e858 <tcp_output_segment_busy>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	e0a1      	b.n	800ea34 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	68dc      	ldr	r4, [r3, #12]
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	f7f9 fe1c 	bl	8008536 <lwip_htonl>
 800e8fe:	4603      	mov	r3, r0
 800e900:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	68dc      	ldr	r4, [r3, #12]
 800e90a:	4610      	mov	r0, r2
 800e90c:	f7f9 fdfe 	bl	800850c <lwip_htons>
 800e910:	4603      	mov	r3, r0
 800e912:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e91c:	441a      	add	r2, r3
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	3314      	adds	r3, #20
 800e928:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	7a9b      	ldrb	r3, [r3, #10]
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d015      	beq.n	800e962 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	3304      	adds	r3, #4
 800e93a:	461a      	mov	r2, r3
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e942:	f7fc fe8b 	bl	800b65c <tcp_eff_send_mss_netif>
 800e946:	4603      	mov	r3, r0
 800e948:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e94a:	8b7b      	ldrh	r3, [r7, #26]
 800e94c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e950:	4618      	mov	r0, r3
 800e952:	f7f9 fdf0 	bl	8008536 <lwip_htonl>
 800e956:	4602      	mov	r2, r0
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	3304      	adds	r3, #4
 800e960:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e968:	2b00      	cmp	r3, #0
 800e96a:	da02      	bge.n	800e972 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	2200      	movs	r2, #0
 800e970:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10c      	bne.n	800e994 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e97a:	4b35      	ldr	r3, [pc, #212]	; (800ea50 <tcp_output_segment+0x1b8>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	f7f9 fdd4 	bl	8008536 <lwip_htonl>
 800e98e:	4602      	mov	r2, r0
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	68da      	ldr	r2, [r3, #12]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	1ad3      	subs	r3, r2, r3
 800e9a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	8959      	ldrh	r1, [r3, #10]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	8b3a      	ldrh	r2, [r7, #24]
 800e9ae:	1a8a      	subs	r2, r1, r2
 800e9b0:	b292      	uxth	r2, r2
 800e9b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	8919      	ldrh	r1, [r3, #8]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	8b3a      	ldrh	r2, [r7, #24]
 800e9c0:	1a8a      	subs	r2, r1, r2
 800e9c2:	b292      	uxth	r2, r2
 800e9c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	68d2      	ldr	r2, [r2, #12]
 800e9ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	741a      	strb	r2, [r3, #16]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	68da      	ldr	r2, [r3, #12]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	7a9b      	ldrb	r3, [r3, #10]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <tcp_output_segment+0x158>
 800e9ec:	2318      	movs	r3, #24
 800e9ee:	e000      	b.n	800e9f2 <tcp_output_segment+0x15a>
 800e9f0:	2314      	movs	r3, #20
 800e9f2:	4413      	add	r3, r2
 800e9f4:	69fa      	ldr	r2, [r7, #28]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d006      	beq.n	800ea08 <tcp_output_segment+0x170>
 800e9fa:	4b10      	ldr	r3, [pc, #64]	; (800ea3c <tcp_output_segment+0x1a4>)
 800e9fc:	f240 621c 	movw	r2, #1564	; 0x61c
 800ea00:	4914      	ldr	r1, [pc, #80]	; (800ea54 <tcp_output_segment+0x1bc>)
 800ea02:	4810      	ldr	r0, [pc, #64]	; (800ea44 <tcp_output_segment+0x1ac>)
 800ea04:	f003 fc4a 	bl	801229c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6858      	ldr	r0, [r3, #4]
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	1d1c      	adds	r4, r3, #4
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	7add      	ldrb	r5, [r3, #11]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	7a9b      	ldrb	r3, [r3, #10]
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	9202      	str	r2, [sp, #8]
 800ea1e:	2206      	movs	r2, #6
 800ea20:	9201      	str	r2, [sp, #4]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	462b      	mov	r3, r5
 800ea26:	4622      	mov	r2, r4
 800ea28:	f002 f9f2 	bl	8010e10 <ip4_output_if>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ea30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3720      	adds	r7, #32
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ea3c:	08014694 	.word	0x08014694
 800ea40:	08014c58 	.word	0x08014c58
 800ea44:	080146e8 	.word	0x080146e8
 800ea48:	08014c78 	.word	0x08014c78
 800ea4c:	08014c98 	.word	0x08014c98
 800ea50:	20008450 	.word	0x20008450
 800ea54:	08014cbc 	.word	0x08014cbc

0800ea58 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ea58:	b5b0      	push	{r4, r5, r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d106      	bne.n	800ea74 <tcp_rexmit_rto_prepare+0x1c>
 800ea66:	4b31      	ldr	r3, [pc, #196]	; (800eb2c <tcp_rexmit_rto_prepare+0xd4>)
 800ea68:	f240 6263 	movw	r2, #1635	; 0x663
 800ea6c:	4930      	ldr	r1, [pc, #192]	; (800eb30 <tcp_rexmit_rto_prepare+0xd8>)
 800ea6e:	4831      	ldr	r0, [pc, #196]	; (800eb34 <tcp_rexmit_rto_prepare+0xdc>)
 800ea70:	f003 fc14 	bl	801229c <iprintf>

  if (pcb->unacked == NULL) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d102      	bne.n	800ea82 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ea7c:	f06f 0305 	mvn.w	r3, #5
 800ea80:	e050      	b.n	800eb24 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea86:	60fb      	str	r3, [r7, #12]
 800ea88:	e00b      	b.n	800eaa2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f7ff fee4 	bl	800e858 <tcp_output_segment_busy>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ea96:	f06f 0305 	mvn.w	r3, #5
 800ea9a:	e043      	b.n	800eb24 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	60fb      	str	r3, [r7, #12]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d1ef      	bne.n	800ea8a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f7ff fed4 	bl	800e858 <tcp_output_segment_busy>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800eab6:	f06f 0305 	mvn.w	r3, #5
 800eaba:	e033      	b.n	800eb24 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8b5b      	ldrh	r3, [r3, #26]
 800ead6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eada:	b29a      	uxth	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f9 fd25 	bl	8008536 <lwip_htonl>
 800eaec:	4604      	mov	r4, r0
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	891b      	ldrh	r3, [r3, #8]
 800eaf2:	461d      	mov	r5, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	899b      	ldrh	r3, [r3, #12]
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7f9 fd05 	bl	800850c <lwip_htons>
 800eb02:	4603      	mov	r3, r0
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	f003 0303 	and.w	r3, r3, #3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <tcp_rexmit_rto_prepare+0xba>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e000      	b.n	800eb14 <tcp_rexmit_rto_prepare+0xbc>
 800eb12:	2300      	movs	r3, #0
 800eb14:	442b      	add	r3, r5
 800eb16:	18e2      	adds	r2, r4, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bdb0      	pop	{r4, r5, r7, pc}
 800eb2c:	08014694 	.word	0x08014694
 800eb30:	08014cd0 	.word	0x08014cd0
 800eb34:	080146e8 	.word	0x080146e8

0800eb38 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d106      	bne.n	800eb54 <tcp_rexmit_rto_commit+0x1c>
 800eb46:	4b0d      	ldr	r3, [pc, #52]	; (800eb7c <tcp_rexmit_rto_commit+0x44>)
 800eb48:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eb4c:	490c      	ldr	r1, [pc, #48]	; (800eb80 <tcp_rexmit_rto_commit+0x48>)
 800eb4e:	480d      	ldr	r0, [pc, #52]	; (800eb84 <tcp_rexmit_rto_commit+0x4c>)
 800eb50:	f003 fba4 	bl	801229c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb5a:	2bff      	cmp	r3, #255	; 0xff
 800eb5c:	d007      	beq.n	800eb6e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb64:	3301      	adds	r3, #1
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7ff fc7e 	bl	800e470 <tcp_output>
}
 800eb74:	bf00      	nop
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	08014694 	.word	0x08014694
 800eb80:	08014cf4 	.word	0x08014cf4
 800eb84:	080146e8 	.word	0x080146e8

0800eb88 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d106      	bne.n	800eba4 <tcp_rexmit_rto+0x1c>
 800eb96:	4b0a      	ldr	r3, [pc, #40]	; (800ebc0 <tcp_rexmit_rto+0x38>)
 800eb98:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800eb9c:	4909      	ldr	r1, [pc, #36]	; (800ebc4 <tcp_rexmit_rto+0x3c>)
 800eb9e:	480a      	ldr	r0, [pc, #40]	; (800ebc8 <tcp_rexmit_rto+0x40>)
 800eba0:	f003 fb7c 	bl	801229c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff ff57 	bl	800ea58 <tcp_rexmit_rto_prepare>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff ffc1 	bl	800eb38 <tcp_rexmit_rto_commit>
  }
}
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	08014694 	.word	0x08014694
 800ebc4:	08014d18 	.word	0x08014d18
 800ebc8:	080146e8 	.word	0x080146e8

0800ebcc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d106      	bne.n	800ebe8 <tcp_rexmit+0x1c>
 800ebda:	4b2f      	ldr	r3, [pc, #188]	; (800ec98 <tcp_rexmit+0xcc>)
 800ebdc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ebe0:	492e      	ldr	r1, [pc, #184]	; (800ec9c <tcp_rexmit+0xd0>)
 800ebe2:	482f      	ldr	r0, [pc, #188]	; (800eca0 <tcp_rexmit+0xd4>)
 800ebe4:	f003 fb5a 	bl	801229c <iprintf>

  if (pcb->unacked == NULL) {
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ebf0:	f06f 0305 	mvn.w	r3, #5
 800ebf4:	e04c      	b.n	800ec90 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebfa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ebfc:	68b8      	ldr	r0, [r7, #8]
 800ebfe:	f7ff fe2b 	bl	800e858 <tcp_output_segment_busy>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ec08:	f06f 0305 	mvn.w	r3, #5
 800ec0c:	e040      	b.n	800ec90 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	336c      	adds	r3, #108	; 0x6c
 800ec1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec1c:	e002      	b.n	800ec24 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d011      	beq.n	800ec50 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7f9 fc7e 	bl	8008536 <lwip_htonl>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7f9 fc77 	bl	8008536 <lwip_htonl>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dbe6      	blt.n	800ec1e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d103      	bne.n	800ec6e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec74:	2bff      	cmp	r3, #255	; 0xff
 800ec76:	d007      	beq.n	800ec88 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec7e:	3301      	adds	r3, #1
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3714      	adds	r7, #20
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd90      	pop	{r4, r7, pc}
 800ec98:	08014694 	.word	0x08014694
 800ec9c:	08014d34 	.word	0x08014d34
 800eca0:	080146e8 	.word	0x080146e8

0800eca4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <tcp_rexmit_fast+0x1c>
 800ecb2:	4b2a      	ldr	r3, [pc, #168]	; (800ed5c <tcp_rexmit_fast+0xb8>)
 800ecb4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ecb8:	4929      	ldr	r1, [pc, #164]	; (800ed60 <tcp_rexmit_fast+0xbc>)
 800ecba:	482a      	ldr	r0, [pc, #168]	; (800ed64 <tcp_rexmit_fast+0xc0>)
 800ecbc:	f003 faee 	bl	801229c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d044      	beq.n	800ed52 <tcp_rexmit_fast+0xae>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	8b5b      	ldrh	r3, [r3, #26]
 800eccc:	f003 0304 	and.w	r3, r3, #4
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d13e      	bne.n	800ed52 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7ff ff79 	bl	800ebcc <tcp_rexmit>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d138      	bne.n	800ed52 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecec:	4293      	cmp	r3, r2
 800ecee:	bf28      	it	cs
 800ecf0:	4613      	movcs	r3, r2
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	0fda      	lsrs	r2, r3, #31
 800ecf6:	4413      	add	r3, r2
 800ecf8:	105b      	asrs	r3, r3, #1
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ed08:	461a      	mov	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d206      	bcs.n	800ed22 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed18:	005b      	lsls	r3, r3, #1
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	0049      	lsls	r1, r1, #1
 800ed30:	440b      	add	r3, r1
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	4413      	add	r3, r2
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	8b5b      	ldrh	r3, [r3, #26]
 800ed42:	f043 0304 	orr.w	r3, r3, #4
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ed52:	bf00      	nop
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	08014694 	.word	0x08014694
 800ed60:	08014d4c 	.word	0x08014d4c
 800ed64:	080146e8 	.word	0x080146e8

0800ed68 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	607b      	str	r3, [r7, #4]
 800ed72:	460b      	mov	r3, r1
 800ed74:	817b      	strh	r3, [r7, #10]
 800ed76:	4613      	mov	r3, r2
 800ed78:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ed7a:	897a      	ldrh	r2, [r7, #10]
 800ed7c:	893b      	ldrh	r3, [r7, #8]
 800ed7e:	4413      	add	r3, r2
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	3314      	adds	r3, #20
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	2022      	movs	r0, #34	; 0x22
 800ed8e:	f7fa fc17 	bl	80095c0 <pbuf_alloc>
 800ed92:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d04d      	beq.n	800ee36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ed9a:	897b      	ldrh	r3, [r7, #10]
 800ed9c:	3313      	adds	r3, #19
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	8952      	ldrh	r2, [r2, #10]
 800eda2:	4293      	cmp	r3, r2
 800eda4:	db06      	blt.n	800edb4 <tcp_output_alloc_header_common+0x4c>
 800eda6:	4b26      	ldr	r3, [pc, #152]	; (800ee40 <tcp_output_alloc_header_common+0xd8>)
 800eda8:	f240 7223 	movw	r2, #1827	; 0x723
 800edac:	4925      	ldr	r1, [pc, #148]	; (800ee44 <tcp_output_alloc_header_common+0xdc>)
 800edae:	4826      	ldr	r0, [pc, #152]	; (800ee48 <tcp_output_alloc_header_common+0xe0>)
 800edb0:	f003 fa74 	bl	801229c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800edba:	8c3b      	ldrh	r3, [r7, #32]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7f9 fba5 	bl	800850c <lwip_htons>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800edca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edcc:	4618      	mov	r0, r3
 800edce:	f7f9 fb9d 	bl	800850c <lwip_htons>
 800edd2:	4603      	mov	r3, r0
 800edd4:	461a      	mov	r2, r3
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f7f9 fba8 	bl	8008536 <lwip_htonl>
 800ede6:	4602      	mov	r2, r0
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800edec:	897b      	ldrh	r3, [r7, #10]
 800edee:	089b      	lsrs	r3, r3, #2
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	3305      	adds	r3, #5
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	031b      	lsls	r3, r3, #12
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	4313      	orrs	r3, r2
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f9 fb81 	bl	800850c <lwip_htons>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ee12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7f9 fb79 	bl	800850c <lwip_htons>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	2200      	movs	r2, #0
 800ee26:	741a      	strb	r2, [r3, #16]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	749a      	strb	r2, [r3, #18]
 800ee32:	2200      	movs	r2, #0
 800ee34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ee36:	697b      	ldr	r3, [r7, #20]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	08014694 	.word	0x08014694
 800ee44:	08014d6c 	.word	0x08014d6c
 800ee48:	080146e8 	.word	0x080146e8

0800ee4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ee4c:	b5b0      	push	{r4, r5, r7, lr}
 800ee4e:	b08a      	sub	sp, #40	; 0x28
 800ee50:	af04      	add	r7, sp, #16
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	607b      	str	r3, [r7, #4]
 800ee56:	460b      	mov	r3, r1
 800ee58:	817b      	strh	r3, [r7, #10]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <tcp_output_alloc_header+0x26>
 800ee64:	4b15      	ldr	r3, [pc, #84]	; (800eebc <tcp_output_alloc_header+0x70>)
 800ee66:	f240 7242 	movw	r2, #1858	; 0x742
 800ee6a:	4915      	ldr	r1, [pc, #84]	; (800eec0 <tcp_output_alloc_header+0x74>)
 800ee6c:	4815      	ldr	r0, [pc, #84]	; (800eec4 <tcp_output_alloc_header+0x78>)
 800ee6e:	f003 fa15 	bl	801229c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	8adb      	ldrh	r3, [r3, #22]
 800ee7a:	68fa      	ldr	r2, [r7, #12]
 800ee7c:	8b12      	ldrh	r2, [r2, #24]
 800ee7e:	68f9      	ldr	r1, [r7, #12]
 800ee80:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ee82:	893d      	ldrh	r5, [r7, #8]
 800ee84:	897c      	ldrh	r4, [r7, #10]
 800ee86:	9103      	str	r1, [sp, #12]
 800ee88:	2110      	movs	r1, #16
 800ee8a:	9102      	str	r1, [sp, #8]
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	462a      	mov	r2, r5
 800ee94:	4621      	mov	r1, r4
 800ee96:	f7ff ff67 	bl	800ed68 <tcp_output_alloc_header_common>
 800ee9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d006      	beq.n	800eeb0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea6:	68fa      	ldr	r2, [r7, #12]
 800eea8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800eeaa:	441a      	add	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800eeb0:	697b      	ldr	r3, [r7, #20]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bdb0      	pop	{r4, r5, r7, pc}
 800eeba:	bf00      	nop
 800eebc:	08014694 	.word	0x08014694
 800eec0:	08014d9c 	.word	0x08014d9c
 800eec4:	080146e8 	.word	0x080146e8

0800eec8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	4611      	mov	r1, r2
 800eed4:	461a      	mov	r2, r3
 800eed6:	460b      	mov	r3, r1
 800eed8:	71fb      	strb	r3, [r7, #7]
 800eeda:	4613      	mov	r3, r2
 800eedc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d106      	bne.n	800eef6 <tcp_output_fill_options+0x2e>
 800eee8:	4b12      	ldr	r3, [pc, #72]	; (800ef34 <tcp_output_fill_options+0x6c>)
 800eeea:	f240 7256 	movw	r2, #1878	; 0x756
 800eeee:	4912      	ldr	r1, [pc, #72]	; (800ef38 <tcp_output_fill_options+0x70>)
 800eef0:	4812      	ldr	r0, [pc, #72]	; (800ef3c <tcp_output_fill_options+0x74>)
 800eef2:	f003 f9d3 	bl	801229c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	3314      	adds	r3, #20
 800ef00:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ef02:	8bfb      	ldrh	r3, [r7, #30]
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	461a      	mov	r2, r3
 800ef08:	79fb      	ldrb	r3, [r7, #7]
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	f003 0304 	and.w	r3, r3, #4
 800ef10:	4413      	add	r3, r2
 800ef12:	3314      	adds	r3, #20
 800ef14:	69ba      	ldr	r2, [r7, #24]
 800ef16:	4413      	add	r3, r2
 800ef18:	697a      	ldr	r2, [r7, #20]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d006      	beq.n	800ef2c <tcp_output_fill_options+0x64>
 800ef1e:	4b05      	ldr	r3, [pc, #20]	; (800ef34 <tcp_output_fill_options+0x6c>)
 800ef20:	f240 7275 	movw	r2, #1909	; 0x775
 800ef24:	4906      	ldr	r1, [pc, #24]	; (800ef40 <tcp_output_fill_options+0x78>)
 800ef26:	4805      	ldr	r0, [pc, #20]	; (800ef3c <tcp_output_fill_options+0x74>)
 800ef28:	f003 f9b8 	bl	801229c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ef2c:	bf00      	nop
 800ef2e:	3720      	adds	r7, #32
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08014694 	.word	0x08014694
 800ef38:	08014dc4 	.word	0x08014dc4
 800ef3c:	080146e8 	.word	0x080146e8
 800ef40:	08014cbc 	.word	0x08014cbc

0800ef44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08a      	sub	sp, #40	; 0x28
 800ef48:	af04      	add	r7, sp, #16
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <tcp_output_control_segment+0x22>
 800ef58:	4b1c      	ldr	r3, [pc, #112]	; (800efcc <tcp_output_control_segment+0x88>)
 800ef5a:	f240 7287 	movw	r2, #1927	; 0x787
 800ef5e:	491c      	ldr	r1, [pc, #112]	; (800efd0 <tcp_output_control_segment+0x8c>)
 800ef60:	481c      	ldr	r0, [pc, #112]	; (800efd4 <tcp_output_control_segment+0x90>)
 800ef62:	f003 f99b 	bl	801229c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	6879      	ldr	r1, [r7, #4]
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f7fe ff40 	bl	800ddf0 <tcp_route>
 800ef70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d102      	bne.n	800ef7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ef78:	23fc      	movs	r3, #252	; 0xfc
 800ef7a:	75fb      	strb	r3, [r7, #23]
 800ef7c:	e01c      	b.n	800efb8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d006      	beq.n	800ef92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	7adb      	ldrb	r3, [r3, #11]
 800ef88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	7a9b      	ldrb	r3, [r3, #10]
 800ef8e:	757b      	strb	r3, [r7, #21]
 800ef90:	e003      	b.n	800ef9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ef92:	23ff      	movs	r3, #255	; 0xff
 800ef94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ef96:	2300      	movs	r3, #0
 800ef98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ef9a:	7dba      	ldrb	r2, [r7, #22]
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	9302      	str	r3, [sp, #8]
 800efa0:	2306      	movs	r3, #6
 800efa2:	9301      	str	r3, [sp, #4]
 800efa4:	7d7b      	ldrb	r3, [r7, #21]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	4613      	mov	r3, r2
 800efaa:	683a      	ldr	r2, [r7, #0]
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	68b8      	ldr	r0, [r7, #8]
 800efb0:	f001 ff2e 	bl	8010e10 <ip4_output_if>
 800efb4:	4603      	mov	r3, r0
 800efb6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800efb8:	68b8      	ldr	r0, [r7, #8]
 800efba:	f7fa fde5 	bl	8009b88 <pbuf_free>
  return err;
 800efbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3718      	adds	r7, #24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	08014694 	.word	0x08014694
 800efd0:	08014dec 	.word	0x08014dec
 800efd4:	080146e8 	.word	0x080146e8

0800efd8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800efd8:	b590      	push	{r4, r7, lr}
 800efda:	b08b      	sub	sp, #44	; 0x2c
 800efdc:	af04      	add	r7, sp, #16
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <tcp_rst+0x22>
 800efec:	4b1f      	ldr	r3, [pc, #124]	; (800f06c <tcp_rst+0x94>)
 800efee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800eff2:	491f      	ldr	r1, [pc, #124]	; (800f070 <tcp_rst+0x98>)
 800eff4:	481f      	ldr	r0, [pc, #124]	; (800f074 <tcp_rst+0x9c>)
 800eff6:	f003 f951 	bl	801229c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	2b00      	cmp	r3, #0
 800effe:	d106      	bne.n	800f00e <tcp_rst+0x36>
 800f000:	4b1a      	ldr	r3, [pc, #104]	; (800f06c <tcp_rst+0x94>)
 800f002:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f006:	491c      	ldr	r1, [pc, #112]	; (800f078 <tcp_rst+0xa0>)
 800f008:	481a      	ldr	r0, [pc, #104]	; (800f074 <tcp_rst+0x9c>)
 800f00a:	f003 f947 	bl	801229c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f00e:	2300      	movs	r3, #0
 800f010:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f012:	f246 0308 	movw	r3, #24584	; 0x6008
 800f016:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f018:	7dfb      	ldrb	r3, [r7, #23]
 800f01a:	b29c      	uxth	r4, r3
 800f01c:	68b8      	ldr	r0, [r7, #8]
 800f01e:	f7f9 fa8a 	bl	8008536 <lwip_htonl>
 800f022:	4602      	mov	r2, r0
 800f024:	8abb      	ldrh	r3, [r7, #20]
 800f026:	9303      	str	r3, [sp, #12]
 800f028:	2314      	movs	r3, #20
 800f02a:	9302      	str	r3, [sp, #8]
 800f02c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	4613      	mov	r3, r2
 800f036:	2200      	movs	r2, #0
 800f038:	4621      	mov	r1, r4
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff fe94 	bl	800ed68 <tcp_output_alloc_header_common>
 800f040:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00c      	beq.n	800f062 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f048:	7dfb      	ldrb	r3, [r7, #23]
 800f04a:	2200      	movs	r2, #0
 800f04c:	6939      	ldr	r1, [r7, #16]
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7ff ff3a 	bl	800eec8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	683a      	ldr	r2, [r7, #0]
 800f058:	6939      	ldr	r1, [r7, #16]
 800f05a:	68f8      	ldr	r0, [r7, #12]
 800f05c:	f7ff ff72 	bl	800ef44 <tcp_output_control_segment>
 800f060:	e000      	b.n	800f064 <tcp_rst+0x8c>
    return;
 800f062:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f064:	371c      	adds	r7, #28
 800f066:	46bd      	mov	sp, r7
 800f068:	bd90      	pop	{r4, r7, pc}
 800f06a:	bf00      	nop
 800f06c:	08014694 	.word	0x08014694
 800f070:	08014e18 	.word	0x08014e18
 800f074:	080146e8 	.word	0x080146e8
 800f078:	08014e34 	.word	0x08014e34

0800f07c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f07c:	b590      	push	{r4, r7, lr}
 800f07e:	b087      	sub	sp, #28
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f088:	2300      	movs	r3, #0
 800f08a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d106      	bne.n	800f0a0 <tcp_send_empty_ack+0x24>
 800f092:	4b28      	ldr	r3, [pc, #160]	; (800f134 <tcp_send_empty_ack+0xb8>)
 800f094:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f098:	4927      	ldr	r1, [pc, #156]	; (800f138 <tcp_send_empty_ack+0xbc>)
 800f09a:	4828      	ldr	r0, [pc, #160]	; (800f13c <tcp_send_empty_ack+0xc0>)
 800f09c:	f003 f8fe 	bl	801229c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	f003 0304 	and.w	r3, r3, #4
 800f0aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f0ac:	7d7b      	ldrb	r3, [r7, #21]
 800f0ae:	b29c      	uxth	r4, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f9 fa3e 	bl	8008536 <lwip_htonl>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2200      	movs	r2, #0
 800f0be:	4621      	mov	r1, r4
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7ff fec3 	bl	800ee4c <tcp_output_alloc_header>
 800f0c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d109      	bne.n	800f0e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8b5b      	ldrh	r3, [r3, #26]
 800f0d2:	f043 0303 	orr.w	r3, r3, #3
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f0dc:	f06f 0301 	mvn.w	r3, #1
 800f0e0:	e023      	b.n	800f12a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f0e2:	7dbb      	ldrb	r3, [r7, #22]
 800f0e4:	7dfa      	ldrb	r2, [r7, #23]
 800f0e6:	6939      	ldr	r1, [r7, #16]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff feed 	bl	800eec8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	6939      	ldr	r1, [r7, #16]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7ff ff24 	bl	800ef44 <tcp_output_control_segment>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d007      	beq.n	800f118 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	8b5b      	ldrh	r3, [r3, #26]
 800f10c:	f043 0303 	orr.w	r3, r3, #3
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	835a      	strh	r2, [r3, #26]
 800f116:	e006      	b.n	800f126 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	8b5b      	ldrh	r3, [r3, #26]
 800f11c:	f023 0303 	bic.w	r3, r3, #3
 800f120:	b29a      	uxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	371c      	adds	r7, #28
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd90      	pop	{r4, r7, pc}
 800f132:	bf00      	nop
 800f134:	08014694 	.word	0x08014694
 800f138:	08014e50 	.word	0x08014e50
 800f13c:	080146e8 	.word	0x080146e8

0800f140 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f140:	b590      	push	{r4, r7, lr}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f148:	2300      	movs	r3, #0
 800f14a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d106      	bne.n	800f160 <tcp_keepalive+0x20>
 800f152:	4b18      	ldr	r3, [pc, #96]	; (800f1b4 <tcp_keepalive+0x74>)
 800f154:	f640 0224 	movw	r2, #2084	; 0x824
 800f158:	4917      	ldr	r1, [pc, #92]	; (800f1b8 <tcp_keepalive+0x78>)
 800f15a:	4818      	ldr	r0, [pc, #96]	; (800f1bc <tcp_keepalive+0x7c>)
 800f15c:	f003 f89e 	bl	801229c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f160:	7dfb      	ldrb	r3, [r7, #23]
 800f162:	b29c      	uxth	r4, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f168:	3b01      	subs	r3, #1
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7f9 f9e3 	bl	8008536 <lwip_htonl>
 800f170:	4603      	mov	r3, r0
 800f172:	2200      	movs	r2, #0
 800f174:	4621      	mov	r1, r4
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff fe68 	bl	800ee4c <tcp_output_alloc_header>
 800f17c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d102      	bne.n	800f18a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f184:	f04f 33ff 	mov.w	r3, #4294967295
 800f188:	e010      	b.n	800f1ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	2200      	movs	r2, #0
 800f18e:	6939      	ldr	r1, [r7, #16]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7ff fe99 	bl	800eec8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	3304      	adds	r3, #4
 800f19c:	6939      	ldr	r1, [r7, #16]
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff fed0 	bl	800ef44 <tcp_output_control_segment>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f1a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	371c      	adds	r7, #28
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd90      	pop	{r4, r7, pc}
 800f1b4:	08014694 	.word	0x08014694
 800f1b8:	08014e70 	.word	0x08014e70
 800f1bc:	080146e8 	.word	0x080146e8

0800f1c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f1c0:	b590      	push	{r4, r7, lr}
 800f1c2:	b08b      	sub	sp, #44	; 0x2c
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d106      	bne.n	800f1e2 <tcp_zero_window_probe+0x22>
 800f1d4:	4b4c      	ldr	r3, [pc, #304]	; (800f308 <tcp_zero_window_probe+0x148>)
 800f1d6:	f640 024f 	movw	r2, #2127	; 0x84f
 800f1da:	494c      	ldr	r1, [pc, #304]	; (800f30c <tcp_zero_window_probe+0x14c>)
 800f1dc:	484c      	ldr	r0, [pc, #304]	; (800f310 <tcp_zero_window_probe+0x150>)
 800f1de:	f003 f85d 	bl	801229c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	e086      	b.n	800f300 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f1f8:	2bff      	cmp	r3, #255	; 0xff
 800f1fa:	d007      	beq.n	800f20c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f202:	3301      	adds	r3, #1
 800f204:	b2da      	uxtb	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	899b      	ldrh	r3, [r3, #12]
 800f212:	b29b      	uxth	r3, r3
 800f214:	4618      	mov	r0, r3
 800f216:	f7f9 f979 	bl	800850c <lwip_htons>
 800f21a:	4603      	mov	r3, r0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 0301 	and.w	r3, r3, #1
 800f222:	2b00      	cmp	r3, #0
 800f224:	d005      	beq.n	800f232 <tcp_zero_window_probe+0x72>
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	891b      	ldrh	r3, [r3, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <tcp_zero_window_probe+0x72>
 800f22e:	2301      	movs	r3, #1
 800f230:	e000      	b.n	800f234 <tcp_zero_window_probe+0x74>
 800f232:	2300      	movs	r3, #0
 800f234:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f236:	7ffb      	ldrb	r3, [r7, #31]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	bf0c      	ite	eq
 800f23c:	2301      	moveq	r3, #1
 800f23e:	2300      	movne	r3, #0
 800f240:	b2db      	uxtb	r3, r3
 800f242:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f248:	b299      	uxth	r1, r3
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	8bba      	ldrh	r2, [r7, #28]
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f7ff fdfa 	bl	800ee4c <tcp_output_alloc_header>
 800f258:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d102      	bne.n	800f266 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f260:	f04f 33ff 	mov.w	r3, #4294967295
 800f264:	e04c      	b.n	800f300 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f26c:	7ffb      	ldrb	r3, [r7, #31]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d011      	beq.n	800f296 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	899b      	ldrh	r3, [r3, #12]
 800f276:	b29b      	uxth	r3, r3
 800f278:	b21b      	sxth	r3, r3
 800f27a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f27e:	b21c      	sxth	r4, r3
 800f280:	2011      	movs	r0, #17
 800f282:	f7f9 f943 	bl	800850c <lwip_htons>
 800f286:	4603      	mov	r3, r0
 800f288:	b21b      	sxth	r3, r3
 800f28a:	4323      	orrs	r3, r4
 800f28c:	b21b      	sxth	r3, r3
 800f28e:	b29a      	uxth	r2, r3
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	819a      	strh	r2, [r3, #12]
 800f294:	e010      	b.n	800f2b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	3314      	adds	r3, #20
 800f29c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f29e:	6a3b      	ldr	r3, [r7, #32]
 800f2a0:	6858      	ldr	r0, [r3, #4]
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	891a      	ldrh	r2, [r3, #8]
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	891b      	ldrh	r3, [r3, #8]
 800f2ac:	1ad3      	subs	r3, r2, r3
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	6939      	ldr	r1, [r7, #16]
 800f2b4:	f7fa fe52 	bl	8009f5c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f2b8:	6a3b      	ldr	r3, [r7, #32]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f9 f939 	bl	8008536 <lwip_htonl>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	da02      	bge.n	800f2dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	69b9      	ldr	r1, [r7, #24]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff fdef 	bl	800eec8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	69b9      	ldr	r1, [r7, #24]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff fe26 	bl	800ef44 <tcp_output_control_segment>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f300:	4618      	mov	r0, r3
 800f302:	372c      	adds	r7, #44	; 0x2c
 800f304:	46bd      	mov	sp, r7
 800f306:	bd90      	pop	{r4, r7, pc}
 800f308:	08014694 	.word	0x08014694
 800f30c:	08014e8c 	.word	0x08014e8c
 800f310:	080146e8 	.word	0x080146e8

0800f314 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f31c:	f7fa ff0c 	bl	800a138 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f320:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <tcpip_tcp_timer+0x38>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d103      	bne.n	800f330 <tcpip_tcp_timer+0x1c>
 800f328:	4b09      	ldr	r3, [pc, #36]	; (800f350 <tcpip_tcp_timer+0x3c>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d005      	beq.n	800f33c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f330:	2200      	movs	r2, #0
 800f332:	4908      	ldr	r1, [pc, #32]	; (800f354 <tcpip_tcp_timer+0x40>)
 800f334:	20fa      	movs	r0, #250	; 0xfa
 800f336:	f000 f8f3 	bl	800f520 <sys_timeout>
 800f33a:	e003      	b.n	800f344 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f33c:	4b06      	ldr	r3, [pc, #24]	; (800f358 <tcpip_tcp_timer+0x44>)
 800f33e:	2200      	movs	r2, #0
 800f340:	601a      	str	r2, [r3, #0]
  }
}
 800f342:	bf00      	nop
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	2000845c 	.word	0x2000845c
 800f350:	20008460 	.word	0x20008460
 800f354:	0800f315 	.word	0x0800f315
 800f358:	200084a8 	.word	0x200084a8

0800f35c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f360:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <tcp_timer_needed+0x30>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10f      	bne.n	800f388 <tcp_timer_needed+0x2c>
 800f368:	4b09      	ldr	r3, [pc, #36]	; (800f390 <tcp_timer_needed+0x34>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d103      	bne.n	800f378 <tcp_timer_needed+0x1c>
 800f370:	4b08      	ldr	r3, [pc, #32]	; (800f394 <tcp_timer_needed+0x38>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d007      	beq.n	800f388 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f378:	4b04      	ldr	r3, [pc, #16]	; (800f38c <tcp_timer_needed+0x30>)
 800f37a:	2201      	movs	r2, #1
 800f37c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f37e:	2200      	movs	r2, #0
 800f380:	4905      	ldr	r1, [pc, #20]	; (800f398 <tcp_timer_needed+0x3c>)
 800f382:	20fa      	movs	r0, #250	; 0xfa
 800f384:	f000 f8cc 	bl	800f520 <sys_timeout>
  }
}
 800f388:	bf00      	nop
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	200084a8 	.word	0x200084a8
 800f390:	2000845c 	.word	0x2000845c
 800f394:	20008460 	.word	0x20008460
 800f398:	0800f315 	.word	0x0800f315

0800f39c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f3a8:	2006      	movs	r0, #6
 800f3aa:	f7f9 fd27 	bl	8008dfc <memp_malloc>
 800f3ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d109      	bne.n	800f3ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d151      	bne.n	800f460 <sys_timeout_abs+0xc4>
 800f3bc:	4b2a      	ldr	r3, [pc, #168]	; (800f468 <sys_timeout_abs+0xcc>)
 800f3be:	22be      	movs	r2, #190	; 0xbe
 800f3c0:	492a      	ldr	r1, [pc, #168]	; (800f46c <sys_timeout_abs+0xd0>)
 800f3c2:	482b      	ldr	r0, [pc, #172]	; (800f470 <sys_timeout_abs+0xd4>)
 800f3c4:	f002 ff6a 	bl	801229c <iprintf>
    return;
 800f3c8:	e04a      	b.n	800f460 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f3e2:	4b24      	ldr	r3, [pc, #144]	; (800f474 <sys_timeout_abs+0xd8>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d103      	bne.n	800f3f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f3ea:	4a22      	ldr	r2, [pc, #136]	; (800f474 <sys_timeout_abs+0xd8>)
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	6013      	str	r3, [r2, #0]
    return;
 800f3f0:	e037      	b.n	800f462 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	685a      	ldr	r2, [r3, #4]
 800f3f6:	4b1f      	ldr	r3, [pc, #124]	; (800f474 <sys_timeout_abs+0xd8>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	0fdb      	lsrs	r3, r3, #31
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	d007      	beq.n	800f41a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f40a:	4b1a      	ldr	r3, [pc, #104]	; (800f474 <sys_timeout_abs+0xd8>)
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f412:	4a18      	ldr	r2, [pc, #96]	; (800f474 <sys_timeout_abs+0xd8>)
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	6013      	str	r3, [r2, #0]
 800f418:	e023      	b.n	800f462 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f41a:	4b16      	ldr	r3, [pc, #88]	; (800f474 <sys_timeout_abs+0xd8>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	e01a      	b.n	800f458 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00b      	beq.n	800f442 <sys_timeout_abs+0xa6>
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	0fdb      	lsrs	r3, r3, #31
 800f438:	f003 0301 	and.w	r3, r3, #1
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d007      	beq.n	800f452 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	601a      	str	r2, [r3, #0]
        break;
 800f450:	e007      	b.n	800f462 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	617b      	str	r3, [r7, #20]
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e1      	bne.n	800f422 <sys_timeout_abs+0x86>
 800f45e:	e000      	b.n	800f462 <sys_timeout_abs+0xc6>
    return;
 800f460:	bf00      	nop
      }
    }
  }
}
 800f462:	3718      	adds	r7, #24
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	08014eb0 	.word	0x08014eb0
 800f46c:	08014ee4 	.word	0x08014ee4
 800f470:	08014f24 	.word	0x08014f24
 800f474:	200084a0 	.word	0x200084a0

0800f478 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	4798      	blx	r3

  now = sys_now();
 800f48a:	f7f8 fe87 	bl	800819c <sys_now>
 800f48e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	4b0f      	ldr	r3, [pc, #60]	; (800f4d4 <lwip_cyclic_timer+0x5c>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4413      	add	r3, r2
 800f49a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	0fdb      	lsrs	r3, r3, #31
 800f4a4:	f003 0301 	and.w	r3, r3, #1
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d009      	beq.n	800f4c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	4907      	ldr	r1, [pc, #28]	; (800f4d8 <lwip_cyclic_timer+0x60>)
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff ff6e 	bl	800f39c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f4c0:	e004      	b.n	800f4cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	4904      	ldr	r1, [pc, #16]	; (800f4d8 <lwip_cyclic_timer+0x60>)
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f7ff ff68 	bl	800f39c <sys_timeout_abs>
}
 800f4cc:	bf00      	nop
 800f4ce:	3718      	adds	r7, #24
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	200084a4 	.word	0x200084a4
 800f4d8:	0800f479 	.word	0x0800f479

0800f4dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	607b      	str	r3, [r7, #4]
 800f4e6:	e00e      	b.n	800f506 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f4e8:	4a0b      	ldr	r2, [pc, #44]	; (800f518 <sys_timeouts_init+0x3c>)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	00db      	lsls	r3, r3, #3
 800f4f4:	4a08      	ldr	r2, [pc, #32]	; (800f518 <sys_timeouts_init+0x3c>)
 800f4f6:	4413      	add	r3, r2
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	4908      	ldr	r1, [pc, #32]	; (800f51c <sys_timeouts_init+0x40>)
 800f4fc:	f000 f810 	bl	800f520 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3301      	adds	r3, #1
 800f504:	607b      	str	r3, [r7, #4]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d9ed      	bls.n	800f4e8 <sys_timeouts_init+0xc>
  }
}
 800f50c:	bf00      	nop
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	08015ac4 	.word	0x08015ac4
 800f51c:	0800f479 	.word	0x0800f479

0800f520 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f532:	d306      	bcc.n	800f542 <sys_timeout+0x22>
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <sys_timeout+0x40>)
 800f536:	f240 1229 	movw	r2, #297	; 0x129
 800f53a:	490a      	ldr	r1, [pc, #40]	; (800f564 <sys_timeout+0x44>)
 800f53c:	480a      	ldr	r0, [pc, #40]	; (800f568 <sys_timeout+0x48>)
 800f53e:	f002 fead 	bl	801229c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f542:	f7f8 fe2b 	bl	800819c <sys_now>
 800f546:	4602      	mov	r2, r0
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4413      	add	r3, r2
 800f54c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	68b9      	ldr	r1, [r7, #8]
 800f552:	6978      	ldr	r0, [r7, #20]
 800f554:	f7ff ff22 	bl	800f39c <sys_timeout_abs>
#endif
}
 800f558:	bf00      	nop
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	08014eb0 	.word	0x08014eb0
 800f564:	08014f4c 	.word	0x08014f4c
 800f568:	08014f24 	.word	0x08014f24

0800f56c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f570:	f002 fd82 	bl	8012078 <rand>
 800f574:	4603      	mov	r3, r0
 800f576:	b29b      	uxth	r3, r3
 800f578:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f582:	b29a      	uxth	r2, r3
 800f584:	4b01      	ldr	r3, [pc, #4]	; (800f58c <udp_init+0x20>)
 800f586:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f588:	bf00      	nop
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20000028 	.word	0x20000028

0800f590 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	4613      	mov	r3, r2
 800f59c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d105      	bne.n	800f5b0 <udp_input_local_match+0x20>
 800f5a4:	4b27      	ldr	r3, [pc, #156]	; (800f644 <udp_input_local_match+0xb4>)
 800f5a6:	2287      	movs	r2, #135	; 0x87
 800f5a8:	4927      	ldr	r1, [pc, #156]	; (800f648 <udp_input_local_match+0xb8>)
 800f5aa:	4828      	ldr	r0, [pc, #160]	; (800f64c <udp_input_local_match+0xbc>)
 800f5ac:	f002 fe76 	bl	801229c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d105      	bne.n	800f5c2 <udp_input_local_match+0x32>
 800f5b6:	4b23      	ldr	r3, [pc, #140]	; (800f644 <udp_input_local_match+0xb4>)
 800f5b8:	2288      	movs	r2, #136	; 0x88
 800f5ba:	4925      	ldr	r1, [pc, #148]	; (800f650 <udp_input_local_match+0xc0>)
 800f5bc:	4823      	ldr	r0, [pc, #140]	; (800f64c <udp_input_local_match+0xbc>)
 800f5be:	f002 fe6d 	bl	801229c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	7a1b      	ldrb	r3, [r3, #8]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00b      	beq.n	800f5e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	7a1a      	ldrb	r2, [r3, #8]
 800f5ce:	4b21      	ldr	r3, [pc, #132]	; (800f654 <udp_input_local_match+0xc4>)
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d001      	beq.n	800f5e2 <udp_input_local_match+0x52>
    return 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e02b      	b.n	800f63a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d018      	beq.n	800f61a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d013      	beq.n	800f616 <udp_input_local_match+0x86>
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00f      	beq.n	800f616 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f5f6:	4b17      	ldr	r3, [pc, #92]	; (800f654 <udp_input_local_match+0xc4>)
 800f5f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5fe:	d00a      	beq.n	800f616 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	4b13      	ldr	r3, [pc, #76]	; (800f654 <udp_input_local_match+0xc4>)
 800f606:	695b      	ldr	r3, [r3, #20]
 800f608:	405a      	eors	r2, r3
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	3308      	adds	r3, #8
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f612:	2b00      	cmp	r3, #0
 800f614:	d110      	bne.n	800f638 <udp_input_local_match+0xa8>
          return 1;
 800f616:	2301      	movs	r3, #1
 800f618:	e00f      	b.n	800f63a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d009      	beq.n	800f634 <udp_input_local_match+0xa4>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <udp_input_local_match+0xa4>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	4b09      	ldr	r3, [pc, #36]	; (800f654 <udp_input_local_match+0xc4>)
 800f62e:	695b      	ldr	r3, [r3, #20]
 800f630:	429a      	cmp	r2, r3
 800f632:	d101      	bne.n	800f638 <udp_input_local_match+0xa8>
        return 1;
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	08014f98 	.word	0x08014f98
 800f648:	08014fc8 	.word	0x08014fc8
 800f64c:	08014fec 	.word	0x08014fec
 800f650:	08015014 	.word	0x08015014
 800f654:	20004ee0 	.word	0x20004ee0

0800f658 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f658:	b590      	push	{r4, r7, lr}
 800f65a:	b08d      	sub	sp, #52	; 0x34
 800f65c:	af02      	add	r7, sp, #8
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f662:	2300      	movs	r3, #0
 800f664:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d105      	bne.n	800f678 <udp_input+0x20>
 800f66c:	4b7c      	ldr	r3, [pc, #496]	; (800f860 <udp_input+0x208>)
 800f66e:	22cf      	movs	r2, #207	; 0xcf
 800f670:	497c      	ldr	r1, [pc, #496]	; (800f864 <udp_input+0x20c>)
 800f672:	487d      	ldr	r0, [pc, #500]	; (800f868 <udp_input+0x210>)
 800f674:	f002 fe12 	bl	801229c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d105      	bne.n	800f68a <udp_input+0x32>
 800f67e:	4b78      	ldr	r3, [pc, #480]	; (800f860 <udp_input+0x208>)
 800f680:	22d0      	movs	r2, #208	; 0xd0
 800f682:	497a      	ldr	r1, [pc, #488]	; (800f86c <udp_input+0x214>)
 800f684:	4878      	ldr	r0, [pc, #480]	; (800f868 <udp_input+0x210>)
 800f686:	f002 fe09 	bl	801229c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	895b      	ldrh	r3, [r3, #10]
 800f68e:	2b07      	cmp	r3, #7
 800f690:	d803      	bhi.n	800f69a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7fa fa78 	bl	8009b88 <pbuf_free>
    goto end;
 800f698:	e0de      	b.n	800f858 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f6a0:	4b73      	ldr	r3, [pc, #460]	; (800f870 <udp_input+0x218>)
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	4a72      	ldr	r2, [pc, #456]	; (800f870 <udp_input+0x218>)
 800f6a6:	6812      	ldr	r2, [r2, #0]
 800f6a8:	4611      	mov	r1, r2
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f001 fc88 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	881b      	ldrh	r3, [r3, #0]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f8 ff26 	bl	800850c <lwip_htons>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	885b      	ldrh	r3, [r3, #2]
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7f8 ff1e 	bl	800850c <lwip_htons>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6e0:	4b64      	ldr	r3, [pc, #400]	; (800f874 <udp_input+0x21c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f6e6:	e054      	b.n	800f792 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	8a5b      	ldrh	r3, [r3, #18]
 800f6ec:	89fa      	ldrh	r2, [r7, #14]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d14a      	bne.n	800f788 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f6f2:	7cfb      	ldrb	r3, [r7, #19]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6fa:	f7ff ff49 	bl	800f590 <udp_input_local_match>
 800f6fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f700:	2b00      	cmp	r3, #0
 800f702:	d041      	beq.n	800f788 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f706:	7c1b      	ldrb	r3, [r3, #16]
 800f708:	f003 0304 	and.w	r3, r3, #4
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d11d      	bne.n	800f74c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d102      	bne.n	800f71c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	61fb      	str	r3, [r7, #28]
 800f71a:	e017      	b.n	800f74c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f71c:	7cfb      	ldrb	r3, [r7, #19]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d014      	beq.n	800f74c <udp_input+0xf4>
 800f722:	4b53      	ldr	r3, [pc, #332]	; (800f870 <udp_input+0x218>)
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f72a:	d10f      	bne.n	800f74c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	3304      	adds	r3, #4
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	429a      	cmp	r2, r3
 800f738:	d008      	beq.n	800f74c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	3304      	adds	r3, #4
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d101      	bne.n	800f74c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74e:	8a9b      	ldrh	r3, [r3, #20]
 800f750:	8a3a      	ldrh	r2, [r7, #16]
 800f752:	429a      	cmp	r2, r3
 800f754:	d118      	bne.n	800f788 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d005      	beq.n	800f76a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	4b43      	ldr	r3, [pc, #268]	; (800f870 <udp_input+0x218>)
 800f764:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f766:	429a      	cmp	r2, r3
 800f768:	d10e      	bne.n	800f788 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f76a:	6a3b      	ldr	r3, [r7, #32]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d014      	beq.n	800f79a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f772:	68da      	ldr	r2, [r3, #12]
 800f774:	6a3b      	ldr	r3, [r7, #32]
 800f776:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f778:	4b3e      	ldr	r3, [pc, #248]	; (800f874 <udp_input+0x21c>)
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f780:	4a3c      	ldr	r2, [pc, #240]	; (800f874 <udp_input+0x21c>)
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f786:	e008      	b.n	800f79a <udp_input+0x142>
      }
    }

    prev = pcb;
 800f788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	627b      	str	r3, [r7, #36]	; 0x24
 800f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1a7      	bne.n	800f6e8 <udp_input+0x90>
 800f798:	e000      	b.n	800f79c <udp_input+0x144>
        break;
 800f79a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d101      	bne.n	800f7a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <udp_input+0x15a>
    for_us = 1;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	76fb      	strb	r3, [r7, #27]
 800f7b0:	e00a      	b.n	800f7c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	3304      	adds	r3, #4
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	4b2d      	ldr	r3, [pc, #180]	; (800f870 <udp_input+0x218>)
 800f7ba:	695b      	ldr	r3, [r3, #20]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	bf0c      	ite	eq
 800f7c0:	2301      	moveq	r3, #1
 800f7c2:	2300      	movne	r3, #0
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f7c8:	7efb      	ldrb	r3, [r7, #27]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d041      	beq.n	800f852 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f7ce:	2108      	movs	r1, #8
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7fa f953 	bl	8009a7c <pbuf_remove_header>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00a      	beq.n	800f7f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f7dc:	4b20      	ldr	r3, [pc, #128]	; (800f860 <udp_input+0x208>)
 800f7de:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f7e2:	4925      	ldr	r1, [pc, #148]	; (800f878 <udp_input+0x220>)
 800f7e4:	4820      	ldr	r0, [pc, #128]	; (800f868 <udp_input+0x210>)
 800f7e6:	f002 fd59 	bl	801229c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7fa f9cc 	bl	8009b88 <pbuf_free>
      goto end;
 800f7f0:	e032      	b.n	800f858 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d012      	beq.n	800f81e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fa:	699b      	ldr	r3, [r3, #24]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00a      	beq.n	800f816 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f802:	699c      	ldr	r4, [r3, #24]
 800f804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f806:	69d8      	ldr	r0, [r3, #28]
 800f808:	8a3b      	ldrh	r3, [r7, #16]
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	4b1b      	ldr	r3, [pc, #108]	; (800f87c <udp_input+0x224>)
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f812:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f814:	e021      	b.n	800f85a <udp_input+0x202>
        pbuf_free(p);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7fa f9b6 	bl	8009b88 <pbuf_free>
        goto end;
 800f81c:	e01c      	b.n	800f858 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f81e:	7cfb      	ldrb	r3, [r7, #19]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d112      	bne.n	800f84a <udp_input+0x1f2>
 800f824:	4b12      	ldr	r3, [pc, #72]	; (800f870 <udp_input+0x218>)
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f82c:	2be0      	cmp	r3, #224	; 0xe0
 800f82e:	d00c      	beq.n	800f84a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f830:	4b0f      	ldr	r3, [pc, #60]	; (800f870 <udp_input+0x218>)
 800f832:	899b      	ldrh	r3, [r3, #12]
 800f834:	3308      	adds	r3, #8
 800f836:	b29b      	uxth	r3, r3
 800f838:	b21b      	sxth	r3, r3
 800f83a:	4619      	mov	r1, r3
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7fa f990 	bl	8009b62 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f842:	2103      	movs	r1, #3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f001 f89b 	bl	8010980 <icmp_dest_unreach>
      pbuf_free(p);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7fa f99c 	bl	8009b88 <pbuf_free>
  return;
 800f850:	e003      	b.n	800f85a <udp_input+0x202>
    pbuf_free(p);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7fa f998 	bl	8009b88 <pbuf_free>
  return;
 800f858:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f85a:	372c      	adds	r7, #44	; 0x2c
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd90      	pop	{r4, r7, pc}
 800f860:	08014f98 	.word	0x08014f98
 800f864:	0801503c 	.word	0x0801503c
 800f868:	08014fec 	.word	0x08014fec
 800f86c:	08015054 	.word	0x08015054
 800f870:	20004ee0 	.word	0x20004ee0
 800f874:	200084ac 	.word	0x200084ac
 800f878:	08015070 	.word	0x08015070
 800f87c:	20004ef0 	.word	0x20004ef0

0800f880 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01e      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d01a      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d017      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d013      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f8a6:	4b0d      	ldr	r3, [pc, #52]	; (800f8dc <udp_netif_ip_addr_changed+0x5c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	e00c      	b.n	800f8c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d103      	bne.n	800f8c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1ef      	bne.n	800f8ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f8ce:	bf00      	nop
 800f8d0:	3714      	adds	r7, #20
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	200084ac 	.word	0x200084ac

0800f8e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f8e8:	4915      	ldr	r1, [pc, #84]	; (800f940 <etharp_free_entry+0x60>)
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	4413      	add	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	440b      	add	r3, r1
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d013      	beq.n	800f924 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f8fc:	4910      	ldr	r1, [pc, #64]	; (800f940 <etharp_free_entry+0x60>)
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	4613      	mov	r3, r2
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	4413      	add	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	440b      	add	r3, r1
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fa f93b 	bl	8009b88 <pbuf_free>
    arp_table[i].q = NULL;
 800f912:	490b      	ldr	r1, [pc, #44]	; (800f940 <etharp_free_entry+0x60>)
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	4613      	mov	r3, r2
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	00db      	lsls	r3, r3, #3
 800f91e:	440b      	add	r3, r1
 800f920:	2200      	movs	r2, #0
 800f922:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f924:	4906      	ldr	r1, [pc, #24]	; (800f940 <etharp_free_entry+0x60>)
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	4613      	mov	r3, r2
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	4413      	add	r3, r2
 800f92e:	00db      	lsls	r3, r3, #3
 800f930:	440b      	add	r3, r1
 800f932:	3314      	adds	r3, #20
 800f934:	2200      	movs	r2, #0
 800f936:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f938:	bf00      	nop
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	200084b0 	.word	0x200084b0

0800f944 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f94a:	2300      	movs	r3, #0
 800f94c:	607b      	str	r3, [r7, #4]
 800f94e:	e096      	b.n	800fa7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f950:	494f      	ldr	r1, [pc, #316]	; (800fa90 <etharp_tmr+0x14c>)
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	4613      	mov	r3, r2
 800f956:	005b      	lsls	r3, r3, #1
 800f958:	4413      	add	r3, r2
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	440b      	add	r3, r1
 800f95e:	3314      	adds	r3, #20
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f964:	78fb      	ldrb	r3, [r7, #3]
 800f966:	2b00      	cmp	r3, #0
 800f968:	f000 8086 	beq.w	800fa78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f96c:	4948      	ldr	r1, [pc, #288]	; (800fa90 <etharp_tmr+0x14c>)
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	4613      	mov	r3, r2
 800f972:	005b      	lsls	r3, r3, #1
 800f974:	4413      	add	r3, r2
 800f976:	00db      	lsls	r3, r3, #3
 800f978:	440b      	add	r3, r1
 800f97a:	3312      	adds	r3, #18
 800f97c:	881b      	ldrh	r3, [r3, #0]
 800f97e:	3301      	adds	r3, #1
 800f980:	b298      	uxth	r0, r3
 800f982:	4943      	ldr	r1, [pc, #268]	; (800fa90 <etharp_tmr+0x14c>)
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	4613      	mov	r3, r2
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	4413      	add	r3, r2
 800f98c:	00db      	lsls	r3, r3, #3
 800f98e:	440b      	add	r3, r1
 800f990:	3312      	adds	r3, #18
 800f992:	4602      	mov	r2, r0
 800f994:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f996:	493e      	ldr	r1, [pc, #248]	; (800fa90 <etharp_tmr+0x14c>)
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	4613      	mov	r3, r2
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	4413      	add	r3, r2
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	440b      	add	r3, r1
 800f9a4:	3312      	adds	r3, #18
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f9ac:	d215      	bcs.n	800f9da <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f9ae:	4938      	ldr	r1, [pc, #224]	; (800fa90 <etharp_tmr+0x14c>)
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	005b      	lsls	r3, r3, #1
 800f9b6:	4413      	add	r3, r2
 800f9b8:	00db      	lsls	r3, r3, #3
 800f9ba:	440b      	add	r3, r1
 800f9bc:	3314      	adds	r3, #20
 800f9be:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d10e      	bne.n	800f9e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f9c4:	4932      	ldr	r1, [pc, #200]	; (800fa90 <etharp_tmr+0x14c>)
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	4413      	add	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	440b      	add	r3, r1
 800f9d2:	3312      	adds	r3, #18
 800f9d4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f9d6:	2b04      	cmp	r3, #4
 800f9d8:	d903      	bls.n	800f9e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7ff ff80 	bl	800f8e0 <etharp_free_entry>
 800f9e0:	e04a      	b.n	800fa78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f9e2:	492b      	ldr	r1, [pc, #172]	; (800fa90 <etharp_tmr+0x14c>)
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	005b      	lsls	r3, r3, #1
 800f9ea:	4413      	add	r3, r2
 800f9ec:	00db      	lsls	r3, r3, #3
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3314      	adds	r3, #20
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b03      	cmp	r3, #3
 800f9f6:	d10a      	bne.n	800fa0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f9f8:	4925      	ldr	r1, [pc, #148]	; (800fa90 <etharp_tmr+0x14c>)
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	005b      	lsls	r3, r3, #1
 800fa00:	4413      	add	r3, r2
 800fa02:	00db      	lsls	r3, r3, #3
 800fa04:	440b      	add	r3, r1
 800fa06:	3314      	adds	r3, #20
 800fa08:	2204      	movs	r2, #4
 800fa0a:	701a      	strb	r2, [r3, #0]
 800fa0c:	e034      	b.n	800fa78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fa0e:	4920      	ldr	r1, [pc, #128]	; (800fa90 <etharp_tmr+0x14c>)
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	4613      	mov	r3, r2
 800fa14:	005b      	lsls	r3, r3, #1
 800fa16:	4413      	add	r3, r2
 800fa18:	00db      	lsls	r3, r3, #3
 800fa1a:	440b      	add	r3, r1
 800fa1c:	3314      	adds	r3, #20
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	2b04      	cmp	r3, #4
 800fa22:	d10a      	bne.n	800fa3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fa24:	491a      	ldr	r1, [pc, #104]	; (800fa90 <etharp_tmr+0x14c>)
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	4413      	add	r3, r2
 800fa2e:	00db      	lsls	r3, r3, #3
 800fa30:	440b      	add	r3, r1
 800fa32:	3314      	adds	r3, #20
 800fa34:	2202      	movs	r2, #2
 800fa36:	701a      	strb	r2, [r3, #0]
 800fa38:	e01e      	b.n	800fa78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fa3a:	4915      	ldr	r1, [pc, #84]	; (800fa90 <etharp_tmr+0x14c>)
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	005b      	lsls	r3, r3, #1
 800fa42:	4413      	add	r3, r2
 800fa44:	00db      	lsls	r3, r3, #3
 800fa46:	440b      	add	r3, r1
 800fa48:	3314      	adds	r3, #20
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d113      	bne.n	800fa78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fa50:	490f      	ldr	r1, [pc, #60]	; (800fa90 <etharp_tmr+0x14c>)
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	4613      	mov	r3, r2
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	4413      	add	r3, r2
 800fa5a:	00db      	lsls	r3, r3, #3
 800fa5c:	440b      	add	r3, r1
 800fa5e:	3308      	adds	r3, #8
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	4613      	mov	r3, r2
 800fa66:	005b      	lsls	r3, r3, #1
 800fa68:	4413      	add	r3, r2
 800fa6a:	00db      	lsls	r3, r3, #3
 800fa6c:	4a08      	ldr	r2, [pc, #32]	; (800fa90 <etharp_tmr+0x14c>)
 800fa6e:	4413      	add	r3, r2
 800fa70:	3304      	adds	r3, #4
 800fa72:	4619      	mov	r1, r3
 800fa74:	f000 fe6e 	bl	8010754 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	607b      	str	r3, [r7, #4]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b09      	cmp	r3, #9
 800fa82:	f77f af65 	ble.w	800f950 <etharp_tmr+0xc>
      }
    }
  }
}
 800fa86:	bf00      	nop
 800fa88:	bf00      	nop
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	200084b0 	.word	0x200084b0

0800fa94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08a      	sub	sp, #40	; 0x28
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	607a      	str	r2, [r7, #4]
 800faa0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800faa2:	230a      	movs	r3, #10
 800faa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800faa6:	230a      	movs	r3, #10
 800faa8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800faaa:	230a      	movs	r3, #10
 800faac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fab2:	230a      	movs	r3, #10
 800fab4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	83bb      	strh	r3, [r7, #28]
 800faba:	2300      	movs	r3, #0
 800fabc:	837b      	strh	r3, [r7, #26]
 800fabe:	2300      	movs	r3, #0
 800fac0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fac2:	2300      	movs	r3, #0
 800fac4:	843b      	strh	r3, [r7, #32]
 800fac6:	e0ae      	b.n	800fc26 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800facc:	49a6      	ldr	r1, [pc, #664]	; (800fd68 <etharp_find_entry+0x2d4>)
 800face:	4613      	mov	r3, r2
 800fad0:	005b      	lsls	r3, r3, #1
 800fad2:	4413      	add	r3, r2
 800fad4:	00db      	lsls	r3, r3, #3
 800fad6:	440b      	add	r3, r1
 800fad8:	3314      	adds	r3, #20
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fade:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fae2:	2b0a      	cmp	r3, #10
 800fae4:	d105      	bne.n	800faf2 <etharp_find_entry+0x5e>
 800fae6:	7dfb      	ldrb	r3, [r7, #23]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d102      	bne.n	800faf2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800faec:	8c3b      	ldrh	r3, [r7, #32]
 800faee:	847b      	strh	r3, [r7, #34]	; 0x22
 800faf0:	e095      	b.n	800fc1e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800faf2:	7dfb      	ldrb	r3, [r7, #23]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 8092 	beq.w	800fc1e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fafa:	7dfb      	ldrb	r3, [r7, #23]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d009      	beq.n	800fb14 <etharp_find_entry+0x80>
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d806      	bhi.n	800fb14 <etharp_find_entry+0x80>
 800fb06:	4b99      	ldr	r3, [pc, #612]	; (800fd6c <etharp_find_entry+0x2d8>)
 800fb08:	f240 1223 	movw	r2, #291	; 0x123
 800fb0c:	4998      	ldr	r1, [pc, #608]	; (800fd70 <etharp_find_entry+0x2dc>)
 800fb0e:	4899      	ldr	r0, [pc, #612]	; (800fd74 <etharp_find_entry+0x2e0>)
 800fb10:	f002 fbc4 	bl	801229c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d020      	beq.n	800fb5c <etharp_find_entry+0xc8>
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6819      	ldr	r1, [r3, #0]
 800fb1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb22:	4891      	ldr	r0, [pc, #580]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fb24:	4613      	mov	r3, r2
 800fb26:	005b      	lsls	r3, r3, #1
 800fb28:	4413      	add	r3, r2
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	4403      	add	r3, r0
 800fb2e:	3304      	adds	r3, #4
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4299      	cmp	r1, r3
 800fb34:	d112      	bne.n	800fb5c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00c      	beq.n	800fb56 <etharp_find_entry+0xc2>
 800fb3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb40:	4989      	ldr	r1, [pc, #548]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fb42:	4613      	mov	r3, r2
 800fb44:	005b      	lsls	r3, r3, #1
 800fb46:	4413      	add	r3, r2
 800fb48:	00db      	lsls	r3, r3, #3
 800fb4a:	440b      	add	r3, r1
 800fb4c:	3308      	adds	r3, #8
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d102      	bne.n	800fb5c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fb56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fb5a:	e100      	b.n	800fd5e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fb5c:	7dfb      	ldrb	r3, [r7, #23]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d140      	bne.n	800fbe4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fb62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb66:	4980      	ldr	r1, [pc, #512]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fb68:	4613      	mov	r3, r2
 800fb6a:	005b      	lsls	r3, r3, #1
 800fb6c:	4413      	add	r3, r2
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	440b      	add	r3, r1
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d01a      	beq.n	800fbae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fb78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb7c:	497a      	ldr	r1, [pc, #488]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fb7e:	4613      	mov	r3, r2
 800fb80:	005b      	lsls	r3, r3, #1
 800fb82:	4413      	add	r3, r2
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	440b      	add	r3, r1
 800fb88:	3312      	adds	r3, #18
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	8bba      	ldrh	r2, [r7, #28]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d845      	bhi.n	800fc1e <etharp_find_entry+0x18a>
            old_queue = i;
 800fb92:	8c3b      	ldrh	r3, [r7, #32]
 800fb94:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fb96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb9a:	4973      	ldr	r1, [pc, #460]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	4413      	add	r3, r2
 800fba2:	00db      	lsls	r3, r3, #3
 800fba4:	440b      	add	r3, r1
 800fba6:	3312      	adds	r3, #18
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	83bb      	strh	r3, [r7, #28]
 800fbac:	e037      	b.n	800fc1e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fbae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbb2:	496d      	ldr	r1, [pc, #436]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	005b      	lsls	r3, r3, #1
 800fbb8:	4413      	add	r3, r2
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	440b      	add	r3, r1
 800fbbe:	3312      	adds	r3, #18
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	8b7a      	ldrh	r2, [r7, #26]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d82a      	bhi.n	800fc1e <etharp_find_entry+0x18a>
            old_pending = i;
 800fbc8:	8c3b      	ldrh	r3, [r7, #32]
 800fbca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fbcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbd0:	4965      	ldr	r1, [pc, #404]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	005b      	lsls	r3, r3, #1
 800fbd6:	4413      	add	r3, r2
 800fbd8:	00db      	lsls	r3, r3, #3
 800fbda:	440b      	add	r3, r1
 800fbdc:	3312      	adds	r3, #18
 800fbde:	881b      	ldrh	r3, [r3, #0]
 800fbe0:	837b      	strh	r3, [r7, #26]
 800fbe2:	e01c      	b.n	800fc1e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fbe4:	7dfb      	ldrb	r3, [r7, #23]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d919      	bls.n	800fc1e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fbea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbee:	495e      	ldr	r1, [pc, #376]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	4413      	add	r3, r2
 800fbf6:	00db      	lsls	r3, r3, #3
 800fbf8:	440b      	add	r3, r1
 800fbfa:	3312      	adds	r3, #18
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	8b3a      	ldrh	r2, [r7, #24]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d80c      	bhi.n	800fc1e <etharp_find_entry+0x18a>
            old_stable = i;
 800fc04:	8c3b      	ldrh	r3, [r7, #32]
 800fc06:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fc08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc0c:	4956      	ldr	r1, [pc, #344]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fc0e:	4613      	mov	r3, r2
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4413      	add	r3, r2
 800fc14:	00db      	lsls	r3, r3, #3
 800fc16:	440b      	add	r3, r1
 800fc18:	3312      	adds	r3, #18
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc1e:	8c3b      	ldrh	r3, [r7, #32]
 800fc20:	3301      	adds	r3, #1
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	843b      	strh	r3, [r7, #32]
 800fc26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc2a:	2b09      	cmp	r3, #9
 800fc2c:	f77f af4c 	ble.w	800fac8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fc30:	7afb      	ldrb	r3, [r7, #11]
 800fc32:	f003 0302 	and.w	r3, r3, #2
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d108      	bne.n	800fc4c <etharp_find_entry+0x1b8>
 800fc3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fc3e:	2b0a      	cmp	r3, #10
 800fc40:	d107      	bne.n	800fc52 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fc42:	7afb      	ldrb	r3, [r7, #11]
 800fc44:	f003 0301 	and.w	r3, r3, #1
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d102      	bne.n	800fc52 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc50:	e085      	b.n	800fd5e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fc52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fc56:	2b09      	cmp	r3, #9
 800fc58:	dc02      	bgt.n	800fc60 <etharp_find_entry+0x1cc>
    i = empty;
 800fc5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc5c:	843b      	strh	r3, [r7, #32]
 800fc5e:	e039      	b.n	800fcd4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fc60:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fc64:	2b09      	cmp	r3, #9
 800fc66:	dc14      	bgt.n	800fc92 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fc68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc6a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fc6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc70:	493d      	ldr	r1, [pc, #244]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fc72:	4613      	mov	r3, r2
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	4413      	add	r3, r2
 800fc78:	00db      	lsls	r3, r3, #3
 800fc7a:	440b      	add	r3, r1
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d018      	beq.n	800fcb4 <etharp_find_entry+0x220>
 800fc82:	4b3a      	ldr	r3, [pc, #232]	; (800fd6c <etharp_find_entry+0x2d8>)
 800fc84:	f240 126d 	movw	r2, #365	; 0x16d
 800fc88:	493b      	ldr	r1, [pc, #236]	; (800fd78 <etharp_find_entry+0x2e4>)
 800fc8a:	483a      	ldr	r0, [pc, #232]	; (800fd74 <etharp_find_entry+0x2e0>)
 800fc8c:	f002 fb06 	bl	801229c <iprintf>
 800fc90:	e010      	b.n	800fcb4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fc92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc96:	2b09      	cmp	r3, #9
 800fc98:	dc02      	bgt.n	800fca0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fc9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc9c:	843b      	strh	r3, [r7, #32]
 800fc9e:	e009      	b.n	800fcb4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fca0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fca4:	2b09      	cmp	r3, #9
 800fca6:	dc02      	bgt.n	800fcae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fca8:	8bfb      	ldrh	r3, [r7, #30]
 800fcaa:	843b      	strh	r3, [r7, #32]
 800fcac:	e002      	b.n	800fcb4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fcae:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb2:	e054      	b.n	800fd5e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fcb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fcb8:	2b09      	cmp	r3, #9
 800fcba:	dd06      	ble.n	800fcca <etharp_find_entry+0x236>
 800fcbc:	4b2b      	ldr	r3, [pc, #172]	; (800fd6c <etharp_find_entry+0x2d8>)
 800fcbe:	f240 127f 	movw	r2, #383	; 0x17f
 800fcc2:	492e      	ldr	r1, [pc, #184]	; (800fd7c <etharp_find_entry+0x2e8>)
 800fcc4:	482b      	ldr	r0, [pc, #172]	; (800fd74 <etharp_find_entry+0x2e0>)
 800fcc6:	f002 fae9 	bl	801229c <iprintf>
    etharp_free_entry(i);
 800fcca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff fe06 	bl	800f8e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fcd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fcd8:	2b09      	cmp	r3, #9
 800fcda:	dd06      	ble.n	800fcea <etharp_find_entry+0x256>
 800fcdc:	4b23      	ldr	r3, [pc, #140]	; (800fd6c <etharp_find_entry+0x2d8>)
 800fcde:	f240 1283 	movw	r2, #387	; 0x183
 800fce2:	4926      	ldr	r1, [pc, #152]	; (800fd7c <etharp_find_entry+0x2e8>)
 800fce4:	4823      	ldr	r0, [pc, #140]	; (800fd74 <etharp_find_entry+0x2e0>)
 800fce6:	f002 fad9 	bl	801229c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fcea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcee:	491e      	ldr	r1, [pc, #120]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	4413      	add	r3, r2
 800fcf6:	00db      	lsls	r3, r3, #3
 800fcf8:	440b      	add	r3, r1
 800fcfa:	3314      	adds	r3, #20
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d006      	beq.n	800fd10 <etharp_find_entry+0x27c>
 800fd02:	4b1a      	ldr	r3, [pc, #104]	; (800fd6c <etharp_find_entry+0x2d8>)
 800fd04:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fd08:	491d      	ldr	r1, [pc, #116]	; (800fd80 <etharp_find_entry+0x2ec>)
 800fd0a:	481a      	ldr	r0, [pc, #104]	; (800fd74 <etharp_find_entry+0x2e0>)
 800fd0c:	f002 fac6 	bl	801229c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00b      	beq.n	800fd2e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fd16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6819      	ldr	r1, [r3, #0]
 800fd1e:	4812      	ldr	r0, [pc, #72]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fd20:	4613      	mov	r3, r2
 800fd22:	005b      	lsls	r3, r3, #1
 800fd24:	4413      	add	r3, r2
 800fd26:	00db      	lsls	r3, r3, #3
 800fd28:	4403      	add	r3, r0
 800fd2a:	3304      	adds	r3, #4
 800fd2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fd2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd32:	490d      	ldr	r1, [pc, #52]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fd34:	4613      	mov	r3, r2
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	4413      	add	r3, r2
 800fd3a:	00db      	lsls	r3, r3, #3
 800fd3c:	440b      	add	r3, r1
 800fd3e:	3312      	adds	r3, #18
 800fd40:	2200      	movs	r2, #0
 800fd42:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fd44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd48:	4907      	ldr	r1, [pc, #28]	; (800fd68 <etharp_find_entry+0x2d4>)
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	005b      	lsls	r3, r3, #1
 800fd4e:	4413      	add	r3, r2
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	440b      	add	r3, r1
 800fd54:	3308      	adds	r3, #8
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fd5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3728      	adds	r7, #40	; 0x28
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	200084b0 	.word	0x200084b0
 800fd6c:	080152fc 	.word	0x080152fc
 800fd70:	08015334 	.word	0x08015334
 800fd74:	08015374 	.word	0x08015374
 800fd78:	0801539c 	.word	0x0801539c
 800fd7c:	080153b4 	.word	0x080153b4
 800fd80:	080153c8 	.word	0x080153c8

0800fd84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af02      	add	r7, sp, #8
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
 800fd90:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd98:	2b06      	cmp	r3, #6
 800fd9a:	d006      	beq.n	800fdaa <etharp_update_arp_entry+0x26>
 800fd9c:	4b48      	ldr	r3, [pc, #288]	; (800fec0 <etharp_update_arp_entry+0x13c>)
 800fd9e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800fda2:	4948      	ldr	r1, [pc, #288]	; (800fec4 <etharp_update_arp_entry+0x140>)
 800fda4:	4848      	ldr	r0, [pc, #288]	; (800fec8 <etharp_update_arp_entry+0x144>)
 800fda6:	f002 fa79 	bl	801229c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d012      	beq.n	800fdd6 <etharp_update_arp_entry+0x52>
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00e      	beq.n	800fdd6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68f9      	ldr	r1, [r7, #12]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f001 f8fe 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 800fdc4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d105      	bne.n	800fdd6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fdd2:	2be0      	cmp	r3, #224	; 0xe0
 800fdd4:	d102      	bne.n	800fddc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fdd6:	f06f 030f 	mvn.w	r3, #15
 800fdda:	e06c      	b.n	800feb6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fddc:	78fb      	ldrb	r3, [r7, #3]
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	4619      	mov	r1, r3
 800fde2:	68b8      	ldr	r0, [r7, #8]
 800fde4:	f7ff fe56 	bl	800fa94 <etharp_find_entry>
 800fde8:	4603      	mov	r3, r0
 800fdea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fdec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	da02      	bge.n	800fdfa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fdf4:	8afb      	ldrh	r3, [r7, #22]
 800fdf6:	b25b      	sxtb	r3, r3
 800fdf8:	e05d      	b.n	800feb6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fdfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdfe:	4933      	ldr	r1, [pc, #204]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe00:	4613      	mov	r3, r2
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	4413      	add	r3, r2
 800fe06:	00db      	lsls	r3, r3, #3
 800fe08:	440b      	add	r3, r1
 800fe0a:	3314      	adds	r3, #20
 800fe0c:	2202      	movs	r2, #2
 800fe0e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fe10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe14:	492d      	ldr	r1, [pc, #180]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe16:	4613      	mov	r3, r2
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	4413      	add	r3, r2
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	440b      	add	r3, r1
 800fe20:	3308      	adds	r3, #8
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fe26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	005b      	lsls	r3, r3, #1
 800fe2e:	4413      	add	r3, r2
 800fe30:	00db      	lsls	r3, r3, #3
 800fe32:	3308      	adds	r3, #8
 800fe34:	4a25      	ldr	r2, [pc, #148]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe36:	4413      	add	r3, r2
 800fe38:	3304      	adds	r3, #4
 800fe3a:	2206      	movs	r2, #6
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f002 fc07 	bl	8012652 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fe44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe48:	4920      	ldr	r1, [pc, #128]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	4413      	add	r3, r2
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	440b      	add	r3, r1
 800fe54:	3312      	adds	r3, #18
 800fe56:	2200      	movs	r2, #0
 800fe58:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fe5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe5e:	491b      	ldr	r1, [pc, #108]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe60:	4613      	mov	r3, r2
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	4413      	add	r3, r2
 800fe66:	00db      	lsls	r3, r3, #3
 800fe68:	440b      	add	r3, r1
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d021      	beq.n	800feb4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fe70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe74:	4915      	ldr	r1, [pc, #84]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe76:	4613      	mov	r3, r2
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	4413      	add	r3, r2
 800fe7c:	00db      	lsls	r3, r3, #3
 800fe7e:	440b      	add	r3, r1
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fe84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe88:	4910      	ldr	r1, [pc, #64]	; (800fecc <etharp_update_arp_entry+0x148>)
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	005b      	lsls	r3, r3, #1
 800fe8e:	4413      	add	r3, r2
 800fe90:	00db      	lsls	r3, r3, #3
 800fe92:	440b      	add	r3, r1
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fe9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6939      	ldr	r1, [r7, #16]
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f001 ff97 	bl	8011ddc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800feae:	6938      	ldr	r0, [r7, #16]
 800feb0:	f7f9 fe6a 	bl	8009b88 <pbuf_free>
  }
  return ERR_OK;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3718      	adds	r7, #24
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	080152fc 	.word	0x080152fc
 800fec4:	080153f4 	.word	0x080153f4
 800fec8:	08015374 	.word	0x08015374
 800fecc:	200084b0 	.word	0x200084b0

0800fed0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fed8:	2300      	movs	r3, #0
 800feda:	60fb      	str	r3, [r7, #12]
 800fedc:	e01e      	b.n	800ff1c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fede:	4913      	ldr	r1, [pc, #76]	; (800ff2c <etharp_cleanup_netif+0x5c>)
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	4613      	mov	r3, r2
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	4413      	add	r3, r2
 800fee8:	00db      	lsls	r3, r3, #3
 800feea:	440b      	add	r3, r1
 800feec:	3314      	adds	r3, #20
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fef2:	7afb      	ldrb	r3, [r7, #11]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d00e      	beq.n	800ff16 <etharp_cleanup_netif+0x46>
 800fef8:	490c      	ldr	r1, [pc, #48]	; (800ff2c <etharp_cleanup_netif+0x5c>)
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	4613      	mov	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	4413      	add	r3, r2
 800ff02:	00db      	lsls	r3, r3, #3
 800ff04:	440b      	add	r3, r1
 800ff06:	3308      	adds	r3, #8
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d102      	bne.n	800ff16 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff fce5 	bl	800f8e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	60fb      	str	r3, [r7, #12]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b09      	cmp	r3, #9
 800ff20:	dddd      	ble.n	800fede <etharp_cleanup_netif+0xe>
    }
  }
}
 800ff22:	bf00      	nop
 800ff24:	bf00      	nop
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	200084b0 	.word	0x200084b0

0800ff30 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ff30:	b5b0      	push	{r4, r5, r7, lr}
 800ff32:	b08a      	sub	sp, #40	; 0x28
 800ff34:	af04      	add	r7, sp, #16
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d107      	bne.n	800ff50 <etharp_input+0x20>
 800ff40:	4b3d      	ldr	r3, [pc, #244]	; (8010038 <etharp_input+0x108>)
 800ff42:	f240 228a 	movw	r2, #650	; 0x28a
 800ff46:	493d      	ldr	r1, [pc, #244]	; (801003c <etharp_input+0x10c>)
 800ff48:	483d      	ldr	r0, [pc, #244]	; (8010040 <etharp_input+0x110>)
 800ff4a:	f002 f9a7 	bl	801229c <iprintf>
 800ff4e:	e06f      	b.n	8010030 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	881b      	ldrh	r3, [r3, #0]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff60:	d10c      	bne.n	800ff7c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ff66:	2b06      	cmp	r3, #6
 800ff68:	d108      	bne.n	800ff7c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ff6e:	2b04      	cmp	r3, #4
 800ff70:	d104      	bne.n	800ff7c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	885b      	ldrh	r3, [r3, #2]
 800ff76:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ff78:	2b08      	cmp	r3, #8
 800ff7a:	d003      	beq.n	800ff84 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7f9 fe03 	bl	8009b88 <pbuf_free>
    return;
 800ff82:	e055      	b.n	8010030 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	330e      	adds	r3, #14
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	3318      	adds	r3, #24
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	3304      	adds	r3, #4
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d102      	bne.n	800ffa4 <etharp_input+0x74>
    for_us = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	75fb      	strb	r3, [r7, #23]
 800ffa2:	e009      	b.n	800ffb8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ffa4:	68ba      	ldr	r2, [r7, #8]
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	3304      	adds	r3, #4
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	bf0c      	ite	eq
 800ffb0:	2301      	moveq	r3, #1
 800ffb2:	2300      	movne	r3, #0
 800ffb4:	b2db      	uxtb	r3, r3
 800ffb6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	f103 0208 	add.w	r2, r3, #8
 800ffbe:	7dfb      	ldrb	r3, [r7, #23]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <etharp_input+0x98>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e000      	b.n	800ffca <etharp_input+0x9a>
 800ffc8:	2302      	movs	r3, #2
 800ffca:	f107 010c 	add.w	r1, r7, #12
 800ffce:	6838      	ldr	r0, [r7, #0]
 800ffd0:	f7ff fed8 	bl	800fd84 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	88db      	ldrh	r3, [r3, #6]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffde:	d003      	beq.n	800ffe8 <etharp_input+0xb8>
 800ffe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffe4:	d01e      	beq.n	8010024 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ffe6:	e020      	b.n	801002a <etharp_input+0xfa>
      if (for_us) {
 800ffe8:	7dfb      	ldrb	r3, [r7, #23]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d01c      	beq.n	8010028 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010004:	693a      	ldr	r2, [r7, #16]
 8010006:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010008:	2102      	movs	r1, #2
 801000a:	9103      	str	r1, [sp, #12]
 801000c:	f107 010c 	add.w	r1, r7, #12
 8010010:	9102      	str	r1, [sp, #8]
 8010012:	9201      	str	r2, [sp, #4]
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	462b      	mov	r3, r5
 8010018:	4622      	mov	r2, r4
 801001a:	4601      	mov	r1, r0
 801001c:	6838      	ldr	r0, [r7, #0]
 801001e:	f000 faeb 	bl	80105f8 <etharp_raw>
      break;
 8010022:	e001      	b.n	8010028 <etharp_input+0xf8>
      break;
 8010024:	bf00      	nop
 8010026:	e000      	b.n	801002a <etharp_input+0xfa>
      break;
 8010028:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f7f9 fdac 	bl	8009b88 <pbuf_free>
}
 8010030:	3718      	adds	r7, #24
 8010032:	46bd      	mov	sp, r7
 8010034:	bdb0      	pop	{r4, r5, r7, pc}
 8010036:	bf00      	nop
 8010038:	080152fc 	.word	0x080152fc
 801003c:	0801544c 	.word	0x0801544c
 8010040:	08015374 	.word	0x08015374

08010044 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b086      	sub	sp, #24
 8010048:	af02      	add	r7, sp, #8
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	4613      	mov	r3, r2
 8010050:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010052:	79fa      	ldrb	r2, [r7, #7]
 8010054:	4944      	ldr	r1, [pc, #272]	; (8010168 <etharp_output_to_arp_index+0x124>)
 8010056:	4613      	mov	r3, r2
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	4413      	add	r3, r2
 801005c:	00db      	lsls	r3, r3, #3
 801005e:	440b      	add	r3, r1
 8010060:	3314      	adds	r3, #20
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d806      	bhi.n	8010076 <etharp_output_to_arp_index+0x32>
 8010068:	4b40      	ldr	r3, [pc, #256]	; (801016c <etharp_output_to_arp_index+0x128>)
 801006a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801006e:	4940      	ldr	r1, [pc, #256]	; (8010170 <etharp_output_to_arp_index+0x12c>)
 8010070:	4840      	ldr	r0, [pc, #256]	; (8010174 <etharp_output_to_arp_index+0x130>)
 8010072:	f002 f913 	bl	801229c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010076:	79fa      	ldrb	r2, [r7, #7]
 8010078:	493b      	ldr	r1, [pc, #236]	; (8010168 <etharp_output_to_arp_index+0x124>)
 801007a:	4613      	mov	r3, r2
 801007c:	005b      	lsls	r3, r3, #1
 801007e:	4413      	add	r3, r2
 8010080:	00db      	lsls	r3, r3, #3
 8010082:	440b      	add	r3, r1
 8010084:	3314      	adds	r3, #20
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	2b02      	cmp	r3, #2
 801008a:	d153      	bne.n	8010134 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801008c:	79fa      	ldrb	r2, [r7, #7]
 801008e:	4936      	ldr	r1, [pc, #216]	; (8010168 <etharp_output_to_arp_index+0x124>)
 8010090:	4613      	mov	r3, r2
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	4413      	add	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	440b      	add	r3, r1
 801009a:	3312      	adds	r3, #18
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80100a2:	d919      	bls.n	80100d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80100a4:	79fa      	ldrb	r2, [r7, #7]
 80100a6:	4613      	mov	r3, r2
 80100a8:	005b      	lsls	r3, r3, #1
 80100aa:	4413      	add	r3, r2
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	4a2e      	ldr	r2, [pc, #184]	; (8010168 <etharp_output_to_arp_index+0x124>)
 80100b0:	4413      	add	r3, r2
 80100b2:	3304      	adds	r3, #4
 80100b4:	4619      	mov	r1, r3
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f000 fb4c 	bl	8010754 <etharp_request>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d138      	bne.n	8010134 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80100c2:	79fa      	ldrb	r2, [r7, #7]
 80100c4:	4928      	ldr	r1, [pc, #160]	; (8010168 <etharp_output_to_arp_index+0x124>)
 80100c6:	4613      	mov	r3, r2
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	4413      	add	r3, r2
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	440b      	add	r3, r1
 80100d0:	3314      	adds	r3, #20
 80100d2:	2203      	movs	r2, #3
 80100d4:	701a      	strb	r2, [r3, #0]
 80100d6:	e02d      	b.n	8010134 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80100d8:	79fa      	ldrb	r2, [r7, #7]
 80100da:	4923      	ldr	r1, [pc, #140]	; (8010168 <etharp_output_to_arp_index+0x124>)
 80100dc:	4613      	mov	r3, r2
 80100de:	005b      	lsls	r3, r3, #1
 80100e0:	4413      	add	r3, r2
 80100e2:	00db      	lsls	r3, r3, #3
 80100e4:	440b      	add	r3, r1
 80100e6:	3312      	adds	r3, #18
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80100ee:	d321      	bcc.n	8010134 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80100f0:	79fa      	ldrb	r2, [r7, #7]
 80100f2:	4613      	mov	r3, r2
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	4413      	add	r3, r2
 80100f8:	00db      	lsls	r3, r3, #3
 80100fa:	4a1b      	ldr	r2, [pc, #108]	; (8010168 <etharp_output_to_arp_index+0x124>)
 80100fc:	4413      	add	r3, r2
 80100fe:	1d19      	adds	r1, r3, #4
 8010100:	79fa      	ldrb	r2, [r7, #7]
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	3308      	adds	r3, #8
 801010c:	4a16      	ldr	r2, [pc, #88]	; (8010168 <etharp_output_to_arp_index+0x124>)
 801010e:	4413      	add	r3, r2
 8010110:	3304      	adds	r3, #4
 8010112:	461a      	mov	r2, r3
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f000 fafb 	bl	8010710 <etharp_request_dst>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d109      	bne.n	8010134 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010120:	79fa      	ldrb	r2, [r7, #7]
 8010122:	4911      	ldr	r1, [pc, #68]	; (8010168 <etharp_output_to_arp_index+0x124>)
 8010124:	4613      	mov	r3, r2
 8010126:	005b      	lsls	r3, r3, #1
 8010128:	4413      	add	r3, r2
 801012a:	00db      	lsls	r3, r3, #3
 801012c:	440b      	add	r3, r1
 801012e:	3314      	adds	r3, #20
 8010130:	2203      	movs	r2, #3
 8010132:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801013a:	79fa      	ldrb	r2, [r7, #7]
 801013c:	4613      	mov	r3, r2
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	4413      	add	r3, r2
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	3308      	adds	r3, #8
 8010146:	4a08      	ldr	r2, [pc, #32]	; (8010168 <etharp_output_to_arp_index+0x124>)
 8010148:	4413      	add	r3, r2
 801014a:	3304      	adds	r3, #4
 801014c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010150:	9200      	str	r2, [sp, #0]
 8010152:	460a      	mov	r2, r1
 8010154:	68b9      	ldr	r1, [r7, #8]
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f001 fe40 	bl	8011ddc <ethernet_output>
 801015c:	4603      	mov	r3, r0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	200084b0 	.word	0x200084b0
 801016c:	080152fc 	.word	0x080152fc
 8010170:	0801546c 	.word	0x0801546c
 8010174:	08015374 	.word	0x08015374

08010178 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b08a      	sub	sp, #40	; 0x28
 801017c:	af02      	add	r7, sp, #8
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <etharp_output+0x24>
 801018e:	4b73      	ldr	r3, [pc, #460]	; (801035c <etharp_output+0x1e4>)
 8010190:	f240 321e 	movw	r2, #798	; 0x31e
 8010194:	4972      	ldr	r1, [pc, #456]	; (8010360 <etharp_output+0x1e8>)
 8010196:	4873      	ldr	r0, [pc, #460]	; (8010364 <etharp_output+0x1ec>)
 8010198:	f002 f880 	bl	801229c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d106      	bne.n	80101b0 <etharp_output+0x38>
 80101a2:	4b6e      	ldr	r3, [pc, #440]	; (801035c <etharp_output+0x1e4>)
 80101a4:	f240 321f 	movw	r2, #799	; 0x31f
 80101a8:	496f      	ldr	r1, [pc, #444]	; (8010368 <etharp_output+0x1f0>)
 80101aa:	486e      	ldr	r0, [pc, #440]	; (8010364 <etharp_output+0x1ec>)
 80101ac:	f002 f876 	bl	801229c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <etharp_output+0x4c>
 80101b6:	4b69      	ldr	r3, [pc, #420]	; (801035c <etharp_output+0x1e4>)
 80101b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80101bc:	496b      	ldr	r1, [pc, #428]	; (801036c <etharp_output+0x1f4>)
 80101be:	4869      	ldr	r0, [pc, #420]	; (8010364 <etharp_output+0x1ec>)
 80101c0:	f002 f86c 	bl	801229c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	68f9      	ldr	r1, [r7, #12]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f000 fef8 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80101d6:	4b66      	ldr	r3, [pc, #408]	; (8010370 <etharp_output+0x1f8>)
 80101d8:	61fb      	str	r3, [r7, #28]
 80101da:	e0af      	b.n	801033c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101e4:	2be0      	cmp	r3, #224	; 0xe0
 80101e6:	d118      	bne.n	801021a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80101e8:	2301      	movs	r3, #1
 80101ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80101ec:	2300      	movs	r3, #0
 80101ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80101f0:	235e      	movs	r3, #94	; 0x5e
 80101f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3301      	adds	r3, #1
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	3302      	adds	r3, #2
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	3303      	adds	r3, #3
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010212:	f107 0310 	add.w	r3, r7, #16
 8010216:	61fb      	str	r3, [r7, #28]
 8010218:	e090      	b.n	801033c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	3304      	adds	r3, #4
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	405a      	eors	r2, r3
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	3308      	adds	r3, #8
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4013      	ands	r3, r2
 801022e:	2b00      	cmp	r3, #0
 8010230:	d012      	beq.n	8010258 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010238:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801023c:	4293      	cmp	r3, r2
 801023e:	d00b      	beq.n	8010258 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	330c      	adds	r3, #12
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d003      	beq.n	8010252 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	330c      	adds	r3, #12
 801024e:	61bb      	str	r3, [r7, #24]
 8010250:	e002      	b.n	8010258 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010252:	f06f 0303 	mvn.w	r3, #3
 8010256:	e07d      	b.n	8010354 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010258:	4b46      	ldr	r3, [pc, #280]	; (8010374 <etharp_output+0x1fc>)
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	4619      	mov	r1, r3
 801025e:	4a46      	ldr	r2, [pc, #280]	; (8010378 <etharp_output+0x200>)
 8010260:	460b      	mov	r3, r1
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	440b      	add	r3, r1
 8010266:	00db      	lsls	r3, r3, #3
 8010268:	4413      	add	r3, r2
 801026a:	3314      	adds	r3, #20
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d925      	bls.n	80102be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010272:	4b40      	ldr	r3, [pc, #256]	; (8010374 <etharp_output+0x1fc>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	4619      	mov	r1, r3
 8010278:	4a3f      	ldr	r2, [pc, #252]	; (8010378 <etharp_output+0x200>)
 801027a:	460b      	mov	r3, r1
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	440b      	add	r3, r1
 8010280:	00db      	lsls	r3, r3, #3
 8010282:	4413      	add	r3, r2
 8010284:	3308      	adds	r3, #8
 8010286:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	429a      	cmp	r2, r3
 801028c:	d117      	bne.n	80102be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	4b38      	ldr	r3, [pc, #224]	; (8010374 <etharp_output+0x1fc>)
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	4618      	mov	r0, r3
 8010298:	4937      	ldr	r1, [pc, #220]	; (8010378 <etharp_output+0x200>)
 801029a:	4603      	mov	r3, r0
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4403      	add	r3, r0
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	440b      	add	r3, r1
 80102a4:	3304      	adds	r3, #4
 80102a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d108      	bne.n	80102be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80102ac:	4b31      	ldr	r3, [pc, #196]	; (8010374 <etharp_output+0x1fc>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	461a      	mov	r2, r3
 80102b2:	68b9      	ldr	r1, [r7, #8]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f7ff fec5 	bl	8010044 <etharp_output_to_arp_index>
 80102ba:	4603      	mov	r3, r0
 80102bc:	e04a      	b.n	8010354 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80102be:	2300      	movs	r3, #0
 80102c0:	75fb      	strb	r3, [r7, #23]
 80102c2:	e031      	b.n	8010328 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80102c4:	7dfa      	ldrb	r2, [r7, #23]
 80102c6:	492c      	ldr	r1, [pc, #176]	; (8010378 <etharp_output+0x200>)
 80102c8:	4613      	mov	r3, r2
 80102ca:	005b      	lsls	r3, r3, #1
 80102cc:	4413      	add	r3, r2
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	440b      	add	r3, r1
 80102d2:	3314      	adds	r3, #20
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d923      	bls.n	8010322 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80102da:	7dfa      	ldrb	r2, [r7, #23]
 80102dc:	4926      	ldr	r1, [pc, #152]	; (8010378 <etharp_output+0x200>)
 80102de:	4613      	mov	r3, r2
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	4413      	add	r3, r2
 80102e4:	00db      	lsls	r3, r3, #3
 80102e6:	440b      	add	r3, r1
 80102e8:	3308      	adds	r3, #8
 80102ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d117      	bne.n	8010322 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	6819      	ldr	r1, [r3, #0]
 80102f6:	7dfa      	ldrb	r2, [r7, #23]
 80102f8:	481f      	ldr	r0, [pc, #124]	; (8010378 <etharp_output+0x200>)
 80102fa:	4613      	mov	r3, r2
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	4413      	add	r3, r2
 8010300:	00db      	lsls	r3, r3, #3
 8010302:	4403      	add	r3, r0
 8010304:	3304      	adds	r3, #4
 8010306:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010308:	4299      	cmp	r1, r3
 801030a:	d10a      	bne.n	8010322 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801030c:	4a19      	ldr	r2, [pc, #100]	; (8010374 <etharp_output+0x1fc>)
 801030e:	7dfb      	ldrb	r3, [r7, #23]
 8010310:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	461a      	mov	r2, r3
 8010316:	68b9      	ldr	r1, [r7, #8]
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7ff fe93 	bl	8010044 <etharp_output_to_arp_index>
 801031e:	4603      	mov	r3, r0
 8010320:	e018      	b.n	8010354 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010322:	7dfb      	ldrb	r3, [r7, #23]
 8010324:	3301      	adds	r3, #1
 8010326:	75fb      	strb	r3, [r7, #23]
 8010328:	7dfb      	ldrb	r3, [r7, #23]
 801032a:	2b09      	cmp	r3, #9
 801032c:	d9ca      	bls.n	80102c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	69b9      	ldr	r1, [r7, #24]
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f000 f822 	bl	801037c <etharp_query>
 8010338:	4603      	mov	r3, r0
 801033a:	e00b      	b.n	8010354 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f001 fd45 	bl	8011ddc <ethernet_output>
 8010352:	4603      	mov	r3, r0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3720      	adds	r7, #32
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	080152fc 	.word	0x080152fc
 8010360:	0801544c 	.word	0x0801544c
 8010364:	08015374 	.word	0x08015374
 8010368:	0801549c 	.word	0x0801549c
 801036c:	0801543c 	.word	0x0801543c
 8010370:	08015ae0 	.word	0x08015ae0
 8010374:	200085a0 	.word	0x200085a0
 8010378:	200084b0 	.word	0x200084b0

0801037c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b08c      	sub	sp, #48	; 0x30
 8010380:	af02      	add	r7, sp, #8
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	3326      	adds	r3, #38	; 0x26
 801038c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801038e:	23ff      	movs	r3, #255	; 0xff
 8010390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010394:	2300      	movs	r3, #0
 8010396:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	68f9      	ldr	r1, [r7, #12]
 801039e:	4618      	mov	r0, r3
 80103a0:	f000 fe0e 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d10c      	bne.n	80103c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80103b2:	2be0      	cmp	r3, #224	; 0xe0
 80103b4:	d006      	beq.n	80103c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d003      	beq.n	80103c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80103c4:	f06f 030f 	mvn.w	r3, #15
 80103c8:	e101      	b.n	80105ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	2101      	movs	r1, #1
 80103ce:	68b8      	ldr	r0, [r7, #8]
 80103d0:	f7ff fb60 	bl	800fa94 <etharp_find_entry>
 80103d4:	4603      	mov	r3, r0
 80103d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80103d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	da02      	bge.n	80103e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80103e0:	8a7b      	ldrh	r3, [r7, #18]
 80103e2:	b25b      	sxtb	r3, r3
 80103e4:	e0f3      	b.n	80105ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80103e6:	8a7b      	ldrh	r3, [r7, #18]
 80103e8:	2b7e      	cmp	r3, #126	; 0x7e
 80103ea:	d906      	bls.n	80103fa <etharp_query+0x7e>
 80103ec:	4b7a      	ldr	r3, [pc, #488]	; (80105d8 <etharp_query+0x25c>)
 80103ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 80103f2:	497a      	ldr	r1, [pc, #488]	; (80105dc <etharp_query+0x260>)
 80103f4:	487a      	ldr	r0, [pc, #488]	; (80105e0 <etharp_query+0x264>)
 80103f6:	f001 ff51 	bl	801229c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80103fa:	8a7b      	ldrh	r3, [r7, #18]
 80103fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80103fe:	7c7a      	ldrb	r2, [r7, #17]
 8010400:	4978      	ldr	r1, [pc, #480]	; (80105e4 <etharp_query+0x268>)
 8010402:	4613      	mov	r3, r2
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4413      	add	r3, r2
 8010408:	00db      	lsls	r3, r3, #3
 801040a:	440b      	add	r3, r1
 801040c:	3314      	adds	r3, #20
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d115      	bne.n	8010440 <etharp_query+0xc4>
    is_new_entry = 1;
 8010414:	2301      	movs	r3, #1
 8010416:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010418:	7c7a      	ldrb	r2, [r7, #17]
 801041a:	4972      	ldr	r1, [pc, #456]	; (80105e4 <etharp_query+0x268>)
 801041c:	4613      	mov	r3, r2
 801041e:	005b      	lsls	r3, r3, #1
 8010420:	4413      	add	r3, r2
 8010422:	00db      	lsls	r3, r3, #3
 8010424:	440b      	add	r3, r1
 8010426:	3314      	adds	r3, #20
 8010428:	2201      	movs	r2, #1
 801042a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801042c:	7c7a      	ldrb	r2, [r7, #17]
 801042e:	496d      	ldr	r1, [pc, #436]	; (80105e4 <etharp_query+0x268>)
 8010430:	4613      	mov	r3, r2
 8010432:	005b      	lsls	r3, r3, #1
 8010434:	4413      	add	r3, r2
 8010436:	00db      	lsls	r3, r3, #3
 8010438:	440b      	add	r3, r1
 801043a:	3308      	adds	r3, #8
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010440:	7c7a      	ldrb	r2, [r7, #17]
 8010442:	4968      	ldr	r1, [pc, #416]	; (80105e4 <etharp_query+0x268>)
 8010444:	4613      	mov	r3, r2
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4413      	add	r3, r2
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	440b      	add	r3, r1
 801044e:	3314      	adds	r3, #20
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	2b01      	cmp	r3, #1
 8010454:	d011      	beq.n	801047a <etharp_query+0xfe>
 8010456:	7c7a      	ldrb	r2, [r7, #17]
 8010458:	4962      	ldr	r1, [pc, #392]	; (80105e4 <etharp_query+0x268>)
 801045a:	4613      	mov	r3, r2
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	4413      	add	r3, r2
 8010460:	00db      	lsls	r3, r3, #3
 8010462:	440b      	add	r3, r1
 8010464:	3314      	adds	r3, #20
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d806      	bhi.n	801047a <etharp_query+0xfe>
 801046c:	4b5a      	ldr	r3, [pc, #360]	; (80105d8 <etharp_query+0x25c>)
 801046e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010472:	495d      	ldr	r1, [pc, #372]	; (80105e8 <etharp_query+0x26c>)
 8010474:	485a      	ldr	r0, [pc, #360]	; (80105e0 <etharp_query+0x264>)
 8010476:	f001 ff11 	bl	801229c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801047a:	6a3b      	ldr	r3, [r7, #32]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <etharp_query+0x10a>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d10c      	bne.n	80104a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010486:	68b9      	ldr	r1, [r7, #8]
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 f963 	bl	8010754 <etharp_request>
 801048e:	4603      	mov	r3, r0
 8010490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d102      	bne.n	80104a0 <etharp_query+0x124>
      return result;
 801049a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801049e:	e096      	b.n	80105ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d106      	bne.n	80104b4 <etharp_query+0x138>
 80104a6:	4b4c      	ldr	r3, [pc, #304]	; (80105d8 <etharp_query+0x25c>)
 80104a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80104ac:	494f      	ldr	r1, [pc, #316]	; (80105ec <etharp_query+0x270>)
 80104ae:	484c      	ldr	r0, [pc, #304]	; (80105e0 <etharp_query+0x264>)
 80104b0:	f001 fef4 	bl	801229c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80104b4:	7c7a      	ldrb	r2, [r7, #17]
 80104b6:	494b      	ldr	r1, [pc, #300]	; (80105e4 <etharp_query+0x268>)
 80104b8:	4613      	mov	r3, r2
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	4413      	add	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	440b      	add	r3, r1
 80104c2:	3314      	adds	r3, #20
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d917      	bls.n	80104fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80104ca:	4a49      	ldr	r2, [pc, #292]	; (80105f0 <etharp_query+0x274>)
 80104cc:	7c7b      	ldrb	r3, [r7, #17]
 80104ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80104d0:	7c7a      	ldrb	r2, [r7, #17]
 80104d2:	4613      	mov	r3, r2
 80104d4:	005b      	lsls	r3, r3, #1
 80104d6:	4413      	add	r3, r2
 80104d8:	00db      	lsls	r3, r3, #3
 80104da:	3308      	adds	r3, #8
 80104dc:	4a41      	ldr	r2, [pc, #260]	; (80105e4 <etharp_query+0x268>)
 80104de:	4413      	add	r3, r2
 80104e0:	3304      	adds	r3, #4
 80104e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104e6:	9200      	str	r2, [sp, #0]
 80104e8:	697a      	ldr	r2, [r7, #20]
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f001 fc75 	bl	8011ddc <ethernet_output>
 80104f2:	4603      	mov	r3, r0
 80104f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104f8:	e067      	b.n	80105ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80104fa:	7c7a      	ldrb	r2, [r7, #17]
 80104fc:	4939      	ldr	r1, [pc, #228]	; (80105e4 <etharp_query+0x268>)
 80104fe:	4613      	mov	r3, r2
 8010500:	005b      	lsls	r3, r3, #1
 8010502:	4413      	add	r3, r2
 8010504:	00db      	lsls	r3, r3, #3
 8010506:	440b      	add	r3, r1
 8010508:	3314      	adds	r3, #20
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b01      	cmp	r3, #1
 801050e:	d15c      	bne.n	80105ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010510:	2300      	movs	r3, #0
 8010512:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010518:	e01c      	b.n	8010554 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	895a      	ldrh	r2, [r3, #10]
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	891b      	ldrh	r3, [r3, #8]
 8010522:	429a      	cmp	r2, r3
 8010524:	d10a      	bne.n	801053c <etharp_query+0x1c0>
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d006      	beq.n	801053c <etharp_query+0x1c0>
 801052e:	4b2a      	ldr	r3, [pc, #168]	; (80105d8 <etharp_query+0x25c>)
 8010530:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010534:	492f      	ldr	r1, [pc, #188]	; (80105f4 <etharp_query+0x278>)
 8010536:	482a      	ldr	r0, [pc, #168]	; (80105e0 <etharp_query+0x264>)
 8010538:	f001 feb0 	bl	801229c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	7b1b      	ldrb	r3, [r3, #12]
 8010540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <etharp_query+0x1d2>
        copy_needed = 1;
 8010548:	2301      	movs	r3, #1
 801054a:	61bb      	str	r3, [r7, #24]
        break;
 801054c:	e005      	b.n	801055a <etharp_query+0x1de>
      }
      p = p->next;
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1df      	bne.n	801051a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d007      	beq.n	8010570 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010566:	200e      	movs	r0, #14
 8010568:	f7f9 fd6a 	bl	800a040 <pbuf_clone>
 801056c:	61f8      	str	r0, [r7, #28]
 801056e:	e004      	b.n	801057a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010574:	69f8      	ldr	r0, [r7, #28]
 8010576:	f7f9 fba7 	bl	8009cc8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d021      	beq.n	80105c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010580:	7c7a      	ldrb	r2, [r7, #17]
 8010582:	4918      	ldr	r1, [pc, #96]	; (80105e4 <etharp_query+0x268>)
 8010584:	4613      	mov	r3, r2
 8010586:	005b      	lsls	r3, r3, #1
 8010588:	4413      	add	r3, r2
 801058a:	00db      	lsls	r3, r3, #3
 801058c:	440b      	add	r3, r1
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00a      	beq.n	80105aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010594:	7c7a      	ldrb	r2, [r7, #17]
 8010596:	4913      	ldr	r1, [pc, #76]	; (80105e4 <etharp_query+0x268>)
 8010598:	4613      	mov	r3, r2
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	4413      	add	r3, r2
 801059e:	00db      	lsls	r3, r3, #3
 80105a0:	440b      	add	r3, r1
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7f9 faef 	bl	8009b88 <pbuf_free>
      }
      arp_table[i].q = p;
 80105aa:	7c7a      	ldrb	r2, [r7, #17]
 80105ac:	490d      	ldr	r1, [pc, #52]	; (80105e4 <etharp_query+0x268>)
 80105ae:	4613      	mov	r3, r2
 80105b0:	005b      	lsls	r3, r3, #1
 80105b2:	4413      	add	r3, r2
 80105b4:	00db      	lsls	r3, r3, #3
 80105b6:	440b      	add	r3, r1
 80105b8:	69fa      	ldr	r2, [r7, #28]
 80105ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80105bc:	2300      	movs	r3, #0
 80105be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80105c2:	e002      	b.n	80105ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80105c4:	23ff      	movs	r3, #255	; 0xff
 80105c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80105ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3728      	adds	r7, #40	; 0x28
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	080152fc 	.word	0x080152fc
 80105dc:	080154a8 	.word	0x080154a8
 80105e0:	08015374 	.word	0x08015374
 80105e4:	200084b0 	.word	0x200084b0
 80105e8:	080154b8 	.word	0x080154b8
 80105ec:	0801549c 	.word	0x0801549c
 80105f0:	200085a0 	.word	0x200085a0
 80105f4:	080154e0 	.word	0x080154e0

080105f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b08a      	sub	sp, #40	; 0x28
 80105fc:	af02      	add	r7, sp, #8
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
 8010604:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d106      	bne.n	801061e <etharp_raw+0x26>
 8010610:	4b3a      	ldr	r3, [pc, #232]	; (80106fc <etharp_raw+0x104>)
 8010612:	f240 4257 	movw	r2, #1111	; 0x457
 8010616:	493a      	ldr	r1, [pc, #232]	; (8010700 <etharp_raw+0x108>)
 8010618:	483a      	ldr	r0, [pc, #232]	; (8010704 <etharp_raw+0x10c>)
 801061a:	f001 fe3f 	bl	801229c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801061e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010622:	211c      	movs	r1, #28
 8010624:	200e      	movs	r0, #14
 8010626:	f7f8 ffcb 	bl	80095c0 <pbuf_alloc>
 801062a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d102      	bne.n	8010638 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010632:	f04f 33ff 	mov.w	r3, #4294967295
 8010636:	e05d      	b.n	80106f4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	895b      	ldrh	r3, [r3, #10]
 801063c:	2b1b      	cmp	r3, #27
 801063e:	d806      	bhi.n	801064e <etharp_raw+0x56>
 8010640:	4b2e      	ldr	r3, [pc, #184]	; (80106fc <etharp_raw+0x104>)
 8010642:	f240 4262 	movw	r2, #1122	; 0x462
 8010646:	4930      	ldr	r1, [pc, #192]	; (8010708 <etharp_raw+0x110>)
 8010648:	482e      	ldr	r0, [pc, #184]	; (8010704 <etharp_raw+0x10c>)
 801064a:	f001 fe27 	bl	801229c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010654:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010656:	4618      	mov	r0, r3
 8010658:	f7f7 ff58 	bl	800850c <lwip_htons>
 801065c:	4603      	mov	r3, r0
 801065e:	461a      	mov	r2, r3
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801066a:	2b06      	cmp	r3, #6
 801066c:	d006      	beq.n	801067c <etharp_raw+0x84>
 801066e:	4b23      	ldr	r3, [pc, #140]	; (80106fc <etharp_raw+0x104>)
 8010670:	f240 4269 	movw	r2, #1129	; 0x469
 8010674:	4925      	ldr	r1, [pc, #148]	; (801070c <etharp_raw+0x114>)
 8010676:	4823      	ldr	r0, [pc, #140]	; (8010704 <etharp_raw+0x10c>)
 8010678:	f001 fe10 	bl	801229c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	3308      	adds	r3, #8
 8010680:	2206      	movs	r2, #6
 8010682:	6839      	ldr	r1, [r7, #0]
 8010684:	4618      	mov	r0, r3
 8010686:	f001 ffe4 	bl	8012652 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	3312      	adds	r3, #18
 801068e:	2206      	movs	r2, #6
 8010690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010692:	4618      	mov	r0, r3
 8010694:	f001 ffdd 	bl	8012652 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	330e      	adds	r3, #14
 801069c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801069e:	6812      	ldr	r2, [r2, #0]
 80106a0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	3318      	adds	r3, #24
 80106a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106a8:	6812      	ldr	r2, [r2, #0]
 80106aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	2200      	movs	r2, #0
 80106b0:	701a      	strb	r2, [r3, #0]
 80106b2:	2200      	movs	r2, #0
 80106b4:	f042 0201 	orr.w	r2, r2, #1
 80106b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	2200      	movs	r2, #0
 80106be:	f042 0208 	orr.w	r2, r2, #8
 80106c2:	709a      	strb	r2, [r3, #2]
 80106c4:	2200      	movs	r2, #0
 80106c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	2206      	movs	r2, #6
 80106cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2204      	movs	r2, #4
 80106d2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80106d4:	f640 0306 	movw	r3, #2054	; 0x806
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	68ba      	ldr	r2, [r7, #8]
 80106de:	69b9      	ldr	r1, [r7, #24]
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	f001 fb7b 	bl	8011ddc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80106e6:	69b8      	ldr	r0, [r7, #24]
 80106e8:	f7f9 fa4e 	bl	8009b88 <pbuf_free>
  p = NULL;
 80106ec:	2300      	movs	r3, #0
 80106ee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80106f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3720      	adds	r7, #32
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	080152fc 	.word	0x080152fc
 8010700:	0801544c 	.word	0x0801544c
 8010704:	08015374 	.word	0x08015374
 8010708:	080154fc 	.word	0x080154fc
 801070c:	08015530 	.word	0x08015530

08010710 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af04      	add	r7, sp, #16
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801072c:	2201      	movs	r2, #1
 801072e:	9203      	str	r2, [sp, #12]
 8010730:	68ba      	ldr	r2, [r7, #8]
 8010732:	9202      	str	r2, [sp, #8]
 8010734:	4a06      	ldr	r2, [pc, #24]	; (8010750 <etharp_request_dst+0x40>)
 8010736:	9201      	str	r2, [sp, #4]
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	4603      	mov	r3, r0
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	f7ff ff5a 	bl	80105f8 <etharp_raw>
 8010744:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	08015ae8 	.word	0x08015ae8

08010754 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801075e:	4a05      	ldr	r2, [pc, #20]	; (8010774 <etharp_request+0x20>)
 8010760:	6839      	ldr	r1, [r7, #0]
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7ff ffd4 	bl	8010710 <etharp_request_dst>
 8010768:	4603      	mov	r3, r0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	08015ae0 	.word	0x08015ae0

08010778 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08e      	sub	sp, #56	; 0x38
 801077c:	af04      	add	r7, sp, #16
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010782:	4b79      	ldr	r3, [pc, #484]	; (8010968 <icmp_input+0x1f0>)
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	f003 030f 	and.w	r3, r3, #15
 8010790:	b2db      	uxtb	r3, r3
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	b2db      	uxtb	r3, r3
 8010796:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801079a:	2b13      	cmp	r3, #19
 801079c:	f240 80cd 	bls.w	801093a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	895b      	ldrh	r3, [r3, #10]
 80107a4:	2b03      	cmp	r3, #3
 80107a6:	f240 80ca 	bls.w	801093e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80107b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f000 80b7 	beq.w	801092c <icmp_input+0x1b4>
 80107be:	2b08      	cmp	r3, #8
 80107c0:	f040 80b7 	bne.w	8010932 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80107c4:	4b69      	ldr	r3, [pc, #420]	; (801096c <icmp_input+0x1f4>)
 80107c6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80107c8:	4b67      	ldr	r3, [pc, #412]	; (8010968 <icmp_input+0x1f0>)
 80107ca:	695b      	ldr	r3, [r3, #20]
 80107cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107d0:	2be0      	cmp	r3, #224	; 0xe0
 80107d2:	f000 80bb 	beq.w	801094c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80107d6:	4b64      	ldr	r3, [pc, #400]	; (8010968 <icmp_input+0x1f0>)
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	4a63      	ldr	r2, [pc, #396]	; (8010968 <icmp_input+0x1f0>)
 80107dc:	6812      	ldr	r2, [r2, #0]
 80107de:	4611      	mov	r1, r2
 80107e0:	4618      	mov	r0, r3
 80107e2:	f000 fbed 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f040 80b1 	bne.w	8010950 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	891b      	ldrh	r3, [r3, #8]
 80107f2:	2b07      	cmp	r3, #7
 80107f4:	f240 80a5 	bls.w	8010942 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80107f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107fa:	330e      	adds	r3, #14
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7f9 f92c 	bl	8009a5c <pbuf_add_header>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d04b      	beq.n	80108a2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	891a      	ldrh	r2, [r3, #8]
 801080e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010810:	4413      	add	r3, r2
 8010812:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	891b      	ldrh	r3, [r3, #8]
 8010818:	8b7a      	ldrh	r2, [r7, #26]
 801081a:	429a      	cmp	r2, r3
 801081c:	f0c0 809a 	bcc.w	8010954 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010820:	8b7b      	ldrh	r3, [r7, #26]
 8010822:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010826:	4619      	mov	r1, r3
 8010828:	200e      	movs	r0, #14
 801082a:	f7f8 fec9 	bl	80095c0 <pbuf_alloc>
 801082e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 8090 	beq.w	8010958 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	895b      	ldrh	r3, [r3, #10]
 801083c:	461a      	mov	r2, r3
 801083e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010840:	3308      	adds	r3, #8
 8010842:	429a      	cmp	r2, r3
 8010844:	d203      	bcs.n	801084e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010846:	6978      	ldr	r0, [r7, #20]
 8010848:	f7f9 f99e 	bl	8009b88 <pbuf_free>
          goto icmperr;
 801084c:	e085      	b.n	801095a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010856:	4618      	mov	r0, r3
 8010858:	f001 fefb 	bl	8012652 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801085c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801085e:	4619      	mov	r1, r3
 8010860:	6978      	ldr	r0, [r7, #20]
 8010862:	f7f9 f90b 	bl	8009a7c <pbuf_remove_header>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d009      	beq.n	8010880 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801086c:	4b40      	ldr	r3, [pc, #256]	; (8010970 <icmp_input+0x1f8>)
 801086e:	22b6      	movs	r2, #182	; 0xb6
 8010870:	4940      	ldr	r1, [pc, #256]	; (8010974 <icmp_input+0x1fc>)
 8010872:	4841      	ldr	r0, [pc, #260]	; (8010978 <icmp_input+0x200>)
 8010874:	f001 fd12 	bl	801229c <iprintf>
          pbuf_free(r);
 8010878:	6978      	ldr	r0, [r7, #20]
 801087a:	f7f9 f985 	bl	8009b88 <pbuf_free>
          goto icmperr;
 801087e:	e06c      	b.n	801095a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010880:	6879      	ldr	r1, [r7, #4]
 8010882:	6978      	ldr	r0, [r7, #20]
 8010884:	f7f9 fa98 	bl	8009db8 <pbuf_copy>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d003      	beq.n	8010896 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801088e:	6978      	ldr	r0, [r7, #20]
 8010890:	f7f9 f97a 	bl	8009b88 <pbuf_free>
          goto icmperr;
 8010894:	e061      	b.n	801095a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7f9 f976 	bl	8009b88 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	607b      	str	r3, [r7, #4]
 80108a0:	e00f      	b.n	80108c2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80108a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108a4:	330e      	adds	r3, #14
 80108a6:	4619      	mov	r1, r3
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7f9 f8e7 	bl	8009a7c <pbuf_remove_header>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d006      	beq.n	80108c2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80108b4:	4b2e      	ldr	r3, [pc, #184]	; (8010970 <icmp_input+0x1f8>)
 80108b6:	22c7      	movs	r2, #199	; 0xc7
 80108b8:	4930      	ldr	r1, [pc, #192]	; (801097c <icmp_input+0x204>)
 80108ba:	482f      	ldr	r0, [pc, #188]	; (8010978 <icmp_input+0x200>)
 80108bc:	f001 fcee 	bl	801229c <iprintf>
          goto icmperr;
 80108c0:	e04b      	b.n	801095a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80108c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108ca:	4619      	mov	r1, r3
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f7f9 f8c5 	bl	8009a5c <pbuf_add_header>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d12b      	bne.n	8010930 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80108e6:	4b20      	ldr	r3, [pc, #128]	; (8010968 <icmp_input+0x1f0>)
 80108e8:	691a      	ldr	r2, [r3, #16]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	2200      	movs	r2, #0
 80108f2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	2200      	movs	r2, #0
 80108f8:	709a      	strb	r2, [r3, #2]
 80108fa:	2200      	movs	r2, #0
 80108fc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	22ff      	movs	r2, #255	; 0xff
 8010902:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	729a      	strb	r2, [r3, #10]
 801090a:	2200      	movs	r2, #0
 801090c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	9302      	str	r3, [sp, #8]
 8010912:	2301      	movs	r3, #1
 8010914:	9301      	str	r3, [sp, #4]
 8010916:	2300      	movs	r3, #0
 8010918:	9300      	str	r3, [sp, #0]
 801091a:	23ff      	movs	r3, #255	; 0xff
 801091c:	2200      	movs	r2, #0
 801091e:	69f9      	ldr	r1, [r7, #28]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 fa75 	bl	8010e10 <ip4_output_if>
 8010926:	4603      	mov	r3, r0
 8010928:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801092a:	e001      	b.n	8010930 <icmp_input+0x1b8>
      break;
 801092c:	bf00      	nop
 801092e:	e000      	b.n	8010932 <icmp_input+0x1ba>
      break;
 8010930:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7f9 f928 	bl	8009b88 <pbuf_free>
  return;
 8010938:	e013      	b.n	8010962 <icmp_input+0x1ea>
    goto lenerr;
 801093a:	bf00      	nop
 801093c:	e002      	b.n	8010944 <icmp_input+0x1cc>
    goto lenerr;
 801093e:	bf00      	nop
 8010940:	e000      	b.n	8010944 <icmp_input+0x1cc>
        goto lenerr;
 8010942:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7f9 f91f 	bl	8009b88 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801094a:	e00a      	b.n	8010962 <icmp_input+0x1ea>
        goto icmperr;
 801094c:	bf00      	nop
 801094e:	e004      	b.n	801095a <icmp_input+0x1e2>
        goto icmperr;
 8010950:	bf00      	nop
 8010952:	e002      	b.n	801095a <icmp_input+0x1e2>
          goto icmperr;
 8010954:	bf00      	nop
 8010956:	e000      	b.n	801095a <icmp_input+0x1e2>
          goto icmperr;
 8010958:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7f9 f914 	bl	8009b88 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010960:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010962:	3728      	adds	r7, #40	; 0x28
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	20004ee0 	.word	0x20004ee0
 801096c:	20004ef4 	.word	0x20004ef4
 8010970:	08015574 	.word	0x08015574
 8010974:	080155ac 	.word	0x080155ac
 8010978:	080155e4 	.word	0x080155e4
 801097c:	0801560c 	.word	0x0801560c

08010980 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	460b      	mov	r3, r1
 801098a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801098c:	78fb      	ldrb	r3, [r7, #3]
 801098e:	461a      	mov	r2, r3
 8010990:	2103      	movs	r1, #3
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f814 	bl	80109c0 <icmp_send_response>
}
 8010998:	bf00      	nop
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80109ac:	78fb      	ldrb	r3, [r7, #3]
 80109ae:	461a      	mov	r2, r3
 80109b0:	210b      	movs	r1, #11
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 f804 	bl	80109c0 <icmp_send_response>
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08c      	sub	sp, #48	; 0x30
 80109c4:	af04      	add	r7, sp, #16
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	460b      	mov	r3, r1
 80109ca:	70fb      	strb	r3, [r7, #3]
 80109cc:	4613      	mov	r3, r2
 80109ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80109d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109d4:	2124      	movs	r1, #36	; 0x24
 80109d6:	2022      	movs	r0, #34	; 0x22
 80109d8:	f7f8 fdf2 	bl	80095c0 <pbuf_alloc>
 80109dc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d04c      	beq.n	8010a7e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	895b      	ldrh	r3, [r3, #10]
 80109e8:	2b23      	cmp	r3, #35	; 0x23
 80109ea:	d806      	bhi.n	80109fa <icmp_send_response+0x3a>
 80109ec:	4b26      	ldr	r3, [pc, #152]	; (8010a88 <icmp_send_response+0xc8>)
 80109ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80109f2:	4926      	ldr	r1, [pc, #152]	; (8010a8c <icmp_send_response+0xcc>)
 80109f4:	4826      	ldr	r0, [pc, #152]	; (8010a90 <icmp_send_response+0xd0>)
 80109f6:	f001 fc51 	bl	801229c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	78fa      	ldrb	r2, [r7, #3]
 8010a0a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	78ba      	ldrb	r2, [r7, #2]
 8010a10:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2200      	movs	r2, #0
 8010a16:	711a      	strb	r2, [r3, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	719a      	strb	r2, [r3, #6]
 8010a22:	2200      	movs	r2, #0
 8010a24:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	f103 0008 	add.w	r0, r3, #8
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	221c      	movs	r2, #28
 8010a34:	4619      	mov	r1, r3
 8010a36:	f001 fe0c 	bl	8012652 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010a40:	f107 030c 	add.w	r3, r7, #12
 8010a44:	4618      	mov	r0, r3
 8010a46:	f000 f825 	bl	8010a94 <ip4_route>
 8010a4a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d011      	beq.n	8010a76 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	2200      	movs	r2, #0
 8010a56:	709a      	strb	r2, [r3, #2]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010a5c:	f107 020c 	add.w	r2, r7, #12
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	9302      	str	r3, [sp, #8]
 8010a64:	2301      	movs	r3, #1
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	2300      	movs	r3, #0
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	23ff      	movs	r3, #255	; 0xff
 8010a6e:	2100      	movs	r1, #0
 8010a70:	69f8      	ldr	r0, [r7, #28]
 8010a72:	f000 f9cd 	bl	8010e10 <ip4_output_if>
  }
  pbuf_free(q);
 8010a76:	69f8      	ldr	r0, [r7, #28]
 8010a78:	f7f9 f886 	bl	8009b88 <pbuf_free>
 8010a7c:	e000      	b.n	8010a80 <icmp_send_response+0xc0>
    return;
 8010a7e:	bf00      	nop
}
 8010a80:	3720      	adds	r7, #32
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	08015574 	.word	0x08015574
 8010a8c:	08015640 	.word	0x08015640
 8010a90:	080155e4 	.word	0x080155e4

08010a94 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010a9c:	4b33      	ldr	r3, [pc, #204]	; (8010b6c <ip4_route+0xd8>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	60fb      	str	r3, [r7, #12]
 8010aa2:	e036      	b.n	8010b12 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aaa:	f003 0301 	and.w	r3, r3, #1
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d02b      	beq.n	8010b0c <ip4_route+0x78>
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aba:	089b      	lsrs	r3, r3, #2
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d022      	beq.n	8010b0c <ip4_route+0x78>
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	3304      	adds	r3, #4
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d01d      	beq.n	8010b0c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	405a      	eors	r2, r3
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	3308      	adds	r3, #8
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4013      	ands	r3, r2
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d101      	bne.n	8010aec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	e038      	b.n	8010b5e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010af2:	f003 0302 	and.w	r3, r3, #2
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d108      	bne.n	8010b0c <ip4_route+0x78>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	330c      	adds	r3, #12
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d101      	bne.n	8010b0c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	e028      	b.n	8010b5e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	60fb      	str	r3, [r7, #12]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1c5      	bne.n	8010aa4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b18:	4b15      	ldr	r3, [pc, #84]	; (8010b70 <ip4_route+0xdc>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d01a      	beq.n	8010b56 <ip4_route+0xc2>
 8010b20:	4b13      	ldr	r3, [pc, #76]	; (8010b70 <ip4_route+0xdc>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b28:	f003 0301 	and.w	r3, r3, #1
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d012      	beq.n	8010b56 <ip4_route+0xc2>
 8010b30:	4b0f      	ldr	r3, [pc, #60]	; (8010b70 <ip4_route+0xdc>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b38:	f003 0304 	and.w	r3, r3, #4
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d00a      	beq.n	8010b56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010b40:	4b0b      	ldr	r3, [pc, #44]	; (8010b70 <ip4_route+0xdc>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	3304      	adds	r3, #4
 8010b46:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d004      	beq.n	8010b56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b7f      	cmp	r3, #127	; 0x7f
 8010b54:	d101      	bne.n	8010b5a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010b56:	2300      	movs	r3, #0
 8010b58:	e001      	b.n	8010b5e <ip4_route+0xca>
  }

  return netif_default;
 8010b5a:	4b05      	ldr	r3, [pc, #20]	; (8010b70 <ip4_route+0xdc>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3714      	adds	r7, #20
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	20008444 	.word	0x20008444
 8010b70:	20008448 	.word	0x20008448

08010b74 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b82:	f003 0301 	and.w	r3, r3, #1
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d016      	beq.n	8010bba <ip4_input_accept+0x46>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3304      	adds	r3, #4
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d011      	beq.n	8010bba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010b96:	4b0b      	ldr	r3, [pc, #44]	; (8010bc4 <ip4_input_accept+0x50>)
 8010b98:	695a      	ldr	r2, [r3, #20]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	3304      	adds	r3, #4
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d008      	beq.n	8010bb6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010ba4:	4b07      	ldr	r3, [pc, #28]	; (8010bc4 <ip4_input_accept+0x50>)
 8010ba6:	695b      	ldr	r3, [r3, #20]
 8010ba8:	6879      	ldr	r1, [r7, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	f000 fa08 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 8010bb0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d001      	beq.n	8010bba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e000      	b.n	8010bbc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	20004ee0 	.word	0x20004ee0

08010bc8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b086      	sub	sp, #24
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	091b      	lsrs	r3, r3, #4
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	2b04      	cmp	r3, #4
 8010be2:	d004      	beq.n	8010bee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7f8 ffcf 	bl	8009b88 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	e107      	b.n	8010dfe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f003 030f 	and.w	r3, r3, #15
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	885b      	ldrh	r3, [r3, #2]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7f7 fc81 	bl	800850c <lwip_htons>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	891b      	ldrh	r3, [r3, #8]
 8010c12:	89ba      	ldrh	r2, [r7, #12]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d204      	bcs.n	8010c22 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010c18:	89bb      	ldrh	r3, [r7, #12]
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f7f8 fe2d 	bl	800987c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	895b      	ldrh	r3, [r3, #10]
 8010c26:	89fa      	ldrh	r2, [r7, #14]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d807      	bhi.n	8010c3c <ip4_input+0x74>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	891b      	ldrh	r3, [r3, #8]
 8010c30:	89ba      	ldrh	r2, [r7, #12]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d802      	bhi.n	8010c3c <ip4_input+0x74>
 8010c36:	89fb      	ldrh	r3, [r7, #14]
 8010c38:	2b13      	cmp	r3, #19
 8010c3a:	d804      	bhi.n	8010c46 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7f8 ffa3 	bl	8009b88 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	e0db      	b.n	8010dfe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	4a6f      	ldr	r2, [pc, #444]	; (8010e08 <ip4_input+0x240>)
 8010c4c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	4a6d      	ldr	r2, [pc, #436]	; (8010e08 <ip4_input+0x240>)
 8010c54:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010c56:	4b6c      	ldr	r3, [pc, #432]	; (8010e08 <ip4_input+0x240>)
 8010c58:	695b      	ldr	r3, [r3, #20]
 8010c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c5e:	2be0      	cmp	r3, #224	; 0xe0
 8010c60:	d112      	bne.n	8010c88 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c68:	f003 0301 	and.w	r3, r3, #1
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d007      	beq.n	8010c82 <ip4_input+0xba>
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	3304      	adds	r3, #4
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d002      	beq.n	8010c82 <ip4_input+0xba>
      netif = inp;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	613b      	str	r3, [r7, #16]
 8010c80:	e02a      	b.n	8010cd8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	613b      	str	r3, [r7, #16]
 8010c86:	e027      	b.n	8010cd8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010c88:	6838      	ldr	r0, [r7, #0]
 8010c8a:	f7ff ff73 	bl	8010b74 <ip4_input_accept>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d002      	beq.n	8010c9a <ip4_input+0xd2>
      netif = inp;
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	613b      	str	r3, [r7, #16]
 8010c98:	e01e      	b.n	8010cd8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010c9e:	4b5a      	ldr	r3, [pc, #360]	; (8010e08 <ip4_input+0x240>)
 8010ca0:	695b      	ldr	r3, [r3, #20]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8010ca6:	d017      	beq.n	8010cd8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010ca8:	4b58      	ldr	r3, [pc, #352]	; (8010e0c <ip4_input+0x244>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	613b      	str	r3, [r7, #16]
 8010cae:	e00e      	b.n	8010cce <ip4_input+0x106>
          if (netif == inp) {
 8010cb0:	693a      	ldr	r2, [r7, #16]
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d006      	beq.n	8010cc6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010cb8:	6938      	ldr	r0, [r7, #16]
 8010cba:	f7ff ff5b 	bl	8010b74 <ip4_input_accept>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d108      	bne.n	8010cd6 <ip4_input+0x10e>
 8010cc4:	e000      	b.n	8010cc8 <ip4_input+0x100>
            continue;
 8010cc6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	613b      	str	r3, [r7, #16]
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1ed      	bne.n	8010cb0 <ip4_input+0xe8>
 8010cd4:	e000      	b.n	8010cd8 <ip4_input+0x110>
            break;
 8010cd6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010cd8:	4b4b      	ldr	r3, [pc, #300]	; (8010e08 <ip4_input+0x240>)
 8010cda:	691b      	ldr	r3, [r3, #16]
 8010cdc:	6839      	ldr	r1, [r7, #0]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 f96e 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d105      	bne.n	8010cf6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010cea:	4b47      	ldr	r3, [pc, #284]	; (8010e08 <ip4_input+0x240>)
 8010cec:	691b      	ldr	r3, [r3, #16]
 8010cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010cf2:	2be0      	cmp	r3, #224	; 0xe0
 8010cf4:	d104      	bne.n	8010d00 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7f8 ff46 	bl	8009b88 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	e07e      	b.n	8010dfe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d104      	bne.n	8010d10 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7f8 ff3e 	bl	8009b88 <pbuf_free>
    return ERR_OK;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e076      	b.n	8010dfe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	88db      	ldrh	r3, [r3, #6]
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	461a      	mov	r2, r3
 8010d18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00b      	beq.n	8010d3a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 fc92 	bl	801164c <ip4_reass>
 8010d28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d101      	bne.n	8010d34 <ip4_input+0x16c>
      return ERR_OK;
 8010d30:	2300      	movs	r3, #0
 8010d32:	e064      	b.n	8010dfe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010d3a:	4a33      	ldr	r2, [pc, #204]	; (8010e08 <ip4_input+0x240>)
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010d40:	4a31      	ldr	r2, [pc, #196]	; (8010e08 <ip4_input+0x240>)
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010d46:	4a30      	ldr	r2, [pc, #192]	; (8010e08 <ip4_input+0x240>)
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	f003 030f 	and.w	r3, r3, #15
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	4b2a      	ldr	r3, [pc, #168]	; (8010e08 <ip4_input+0x240>)
 8010d5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010d60:	89fb      	ldrh	r3, [r7, #14]
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7f8 fe89 	bl	8009a7c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	7a5b      	ldrb	r3, [r3, #9]
 8010d6e:	2b11      	cmp	r3, #17
 8010d70:	d006      	beq.n	8010d80 <ip4_input+0x1b8>
 8010d72:	2b11      	cmp	r3, #17
 8010d74:	dc13      	bgt.n	8010d9e <ip4_input+0x1d6>
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d00c      	beq.n	8010d94 <ip4_input+0x1cc>
 8010d7a:	2b06      	cmp	r3, #6
 8010d7c:	d005      	beq.n	8010d8a <ip4_input+0x1c2>
 8010d7e:	e00e      	b.n	8010d9e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010d80:	6839      	ldr	r1, [r7, #0]
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7fe fc68 	bl	800f658 <udp_input>
        break;
 8010d88:	e026      	b.n	8010dd8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010d8a:	6839      	ldr	r1, [r7, #0]
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fa fd23 	bl	800b7d8 <tcp_input>
        break;
 8010d92:	e021      	b.n	8010dd8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010d94:	6839      	ldr	r1, [r7, #0]
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7ff fcee 	bl	8010778 <icmp_input>
        break;
 8010d9c:	e01c      	b.n	8010dd8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d9e:	4b1a      	ldr	r3, [pc, #104]	; (8010e08 <ip4_input+0x240>)
 8010da0:	695b      	ldr	r3, [r3, #20]
 8010da2:	6939      	ldr	r1, [r7, #16]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f000 f90b 	bl	8010fc0 <ip4_addr_isbroadcast_u32>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d10f      	bne.n	8010dd0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010db0:	4b15      	ldr	r3, [pc, #84]	; (8010e08 <ip4_input+0x240>)
 8010db2:	695b      	ldr	r3, [r3, #20]
 8010db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010db8:	2be0      	cmp	r3, #224	; 0xe0
 8010dba:	d009      	beq.n	8010dd0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f7f8 fecd 	bl	8009b62 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010dc8:	2102      	movs	r1, #2
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7ff fdd8 	bl	8010980 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7f8 fed9 	bl	8009b88 <pbuf_free>
        break;
 8010dd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010dd8:	4b0b      	ldr	r3, [pc, #44]	; (8010e08 <ip4_input+0x240>)
 8010dda:	2200      	movs	r2, #0
 8010ddc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010dde:	4b0a      	ldr	r3, [pc, #40]	; (8010e08 <ip4_input+0x240>)
 8010de0:	2200      	movs	r2, #0
 8010de2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010de4:	4b08      	ldr	r3, [pc, #32]	; (8010e08 <ip4_input+0x240>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010dea:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <ip4_input+0x240>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010df0:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <ip4_input+0x240>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010df6:	4b04      	ldr	r3, [pc, #16]	; (8010e08 <ip4_input+0x240>)
 8010df8:	2200      	movs	r2, #0
 8010dfa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010dfc:	2300      	movs	r3, #0
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3718      	adds	r7, #24
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20004ee0 	.word	0x20004ee0
 8010e0c:	20008444 	.word	0x20008444

08010e10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b08a      	sub	sp, #40	; 0x28
 8010e14:	af04      	add	r7, sp, #16
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	607a      	str	r2, [r7, #4]
 8010e1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d009      	beq.n	8010e3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d003      	beq.n	8010e36 <ip4_output_if+0x26>
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d102      	bne.n	8010e3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e38:	3304      	adds	r3, #4
 8010e3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010e3c:	78fa      	ldrb	r2, [r7, #3]
 8010e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e40:	9302      	str	r3, [sp, #8]
 8010e42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010e46:	9301      	str	r3, [sp, #4]
 8010e48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e4c:	9300      	str	r3, [sp, #0]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	6979      	ldr	r1, [r7, #20]
 8010e54:	68f8      	ldr	r0, [r7, #12]
 8010e56:	f000 f805 	bl	8010e64 <ip4_output_if_src>
 8010e5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	7b9b      	ldrb	r3, [r3, #14]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d006      	beq.n	8010e88 <ip4_output_if_src+0x24>
 8010e7a:	4b4b      	ldr	r3, [pc, #300]	; (8010fa8 <ip4_output_if_src+0x144>)
 8010e7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010e80:	494a      	ldr	r1, [pc, #296]	; (8010fac <ip4_output_if_src+0x148>)
 8010e82:	484b      	ldr	r0, [pc, #300]	; (8010fb0 <ip4_output_if_src+0x14c>)
 8010e84:	f001 fa0a 	bl	801229c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d060      	beq.n	8010f50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010e8e:	2314      	movs	r3, #20
 8010e90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010e92:	2114      	movs	r1, #20
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f7f8 fde1 	bl	8009a5c <pbuf_add_header>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010ea0:	f06f 0301 	mvn.w	r3, #1
 8010ea4:	e07c      	b.n	8010fa0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	895b      	ldrh	r3, [r3, #10]
 8010eb0:	2b13      	cmp	r3, #19
 8010eb2:	d806      	bhi.n	8010ec2 <ip4_output_if_src+0x5e>
 8010eb4:	4b3c      	ldr	r3, [pc, #240]	; (8010fa8 <ip4_output_if_src+0x144>)
 8010eb6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010eba:	493e      	ldr	r1, [pc, #248]	; (8010fb4 <ip4_output_if_src+0x150>)
 8010ebc:	483c      	ldr	r0, [pc, #240]	; (8010fb0 <ip4_output_if_src+0x14c>)
 8010ebe:	f001 f9ed 	bl	801229c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	78fa      	ldrb	r2, [r7, #3]
 8010ec6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010ece:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010ed8:	8b7b      	ldrh	r3, [r7, #26]
 8010eda:	089b      	lsrs	r3, r3, #2
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	69fb      	ldr	r3, [r7, #28]
 8010ee8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010ef0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	891b      	ldrh	r3, [r3, #8]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7f7 fb08 	bl	800850c <lwip_htons>
 8010efc:	4603      	mov	r3, r0
 8010efe:	461a      	mov	r2, r3
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	2200      	movs	r2, #0
 8010f08:	719a      	strb	r2, [r3, #6]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010f0e:	4b2a      	ldr	r3, [pc, #168]	; (8010fb8 <ip4_output_if_src+0x154>)
 8010f10:	881b      	ldrh	r3, [r3, #0]
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7f7 fafa 	bl	800850c <lwip_htons>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010f20:	4b25      	ldr	r3, [pc, #148]	; (8010fb8 <ip4_output_if_src+0x154>)
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	3301      	adds	r3, #1
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	4b23      	ldr	r3, [pc, #140]	; (8010fb8 <ip4_output_if_src+0x154>)
 8010f2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d104      	bne.n	8010f3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010f32:	4b22      	ldr	r3, [pc, #136]	; (8010fbc <ip4_output_if_src+0x158>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	69fb      	ldr	r3, [r7, #28]
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	e003      	b.n	8010f44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	2200      	movs	r2, #0
 8010f48:	729a      	strb	r2, [r3, #10]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	72da      	strb	r2, [r3, #11]
 8010f4e:	e00f      	b.n	8010f70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	895b      	ldrh	r3, [r3, #10]
 8010f54:	2b13      	cmp	r3, #19
 8010f56:	d802      	bhi.n	8010f5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010f58:	f06f 0301 	mvn.w	r3, #1
 8010f5c:	e020      	b.n	8010fa0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010f6a:	f107 0314 	add.w	r3, r7, #20
 8010f6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00c      	beq.n	8010f92 <ip4_output_if_src+0x12e>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	891a      	ldrh	r2, [r3, #8]
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d906      	bls.n	8010f92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f000 fd53 	bl	8011a34 <ip4_frag>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	e006      	b.n	8010fa0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	687a      	ldr	r2, [r7, #4]
 8010f98:	68f9      	ldr	r1, [r7, #12]
 8010f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f9c:	4798      	blx	r3
 8010f9e:	4603      	mov	r3, r0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3720      	adds	r7, #32
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	0801566c 	.word	0x0801566c
 8010fac:	080156a0 	.word	0x080156a0
 8010fb0:	080156ac 	.word	0x080156ac
 8010fb4:	080156d4 	.word	0x080156d4
 8010fb8:	200085a2 	.word	0x200085a2
 8010fbc:	08015adc 	.word	0x08015adc

08010fc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b085      	sub	sp, #20
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd4:	d002      	beq.n	8010fdc <ip4_addr_isbroadcast_u32+0x1c>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d101      	bne.n	8010fe0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e02a      	b.n	8011036 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fe6:	f003 0302 	and.w	r3, r3, #2
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d101      	bne.n	8010ff2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e021      	b.n	8011036 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	3304      	adds	r3, #4
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d101      	bne.n	8011002 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010ffe:	2300      	movs	r3, #0
 8011000:	e019      	b.n	8011036 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	3304      	adds	r3, #4
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	405a      	eors	r2, r3
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	3308      	adds	r3, #8
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4013      	ands	r3, r2
 8011014:	2b00      	cmp	r3, #0
 8011016:	d10d      	bne.n	8011034 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	3308      	adds	r3, #8
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	43da      	mvns	r2, r3
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	3308      	adds	r3, #8
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801102c:	429a      	cmp	r2, r3
 801102e:	d101      	bne.n	8011034 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011030:	2301      	movs	r3, #1
 8011032:	e000      	b.n	8011036 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011034:	2300      	movs	r3, #0
  }
}
 8011036:	4618      	mov	r0, r3
 8011038:	3714      	adds	r7, #20
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr
	...

08011044 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801104a:	2300      	movs	r3, #0
 801104c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801104e:	4b12      	ldr	r3, [pc, #72]	; (8011098 <ip_reass_tmr+0x54>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011054:	e018      	b.n	8011088 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	7fdb      	ldrb	r3, [r3, #31]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00b      	beq.n	8011076 <ip_reass_tmr+0x32>
      r->timer--;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	7fdb      	ldrb	r3, [r3, #31]
 8011062:	3b01      	subs	r3, #1
 8011064:	b2da      	uxtb	r2, r3
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	60fb      	str	r3, [r7, #12]
 8011074:	e008      	b.n	8011088 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011080:	68b9      	ldr	r1, [r7, #8]
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 f80a 	bl	801109c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1e3      	bne.n	8011056 <ip_reass_tmr+0x12>
    }
  }
}
 801108e:	bf00      	nop
 8011090:	bf00      	nop
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	200085a4 	.word	0x200085a4

0801109c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d105      	bne.n	80110be <ip_reass_free_complete_datagram+0x22>
 80110b2:	4b45      	ldr	r3, [pc, #276]	; (80111c8 <ip_reass_free_complete_datagram+0x12c>)
 80110b4:	22ab      	movs	r2, #171	; 0xab
 80110b6:	4945      	ldr	r1, [pc, #276]	; (80111cc <ip_reass_free_complete_datagram+0x130>)
 80110b8:	4845      	ldr	r0, [pc, #276]	; (80111d0 <ip_reass_free_complete_datagram+0x134>)
 80110ba:	f001 f8ef 	bl	801229c <iprintf>
  if (prev != NULL) {
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00a      	beq.n	80110da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d005      	beq.n	80110da <ip_reass_free_complete_datagram+0x3e>
 80110ce:	4b3e      	ldr	r3, [pc, #248]	; (80111c8 <ip_reass_free_complete_datagram+0x12c>)
 80110d0:	22ad      	movs	r2, #173	; 0xad
 80110d2:	4940      	ldr	r1, [pc, #256]	; (80111d4 <ip_reass_free_complete_datagram+0x138>)
 80110d4:	483e      	ldr	r0, [pc, #248]	; (80111d0 <ip_reass_free_complete_datagram+0x134>)
 80110d6:	f001 f8e1 	bl	801229c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	889b      	ldrh	r3, [r3, #4]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d12a      	bne.n	8011142 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	6858      	ldr	r0, [r3, #4]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	3308      	adds	r3, #8
 8011102:	2214      	movs	r2, #20
 8011104:	4619      	mov	r1, r3
 8011106:	f001 faa4 	bl	8012652 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801110a:	2101      	movs	r1, #1
 801110c:	69b8      	ldr	r0, [r7, #24]
 801110e:	f7ff fc47 	bl	80109a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011112:	69b8      	ldr	r0, [r7, #24]
 8011114:	f7f8 fdc0 	bl	8009c98 <pbuf_clen>
 8011118:	4603      	mov	r3, r0
 801111a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801111c:	8bfa      	ldrh	r2, [r7, #30]
 801111e:	8a7b      	ldrh	r3, [r7, #18]
 8011120:	4413      	add	r3, r2
 8011122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011126:	db05      	blt.n	8011134 <ip_reass_free_complete_datagram+0x98>
 8011128:	4b27      	ldr	r3, [pc, #156]	; (80111c8 <ip_reass_free_complete_datagram+0x12c>)
 801112a:	22bc      	movs	r2, #188	; 0xbc
 801112c:	492a      	ldr	r1, [pc, #168]	; (80111d8 <ip_reass_free_complete_datagram+0x13c>)
 801112e:	4828      	ldr	r0, [pc, #160]	; (80111d0 <ip_reass_free_complete_datagram+0x134>)
 8011130:	f001 f8b4 	bl	801229c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011134:	8bfa      	ldrh	r2, [r7, #30]
 8011136:	8a7b      	ldrh	r3, [r7, #18]
 8011138:	4413      	add	r3, r2
 801113a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801113c:	69b8      	ldr	r0, [r7, #24]
 801113e:	f7f8 fd23 	bl	8009b88 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011148:	e01f      	b.n	801118a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011150:	69bb      	ldr	r3, [r7, #24]
 8011152:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f7f8 fd9c 	bl	8009c98 <pbuf_clen>
 8011160:	4603      	mov	r3, r0
 8011162:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011164:	8bfa      	ldrh	r2, [r7, #30]
 8011166:	8a7b      	ldrh	r3, [r7, #18]
 8011168:	4413      	add	r3, r2
 801116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801116e:	db05      	blt.n	801117c <ip_reass_free_complete_datagram+0xe0>
 8011170:	4b15      	ldr	r3, [pc, #84]	; (80111c8 <ip_reass_free_complete_datagram+0x12c>)
 8011172:	22cc      	movs	r2, #204	; 0xcc
 8011174:	4918      	ldr	r1, [pc, #96]	; (80111d8 <ip_reass_free_complete_datagram+0x13c>)
 8011176:	4816      	ldr	r0, [pc, #88]	; (80111d0 <ip_reass_free_complete_datagram+0x134>)
 8011178:	f001 f890 	bl	801229c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801117c:	8bfa      	ldrh	r2, [r7, #30]
 801117e:	8a7b      	ldrh	r3, [r7, #18]
 8011180:	4413      	add	r3, r2
 8011182:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f7f8 fcff 	bl	8009b88 <pbuf_free>
  while (p != NULL) {
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1dc      	bne.n	801114a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011190:	6839      	ldr	r1, [r7, #0]
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f8c2 	bl	801131c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011198:	4b10      	ldr	r3, [pc, #64]	; (80111dc <ip_reass_free_complete_datagram+0x140>)
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	8bfa      	ldrh	r2, [r7, #30]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d905      	bls.n	80111ae <ip_reass_free_complete_datagram+0x112>
 80111a2:	4b09      	ldr	r3, [pc, #36]	; (80111c8 <ip_reass_free_complete_datagram+0x12c>)
 80111a4:	22d2      	movs	r2, #210	; 0xd2
 80111a6:	490e      	ldr	r1, [pc, #56]	; (80111e0 <ip_reass_free_complete_datagram+0x144>)
 80111a8:	4809      	ldr	r0, [pc, #36]	; (80111d0 <ip_reass_free_complete_datagram+0x134>)
 80111aa:	f001 f877 	bl	801229c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80111ae:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <ip_reass_free_complete_datagram+0x140>)
 80111b0:	881a      	ldrh	r2, [r3, #0]
 80111b2:	8bfb      	ldrh	r3, [r7, #30]
 80111b4:	1ad3      	subs	r3, r2, r3
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	4b08      	ldr	r3, [pc, #32]	; (80111dc <ip_reass_free_complete_datagram+0x140>)
 80111ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80111bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3720      	adds	r7, #32
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	08015704 	.word	0x08015704
 80111cc:	08015740 	.word	0x08015740
 80111d0:	0801574c 	.word	0x0801574c
 80111d4:	08015774 	.word	0x08015774
 80111d8:	08015788 	.word	0x08015788
 80111dc:	200085a8 	.word	0x200085a8
 80111e0:	080157a8 	.word	0x080157a8

080111e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b08a      	sub	sp, #40	; 0x28
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80111ee:	2300      	movs	r3, #0
 80111f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80111f2:	2300      	movs	r3, #0
 80111f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80111f6:	2300      	movs	r3, #0
 80111f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80111fa:	2300      	movs	r3, #0
 80111fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011202:	4b28      	ldr	r3, [pc, #160]	; (80112a4 <ip_reass_remove_oldest_datagram+0xc0>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011208:	e030      	b.n	801126c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	695a      	ldr	r2, [r3, #20]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	429a      	cmp	r2, r3
 8011214:	d10c      	bne.n	8011230 <ip_reass_remove_oldest_datagram+0x4c>
 8011216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011218:	699a      	ldr	r2, [r3, #24]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	429a      	cmp	r2, r3
 8011220:	d106      	bne.n	8011230 <ip_reass_remove_oldest_datagram+0x4c>
 8011222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011224:	899a      	ldrh	r2, [r3, #12]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	889b      	ldrh	r3, [r3, #4]
 801122a:	b29b      	uxth	r3, r3
 801122c:	429a      	cmp	r2, r3
 801122e:	d014      	beq.n	801125a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	3301      	adds	r3, #1
 8011234:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011236:	6a3b      	ldr	r3, [r7, #32]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d104      	bne.n	8011246 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	61bb      	str	r3, [r7, #24]
 8011244:	e009      	b.n	801125a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011248:	7fda      	ldrb	r2, [r3, #31]
 801124a:	6a3b      	ldr	r3, [r7, #32]
 801124c:	7fdb      	ldrb	r3, [r3, #31]
 801124e:	429a      	cmp	r2, r3
 8011250:	d803      	bhi.n	801125a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011254:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011264:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126e:	2b00      	cmp	r3, #0
 8011270:	d1cb      	bne.n	801120a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d008      	beq.n	801128a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011278:	69b9      	ldr	r1, [r7, #24]
 801127a:	6a38      	ldr	r0, [r7, #32]
 801127c:	f7ff ff0e 	bl	801109c <ip_reass_free_complete_datagram>
 8011280:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	4413      	add	r3, r2
 8011288:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801128a:	697a      	ldr	r2, [r7, #20]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	429a      	cmp	r2, r3
 8011290:	da02      	bge.n	8011298 <ip_reass_remove_oldest_datagram+0xb4>
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	2b01      	cmp	r3, #1
 8011296:	dcac      	bgt.n	80111f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011298:	697b      	ldr	r3, [r7, #20]
}
 801129a:	4618      	mov	r0, r3
 801129c:	3728      	adds	r7, #40	; 0x28
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	200085a4 	.word	0x200085a4

080112a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80112b2:	2004      	movs	r0, #4
 80112b4:	f7f7 fda2 	bl	8008dfc <memp_malloc>
 80112b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d110      	bne.n	80112e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80112c0:	6839      	ldr	r1, [r7, #0]
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f7ff ff8e 	bl	80111e4 <ip_reass_remove_oldest_datagram>
 80112c8:	4602      	mov	r2, r0
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	4293      	cmp	r3, r2
 80112ce:	dc03      	bgt.n	80112d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80112d0:	2004      	movs	r0, #4
 80112d2:	f7f7 fd93 	bl	8008dfc <memp_malloc>
 80112d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d101      	bne.n	80112e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80112de:	2300      	movs	r3, #0
 80112e0:	e016      	b.n	8011310 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80112e2:	2220      	movs	r2, #32
 80112e4:	2100      	movs	r1, #0
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f001 f92e 	bl	8012548 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	220f      	movs	r2, #15
 80112f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80112f2:	4b09      	ldr	r3, [pc, #36]	; (8011318 <ip_reass_enqueue_new_datagram+0x70>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80112fa:	4a07      	ldr	r2, [pc, #28]	; (8011318 <ip_reass_enqueue_new_datagram+0x70>)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	3308      	adds	r3, #8
 8011304:	2214      	movs	r2, #20
 8011306:	6879      	ldr	r1, [r7, #4]
 8011308:	4618      	mov	r0, r3
 801130a:	f001 f9a2 	bl	8012652 <memcpy>
  return ipr;
 801130e:	68fb      	ldr	r3, [r7, #12]
}
 8011310:	4618      	mov	r0, r3
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	200085a4 	.word	0x200085a4

0801131c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011326:	4b10      	ldr	r3, [pc, #64]	; (8011368 <ip_reass_dequeue_datagram+0x4c>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	429a      	cmp	r2, r3
 801132e:	d104      	bne.n	801133a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a0c      	ldr	r2, [pc, #48]	; (8011368 <ip_reass_dequeue_datagram+0x4c>)
 8011336:	6013      	str	r3, [r2, #0]
 8011338:	e00d      	b.n	8011356 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d106      	bne.n	801134e <ip_reass_dequeue_datagram+0x32>
 8011340:	4b0a      	ldr	r3, [pc, #40]	; (801136c <ip_reass_dequeue_datagram+0x50>)
 8011342:	f240 1245 	movw	r2, #325	; 0x145
 8011346:	490a      	ldr	r1, [pc, #40]	; (8011370 <ip_reass_dequeue_datagram+0x54>)
 8011348:	480a      	ldr	r0, [pc, #40]	; (8011374 <ip_reass_dequeue_datagram+0x58>)
 801134a:	f000 ffa7 	bl	801229c <iprintf>
    prev->next = ipr->next;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011356:	6879      	ldr	r1, [r7, #4]
 8011358:	2004      	movs	r0, #4
 801135a:	f7f7 fdbf 	bl	8008edc <memp_free>
}
 801135e:	bf00      	nop
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	200085a4 	.word	0x200085a4
 801136c:	08015704 	.word	0x08015704
 8011370:	080157cc 	.word	0x080157cc
 8011374:	0801574c 	.word	0x0801574c

08011378 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b08c      	sub	sp, #48	; 0x30
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011384:	2300      	movs	r3, #0
 8011386:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011388:	2301      	movs	r3, #1
 801138a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	885b      	ldrh	r3, [r3, #2]
 8011396:	b29b      	uxth	r3, r3
 8011398:	4618      	mov	r0, r3
 801139a:	f7f7 f8b7 	bl	800850c <lwip_htons>
 801139e:	4603      	mov	r3, r0
 80113a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	f003 030f 	and.w	r3, r3, #15
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80113b0:	7e7b      	ldrb	r3, [r7, #25]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	8b7a      	ldrh	r2, [r7, #26]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d202      	bcs.n	80113c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113ba:	f04f 33ff 	mov.w	r3, #4294967295
 80113be:	e135      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80113c0:	7e7b      	ldrb	r3, [r7, #25]
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	8b7a      	ldrh	r2, [r7, #26]
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	88db      	ldrh	r3, [r3, #6]
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7f7 f89b 	bl	800850c <lwip_htons>
 80113d6:	4603      	mov	r3, r0
 80113d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80113dc:	b29b      	uxth	r3, r3
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80113e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ea:	2200      	movs	r2, #0
 80113ec:	701a      	strb	r2, [r3, #0]
 80113ee:	2200      	movs	r2, #0
 80113f0:	705a      	strb	r2, [r3, #1]
 80113f2:	2200      	movs	r2, #0
 80113f4:	709a      	strb	r2, [r3, #2]
 80113f6:	2200      	movs	r2, #0
 80113f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80113fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fc:	8afa      	ldrh	r2, [r7, #22]
 80113fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011400:	8afa      	ldrh	r2, [r7, #22]
 8011402:	8b7b      	ldrh	r3, [r7, #26]
 8011404:	4413      	add	r3, r2
 8011406:	b29a      	uxth	r2, r3
 8011408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140e:	88db      	ldrh	r3, [r3, #6]
 8011410:	b29b      	uxth	r3, r3
 8011412:	8afa      	ldrh	r2, [r7, #22]
 8011414:	429a      	cmp	r2, r3
 8011416:	d902      	bls.n	801141e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011418:	f04f 33ff 	mov.w	r3, #4294967295
 801141c:	e106      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	627b      	str	r3, [r7, #36]	; 0x24
 8011424:	e068      	b.n	80114f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	889b      	ldrh	r3, [r3, #4]
 8011430:	b29a      	uxth	r2, r3
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	889b      	ldrh	r3, [r3, #4]
 8011436:	b29b      	uxth	r3, r3
 8011438:	429a      	cmp	r2, r3
 801143a:	d235      	bcs.n	80114a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011440:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011444:	2b00      	cmp	r3, #0
 8011446:	d020      	beq.n	801148a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144a:	889b      	ldrh	r3, [r3, #4]
 801144c:	b29a      	uxth	r2, r3
 801144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011450:	88db      	ldrh	r3, [r3, #6]
 8011452:	b29b      	uxth	r3, r3
 8011454:	429a      	cmp	r2, r3
 8011456:	d307      	bcc.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145a:	88db      	ldrh	r3, [r3, #6]
 801145c:	b29a      	uxth	r2, r3
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	889b      	ldrh	r3, [r3, #4]
 8011462:	b29b      	uxth	r3, r3
 8011464:	429a      	cmp	r2, r3
 8011466:	d902      	bls.n	801146e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011468:	f04f 33ff 	mov.w	r3, #4294967295
 801146c:	e0de      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011470:	68ba      	ldr	r2, [r7, #8]
 8011472:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011476:	88db      	ldrh	r3, [r3, #6]
 8011478:	b29a      	uxth	r2, r3
 801147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147c:	889b      	ldrh	r3, [r3, #4]
 801147e:	b29b      	uxth	r3, r3
 8011480:	429a      	cmp	r2, r3
 8011482:	d03d      	beq.n	8011500 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011484:	2300      	movs	r3, #0
 8011486:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011488:	e03a      	b.n	8011500 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148c:	88db      	ldrh	r3, [r3, #6]
 801148e:	b29a      	uxth	r2, r3
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	889b      	ldrh	r3, [r3, #4]
 8011494:	b29b      	uxth	r3, r3
 8011496:	429a      	cmp	r2, r3
 8011498:	d902      	bls.n	80114a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801149a:	f04f 33ff 	mov.w	r3, #4294967295
 801149e:	e0c5      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	68ba      	ldr	r2, [r7, #8]
 80114a4:	605a      	str	r2, [r3, #4]
      break;
 80114a6:	e02b      	b.n	8011500 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80114a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114aa:	889b      	ldrh	r3, [r3, #4]
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	889b      	ldrh	r3, [r3, #4]
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d102      	bne.n	80114be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114b8:	f04f 33ff 	mov.w	r3, #4294967295
 80114bc:	e0b6      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80114be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c0:	889b      	ldrh	r3, [r3, #4]
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	88db      	ldrh	r3, [r3, #6]
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d202      	bcs.n	80114d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114ce:	f04f 33ff 	mov.w	r3, #4294967295
 80114d2:	e0ab      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d009      	beq.n	80114ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80114da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114dc:	88db      	ldrh	r3, [r3, #6]
 80114de:	b29a      	uxth	r2, r3
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	889b      	ldrh	r3, [r3, #4]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d001      	beq.n	80114ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80114f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d193      	bne.n	8011426 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80114fe:	e000      	b.n	8011502 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011500:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	2b00      	cmp	r3, #0
 8011506:	d12d      	bne.n	8011564 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150a:	2b00      	cmp	r3, #0
 801150c:	d01c      	beq.n	8011548 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011510:	88db      	ldrh	r3, [r3, #6]
 8011512:	b29a      	uxth	r2, r3
 8011514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011516:	889b      	ldrh	r3, [r3, #4]
 8011518:	b29b      	uxth	r3, r3
 801151a:	429a      	cmp	r2, r3
 801151c:	d906      	bls.n	801152c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801151e:	4b45      	ldr	r3, [pc, #276]	; (8011634 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011520:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011524:	4944      	ldr	r1, [pc, #272]	; (8011638 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011526:	4845      	ldr	r0, [pc, #276]	; (801163c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011528:	f000 feb8 	bl	801229c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	88db      	ldrh	r3, [r3, #6]
 8011536:	b29a      	uxth	r2, r3
 8011538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153a:	889b      	ldrh	r3, [r3, #4]
 801153c:	b29b      	uxth	r3, r3
 801153e:	429a      	cmp	r2, r3
 8011540:	d010      	beq.n	8011564 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	623b      	str	r3, [r7, #32]
 8011546:	e00d      	b.n	8011564 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d006      	beq.n	801155e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011550:	4b38      	ldr	r3, [pc, #224]	; (8011634 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011552:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011556:	493a      	ldr	r1, [pc, #232]	; (8011640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011558:	4838      	ldr	r0, [pc, #224]	; (801163c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801155a:	f000 fe9f 	bl	801229c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	68ba      	ldr	r2, [r7, #8]
 8011562:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d105      	bne.n	8011576 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	7f9b      	ldrb	r3, [r3, #30]
 801156e:	f003 0301 	and.w	r3, r3, #1
 8011572:	2b00      	cmp	r3, #0
 8011574:	d059      	beq.n	801162a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011576:	6a3b      	ldr	r3, [r7, #32]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d04f      	beq.n	801161c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d006      	beq.n	8011592 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	889b      	ldrh	r3, [r3, #4]
 801158c:	b29b      	uxth	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d002      	beq.n	8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011592:	2300      	movs	r3, #0
 8011594:	623b      	str	r3, [r7, #32]
 8011596:	e041      	b.n	801161c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80115a2:	e012      	b.n	80115ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	88db      	ldrh	r3, [r3, #6]
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b2:	889b      	ldrh	r3, [r3, #4]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d002      	beq.n	80115c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	623b      	str	r3, [r7, #32]
            break;
 80115be:	e007      	b.n	80115d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80115c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80115c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d1e9      	bne.n	80115a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80115d0:	6a3b      	ldr	r3, [r7, #32]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d022      	beq.n	801161c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d106      	bne.n	80115ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80115de:	4b15      	ldr	r3, [pc, #84]	; (8011634 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80115e0:	f240 12df 	movw	r2, #479	; 0x1df
 80115e4:	4917      	ldr	r1, [pc, #92]	; (8011644 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80115e6:	4815      	ldr	r0, [pc, #84]	; (801163c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80115e8:	f000 fe58 	bl	801229c <iprintf>
          LWIP_ASSERT("sanity check",
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d106      	bne.n	8011606 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80115f8:	4b0e      	ldr	r3, [pc, #56]	; (8011634 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80115fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80115fe:	4911      	ldr	r1, [pc, #68]	; (8011644 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011600:	480e      	ldr	r0, [pc, #56]	; (801163c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011602:	f000 fe4b 	bl	801229c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d006      	beq.n	801161c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801160e:	4b09      	ldr	r3, [pc, #36]	; (8011634 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011610:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011614:	490c      	ldr	r1, [pc, #48]	; (8011648 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011616:	4809      	ldr	r0, [pc, #36]	; (801163c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011618:	f000 fe40 	bl	801229c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	2b00      	cmp	r3, #0
 8011620:	bf14      	ite	ne
 8011622:	2301      	movne	r3, #1
 8011624:	2300      	moveq	r3, #0
 8011626:	b2db      	uxtb	r3, r3
 8011628:	e000      	b.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3730      	adds	r7, #48	; 0x30
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	08015704 	.word	0x08015704
 8011638:	080157e8 	.word	0x080157e8
 801163c:	0801574c 	.word	0x0801574c
 8011640:	08015808 	.word	0x08015808
 8011644:	08015840 	.word	0x08015840
 8011648:	08015850 	.word	0x08015850

0801164c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b08e      	sub	sp, #56	; 0x38
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	f003 030f 	and.w	r3, r3, #15
 8011662:	b2db      	uxtb	r3, r3
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	b2db      	uxtb	r3, r3
 8011668:	2b14      	cmp	r3, #20
 801166a:	f040 8171 	bne.w	8011950 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011670:	88db      	ldrh	r3, [r3, #6]
 8011672:	b29b      	uxth	r3, r3
 8011674:	4618      	mov	r0, r3
 8011676:	f7f6 ff49 	bl	800850c <lwip_htons>
 801167a:	4603      	mov	r3, r0
 801167c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011680:	b29b      	uxth	r3, r3
 8011682:	00db      	lsls	r3, r3, #3
 8011684:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011688:	885b      	ldrh	r3, [r3, #2]
 801168a:	b29b      	uxth	r3, r3
 801168c:	4618      	mov	r0, r3
 801168e:	f7f6 ff3d 	bl	800850c <lwip_htons>
 8011692:	4603      	mov	r3, r0
 8011694:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	f003 030f 	and.w	r3, r3, #15
 801169e:	b2db      	uxtb	r3, r3
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80116a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80116ae:	429a      	cmp	r2, r3
 80116b0:	f0c0 8150 	bcc.w	8011954 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80116b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80116bc:	1ad3      	subs	r3, r2, r3
 80116be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7f8 fae9 	bl	8009c98 <pbuf_clen>
 80116c6:	4603      	mov	r3, r0
 80116c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80116ca:	4b8c      	ldr	r3, [pc, #560]	; (80118fc <ip4_reass+0x2b0>)
 80116cc:	881b      	ldrh	r3, [r3, #0]
 80116ce:	461a      	mov	r2, r3
 80116d0:	8c3b      	ldrh	r3, [r7, #32]
 80116d2:	4413      	add	r3, r2
 80116d4:	2b0a      	cmp	r3, #10
 80116d6:	dd10      	ble.n	80116fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80116d8:	8c3b      	ldrh	r3, [r7, #32]
 80116da:	4619      	mov	r1, r3
 80116dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116de:	f7ff fd81 	bl	80111e4 <ip_reass_remove_oldest_datagram>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f000 8137 	beq.w	8011958 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80116ea:	4b84      	ldr	r3, [pc, #528]	; (80118fc <ip4_reass+0x2b0>)
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	461a      	mov	r2, r3
 80116f0:	8c3b      	ldrh	r3, [r7, #32]
 80116f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80116f4:	2b0a      	cmp	r3, #10
 80116f6:	f300 812f 	bgt.w	8011958 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80116fa:	4b81      	ldr	r3, [pc, #516]	; (8011900 <ip4_reass+0x2b4>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011700:	e015      	b.n	801172e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011704:	695a      	ldr	r2, [r3, #20]
 8011706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	429a      	cmp	r2, r3
 801170c:	d10c      	bne.n	8011728 <ip4_reass+0xdc>
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	699a      	ldr	r2, [r3, #24]
 8011712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	429a      	cmp	r2, r3
 8011718:	d106      	bne.n	8011728 <ip4_reass+0xdc>
 801171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171c:	899a      	ldrh	r2, [r3, #12]
 801171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011720:	889b      	ldrh	r3, [r3, #4]
 8011722:	b29b      	uxth	r3, r3
 8011724:	429a      	cmp	r2, r3
 8011726:	d006      	beq.n	8011736 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	633b      	str	r3, [r7, #48]	; 0x30
 801172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011730:	2b00      	cmp	r3, #0
 8011732:	d1e6      	bne.n	8011702 <ip4_reass+0xb6>
 8011734:	e000      	b.n	8011738 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011736:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173a:	2b00      	cmp	r3, #0
 801173c:	d109      	bne.n	8011752 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801173e:	8c3b      	ldrh	r3, [r7, #32]
 8011740:	4619      	mov	r1, r3
 8011742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011744:	f7ff fdb0 	bl	80112a8 <ip_reass_enqueue_new_datagram>
 8011748:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	2b00      	cmp	r3, #0
 801174e:	d11c      	bne.n	801178a <ip4_reass+0x13e>
      goto nullreturn;
 8011750:	e105      	b.n	801195e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011754:	88db      	ldrh	r3, [r3, #6]
 8011756:	b29b      	uxth	r3, r3
 8011758:	4618      	mov	r0, r3
 801175a:	f7f6 fed7 	bl	800850c <lwip_htons>
 801175e:	4603      	mov	r3, r0
 8011760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011764:	2b00      	cmp	r3, #0
 8011766:	d110      	bne.n	801178a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176a:	89db      	ldrh	r3, [r3, #14]
 801176c:	4618      	mov	r0, r3
 801176e:	f7f6 fecd 	bl	800850c <lwip_htons>
 8011772:	4603      	mov	r3, r0
 8011774:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011778:	2b00      	cmp	r3, #0
 801177a:	d006      	beq.n	801178a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177e:	3308      	adds	r3, #8
 8011780:	2214      	movs	r2, #20
 8011782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011784:	4618      	mov	r0, r3
 8011786:	f000 ff64 	bl	8012652 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178c:	88db      	ldrh	r3, [r3, #6]
 801178e:	b29b      	uxth	r3, r3
 8011790:	f003 0320 	and.w	r3, r3, #32
 8011794:	2b00      	cmp	r3, #0
 8011796:	bf0c      	ite	eq
 8011798:	2301      	moveq	r3, #1
 801179a:	2300      	movne	r3, #0
 801179c:	b2db      	uxtb	r3, r3
 801179e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00e      	beq.n	80117c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80117a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80117a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117aa:	4413      	add	r3, r2
 80117ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80117ae:	8b7a      	ldrh	r2, [r7, #26]
 80117b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117b2:	429a      	cmp	r2, r3
 80117b4:	f0c0 80a0 	bcc.w	80118f8 <ip4_reass+0x2ac>
 80117b8:	8b7b      	ldrh	r3, [r7, #26]
 80117ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80117be:	4293      	cmp	r3, r2
 80117c0:	f200 809a 	bhi.w	80118f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80117c4:	69fa      	ldr	r2, [r7, #28]
 80117c6:	6879      	ldr	r1, [r7, #4]
 80117c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ca:	f7ff fdd5 	bl	8011378 <ip_reass_chain_frag_into_datagram_and_validate>
 80117ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117d6:	f000 809b 	beq.w	8011910 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80117da:	4b48      	ldr	r3, [pc, #288]	; (80118fc <ip4_reass+0x2b0>)
 80117dc:	881a      	ldrh	r2, [r3, #0]
 80117de:	8c3b      	ldrh	r3, [r7, #32]
 80117e0:	4413      	add	r3, r2
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	4b45      	ldr	r3, [pc, #276]	; (80118fc <ip4_reass+0x2b0>)
 80117e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00d      	beq.n	801180a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80117ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80117f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117f2:	4413      	add	r3, r2
 80117f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80117f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f8:	8a7a      	ldrh	r2, [r7, #18]
 80117fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80117fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fe:	7f9b      	ldrb	r3, [r3, #30]
 8011800:	f043 0301 	orr.w	r3, r3, #1
 8011804:	b2da      	uxtb	r2, r3
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	2b01      	cmp	r3, #1
 801180e:	d171      	bne.n	80118f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011812:	8b9b      	ldrh	r3, [r3, #28]
 8011814:	3314      	adds	r3, #20
 8011816:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	3308      	adds	r3, #8
 801182e:	2214      	movs	r2, #20
 8011830:	4619      	mov	r1, r3
 8011832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011834:	f000 ff0d 	bl	8012652 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011838:	8a3b      	ldrh	r3, [r7, #16]
 801183a:	4618      	mov	r0, r3
 801183c:	f7f6 fe66 	bl	800850c <lwip_htons>
 8011840:	4603      	mov	r3, r0
 8011842:	461a      	mov	r2, r3
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184a:	2200      	movs	r2, #0
 801184c:	719a      	strb	r2, [r3, #6]
 801184e:	2200      	movs	r2, #0
 8011850:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011854:	2200      	movs	r2, #0
 8011856:	729a      	strb	r2, [r3, #10]
 8011858:	2200      	movs	r2, #0
 801185a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011862:	e00d      	b.n	8011880 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801186a:	2114      	movs	r1, #20
 801186c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801186e:	f7f8 f905 	bl	8009a7c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011872:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7f8 fa49 	bl	8009d0c <pbuf_cat>
      r = iprh->next_pbuf;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011882:	2b00      	cmp	r3, #0
 8011884:	d1ee      	bne.n	8011864 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011886:	4b1e      	ldr	r3, [pc, #120]	; (8011900 <ip4_reass+0x2b4>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801188c:	429a      	cmp	r2, r3
 801188e:	d102      	bne.n	8011896 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011890:	2300      	movs	r3, #0
 8011892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011894:	e010      	b.n	80118b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011896:	4b1a      	ldr	r3, [pc, #104]	; (8011900 <ip4_reass+0x2b4>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801189c:	e007      	b.n	80118ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d006      	beq.n	80118b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80118a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d1f4      	bne.n	801189e <ip4_reass+0x252>
 80118b4:	e000      	b.n	80118b8 <ip4_reass+0x26c>
          break;
 80118b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80118b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118bc:	f7ff fd2e 	bl	801131c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7f8 f9e9 	bl	8009c98 <pbuf_clen>
 80118c6:	4603      	mov	r3, r0
 80118c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80118ca:	4b0c      	ldr	r3, [pc, #48]	; (80118fc <ip4_reass+0x2b0>)
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	8c3a      	ldrh	r2, [r7, #32]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d906      	bls.n	80118e2 <ip4_reass+0x296>
 80118d4:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <ip4_reass+0x2b8>)
 80118d6:	f240 229b 	movw	r2, #667	; 0x29b
 80118da:	490b      	ldr	r1, [pc, #44]	; (8011908 <ip4_reass+0x2bc>)
 80118dc:	480b      	ldr	r0, [pc, #44]	; (801190c <ip4_reass+0x2c0>)
 80118de:	f000 fcdd 	bl	801229c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80118e2:	4b06      	ldr	r3, [pc, #24]	; (80118fc <ip4_reass+0x2b0>)
 80118e4:	881a      	ldrh	r2, [r3, #0]
 80118e6:	8c3b      	ldrh	r3, [r7, #32]
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	4b03      	ldr	r3, [pc, #12]	; (80118fc <ip4_reass+0x2b0>)
 80118ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	e038      	b.n	8011966 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80118f4:	2300      	movs	r3, #0
 80118f6:	e036      	b.n	8011966 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80118f8:	bf00      	nop
 80118fa:	e00a      	b.n	8011912 <ip4_reass+0x2c6>
 80118fc:	200085a8 	.word	0x200085a8
 8011900:	200085a4 	.word	0x200085a4
 8011904:	08015704 	.word	0x08015704
 8011908:	08015874 	.word	0x08015874
 801190c:	0801574c 	.word	0x0801574c
    goto nullreturn_ipr;
 8011910:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011914:	2b00      	cmp	r3, #0
 8011916:	d106      	bne.n	8011926 <ip4_reass+0x2da>
 8011918:	4b15      	ldr	r3, [pc, #84]	; (8011970 <ip4_reass+0x324>)
 801191a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801191e:	4915      	ldr	r1, [pc, #84]	; (8011974 <ip4_reass+0x328>)
 8011920:	4815      	ldr	r0, [pc, #84]	; (8011978 <ip4_reass+0x32c>)
 8011922:	f000 fcbb 	bl	801229c <iprintf>
  if (ipr->p == NULL) {
 8011926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d116      	bne.n	801195c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801192e:	4b13      	ldr	r3, [pc, #76]	; (801197c <ip4_reass+0x330>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011934:	429a      	cmp	r2, r3
 8011936:	d006      	beq.n	8011946 <ip4_reass+0x2fa>
 8011938:	4b0d      	ldr	r3, [pc, #52]	; (8011970 <ip4_reass+0x324>)
 801193a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801193e:	4910      	ldr	r1, [pc, #64]	; (8011980 <ip4_reass+0x334>)
 8011940:	480d      	ldr	r0, [pc, #52]	; (8011978 <ip4_reass+0x32c>)
 8011942:	f000 fcab 	bl	801229c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011946:	2100      	movs	r1, #0
 8011948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801194a:	f7ff fce7 	bl	801131c <ip_reass_dequeue_datagram>
 801194e:	e006      	b.n	801195e <ip4_reass+0x312>
    goto nullreturn;
 8011950:	bf00      	nop
 8011952:	e004      	b.n	801195e <ip4_reass+0x312>
    goto nullreturn;
 8011954:	bf00      	nop
 8011956:	e002      	b.n	801195e <ip4_reass+0x312>
      goto nullreturn;
 8011958:	bf00      	nop
 801195a:	e000      	b.n	801195e <ip4_reass+0x312>
  }

nullreturn:
 801195c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7f8 f912 	bl	8009b88 <pbuf_free>
  return NULL;
 8011964:	2300      	movs	r3, #0
}
 8011966:	4618      	mov	r0, r3
 8011968:	3738      	adds	r7, #56	; 0x38
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop
 8011970:	08015704 	.word	0x08015704
 8011974:	08015890 	.word	0x08015890
 8011978:	0801574c 	.word	0x0801574c
 801197c:	200085a4 	.word	0x200085a4
 8011980:	0801589c 	.word	0x0801589c

08011984 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011988:	2005      	movs	r0, #5
 801198a:	f7f7 fa37 	bl	8008dfc <memp_malloc>
 801198e:	4603      	mov	r3, r0
}
 8011990:	4618      	mov	r0, r3
 8011992:	bd80      	pop	{r7, pc}

08011994 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d106      	bne.n	80119b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80119a2:	4b07      	ldr	r3, [pc, #28]	; (80119c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80119a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80119a8:	4906      	ldr	r1, [pc, #24]	; (80119c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80119aa:	4807      	ldr	r0, [pc, #28]	; (80119c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80119ac:	f000 fc76 	bl	801229c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80119b0:	6879      	ldr	r1, [r7, #4]
 80119b2:	2005      	movs	r0, #5
 80119b4:	f7f7 fa92 	bl	8008edc <memp_free>
}
 80119b8:	bf00      	nop
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	08015704 	.word	0x08015704
 80119c4:	080158bc 	.word	0x080158bc
 80119c8:	0801574c 	.word	0x0801574c

080119cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d106      	bne.n	80119ec <ipfrag_free_pbuf_custom+0x20>
 80119de:	4b11      	ldr	r3, [pc, #68]	; (8011a24 <ipfrag_free_pbuf_custom+0x58>)
 80119e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80119e4:	4910      	ldr	r1, [pc, #64]	; (8011a28 <ipfrag_free_pbuf_custom+0x5c>)
 80119e6:	4811      	ldr	r0, [pc, #68]	; (8011a2c <ipfrag_free_pbuf_custom+0x60>)
 80119e8:	f000 fc58 	bl	801229c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80119ec:	68fa      	ldr	r2, [r7, #12]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d006      	beq.n	8011a02 <ipfrag_free_pbuf_custom+0x36>
 80119f4:	4b0b      	ldr	r3, [pc, #44]	; (8011a24 <ipfrag_free_pbuf_custom+0x58>)
 80119f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80119fa:	490d      	ldr	r1, [pc, #52]	; (8011a30 <ipfrag_free_pbuf_custom+0x64>)
 80119fc:	480b      	ldr	r0, [pc, #44]	; (8011a2c <ipfrag_free_pbuf_custom+0x60>)
 80119fe:	f000 fc4d 	bl	801229c <iprintf>
  if (pcr->original != NULL) {
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	695b      	ldr	r3, [r3, #20]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d004      	beq.n	8011a14 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	695b      	ldr	r3, [r3, #20]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7f8 f8ba 	bl	8009b88 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f7ff ffbd 	bl	8011994 <ip_frag_free_pbuf_custom_ref>
}
 8011a1a:	bf00      	nop
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	08015704 	.word	0x08015704
 8011a28:	080158c8 	.word	0x080158c8
 8011a2c:	0801574c 	.word	0x0801574c
 8011a30:	080158d4 	.word	0x080158d4

08011a34 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b094      	sub	sp, #80	; 0x50
 8011a38:	af02      	add	r7, sp, #8
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011a40:	2300      	movs	r3, #0
 8011a42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011a4a:	3b14      	subs	r3, #20
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	da00      	bge.n	8011a52 <ip4_frag+0x1e>
 8011a50:	3307      	adds	r3, #7
 8011a52:	10db      	asrs	r3, r3, #3
 8011a54:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011a56:	2314      	movs	r3, #20
 8011a58:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a62:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	f003 030f 	and.w	r3, r3, #15
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2b14      	cmp	r3, #20
 8011a74:	d002      	beq.n	8011a7c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011a76:	f06f 0305 	mvn.w	r3, #5
 8011a7a:	e110      	b.n	8011c9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	895b      	ldrh	r3, [r3, #10]
 8011a80:	2b13      	cmp	r3, #19
 8011a82:	d809      	bhi.n	8011a98 <ip4_frag+0x64>
 8011a84:	4b88      	ldr	r3, [pc, #544]	; (8011ca8 <ip4_frag+0x274>)
 8011a86:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011a8a:	4988      	ldr	r1, [pc, #544]	; (8011cac <ip4_frag+0x278>)
 8011a8c:	4888      	ldr	r0, [pc, #544]	; (8011cb0 <ip4_frag+0x27c>)
 8011a8e:	f000 fc05 	bl	801229c <iprintf>
 8011a92:	f06f 0305 	mvn.w	r3, #5
 8011a96:	e102      	b.n	8011c9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9a:	88db      	ldrh	r3, [r3, #6]
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7f6 fd34 	bl	800850c <lwip_htons>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011aa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011aaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011aae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011ab2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	891b      	ldrh	r3, [r3, #8]
 8011abe:	3b14      	subs	r3, #20
 8011ac0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011ac4:	e0e1      	b.n	8011c8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011ac6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ac8:	00db      	lsls	r3, r3, #3
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	bf28      	it	cs
 8011ad4:	4613      	movcs	r3, r2
 8011ad6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011ad8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011adc:	2114      	movs	r1, #20
 8011ade:	200e      	movs	r0, #14
 8011ae0:	f7f7 fd6e 	bl	80095c0 <pbuf_alloc>
 8011ae4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f000 80d5 	beq.w	8011c98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	895b      	ldrh	r3, [r3, #10]
 8011af2:	2b13      	cmp	r3, #19
 8011af4:	d806      	bhi.n	8011b04 <ip4_frag+0xd0>
 8011af6:	4b6c      	ldr	r3, [pc, #432]	; (8011ca8 <ip4_frag+0x274>)
 8011af8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011afc:	496d      	ldr	r1, [pc, #436]	; (8011cb4 <ip4_frag+0x280>)
 8011afe:	486c      	ldr	r0, [pc, #432]	; (8011cb0 <ip4_frag+0x27c>)
 8011b00:	f000 fbcc 	bl	801229c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	2214      	movs	r2, #20
 8011b0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f000 fda0 	bl	8012652 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011b18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011b1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011b1e:	e064      	b.n	8011bea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	895a      	ldrh	r2, [r3, #10]
 8011b24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b26:	1ad3      	subs	r3, r2, r3
 8011b28:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	895b      	ldrh	r3, [r3, #10]
 8011b2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d906      	bls.n	8011b42 <ip4_frag+0x10e>
 8011b34:	4b5c      	ldr	r3, [pc, #368]	; (8011ca8 <ip4_frag+0x274>)
 8011b36:	f240 322d 	movw	r2, #813	; 0x32d
 8011b3a:	495f      	ldr	r1, [pc, #380]	; (8011cb8 <ip4_frag+0x284>)
 8011b3c:	485c      	ldr	r0, [pc, #368]	; (8011cb0 <ip4_frag+0x27c>)
 8011b3e:	f000 fbad 	bl	801229c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011b42:	8bfa      	ldrh	r2, [r7, #30]
 8011b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	bf28      	it	cs
 8011b4c:	4613      	movcs	r3, r2
 8011b4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011b52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d105      	bne.n	8011b66 <ip4_frag+0x132>
        poff = 0;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	60fb      	str	r3, [r7, #12]
        continue;
 8011b64:	e041      	b.n	8011bea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011b66:	f7ff ff0d 	bl	8011984 <ip_frag_alloc_pbuf_custom_ref>
 8011b6a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d103      	bne.n	8011b7a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b74:	f7f8 f808 	bl	8009b88 <pbuf_free>
        goto memerr;
 8011b78:	e08f      	b.n	8011c9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011b7a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011b80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b82:	4413      	add	r3, r2
 8011b84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011b88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011b8c:	9201      	str	r2, [sp, #4]
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	4603      	mov	r3, r0
 8011b92:	2241      	movs	r2, #65	; 0x41
 8011b94:	2000      	movs	r0, #0
 8011b96:	f7f7 fe3d 	bl	8009814 <pbuf_alloced_custom>
 8011b9a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d106      	bne.n	8011bb0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011ba2:	69b8      	ldr	r0, [r7, #24]
 8011ba4:	f7ff fef6 	bl	8011994 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011baa:	f7f7 ffed 	bl	8009b88 <pbuf_free>
        goto memerr;
 8011bae:	e074      	b.n	8011c9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011bb0:	68f8      	ldr	r0, [r7, #12]
 8011bb2:	f7f8 f889 	bl	8009cc8 <pbuf_ref>
      pcr->original = p;
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	4a3f      	ldr	r2, [pc, #252]	; (8011cbc <ip4_frag+0x288>)
 8011bc0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011bc2:	6979      	ldr	r1, [r7, #20]
 8011bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bc6:	f7f8 f8a1 	bl	8009d0c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011bca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011bce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011bd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d004      	beq.n	8011bea <ip4_frag+0x1b6>
        poff = 0;
 8011be0:	2300      	movs	r3, #0
 8011be2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011bea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d196      	bne.n	8011b20 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011bf2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011bf4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011bf8:	4413      	add	r3, r2
 8011bfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c00:	f1a3 0213 	sub.w	r2, r3, #19
 8011c04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	bfcc      	ite	gt
 8011c0c:	2301      	movgt	r3, #1
 8011c0e:	2300      	movle	r3, #0
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d002      	beq.n	8011c2a <ip4_frag+0x1f6>
 8011c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d003      	beq.n	8011c32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011c2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011c30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011c32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7f6 fc69 	bl	800850c <lwip_htons>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011c44:	3314      	adds	r3, #20
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7f6 fc5f 	bl	800850c <lwip_htons>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c58:	2200      	movs	r2, #0
 8011c5a:	729a      	strb	r2, [r3, #10]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	695b      	ldr	r3, [r3, #20]
 8011c64:	687a      	ldr	r2, [r7, #4]
 8011c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c68:	68b8      	ldr	r0, [r7, #8]
 8011c6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c6e:	f7f7 ff8b 	bl	8009b88 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011c72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011c7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011c82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011c84:	4413      	add	r3, r2
 8011c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f47f af19 	bne.w	8011ac6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011c94:	2300      	movs	r3, #0
 8011c96:	e002      	b.n	8011c9e <ip4_frag+0x26a>
      goto memerr;
 8011c98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3748      	adds	r7, #72	; 0x48
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	08015704 	.word	0x08015704
 8011cac:	080158e0 	.word	0x080158e0
 8011cb0:	0801574c 	.word	0x0801574c
 8011cb4:	080158fc 	.word	0x080158fc
 8011cb8:	0801591c 	.word	0x0801591c
 8011cbc:	080119cd 	.word	0x080119cd

08011cc0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011cca:	230e      	movs	r3, #14
 8011ccc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	895b      	ldrh	r3, [r3, #10]
 8011cd2:	2b0e      	cmp	r3, #14
 8011cd4:	d96e      	bls.n	8011db4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	7bdb      	ldrb	r3, [r3, #15]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	7b1a      	ldrb	r2, [r3, #12]
 8011cf6:	7b5b      	ldrb	r3, [r3, #13]
 8011cf8:	021b      	lsls	r3, r3, #8
 8011cfa:	4313      	orrs	r3, r2
 8011cfc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 0301 	and.w	r3, r3, #1
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d023      	beq.n	8011d52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d10f      	bne.n	8011d32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	785b      	ldrb	r3, [r3, #1]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d11b      	bne.n	8011d52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011d1e:	2b5e      	cmp	r3, #94	; 0x5e
 8011d20:	d117      	bne.n	8011d52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	7b5b      	ldrb	r3, [r3, #13]
 8011d26:	f043 0310 	orr.w	r3, r3, #16
 8011d2a:	b2da      	uxtb	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	735a      	strb	r2, [r3, #13]
 8011d30:	e00f      	b.n	8011d52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	2206      	movs	r2, #6
 8011d36:	4928      	ldr	r1, [pc, #160]	; (8011dd8 <ethernet_input+0x118>)
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f000 fbf5 	bl	8012528 <memcmp>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d106      	bne.n	8011d52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	7b5b      	ldrb	r3, [r3, #13]
 8011d48:	f043 0308 	orr.w	r3, r3, #8
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011d52:	89fb      	ldrh	r3, [r7, #14]
 8011d54:	2b08      	cmp	r3, #8
 8011d56:	d003      	beq.n	8011d60 <ethernet_input+0xa0>
 8011d58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011d5c:	d014      	beq.n	8011d88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011d5e:	e032      	b.n	8011dc6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d66:	f003 0308 	and.w	r3, r3, #8
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d024      	beq.n	8011db8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011d6e:	8afb      	ldrh	r3, [r7, #22]
 8011d70:	4619      	mov	r1, r3
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f7f7 fe82 	bl	8009a7c <pbuf_remove_header>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d11e      	bne.n	8011dbc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011d7e:	6839      	ldr	r1, [r7, #0]
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7fe ff21 	bl	8010bc8 <ip4_input>
      break;
 8011d86:	e013      	b.n	8011db0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d8e:	f003 0308 	and.w	r3, r3, #8
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d014      	beq.n	8011dc0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011d96:	8afb      	ldrh	r3, [r7, #22]
 8011d98:	4619      	mov	r1, r3
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7f7 fe6e 	bl	8009a7c <pbuf_remove_header>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d10e      	bne.n	8011dc4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011da6:	6839      	ldr	r1, [r7, #0]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7fe f8c1 	bl	800ff30 <etharp_input>
      break;
 8011dae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011db0:	2300      	movs	r3, #0
 8011db2:	e00c      	b.n	8011dce <ethernet_input+0x10e>
    goto free_and_return;
 8011db4:	bf00      	nop
 8011db6:	e006      	b.n	8011dc6 <ethernet_input+0x106>
        goto free_and_return;
 8011db8:	bf00      	nop
 8011dba:	e004      	b.n	8011dc6 <ethernet_input+0x106>
        goto free_and_return;
 8011dbc:	bf00      	nop
 8011dbe:	e002      	b.n	8011dc6 <ethernet_input+0x106>
        goto free_and_return;
 8011dc0:	bf00      	nop
 8011dc2:	e000      	b.n	8011dc6 <ethernet_input+0x106>
        goto free_and_return;
 8011dc4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f7f7 fede 	bl	8009b88 <pbuf_free>
  return ERR_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3718      	adds	r7, #24
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	08015ae0 	.word	0x08015ae0

08011ddc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b086      	sub	sp, #24
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
 8011de8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011dea:	8c3b      	ldrh	r3, [r7, #32]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7f6 fb8d 	bl	800850c <lwip_htons>
 8011df2:	4603      	mov	r3, r0
 8011df4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011df6:	210e      	movs	r1, #14
 8011df8:	68b8      	ldr	r0, [r7, #8]
 8011dfa:	f7f7 fe2f 	bl	8009a5c <pbuf_add_header>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d125      	bne.n	8011e50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	8afa      	ldrh	r2, [r7, #22]
 8011e0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	2206      	movs	r2, #6
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	4618      	mov	r0, r3
 8011e18:	f000 fc1b 	bl	8012652 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	3306      	adds	r3, #6
 8011e20:	2206      	movs	r2, #6
 8011e22:	6879      	ldr	r1, [r7, #4]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f000 fc14 	bl	8012652 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011e30:	2b06      	cmp	r3, #6
 8011e32:	d006      	beq.n	8011e42 <ethernet_output+0x66>
 8011e34:	4b0a      	ldr	r3, [pc, #40]	; (8011e60 <ethernet_output+0x84>)
 8011e36:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011e3a:	490a      	ldr	r1, [pc, #40]	; (8011e64 <ethernet_output+0x88>)
 8011e3c:	480a      	ldr	r0, [pc, #40]	; (8011e68 <ethernet_output+0x8c>)
 8011e3e:	f000 fa2d 	bl	801229c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	699b      	ldr	r3, [r3, #24]
 8011e46:	68b9      	ldr	r1, [r7, #8]
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	4798      	blx	r3
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	e002      	b.n	8011e56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011e50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011e52:	f06f 0301 	mvn.w	r3, #1
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3718      	adds	r7, #24
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	0801592c 	.word	0x0801592c
 8011e64:	08015964 	.word	0x08015964
 8011e68:	08015998 	.word	0x08015998

08011e6c <RB_Init>:

#include "../Utils/ring_buffer.h"


uint8_t RB_Init(RingBuf_t *pRingBuf, uint16_t size)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	460b      	mov	r3, r1
 8011e76:	807b      	strh	r3, [r7, #2]
  if(size & (size-1))
 8011e78:	887a      	ldrh	r2, [r7, #2]
 8011e7a:	887b      	ldrh	r3, [r7, #2]
 8011e7c:	3b01      	subs	r3, #1
 8011e7e:	4013      	ands	r3, r2
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <RB_Init+0x1c>
    return 1;
 8011e84:	2301      	movs	r3, #1
 8011e86:	e01b      	b.n	8011ec0 <RB_Init+0x54>

  pRingBuf->size = size;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	887a      	ldrh	r2, [r7, #2]
 8011e8c:	801a      	strh	r2, [r3, #0]
  pRingBuf->write= 0;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2200      	movs	r2, #0
 8011e92:	805a      	strh	r2, [r3, #2]
  pRingBuf->read= 0;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	809a      	strh	r2, [r3, #4]
  pRingBuf->data = malloc(size);
 8011e9a:	887b      	ldrh	r3, [r7, #2]
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f000 f837 	bl	8011f10 <malloc>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	609a      	str	r2, [r3, #8]
  assert(pRingBuf->data);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d105      	bne.n	8011ebe <RB_Init+0x52>
 8011eb2:	4b05      	ldr	r3, [pc, #20]	; (8011ec8 <RB_Init+0x5c>)
 8011eb4:	4a05      	ldr	r2, [pc, #20]	; (8011ecc <RB_Init+0x60>)
 8011eb6:	2114      	movs	r1, #20
 8011eb8:	4805      	ldr	r0, [pc, #20]	; (8011ed0 <RB_Init+0x64>)
 8011eba:	f000 f80b 	bl	8011ed4 <__assert_func>

  return 0;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	080159c0 	.word	0x080159c0
 8011ecc:	08015af0 	.word	0x08015af0
 8011ed0:	080159d0 	.word	0x080159d0

08011ed4 <__assert_func>:
 8011ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ed6:	4614      	mov	r4, r2
 8011ed8:	461a      	mov	r2, r3
 8011eda:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <__assert_func+0x2c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4605      	mov	r5, r0
 8011ee0:	68d8      	ldr	r0, [r3, #12]
 8011ee2:	b14c      	cbz	r4, 8011ef8 <__assert_func+0x24>
 8011ee4:	4b07      	ldr	r3, [pc, #28]	; (8011f04 <__assert_func+0x30>)
 8011ee6:	9100      	str	r1, [sp, #0]
 8011ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011eec:	4906      	ldr	r1, [pc, #24]	; (8011f08 <__assert_func+0x34>)
 8011eee:	462b      	mov	r3, r5
 8011ef0:	f000 f9a4 	bl	801223c <fiprintf>
 8011ef4:	f000 fbbb 	bl	801266e <abort>
 8011ef8:	4b04      	ldr	r3, [pc, #16]	; (8011f0c <__assert_func+0x38>)
 8011efa:	461c      	mov	r4, r3
 8011efc:	e7f3      	b.n	8011ee6 <__assert_func+0x12>
 8011efe:	bf00      	nop
 8011f00:	20000084 	.word	0x20000084
 8011f04:	08015af8 	.word	0x08015af8
 8011f08:	08015b05 	.word	0x08015b05
 8011f0c:	08015b33 	.word	0x08015b33

08011f10 <malloc>:
 8011f10:	4b02      	ldr	r3, [pc, #8]	; (8011f1c <malloc+0xc>)
 8011f12:	4601      	mov	r1, r0
 8011f14:	6818      	ldr	r0, [r3, #0]
 8011f16:	f000 b823 	b.w	8011f60 <_malloc_r>
 8011f1a:	bf00      	nop
 8011f1c:	20000084 	.word	0x20000084

08011f20 <sbrk_aligned>:
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	4e0e      	ldr	r6, [pc, #56]	; (8011f5c <sbrk_aligned+0x3c>)
 8011f24:	460c      	mov	r4, r1
 8011f26:	6831      	ldr	r1, [r6, #0]
 8011f28:	4605      	mov	r5, r0
 8011f2a:	b911      	cbnz	r1, 8011f32 <sbrk_aligned+0x12>
 8011f2c:	f000 fb48 	bl	80125c0 <_sbrk_r>
 8011f30:	6030      	str	r0, [r6, #0]
 8011f32:	4621      	mov	r1, r4
 8011f34:	4628      	mov	r0, r5
 8011f36:	f000 fb43 	bl	80125c0 <_sbrk_r>
 8011f3a:	1c43      	adds	r3, r0, #1
 8011f3c:	d00a      	beq.n	8011f54 <sbrk_aligned+0x34>
 8011f3e:	1cc4      	adds	r4, r0, #3
 8011f40:	f024 0403 	bic.w	r4, r4, #3
 8011f44:	42a0      	cmp	r0, r4
 8011f46:	d007      	beq.n	8011f58 <sbrk_aligned+0x38>
 8011f48:	1a21      	subs	r1, r4, r0
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	f000 fb38 	bl	80125c0 <_sbrk_r>
 8011f50:	3001      	adds	r0, #1
 8011f52:	d101      	bne.n	8011f58 <sbrk_aligned+0x38>
 8011f54:	f04f 34ff 	mov.w	r4, #4294967295
 8011f58:	4620      	mov	r0, r4
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
 8011f5c:	200085b0 	.word	0x200085b0

08011f60 <_malloc_r>:
 8011f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f64:	1ccd      	adds	r5, r1, #3
 8011f66:	f025 0503 	bic.w	r5, r5, #3
 8011f6a:	3508      	adds	r5, #8
 8011f6c:	2d0c      	cmp	r5, #12
 8011f6e:	bf38      	it	cc
 8011f70:	250c      	movcc	r5, #12
 8011f72:	2d00      	cmp	r5, #0
 8011f74:	4607      	mov	r7, r0
 8011f76:	db01      	blt.n	8011f7c <_malloc_r+0x1c>
 8011f78:	42a9      	cmp	r1, r5
 8011f7a:	d905      	bls.n	8011f88 <_malloc_r+0x28>
 8011f7c:	230c      	movs	r3, #12
 8011f7e:	603b      	str	r3, [r7, #0]
 8011f80:	2600      	movs	r6, #0
 8011f82:	4630      	mov	r0, r6
 8011f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801205c <_malloc_r+0xfc>
 8011f8c:	f000 f868 	bl	8012060 <__malloc_lock>
 8011f90:	f8d8 3000 	ldr.w	r3, [r8]
 8011f94:	461c      	mov	r4, r3
 8011f96:	bb5c      	cbnz	r4, 8011ff0 <_malloc_r+0x90>
 8011f98:	4629      	mov	r1, r5
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	f7ff ffc0 	bl	8011f20 <sbrk_aligned>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	d155      	bne.n	8012052 <_malloc_r+0xf2>
 8011fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8011faa:	4626      	mov	r6, r4
 8011fac:	2e00      	cmp	r6, #0
 8011fae:	d145      	bne.n	801203c <_malloc_r+0xdc>
 8011fb0:	2c00      	cmp	r4, #0
 8011fb2:	d048      	beq.n	8012046 <_malloc_r+0xe6>
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	4638      	mov	r0, r7
 8011fba:	eb04 0903 	add.w	r9, r4, r3
 8011fbe:	f000 faff 	bl	80125c0 <_sbrk_r>
 8011fc2:	4581      	cmp	r9, r0
 8011fc4:	d13f      	bne.n	8012046 <_malloc_r+0xe6>
 8011fc6:	6821      	ldr	r1, [r4, #0]
 8011fc8:	1a6d      	subs	r5, r5, r1
 8011fca:	4629      	mov	r1, r5
 8011fcc:	4638      	mov	r0, r7
 8011fce:	f7ff ffa7 	bl	8011f20 <sbrk_aligned>
 8011fd2:	3001      	adds	r0, #1
 8011fd4:	d037      	beq.n	8012046 <_malloc_r+0xe6>
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	442b      	add	r3, r5
 8011fda:	6023      	str	r3, [r4, #0]
 8011fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d038      	beq.n	8012056 <_malloc_r+0xf6>
 8011fe4:	685a      	ldr	r2, [r3, #4]
 8011fe6:	42a2      	cmp	r2, r4
 8011fe8:	d12b      	bne.n	8012042 <_malloc_r+0xe2>
 8011fea:	2200      	movs	r2, #0
 8011fec:	605a      	str	r2, [r3, #4]
 8011fee:	e00f      	b.n	8012010 <_malloc_r+0xb0>
 8011ff0:	6822      	ldr	r2, [r4, #0]
 8011ff2:	1b52      	subs	r2, r2, r5
 8011ff4:	d41f      	bmi.n	8012036 <_malloc_r+0xd6>
 8011ff6:	2a0b      	cmp	r2, #11
 8011ff8:	d917      	bls.n	801202a <_malloc_r+0xca>
 8011ffa:	1961      	adds	r1, r4, r5
 8011ffc:	42a3      	cmp	r3, r4
 8011ffe:	6025      	str	r5, [r4, #0]
 8012000:	bf18      	it	ne
 8012002:	6059      	strne	r1, [r3, #4]
 8012004:	6863      	ldr	r3, [r4, #4]
 8012006:	bf08      	it	eq
 8012008:	f8c8 1000 	streq.w	r1, [r8]
 801200c:	5162      	str	r2, [r4, r5]
 801200e:	604b      	str	r3, [r1, #4]
 8012010:	4638      	mov	r0, r7
 8012012:	f104 060b 	add.w	r6, r4, #11
 8012016:	f000 f829 	bl	801206c <__malloc_unlock>
 801201a:	f026 0607 	bic.w	r6, r6, #7
 801201e:	1d23      	adds	r3, r4, #4
 8012020:	1af2      	subs	r2, r6, r3
 8012022:	d0ae      	beq.n	8011f82 <_malloc_r+0x22>
 8012024:	1b9b      	subs	r3, r3, r6
 8012026:	50a3      	str	r3, [r4, r2]
 8012028:	e7ab      	b.n	8011f82 <_malloc_r+0x22>
 801202a:	42a3      	cmp	r3, r4
 801202c:	6862      	ldr	r2, [r4, #4]
 801202e:	d1dd      	bne.n	8011fec <_malloc_r+0x8c>
 8012030:	f8c8 2000 	str.w	r2, [r8]
 8012034:	e7ec      	b.n	8012010 <_malloc_r+0xb0>
 8012036:	4623      	mov	r3, r4
 8012038:	6864      	ldr	r4, [r4, #4]
 801203a:	e7ac      	b.n	8011f96 <_malloc_r+0x36>
 801203c:	4634      	mov	r4, r6
 801203e:	6876      	ldr	r6, [r6, #4]
 8012040:	e7b4      	b.n	8011fac <_malloc_r+0x4c>
 8012042:	4613      	mov	r3, r2
 8012044:	e7cc      	b.n	8011fe0 <_malloc_r+0x80>
 8012046:	230c      	movs	r3, #12
 8012048:	603b      	str	r3, [r7, #0]
 801204a:	4638      	mov	r0, r7
 801204c:	f000 f80e 	bl	801206c <__malloc_unlock>
 8012050:	e797      	b.n	8011f82 <_malloc_r+0x22>
 8012052:	6025      	str	r5, [r4, #0]
 8012054:	e7dc      	b.n	8012010 <_malloc_r+0xb0>
 8012056:	605b      	str	r3, [r3, #4]
 8012058:	deff      	udf	#255	; 0xff
 801205a:	bf00      	nop
 801205c:	200085ac 	.word	0x200085ac

08012060 <__malloc_lock>:
 8012060:	4801      	ldr	r0, [pc, #4]	; (8012068 <__malloc_lock+0x8>)
 8012062:	f000 baf4 	b.w	801264e <__retarget_lock_acquire_recursive>
 8012066:	bf00      	nop
 8012068:	200086f4 	.word	0x200086f4

0801206c <__malloc_unlock>:
 801206c:	4801      	ldr	r0, [pc, #4]	; (8012074 <__malloc_unlock+0x8>)
 801206e:	f000 baef 	b.w	8012650 <__retarget_lock_release_recursive>
 8012072:	bf00      	nop
 8012074:	200086f4 	.word	0x200086f4

08012078 <rand>:
 8012078:	4b16      	ldr	r3, [pc, #88]	; (80120d4 <rand+0x5c>)
 801207a:	b510      	push	{r4, lr}
 801207c:	681c      	ldr	r4, [r3, #0]
 801207e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012080:	b9b3      	cbnz	r3, 80120b0 <rand+0x38>
 8012082:	2018      	movs	r0, #24
 8012084:	f7ff ff44 	bl	8011f10 <malloc>
 8012088:	4602      	mov	r2, r0
 801208a:	6320      	str	r0, [r4, #48]	; 0x30
 801208c:	b920      	cbnz	r0, 8012098 <rand+0x20>
 801208e:	4b12      	ldr	r3, [pc, #72]	; (80120d8 <rand+0x60>)
 8012090:	4812      	ldr	r0, [pc, #72]	; (80120dc <rand+0x64>)
 8012092:	2152      	movs	r1, #82	; 0x52
 8012094:	f7ff ff1e 	bl	8011ed4 <__assert_func>
 8012098:	4911      	ldr	r1, [pc, #68]	; (80120e0 <rand+0x68>)
 801209a:	4b12      	ldr	r3, [pc, #72]	; (80120e4 <rand+0x6c>)
 801209c:	e9c0 1300 	strd	r1, r3, [r0]
 80120a0:	4b11      	ldr	r3, [pc, #68]	; (80120e8 <rand+0x70>)
 80120a2:	6083      	str	r3, [r0, #8]
 80120a4:	230b      	movs	r3, #11
 80120a6:	8183      	strh	r3, [r0, #12]
 80120a8:	2100      	movs	r1, #0
 80120aa:	2001      	movs	r0, #1
 80120ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80120b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80120b2:	480e      	ldr	r0, [pc, #56]	; (80120ec <rand+0x74>)
 80120b4:	690b      	ldr	r3, [r1, #16]
 80120b6:	694c      	ldr	r4, [r1, #20]
 80120b8:	4a0d      	ldr	r2, [pc, #52]	; (80120f0 <rand+0x78>)
 80120ba:	4358      	muls	r0, r3
 80120bc:	fb02 0004 	mla	r0, r2, r4, r0
 80120c0:	fba3 3202 	umull	r3, r2, r3, r2
 80120c4:	3301      	adds	r3, #1
 80120c6:	eb40 0002 	adc.w	r0, r0, r2
 80120ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80120ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80120d2:	bd10      	pop	{r4, pc}
 80120d4:	20000084 	.word	0x20000084
 80120d8:	08015b34 	.word	0x08015b34
 80120dc:	08015b4b 	.word	0x08015b4b
 80120e0:	abcd330e 	.word	0xabcd330e
 80120e4:	e66d1234 	.word	0xe66d1234
 80120e8:	0005deec 	.word	0x0005deec
 80120ec:	5851f42d 	.word	0x5851f42d
 80120f0:	4c957f2d 	.word	0x4c957f2d

080120f4 <std>:
 80120f4:	2300      	movs	r3, #0
 80120f6:	b510      	push	{r4, lr}
 80120f8:	4604      	mov	r4, r0
 80120fa:	e9c0 3300 	strd	r3, r3, [r0]
 80120fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012102:	6083      	str	r3, [r0, #8]
 8012104:	8181      	strh	r1, [r0, #12]
 8012106:	6643      	str	r3, [r0, #100]	; 0x64
 8012108:	81c2      	strh	r2, [r0, #14]
 801210a:	6183      	str	r3, [r0, #24]
 801210c:	4619      	mov	r1, r3
 801210e:	2208      	movs	r2, #8
 8012110:	305c      	adds	r0, #92	; 0x5c
 8012112:	f000 fa19 	bl	8012548 <memset>
 8012116:	4b0d      	ldr	r3, [pc, #52]	; (801214c <std+0x58>)
 8012118:	6263      	str	r3, [r4, #36]	; 0x24
 801211a:	4b0d      	ldr	r3, [pc, #52]	; (8012150 <std+0x5c>)
 801211c:	62a3      	str	r3, [r4, #40]	; 0x28
 801211e:	4b0d      	ldr	r3, [pc, #52]	; (8012154 <std+0x60>)
 8012120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012122:	4b0d      	ldr	r3, [pc, #52]	; (8012158 <std+0x64>)
 8012124:	6323      	str	r3, [r4, #48]	; 0x30
 8012126:	4b0d      	ldr	r3, [pc, #52]	; (801215c <std+0x68>)
 8012128:	6224      	str	r4, [r4, #32]
 801212a:	429c      	cmp	r4, r3
 801212c:	d006      	beq.n	801213c <std+0x48>
 801212e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012132:	4294      	cmp	r4, r2
 8012134:	d002      	beq.n	801213c <std+0x48>
 8012136:	33d0      	adds	r3, #208	; 0xd0
 8012138:	429c      	cmp	r4, r3
 801213a:	d105      	bne.n	8012148 <std+0x54>
 801213c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012144:	f000 ba82 	b.w	801264c <__retarget_lock_init_recursive>
 8012148:	bd10      	pop	{r4, pc}
 801214a:	bf00      	nop
 801214c:	08012379 	.word	0x08012379
 8012150:	0801239b 	.word	0x0801239b
 8012154:	080123d3 	.word	0x080123d3
 8012158:	080123f7 	.word	0x080123f7
 801215c:	200085b4 	.word	0x200085b4

08012160 <stdio_exit_handler>:
 8012160:	4a02      	ldr	r2, [pc, #8]	; (801216c <stdio_exit_handler+0xc>)
 8012162:	4903      	ldr	r1, [pc, #12]	; (8012170 <stdio_exit_handler+0x10>)
 8012164:	4803      	ldr	r0, [pc, #12]	; (8012174 <stdio_exit_handler+0x14>)
 8012166:	f000 b87b 	b.w	8012260 <_fwalk_sglue>
 801216a:	bf00      	nop
 801216c:	2000002c 	.word	0x2000002c
 8012170:	08012dc9 	.word	0x08012dc9
 8012174:	20000038 	.word	0x20000038

08012178 <cleanup_stdio>:
 8012178:	6841      	ldr	r1, [r0, #4]
 801217a:	4b0c      	ldr	r3, [pc, #48]	; (80121ac <cleanup_stdio+0x34>)
 801217c:	4299      	cmp	r1, r3
 801217e:	b510      	push	{r4, lr}
 8012180:	4604      	mov	r4, r0
 8012182:	d001      	beq.n	8012188 <cleanup_stdio+0x10>
 8012184:	f000 fe20 	bl	8012dc8 <_fflush_r>
 8012188:	68a1      	ldr	r1, [r4, #8]
 801218a:	4b09      	ldr	r3, [pc, #36]	; (80121b0 <cleanup_stdio+0x38>)
 801218c:	4299      	cmp	r1, r3
 801218e:	d002      	beq.n	8012196 <cleanup_stdio+0x1e>
 8012190:	4620      	mov	r0, r4
 8012192:	f000 fe19 	bl	8012dc8 <_fflush_r>
 8012196:	68e1      	ldr	r1, [r4, #12]
 8012198:	4b06      	ldr	r3, [pc, #24]	; (80121b4 <cleanup_stdio+0x3c>)
 801219a:	4299      	cmp	r1, r3
 801219c:	d004      	beq.n	80121a8 <cleanup_stdio+0x30>
 801219e:	4620      	mov	r0, r4
 80121a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121a4:	f000 be10 	b.w	8012dc8 <_fflush_r>
 80121a8:	bd10      	pop	{r4, pc}
 80121aa:	bf00      	nop
 80121ac:	200085b4 	.word	0x200085b4
 80121b0:	2000861c 	.word	0x2000861c
 80121b4:	20008684 	.word	0x20008684

080121b8 <global_stdio_init.part.0>:
 80121b8:	b510      	push	{r4, lr}
 80121ba:	4b0b      	ldr	r3, [pc, #44]	; (80121e8 <global_stdio_init.part.0+0x30>)
 80121bc:	4c0b      	ldr	r4, [pc, #44]	; (80121ec <global_stdio_init.part.0+0x34>)
 80121be:	4a0c      	ldr	r2, [pc, #48]	; (80121f0 <global_stdio_init.part.0+0x38>)
 80121c0:	601a      	str	r2, [r3, #0]
 80121c2:	4620      	mov	r0, r4
 80121c4:	2200      	movs	r2, #0
 80121c6:	2104      	movs	r1, #4
 80121c8:	f7ff ff94 	bl	80120f4 <std>
 80121cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80121d0:	2201      	movs	r2, #1
 80121d2:	2109      	movs	r1, #9
 80121d4:	f7ff ff8e 	bl	80120f4 <std>
 80121d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80121dc:	2202      	movs	r2, #2
 80121de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e2:	2112      	movs	r1, #18
 80121e4:	f7ff bf86 	b.w	80120f4 <std>
 80121e8:	200086ec 	.word	0x200086ec
 80121ec:	200085b4 	.word	0x200085b4
 80121f0:	08012161 	.word	0x08012161

080121f4 <__sfp_lock_acquire>:
 80121f4:	4801      	ldr	r0, [pc, #4]	; (80121fc <__sfp_lock_acquire+0x8>)
 80121f6:	f000 ba2a 	b.w	801264e <__retarget_lock_acquire_recursive>
 80121fa:	bf00      	nop
 80121fc:	200086f5 	.word	0x200086f5

08012200 <__sfp_lock_release>:
 8012200:	4801      	ldr	r0, [pc, #4]	; (8012208 <__sfp_lock_release+0x8>)
 8012202:	f000 ba25 	b.w	8012650 <__retarget_lock_release_recursive>
 8012206:	bf00      	nop
 8012208:	200086f5 	.word	0x200086f5

0801220c <__sinit>:
 801220c:	b510      	push	{r4, lr}
 801220e:	4604      	mov	r4, r0
 8012210:	f7ff fff0 	bl	80121f4 <__sfp_lock_acquire>
 8012214:	6a23      	ldr	r3, [r4, #32]
 8012216:	b11b      	cbz	r3, 8012220 <__sinit+0x14>
 8012218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801221c:	f7ff bff0 	b.w	8012200 <__sfp_lock_release>
 8012220:	4b04      	ldr	r3, [pc, #16]	; (8012234 <__sinit+0x28>)
 8012222:	6223      	str	r3, [r4, #32]
 8012224:	4b04      	ldr	r3, [pc, #16]	; (8012238 <__sinit+0x2c>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1f5      	bne.n	8012218 <__sinit+0xc>
 801222c:	f7ff ffc4 	bl	80121b8 <global_stdio_init.part.0>
 8012230:	e7f2      	b.n	8012218 <__sinit+0xc>
 8012232:	bf00      	nop
 8012234:	08012179 	.word	0x08012179
 8012238:	200086ec 	.word	0x200086ec

0801223c <fiprintf>:
 801223c:	b40e      	push	{r1, r2, r3}
 801223e:	b503      	push	{r0, r1, lr}
 8012240:	4601      	mov	r1, r0
 8012242:	ab03      	add	r3, sp, #12
 8012244:	4805      	ldr	r0, [pc, #20]	; (801225c <fiprintf+0x20>)
 8012246:	f853 2b04 	ldr.w	r2, [r3], #4
 801224a:	6800      	ldr	r0, [r0, #0]
 801224c:	9301      	str	r3, [sp, #4]
 801224e:	f000 fa8b 	bl	8012768 <_vfiprintf_r>
 8012252:	b002      	add	sp, #8
 8012254:	f85d eb04 	ldr.w	lr, [sp], #4
 8012258:	b003      	add	sp, #12
 801225a:	4770      	bx	lr
 801225c:	20000084 	.word	0x20000084

08012260 <_fwalk_sglue>:
 8012260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012264:	4607      	mov	r7, r0
 8012266:	4688      	mov	r8, r1
 8012268:	4614      	mov	r4, r2
 801226a:	2600      	movs	r6, #0
 801226c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012270:	f1b9 0901 	subs.w	r9, r9, #1
 8012274:	d505      	bpl.n	8012282 <_fwalk_sglue+0x22>
 8012276:	6824      	ldr	r4, [r4, #0]
 8012278:	2c00      	cmp	r4, #0
 801227a:	d1f7      	bne.n	801226c <_fwalk_sglue+0xc>
 801227c:	4630      	mov	r0, r6
 801227e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012282:	89ab      	ldrh	r3, [r5, #12]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d907      	bls.n	8012298 <_fwalk_sglue+0x38>
 8012288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801228c:	3301      	adds	r3, #1
 801228e:	d003      	beq.n	8012298 <_fwalk_sglue+0x38>
 8012290:	4629      	mov	r1, r5
 8012292:	4638      	mov	r0, r7
 8012294:	47c0      	blx	r8
 8012296:	4306      	orrs	r6, r0
 8012298:	3568      	adds	r5, #104	; 0x68
 801229a:	e7e9      	b.n	8012270 <_fwalk_sglue+0x10>

0801229c <iprintf>:
 801229c:	b40f      	push	{r0, r1, r2, r3}
 801229e:	b507      	push	{r0, r1, r2, lr}
 80122a0:	4906      	ldr	r1, [pc, #24]	; (80122bc <iprintf+0x20>)
 80122a2:	ab04      	add	r3, sp, #16
 80122a4:	6808      	ldr	r0, [r1, #0]
 80122a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80122aa:	6881      	ldr	r1, [r0, #8]
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	f000 fa5b 	bl	8012768 <_vfiprintf_r>
 80122b2:	b003      	add	sp, #12
 80122b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122b8:	b004      	add	sp, #16
 80122ba:	4770      	bx	lr
 80122bc:	20000084 	.word	0x20000084

080122c0 <_puts_r>:
 80122c0:	6a03      	ldr	r3, [r0, #32]
 80122c2:	b570      	push	{r4, r5, r6, lr}
 80122c4:	6884      	ldr	r4, [r0, #8]
 80122c6:	4605      	mov	r5, r0
 80122c8:	460e      	mov	r6, r1
 80122ca:	b90b      	cbnz	r3, 80122d0 <_puts_r+0x10>
 80122cc:	f7ff ff9e 	bl	801220c <__sinit>
 80122d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122d2:	07db      	lsls	r3, r3, #31
 80122d4:	d405      	bmi.n	80122e2 <_puts_r+0x22>
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	0598      	lsls	r0, r3, #22
 80122da:	d402      	bmi.n	80122e2 <_puts_r+0x22>
 80122dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122de:	f000 f9b6 	bl	801264e <__retarget_lock_acquire_recursive>
 80122e2:	89a3      	ldrh	r3, [r4, #12]
 80122e4:	0719      	lsls	r1, r3, #28
 80122e6:	d513      	bpl.n	8012310 <_puts_r+0x50>
 80122e8:	6923      	ldr	r3, [r4, #16]
 80122ea:	b18b      	cbz	r3, 8012310 <_puts_r+0x50>
 80122ec:	3e01      	subs	r6, #1
 80122ee:	68a3      	ldr	r3, [r4, #8]
 80122f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80122f4:	3b01      	subs	r3, #1
 80122f6:	60a3      	str	r3, [r4, #8]
 80122f8:	b9e9      	cbnz	r1, 8012336 <_puts_r+0x76>
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	da2e      	bge.n	801235c <_puts_r+0x9c>
 80122fe:	4622      	mov	r2, r4
 8012300:	210a      	movs	r1, #10
 8012302:	4628      	mov	r0, r5
 8012304:	f000 f87b 	bl	80123fe <__swbuf_r>
 8012308:	3001      	adds	r0, #1
 801230a:	d007      	beq.n	801231c <_puts_r+0x5c>
 801230c:	250a      	movs	r5, #10
 801230e:	e007      	b.n	8012320 <_puts_r+0x60>
 8012310:	4621      	mov	r1, r4
 8012312:	4628      	mov	r0, r5
 8012314:	f000 f8b0 	bl	8012478 <__swsetup_r>
 8012318:	2800      	cmp	r0, #0
 801231a:	d0e7      	beq.n	80122ec <_puts_r+0x2c>
 801231c:	f04f 35ff 	mov.w	r5, #4294967295
 8012320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012322:	07da      	lsls	r2, r3, #31
 8012324:	d405      	bmi.n	8012332 <_puts_r+0x72>
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	059b      	lsls	r3, r3, #22
 801232a:	d402      	bmi.n	8012332 <_puts_r+0x72>
 801232c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801232e:	f000 f98f 	bl	8012650 <__retarget_lock_release_recursive>
 8012332:	4628      	mov	r0, r5
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	2b00      	cmp	r3, #0
 8012338:	da04      	bge.n	8012344 <_puts_r+0x84>
 801233a:	69a2      	ldr	r2, [r4, #24]
 801233c:	429a      	cmp	r2, r3
 801233e:	dc06      	bgt.n	801234e <_puts_r+0x8e>
 8012340:	290a      	cmp	r1, #10
 8012342:	d004      	beq.n	801234e <_puts_r+0x8e>
 8012344:	6823      	ldr	r3, [r4, #0]
 8012346:	1c5a      	adds	r2, r3, #1
 8012348:	6022      	str	r2, [r4, #0]
 801234a:	7019      	strb	r1, [r3, #0]
 801234c:	e7cf      	b.n	80122ee <_puts_r+0x2e>
 801234e:	4622      	mov	r2, r4
 8012350:	4628      	mov	r0, r5
 8012352:	f000 f854 	bl	80123fe <__swbuf_r>
 8012356:	3001      	adds	r0, #1
 8012358:	d1c9      	bne.n	80122ee <_puts_r+0x2e>
 801235a:	e7df      	b.n	801231c <_puts_r+0x5c>
 801235c:	6823      	ldr	r3, [r4, #0]
 801235e:	250a      	movs	r5, #10
 8012360:	1c5a      	adds	r2, r3, #1
 8012362:	6022      	str	r2, [r4, #0]
 8012364:	701d      	strb	r5, [r3, #0]
 8012366:	e7db      	b.n	8012320 <_puts_r+0x60>

08012368 <puts>:
 8012368:	4b02      	ldr	r3, [pc, #8]	; (8012374 <puts+0xc>)
 801236a:	4601      	mov	r1, r0
 801236c:	6818      	ldr	r0, [r3, #0]
 801236e:	f7ff bfa7 	b.w	80122c0 <_puts_r>
 8012372:	bf00      	nop
 8012374:	20000084 	.word	0x20000084

08012378 <__sread>:
 8012378:	b510      	push	{r4, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012380:	f000 f90c 	bl	801259c <_read_r>
 8012384:	2800      	cmp	r0, #0
 8012386:	bfab      	itete	ge
 8012388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801238a:	89a3      	ldrhlt	r3, [r4, #12]
 801238c:	181b      	addge	r3, r3, r0
 801238e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012392:	bfac      	ite	ge
 8012394:	6563      	strge	r3, [r4, #84]	; 0x54
 8012396:	81a3      	strhlt	r3, [r4, #12]
 8012398:	bd10      	pop	{r4, pc}

0801239a <__swrite>:
 801239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239e:	461f      	mov	r7, r3
 80123a0:	898b      	ldrh	r3, [r1, #12]
 80123a2:	05db      	lsls	r3, r3, #23
 80123a4:	4605      	mov	r5, r0
 80123a6:	460c      	mov	r4, r1
 80123a8:	4616      	mov	r6, r2
 80123aa:	d505      	bpl.n	80123b8 <__swrite+0x1e>
 80123ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123b0:	2302      	movs	r3, #2
 80123b2:	2200      	movs	r2, #0
 80123b4:	f000 f8e0 	bl	8012578 <_lseek_r>
 80123b8:	89a3      	ldrh	r3, [r4, #12]
 80123ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123c2:	81a3      	strh	r3, [r4, #12]
 80123c4:	4632      	mov	r2, r6
 80123c6:	463b      	mov	r3, r7
 80123c8:	4628      	mov	r0, r5
 80123ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123ce:	f000 b907 	b.w	80125e0 <_write_r>

080123d2 <__sseek>:
 80123d2:	b510      	push	{r4, lr}
 80123d4:	460c      	mov	r4, r1
 80123d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123da:	f000 f8cd 	bl	8012578 <_lseek_r>
 80123de:	1c43      	adds	r3, r0, #1
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	bf15      	itete	ne
 80123e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80123e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123ee:	81a3      	strheq	r3, [r4, #12]
 80123f0:	bf18      	it	ne
 80123f2:	81a3      	strhne	r3, [r4, #12]
 80123f4:	bd10      	pop	{r4, pc}

080123f6 <__sclose>:
 80123f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123fa:	f000 b8ad 	b.w	8012558 <_close_r>

080123fe <__swbuf_r>:
 80123fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012400:	460e      	mov	r6, r1
 8012402:	4614      	mov	r4, r2
 8012404:	4605      	mov	r5, r0
 8012406:	b118      	cbz	r0, 8012410 <__swbuf_r+0x12>
 8012408:	6a03      	ldr	r3, [r0, #32]
 801240a:	b90b      	cbnz	r3, 8012410 <__swbuf_r+0x12>
 801240c:	f7ff fefe 	bl	801220c <__sinit>
 8012410:	69a3      	ldr	r3, [r4, #24]
 8012412:	60a3      	str	r3, [r4, #8]
 8012414:	89a3      	ldrh	r3, [r4, #12]
 8012416:	071a      	lsls	r2, r3, #28
 8012418:	d525      	bpl.n	8012466 <__swbuf_r+0x68>
 801241a:	6923      	ldr	r3, [r4, #16]
 801241c:	b31b      	cbz	r3, 8012466 <__swbuf_r+0x68>
 801241e:	6823      	ldr	r3, [r4, #0]
 8012420:	6922      	ldr	r2, [r4, #16]
 8012422:	1a98      	subs	r0, r3, r2
 8012424:	6963      	ldr	r3, [r4, #20]
 8012426:	b2f6      	uxtb	r6, r6
 8012428:	4283      	cmp	r3, r0
 801242a:	4637      	mov	r7, r6
 801242c:	dc04      	bgt.n	8012438 <__swbuf_r+0x3a>
 801242e:	4621      	mov	r1, r4
 8012430:	4628      	mov	r0, r5
 8012432:	f000 fcc9 	bl	8012dc8 <_fflush_r>
 8012436:	b9e0      	cbnz	r0, 8012472 <__swbuf_r+0x74>
 8012438:	68a3      	ldr	r3, [r4, #8]
 801243a:	3b01      	subs	r3, #1
 801243c:	60a3      	str	r3, [r4, #8]
 801243e:	6823      	ldr	r3, [r4, #0]
 8012440:	1c5a      	adds	r2, r3, #1
 8012442:	6022      	str	r2, [r4, #0]
 8012444:	701e      	strb	r6, [r3, #0]
 8012446:	6962      	ldr	r2, [r4, #20]
 8012448:	1c43      	adds	r3, r0, #1
 801244a:	429a      	cmp	r2, r3
 801244c:	d004      	beq.n	8012458 <__swbuf_r+0x5a>
 801244e:	89a3      	ldrh	r3, [r4, #12]
 8012450:	07db      	lsls	r3, r3, #31
 8012452:	d506      	bpl.n	8012462 <__swbuf_r+0x64>
 8012454:	2e0a      	cmp	r6, #10
 8012456:	d104      	bne.n	8012462 <__swbuf_r+0x64>
 8012458:	4621      	mov	r1, r4
 801245a:	4628      	mov	r0, r5
 801245c:	f000 fcb4 	bl	8012dc8 <_fflush_r>
 8012460:	b938      	cbnz	r0, 8012472 <__swbuf_r+0x74>
 8012462:	4638      	mov	r0, r7
 8012464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012466:	4621      	mov	r1, r4
 8012468:	4628      	mov	r0, r5
 801246a:	f000 f805 	bl	8012478 <__swsetup_r>
 801246e:	2800      	cmp	r0, #0
 8012470:	d0d5      	beq.n	801241e <__swbuf_r+0x20>
 8012472:	f04f 37ff 	mov.w	r7, #4294967295
 8012476:	e7f4      	b.n	8012462 <__swbuf_r+0x64>

08012478 <__swsetup_r>:
 8012478:	b538      	push	{r3, r4, r5, lr}
 801247a:	4b2a      	ldr	r3, [pc, #168]	; (8012524 <__swsetup_r+0xac>)
 801247c:	4605      	mov	r5, r0
 801247e:	6818      	ldr	r0, [r3, #0]
 8012480:	460c      	mov	r4, r1
 8012482:	b118      	cbz	r0, 801248c <__swsetup_r+0x14>
 8012484:	6a03      	ldr	r3, [r0, #32]
 8012486:	b90b      	cbnz	r3, 801248c <__swsetup_r+0x14>
 8012488:	f7ff fec0 	bl	801220c <__sinit>
 801248c:	89a3      	ldrh	r3, [r4, #12]
 801248e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012492:	0718      	lsls	r0, r3, #28
 8012494:	d422      	bmi.n	80124dc <__swsetup_r+0x64>
 8012496:	06d9      	lsls	r1, r3, #27
 8012498:	d407      	bmi.n	80124aa <__swsetup_r+0x32>
 801249a:	2309      	movs	r3, #9
 801249c:	602b      	str	r3, [r5, #0]
 801249e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124a2:	81a3      	strh	r3, [r4, #12]
 80124a4:	f04f 30ff 	mov.w	r0, #4294967295
 80124a8:	e034      	b.n	8012514 <__swsetup_r+0x9c>
 80124aa:	0758      	lsls	r0, r3, #29
 80124ac:	d512      	bpl.n	80124d4 <__swsetup_r+0x5c>
 80124ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124b0:	b141      	cbz	r1, 80124c4 <__swsetup_r+0x4c>
 80124b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124b6:	4299      	cmp	r1, r3
 80124b8:	d002      	beq.n	80124c0 <__swsetup_r+0x48>
 80124ba:	4628      	mov	r0, r5
 80124bc:	f000 f8de 	bl	801267c <_free_r>
 80124c0:	2300      	movs	r3, #0
 80124c2:	6363      	str	r3, [r4, #52]	; 0x34
 80124c4:	89a3      	ldrh	r3, [r4, #12]
 80124c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124ca:	81a3      	strh	r3, [r4, #12]
 80124cc:	2300      	movs	r3, #0
 80124ce:	6063      	str	r3, [r4, #4]
 80124d0:	6923      	ldr	r3, [r4, #16]
 80124d2:	6023      	str	r3, [r4, #0]
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	f043 0308 	orr.w	r3, r3, #8
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	6923      	ldr	r3, [r4, #16]
 80124de:	b94b      	cbnz	r3, 80124f4 <__swsetup_r+0x7c>
 80124e0:	89a3      	ldrh	r3, [r4, #12]
 80124e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80124e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124ea:	d003      	beq.n	80124f4 <__swsetup_r+0x7c>
 80124ec:	4621      	mov	r1, r4
 80124ee:	4628      	mov	r0, r5
 80124f0:	f000 fcb8 	bl	8012e64 <__smakebuf_r>
 80124f4:	89a0      	ldrh	r0, [r4, #12]
 80124f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124fa:	f010 0301 	ands.w	r3, r0, #1
 80124fe:	d00a      	beq.n	8012516 <__swsetup_r+0x9e>
 8012500:	2300      	movs	r3, #0
 8012502:	60a3      	str	r3, [r4, #8]
 8012504:	6963      	ldr	r3, [r4, #20]
 8012506:	425b      	negs	r3, r3
 8012508:	61a3      	str	r3, [r4, #24]
 801250a:	6923      	ldr	r3, [r4, #16]
 801250c:	b943      	cbnz	r3, 8012520 <__swsetup_r+0xa8>
 801250e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012512:	d1c4      	bne.n	801249e <__swsetup_r+0x26>
 8012514:	bd38      	pop	{r3, r4, r5, pc}
 8012516:	0781      	lsls	r1, r0, #30
 8012518:	bf58      	it	pl
 801251a:	6963      	ldrpl	r3, [r4, #20]
 801251c:	60a3      	str	r3, [r4, #8]
 801251e:	e7f4      	b.n	801250a <__swsetup_r+0x92>
 8012520:	2000      	movs	r0, #0
 8012522:	e7f7      	b.n	8012514 <__swsetup_r+0x9c>
 8012524:	20000084 	.word	0x20000084

08012528 <memcmp>:
 8012528:	b510      	push	{r4, lr}
 801252a:	3901      	subs	r1, #1
 801252c:	4402      	add	r2, r0
 801252e:	4290      	cmp	r0, r2
 8012530:	d101      	bne.n	8012536 <memcmp+0xe>
 8012532:	2000      	movs	r0, #0
 8012534:	e005      	b.n	8012542 <memcmp+0x1a>
 8012536:	7803      	ldrb	r3, [r0, #0]
 8012538:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801253c:	42a3      	cmp	r3, r4
 801253e:	d001      	beq.n	8012544 <memcmp+0x1c>
 8012540:	1b18      	subs	r0, r3, r4
 8012542:	bd10      	pop	{r4, pc}
 8012544:	3001      	adds	r0, #1
 8012546:	e7f2      	b.n	801252e <memcmp+0x6>

08012548 <memset>:
 8012548:	4402      	add	r2, r0
 801254a:	4603      	mov	r3, r0
 801254c:	4293      	cmp	r3, r2
 801254e:	d100      	bne.n	8012552 <memset+0xa>
 8012550:	4770      	bx	lr
 8012552:	f803 1b01 	strb.w	r1, [r3], #1
 8012556:	e7f9      	b.n	801254c <memset+0x4>

08012558 <_close_r>:
 8012558:	b538      	push	{r3, r4, r5, lr}
 801255a:	4d06      	ldr	r5, [pc, #24]	; (8012574 <_close_r+0x1c>)
 801255c:	2300      	movs	r3, #0
 801255e:	4604      	mov	r4, r0
 8012560:	4608      	mov	r0, r1
 8012562:	602b      	str	r3, [r5, #0]
 8012564:	f7ee fbad 	bl	8000cc2 <_close>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d102      	bne.n	8012572 <_close_r+0x1a>
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	b103      	cbz	r3, 8012572 <_close_r+0x1a>
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	200086f0 	.word	0x200086f0

08012578 <_lseek_r>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	4d07      	ldr	r5, [pc, #28]	; (8012598 <_lseek_r+0x20>)
 801257c:	4604      	mov	r4, r0
 801257e:	4608      	mov	r0, r1
 8012580:	4611      	mov	r1, r2
 8012582:	2200      	movs	r2, #0
 8012584:	602a      	str	r2, [r5, #0]
 8012586:	461a      	mov	r2, r3
 8012588:	f7ee fbc2 	bl	8000d10 <_lseek>
 801258c:	1c43      	adds	r3, r0, #1
 801258e:	d102      	bne.n	8012596 <_lseek_r+0x1e>
 8012590:	682b      	ldr	r3, [r5, #0]
 8012592:	b103      	cbz	r3, 8012596 <_lseek_r+0x1e>
 8012594:	6023      	str	r3, [r4, #0]
 8012596:	bd38      	pop	{r3, r4, r5, pc}
 8012598:	200086f0 	.word	0x200086f0

0801259c <_read_r>:
 801259c:	b538      	push	{r3, r4, r5, lr}
 801259e:	4d07      	ldr	r5, [pc, #28]	; (80125bc <_read_r+0x20>)
 80125a0:	4604      	mov	r4, r0
 80125a2:	4608      	mov	r0, r1
 80125a4:	4611      	mov	r1, r2
 80125a6:	2200      	movs	r2, #0
 80125a8:	602a      	str	r2, [r5, #0]
 80125aa:	461a      	mov	r2, r3
 80125ac:	f7ee fb50 	bl	8000c50 <_read>
 80125b0:	1c43      	adds	r3, r0, #1
 80125b2:	d102      	bne.n	80125ba <_read_r+0x1e>
 80125b4:	682b      	ldr	r3, [r5, #0]
 80125b6:	b103      	cbz	r3, 80125ba <_read_r+0x1e>
 80125b8:	6023      	str	r3, [r4, #0]
 80125ba:	bd38      	pop	{r3, r4, r5, pc}
 80125bc:	200086f0 	.word	0x200086f0

080125c0 <_sbrk_r>:
 80125c0:	b538      	push	{r3, r4, r5, lr}
 80125c2:	4d06      	ldr	r5, [pc, #24]	; (80125dc <_sbrk_r+0x1c>)
 80125c4:	2300      	movs	r3, #0
 80125c6:	4604      	mov	r4, r0
 80125c8:	4608      	mov	r0, r1
 80125ca:	602b      	str	r3, [r5, #0]
 80125cc:	f7ee fbae 	bl	8000d2c <_sbrk>
 80125d0:	1c43      	adds	r3, r0, #1
 80125d2:	d102      	bne.n	80125da <_sbrk_r+0x1a>
 80125d4:	682b      	ldr	r3, [r5, #0]
 80125d6:	b103      	cbz	r3, 80125da <_sbrk_r+0x1a>
 80125d8:	6023      	str	r3, [r4, #0]
 80125da:	bd38      	pop	{r3, r4, r5, pc}
 80125dc:	200086f0 	.word	0x200086f0

080125e0 <_write_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4d07      	ldr	r5, [pc, #28]	; (8012600 <_write_r+0x20>)
 80125e4:	4604      	mov	r4, r0
 80125e6:	4608      	mov	r0, r1
 80125e8:	4611      	mov	r1, r2
 80125ea:	2200      	movs	r2, #0
 80125ec:	602a      	str	r2, [r5, #0]
 80125ee:	461a      	mov	r2, r3
 80125f0:	f7ee fb4b 	bl	8000c8a <_write>
 80125f4:	1c43      	adds	r3, r0, #1
 80125f6:	d102      	bne.n	80125fe <_write_r+0x1e>
 80125f8:	682b      	ldr	r3, [r5, #0]
 80125fa:	b103      	cbz	r3, 80125fe <_write_r+0x1e>
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	200086f0 	.word	0x200086f0

08012604 <__libc_init_array>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4d0d      	ldr	r5, [pc, #52]	; (801263c <__libc_init_array+0x38>)
 8012608:	4c0d      	ldr	r4, [pc, #52]	; (8012640 <__libc_init_array+0x3c>)
 801260a:	1b64      	subs	r4, r4, r5
 801260c:	10a4      	asrs	r4, r4, #2
 801260e:	2600      	movs	r6, #0
 8012610:	42a6      	cmp	r6, r4
 8012612:	d109      	bne.n	8012628 <__libc_init_array+0x24>
 8012614:	4d0b      	ldr	r5, [pc, #44]	; (8012644 <__libc_init_array+0x40>)
 8012616:	4c0c      	ldr	r4, [pc, #48]	; (8012648 <__libc_init_array+0x44>)
 8012618:	f000 fcc6 	bl	8012fa8 <_init>
 801261c:	1b64      	subs	r4, r4, r5
 801261e:	10a4      	asrs	r4, r4, #2
 8012620:	2600      	movs	r6, #0
 8012622:	42a6      	cmp	r6, r4
 8012624:	d105      	bne.n	8012632 <__libc_init_array+0x2e>
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	f855 3b04 	ldr.w	r3, [r5], #4
 801262c:	4798      	blx	r3
 801262e:	3601      	adds	r6, #1
 8012630:	e7ee      	b.n	8012610 <__libc_init_array+0xc>
 8012632:	f855 3b04 	ldr.w	r3, [r5], #4
 8012636:	4798      	blx	r3
 8012638:	3601      	adds	r6, #1
 801263a:	e7f2      	b.n	8012622 <__libc_init_array+0x1e>
 801263c:	08015be0 	.word	0x08015be0
 8012640:	08015be0 	.word	0x08015be0
 8012644:	08015be0 	.word	0x08015be0
 8012648:	08015be4 	.word	0x08015be4

0801264c <__retarget_lock_init_recursive>:
 801264c:	4770      	bx	lr

0801264e <__retarget_lock_acquire_recursive>:
 801264e:	4770      	bx	lr

08012650 <__retarget_lock_release_recursive>:
 8012650:	4770      	bx	lr

08012652 <memcpy>:
 8012652:	440a      	add	r2, r1
 8012654:	4291      	cmp	r1, r2
 8012656:	f100 33ff 	add.w	r3, r0, #4294967295
 801265a:	d100      	bne.n	801265e <memcpy+0xc>
 801265c:	4770      	bx	lr
 801265e:	b510      	push	{r4, lr}
 8012660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012668:	4291      	cmp	r1, r2
 801266a:	d1f9      	bne.n	8012660 <memcpy+0xe>
 801266c:	bd10      	pop	{r4, pc}

0801266e <abort>:
 801266e:	b508      	push	{r3, lr}
 8012670:	2006      	movs	r0, #6
 8012672:	f000 fc5b 	bl	8012f2c <raise>
 8012676:	2001      	movs	r0, #1
 8012678:	f7ee fae0 	bl	8000c3c <_exit>

0801267c <_free_r>:
 801267c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801267e:	2900      	cmp	r1, #0
 8012680:	d044      	beq.n	801270c <_free_r+0x90>
 8012682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012686:	9001      	str	r0, [sp, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	f1a1 0404 	sub.w	r4, r1, #4
 801268e:	bfb8      	it	lt
 8012690:	18e4      	addlt	r4, r4, r3
 8012692:	f7ff fce5 	bl	8012060 <__malloc_lock>
 8012696:	4a1e      	ldr	r2, [pc, #120]	; (8012710 <_free_r+0x94>)
 8012698:	9801      	ldr	r0, [sp, #4]
 801269a:	6813      	ldr	r3, [r2, #0]
 801269c:	b933      	cbnz	r3, 80126ac <_free_r+0x30>
 801269e:	6063      	str	r3, [r4, #4]
 80126a0:	6014      	str	r4, [r2, #0]
 80126a2:	b003      	add	sp, #12
 80126a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126a8:	f7ff bce0 	b.w	801206c <__malloc_unlock>
 80126ac:	42a3      	cmp	r3, r4
 80126ae:	d908      	bls.n	80126c2 <_free_r+0x46>
 80126b0:	6825      	ldr	r5, [r4, #0]
 80126b2:	1961      	adds	r1, r4, r5
 80126b4:	428b      	cmp	r3, r1
 80126b6:	bf01      	itttt	eq
 80126b8:	6819      	ldreq	r1, [r3, #0]
 80126ba:	685b      	ldreq	r3, [r3, #4]
 80126bc:	1949      	addeq	r1, r1, r5
 80126be:	6021      	streq	r1, [r4, #0]
 80126c0:	e7ed      	b.n	801269e <_free_r+0x22>
 80126c2:	461a      	mov	r2, r3
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	b10b      	cbz	r3, 80126cc <_free_r+0x50>
 80126c8:	42a3      	cmp	r3, r4
 80126ca:	d9fa      	bls.n	80126c2 <_free_r+0x46>
 80126cc:	6811      	ldr	r1, [r2, #0]
 80126ce:	1855      	adds	r5, r2, r1
 80126d0:	42a5      	cmp	r5, r4
 80126d2:	d10b      	bne.n	80126ec <_free_r+0x70>
 80126d4:	6824      	ldr	r4, [r4, #0]
 80126d6:	4421      	add	r1, r4
 80126d8:	1854      	adds	r4, r2, r1
 80126da:	42a3      	cmp	r3, r4
 80126dc:	6011      	str	r1, [r2, #0]
 80126de:	d1e0      	bne.n	80126a2 <_free_r+0x26>
 80126e0:	681c      	ldr	r4, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	6053      	str	r3, [r2, #4]
 80126e6:	440c      	add	r4, r1
 80126e8:	6014      	str	r4, [r2, #0]
 80126ea:	e7da      	b.n	80126a2 <_free_r+0x26>
 80126ec:	d902      	bls.n	80126f4 <_free_r+0x78>
 80126ee:	230c      	movs	r3, #12
 80126f0:	6003      	str	r3, [r0, #0]
 80126f2:	e7d6      	b.n	80126a2 <_free_r+0x26>
 80126f4:	6825      	ldr	r5, [r4, #0]
 80126f6:	1961      	adds	r1, r4, r5
 80126f8:	428b      	cmp	r3, r1
 80126fa:	bf04      	itt	eq
 80126fc:	6819      	ldreq	r1, [r3, #0]
 80126fe:	685b      	ldreq	r3, [r3, #4]
 8012700:	6063      	str	r3, [r4, #4]
 8012702:	bf04      	itt	eq
 8012704:	1949      	addeq	r1, r1, r5
 8012706:	6021      	streq	r1, [r4, #0]
 8012708:	6054      	str	r4, [r2, #4]
 801270a:	e7ca      	b.n	80126a2 <_free_r+0x26>
 801270c:	b003      	add	sp, #12
 801270e:	bd30      	pop	{r4, r5, pc}
 8012710:	200085ac 	.word	0x200085ac

08012714 <__sfputc_r>:
 8012714:	6893      	ldr	r3, [r2, #8]
 8012716:	3b01      	subs	r3, #1
 8012718:	2b00      	cmp	r3, #0
 801271a:	b410      	push	{r4}
 801271c:	6093      	str	r3, [r2, #8]
 801271e:	da08      	bge.n	8012732 <__sfputc_r+0x1e>
 8012720:	6994      	ldr	r4, [r2, #24]
 8012722:	42a3      	cmp	r3, r4
 8012724:	db01      	blt.n	801272a <__sfputc_r+0x16>
 8012726:	290a      	cmp	r1, #10
 8012728:	d103      	bne.n	8012732 <__sfputc_r+0x1e>
 801272a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801272e:	f7ff be66 	b.w	80123fe <__swbuf_r>
 8012732:	6813      	ldr	r3, [r2, #0]
 8012734:	1c58      	adds	r0, r3, #1
 8012736:	6010      	str	r0, [r2, #0]
 8012738:	7019      	strb	r1, [r3, #0]
 801273a:	4608      	mov	r0, r1
 801273c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012740:	4770      	bx	lr

08012742 <__sfputs_r>:
 8012742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012744:	4606      	mov	r6, r0
 8012746:	460f      	mov	r7, r1
 8012748:	4614      	mov	r4, r2
 801274a:	18d5      	adds	r5, r2, r3
 801274c:	42ac      	cmp	r4, r5
 801274e:	d101      	bne.n	8012754 <__sfputs_r+0x12>
 8012750:	2000      	movs	r0, #0
 8012752:	e007      	b.n	8012764 <__sfputs_r+0x22>
 8012754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012758:	463a      	mov	r2, r7
 801275a:	4630      	mov	r0, r6
 801275c:	f7ff ffda 	bl	8012714 <__sfputc_r>
 8012760:	1c43      	adds	r3, r0, #1
 8012762:	d1f3      	bne.n	801274c <__sfputs_r+0xa>
 8012764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012768 <_vfiprintf_r>:
 8012768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801276c:	460d      	mov	r5, r1
 801276e:	b09d      	sub	sp, #116	; 0x74
 8012770:	4614      	mov	r4, r2
 8012772:	4698      	mov	r8, r3
 8012774:	4606      	mov	r6, r0
 8012776:	b118      	cbz	r0, 8012780 <_vfiprintf_r+0x18>
 8012778:	6a03      	ldr	r3, [r0, #32]
 801277a:	b90b      	cbnz	r3, 8012780 <_vfiprintf_r+0x18>
 801277c:	f7ff fd46 	bl	801220c <__sinit>
 8012780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012782:	07d9      	lsls	r1, r3, #31
 8012784:	d405      	bmi.n	8012792 <_vfiprintf_r+0x2a>
 8012786:	89ab      	ldrh	r3, [r5, #12]
 8012788:	059a      	lsls	r2, r3, #22
 801278a:	d402      	bmi.n	8012792 <_vfiprintf_r+0x2a>
 801278c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801278e:	f7ff ff5e 	bl	801264e <__retarget_lock_acquire_recursive>
 8012792:	89ab      	ldrh	r3, [r5, #12]
 8012794:	071b      	lsls	r3, r3, #28
 8012796:	d501      	bpl.n	801279c <_vfiprintf_r+0x34>
 8012798:	692b      	ldr	r3, [r5, #16]
 801279a:	b99b      	cbnz	r3, 80127c4 <_vfiprintf_r+0x5c>
 801279c:	4629      	mov	r1, r5
 801279e:	4630      	mov	r0, r6
 80127a0:	f7ff fe6a 	bl	8012478 <__swsetup_r>
 80127a4:	b170      	cbz	r0, 80127c4 <_vfiprintf_r+0x5c>
 80127a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127a8:	07dc      	lsls	r4, r3, #31
 80127aa:	d504      	bpl.n	80127b6 <_vfiprintf_r+0x4e>
 80127ac:	f04f 30ff 	mov.w	r0, #4294967295
 80127b0:	b01d      	add	sp, #116	; 0x74
 80127b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b6:	89ab      	ldrh	r3, [r5, #12]
 80127b8:	0598      	lsls	r0, r3, #22
 80127ba:	d4f7      	bmi.n	80127ac <_vfiprintf_r+0x44>
 80127bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127be:	f7ff ff47 	bl	8012650 <__retarget_lock_release_recursive>
 80127c2:	e7f3      	b.n	80127ac <_vfiprintf_r+0x44>
 80127c4:	2300      	movs	r3, #0
 80127c6:	9309      	str	r3, [sp, #36]	; 0x24
 80127c8:	2320      	movs	r3, #32
 80127ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80127d2:	2330      	movs	r3, #48	; 0x30
 80127d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012988 <_vfiprintf_r+0x220>
 80127d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127dc:	f04f 0901 	mov.w	r9, #1
 80127e0:	4623      	mov	r3, r4
 80127e2:	469a      	mov	sl, r3
 80127e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127e8:	b10a      	cbz	r2, 80127ee <_vfiprintf_r+0x86>
 80127ea:	2a25      	cmp	r2, #37	; 0x25
 80127ec:	d1f9      	bne.n	80127e2 <_vfiprintf_r+0x7a>
 80127ee:	ebba 0b04 	subs.w	fp, sl, r4
 80127f2:	d00b      	beq.n	801280c <_vfiprintf_r+0xa4>
 80127f4:	465b      	mov	r3, fp
 80127f6:	4622      	mov	r2, r4
 80127f8:	4629      	mov	r1, r5
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ff ffa1 	bl	8012742 <__sfputs_r>
 8012800:	3001      	adds	r0, #1
 8012802:	f000 80a9 	beq.w	8012958 <_vfiprintf_r+0x1f0>
 8012806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012808:	445a      	add	r2, fp
 801280a:	9209      	str	r2, [sp, #36]	; 0x24
 801280c:	f89a 3000 	ldrb.w	r3, [sl]
 8012810:	2b00      	cmp	r3, #0
 8012812:	f000 80a1 	beq.w	8012958 <_vfiprintf_r+0x1f0>
 8012816:	2300      	movs	r3, #0
 8012818:	f04f 32ff 	mov.w	r2, #4294967295
 801281c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012820:	f10a 0a01 	add.w	sl, sl, #1
 8012824:	9304      	str	r3, [sp, #16]
 8012826:	9307      	str	r3, [sp, #28]
 8012828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801282c:	931a      	str	r3, [sp, #104]	; 0x68
 801282e:	4654      	mov	r4, sl
 8012830:	2205      	movs	r2, #5
 8012832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012836:	4854      	ldr	r0, [pc, #336]	; (8012988 <_vfiprintf_r+0x220>)
 8012838:	f7ed fcca 	bl	80001d0 <memchr>
 801283c:	9a04      	ldr	r2, [sp, #16]
 801283e:	b9d8      	cbnz	r0, 8012878 <_vfiprintf_r+0x110>
 8012840:	06d1      	lsls	r1, r2, #27
 8012842:	bf44      	itt	mi
 8012844:	2320      	movmi	r3, #32
 8012846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801284a:	0713      	lsls	r3, r2, #28
 801284c:	bf44      	itt	mi
 801284e:	232b      	movmi	r3, #43	; 0x2b
 8012850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012854:	f89a 3000 	ldrb.w	r3, [sl]
 8012858:	2b2a      	cmp	r3, #42	; 0x2a
 801285a:	d015      	beq.n	8012888 <_vfiprintf_r+0x120>
 801285c:	9a07      	ldr	r2, [sp, #28]
 801285e:	4654      	mov	r4, sl
 8012860:	2000      	movs	r0, #0
 8012862:	f04f 0c0a 	mov.w	ip, #10
 8012866:	4621      	mov	r1, r4
 8012868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801286c:	3b30      	subs	r3, #48	; 0x30
 801286e:	2b09      	cmp	r3, #9
 8012870:	d94d      	bls.n	801290e <_vfiprintf_r+0x1a6>
 8012872:	b1b0      	cbz	r0, 80128a2 <_vfiprintf_r+0x13a>
 8012874:	9207      	str	r2, [sp, #28]
 8012876:	e014      	b.n	80128a2 <_vfiprintf_r+0x13a>
 8012878:	eba0 0308 	sub.w	r3, r0, r8
 801287c:	fa09 f303 	lsl.w	r3, r9, r3
 8012880:	4313      	orrs	r3, r2
 8012882:	9304      	str	r3, [sp, #16]
 8012884:	46a2      	mov	sl, r4
 8012886:	e7d2      	b.n	801282e <_vfiprintf_r+0xc6>
 8012888:	9b03      	ldr	r3, [sp, #12]
 801288a:	1d19      	adds	r1, r3, #4
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	9103      	str	r1, [sp, #12]
 8012890:	2b00      	cmp	r3, #0
 8012892:	bfbb      	ittet	lt
 8012894:	425b      	neglt	r3, r3
 8012896:	f042 0202 	orrlt.w	r2, r2, #2
 801289a:	9307      	strge	r3, [sp, #28]
 801289c:	9307      	strlt	r3, [sp, #28]
 801289e:	bfb8      	it	lt
 80128a0:	9204      	strlt	r2, [sp, #16]
 80128a2:	7823      	ldrb	r3, [r4, #0]
 80128a4:	2b2e      	cmp	r3, #46	; 0x2e
 80128a6:	d10c      	bne.n	80128c2 <_vfiprintf_r+0x15a>
 80128a8:	7863      	ldrb	r3, [r4, #1]
 80128aa:	2b2a      	cmp	r3, #42	; 0x2a
 80128ac:	d134      	bne.n	8012918 <_vfiprintf_r+0x1b0>
 80128ae:	9b03      	ldr	r3, [sp, #12]
 80128b0:	1d1a      	adds	r2, r3, #4
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	9203      	str	r2, [sp, #12]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	bfb8      	it	lt
 80128ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80128be:	3402      	adds	r4, #2
 80128c0:	9305      	str	r3, [sp, #20]
 80128c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012998 <_vfiprintf_r+0x230>
 80128c6:	7821      	ldrb	r1, [r4, #0]
 80128c8:	2203      	movs	r2, #3
 80128ca:	4650      	mov	r0, sl
 80128cc:	f7ed fc80 	bl	80001d0 <memchr>
 80128d0:	b138      	cbz	r0, 80128e2 <_vfiprintf_r+0x17a>
 80128d2:	9b04      	ldr	r3, [sp, #16]
 80128d4:	eba0 000a 	sub.w	r0, r0, sl
 80128d8:	2240      	movs	r2, #64	; 0x40
 80128da:	4082      	lsls	r2, r0
 80128dc:	4313      	orrs	r3, r2
 80128de:	3401      	adds	r4, #1
 80128e0:	9304      	str	r3, [sp, #16]
 80128e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128e6:	4829      	ldr	r0, [pc, #164]	; (801298c <_vfiprintf_r+0x224>)
 80128e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128ec:	2206      	movs	r2, #6
 80128ee:	f7ed fc6f 	bl	80001d0 <memchr>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d03f      	beq.n	8012976 <_vfiprintf_r+0x20e>
 80128f6:	4b26      	ldr	r3, [pc, #152]	; (8012990 <_vfiprintf_r+0x228>)
 80128f8:	bb1b      	cbnz	r3, 8012942 <_vfiprintf_r+0x1da>
 80128fa:	9b03      	ldr	r3, [sp, #12]
 80128fc:	3307      	adds	r3, #7
 80128fe:	f023 0307 	bic.w	r3, r3, #7
 8012902:	3308      	adds	r3, #8
 8012904:	9303      	str	r3, [sp, #12]
 8012906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012908:	443b      	add	r3, r7
 801290a:	9309      	str	r3, [sp, #36]	; 0x24
 801290c:	e768      	b.n	80127e0 <_vfiprintf_r+0x78>
 801290e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012912:	460c      	mov	r4, r1
 8012914:	2001      	movs	r0, #1
 8012916:	e7a6      	b.n	8012866 <_vfiprintf_r+0xfe>
 8012918:	2300      	movs	r3, #0
 801291a:	3401      	adds	r4, #1
 801291c:	9305      	str	r3, [sp, #20]
 801291e:	4619      	mov	r1, r3
 8012920:	f04f 0c0a 	mov.w	ip, #10
 8012924:	4620      	mov	r0, r4
 8012926:	f810 2b01 	ldrb.w	r2, [r0], #1
 801292a:	3a30      	subs	r2, #48	; 0x30
 801292c:	2a09      	cmp	r2, #9
 801292e:	d903      	bls.n	8012938 <_vfiprintf_r+0x1d0>
 8012930:	2b00      	cmp	r3, #0
 8012932:	d0c6      	beq.n	80128c2 <_vfiprintf_r+0x15a>
 8012934:	9105      	str	r1, [sp, #20]
 8012936:	e7c4      	b.n	80128c2 <_vfiprintf_r+0x15a>
 8012938:	fb0c 2101 	mla	r1, ip, r1, r2
 801293c:	4604      	mov	r4, r0
 801293e:	2301      	movs	r3, #1
 8012940:	e7f0      	b.n	8012924 <_vfiprintf_r+0x1bc>
 8012942:	ab03      	add	r3, sp, #12
 8012944:	9300      	str	r3, [sp, #0]
 8012946:	462a      	mov	r2, r5
 8012948:	4b12      	ldr	r3, [pc, #72]	; (8012994 <_vfiprintf_r+0x22c>)
 801294a:	a904      	add	r1, sp, #16
 801294c:	4630      	mov	r0, r6
 801294e:	f3af 8000 	nop.w
 8012952:	4607      	mov	r7, r0
 8012954:	1c78      	adds	r0, r7, #1
 8012956:	d1d6      	bne.n	8012906 <_vfiprintf_r+0x19e>
 8012958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801295a:	07d9      	lsls	r1, r3, #31
 801295c:	d405      	bmi.n	801296a <_vfiprintf_r+0x202>
 801295e:	89ab      	ldrh	r3, [r5, #12]
 8012960:	059a      	lsls	r2, r3, #22
 8012962:	d402      	bmi.n	801296a <_vfiprintf_r+0x202>
 8012964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012966:	f7ff fe73 	bl	8012650 <__retarget_lock_release_recursive>
 801296a:	89ab      	ldrh	r3, [r5, #12]
 801296c:	065b      	lsls	r3, r3, #25
 801296e:	f53f af1d 	bmi.w	80127ac <_vfiprintf_r+0x44>
 8012972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012974:	e71c      	b.n	80127b0 <_vfiprintf_r+0x48>
 8012976:	ab03      	add	r3, sp, #12
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	462a      	mov	r2, r5
 801297c:	4b05      	ldr	r3, [pc, #20]	; (8012994 <_vfiprintf_r+0x22c>)
 801297e:	a904      	add	r1, sp, #16
 8012980:	4630      	mov	r0, r6
 8012982:	f000 f879 	bl	8012a78 <_printf_i>
 8012986:	e7e4      	b.n	8012952 <_vfiprintf_r+0x1ea>
 8012988:	08015ba3 	.word	0x08015ba3
 801298c:	08015bad 	.word	0x08015bad
 8012990:	00000000 	.word	0x00000000
 8012994:	08012743 	.word	0x08012743
 8012998:	08015ba9 	.word	0x08015ba9

0801299c <_printf_common>:
 801299c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129a0:	4616      	mov	r6, r2
 80129a2:	4699      	mov	r9, r3
 80129a4:	688a      	ldr	r2, [r1, #8]
 80129a6:	690b      	ldr	r3, [r1, #16]
 80129a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129ac:	4293      	cmp	r3, r2
 80129ae:	bfb8      	it	lt
 80129b0:	4613      	movlt	r3, r2
 80129b2:	6033      	str	r3, [r6, #0]
 80129b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129b8:	4607      	mov	r7, r0
 80129ba:	460c      	mov	r4, r1
 80129bc:	b10a      	cbz	r2, 80129c2 <_printf_common+0x26>
 80129be:	3301      	adds	r3, #1
 80129c0:	6033      	str	r3, [r6, #0]
 80129c2:	6823      	ldr	r3, [r4, #0]
 80129c4:	0699      	lsls	r1, r3, #26
 80129c6:	bf42      	ittt	mi
 80129c8:	6833      	ldrmi	r3, [r6, #0]
 80129ca:	3302      	addmi	r3, #2
 80129cc:	6033      	strmi	r3, [r6, #0]
 80129ce:	6825      	ldr	r5, [r4, #0]
 80129d0:	f015 0506 	ands.w	r5, r5, #6
 80129d4:	d106      	bne.n	80129e4 <_printf_common+0x48>
 80129d6:	f104 0a19 	add.w	sl, r4, #25
 80129da:	68e3      	ldr	r3, [r4, #12]
 80129dc:	6832      	ldr	r2, [r6, #0]
 80129de:	1a9b      	subs	r3, r3, r2
 80129e0:	42ab      	cmp	r3, r5
 80129e2:	dc26      	bgt.n	8012a32 <_printf_common+0x96>
 80129e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80129e8:	1e13      	subs	r3, r2, #0
 80129ea:	6822      	ldr	r2, [r4, #0]
 80129ec:	bf18      	it	ne
 80129ee:	2301      	movne	r3, #1
 80129f0:	0692      	lsls	r2, r2, #26
 80129f2:	d42b      	bmi.n	8012a4c <_printf_common+0xb0>
 80129f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129f8:	4649      	mov	r1, r9
 80129fa:	4638      	mov	r0, r7
 80129fc:	47c0      	blx	r8
 80129fe:	3001      	adds	r0, #1
 8012a00:	d01e      	beq.n	8012a40 <_printf_common+0xa4>
 8012a02:	6823      	ldr	r3, [r4, #0]
 8012a04:	6922      	ldr	r2, [r4, #16]
 8012a06:	f003 0306 	and.w	r3, r3, #6
 8012a0a:	2b04      	cmp	r3, #4
 8012a0c:	bf02      	ittt	eq
 8012a0e:	68e5      	ldreq	r5, [r4, #12]
 8012a10:	6833      	ldreq	r3, [r6, #0]
 8012a12:	1aed      	subeq	r5, r5, r3
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	bf0c      	ite	eq
 8012a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a1c:	2500      	movne	r5, #0
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	bfc4      	itt	gt
 8012a22:	1a9b      	subgt	r3, r3, r2
 8012a24:	18ed      	addgt	r5, r5, r3
 8012a26:	2600      	movs	r6, #0
 8012a28:	341a      	adds	r4, #26
 8012a2a:	42b5      	cmp	r5, r6
 8012a2c:	d11a      	bne.n	8012a64 <_printf_common+0xc8>
 8012a2e:	2000      	movs	r0, #0
 8012a30:	e008      	b.n	8012a44 <_printf_common+0xa8>
 8012a32:	2301      	movs	r3, #1
 8012a34:	4652      	mov	r2, sl
 8012a36:	4649      	mov	r1, r9
 8012a38:	4638      	mov	r0, r7
 8012a3a:	47c0      	blx	r8
 8012a3c:	3001      	adds	r0, #1
 8012a3e:	d103      	bne.n	8012a48 <_printf_common+0xac>
 8012a40:	f04f 30ff 	mov.w	r0, #4294967295
 8012a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a48:	3501      	adds	r5, #1
 8012a4a:	e7c6      	b.n	80129da <_printf_common+0x3e>
 8012a4c:	18e1      	adds	r1, r4, r3
 8012a4e:	1c5a      	adds	r2, r3, #1
 8012a50:	2030      	movs	r0, #48	; 0x30
 8012a52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a56:	4422      	add	r2, r4
 8012a58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a60:	3302      	adds	r3, #2
 8012a62:	e7c7      	b.n	80129f4 <_printf_common+0x58>
 8012a64:	2301      	movs	r3, #1
 8012a66:	4622      	mov	r2, r4
 8012a68:	4649      	mov	r1, r9
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	47c0      	blx	r8
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d0e6      	beq.n	8012a40 <_printf_common+0xa4>
 8012a72:	3601      	adds	r6, #1
 8012a74:	e7d9      	b.n	8012a2a <_printf_common+0x8e>
	...

08012a78 <_printf_i>:
 8012a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a7c:	7e0f      	ldrb	r7, [r1, #24]
 8012a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a80:	2f78      	cmp	r7, #120	; 0x78
 8012a82:	4691      	mov	r9, r2
 8012a84:	4680      	mov	r8, r0
 8012a86:	460c      	mov	r4, r1
 8012a88:	469a      	mov	sl, r3
 8012a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a8e:	d807      	bhi.n	8012aa0 <_printf_i+0x28>
 8012a90:	2f62      	cmp	r7, #98	; 0x62
 8012a92:	d80a      	bhi.n	8012aaa <_printf_i+0x32>
 8012a94:	2f00      	cmp	r7, #0
 8012a96:	f000 80d4 	beq.w	8012c42 <_printf_i+0x1ca>
 8012a9a:	2f58      	cmp	r7, #88	; 0x58
 8012a9c:	f000 80c0 	beq.w	8012c20 <_printf_i+0x1a8>
 8012aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012aa8:	e03a      	b.n	8012b20 <_printf_i+0xa8>
 8012aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012aae:	2b15      	cmp	r3, #21
 8012ab0:	d8f6      	bhi.n	8012aa0 <_printf_i+0x28>
 8012ab2:	a101      	add	r1, pc, #4	; (adr r1, 8012ab8 <_printf_i+0x40>)
 8012ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ab8:	08012b11 	.word	0x08012b11
 8012abc:	08012b25 	.word	0x08012b25
 8012ac0:	08012aa1 	.word	0x08012aa1
 8012ac4:	08012aa1 	.word	0x08012aa1
 8012ac8:	08012aa1 	.word	0x08012aa1
 8012acc:	08012aa1 	.word	0x08012aa1
 8012ad0:	08012b25 	.word	0x08012b25
 8012ad4:	08012aa1 	.word	0x08012aa1
 8012ad8:	08012aa1 	.word	0x08012aa1
 8012adc:	08012aa1 	.word	0x08012aa1
 8012ae0:	08012aa1 	.word	0x08012aa1
 8012ae4:	08012c29 	.word	0x08012c29
 8012ae8:	08012b51 	.word	0x08012b51
 8012aec:	08012be3 	.word	0x08012be3
 8012af0:	08012aa1 	.word	0x08012aa1
 8012af4:	08012aa1 	.word	0x08012aa1
 8012af8:	08012c4b 	.word	0x08012c4b
 8012afc:	08012aa1 	.word	0x08012aa1
 8012b00:	08012b51 	.word	0x08012b51
 8012b04:	08012aa1 	.word	0x08012aa1
 8012b08:	08012aa1 	.word	0x08012aa1
 8012b0c:	08012beb 	.word	0x08012beb
 8012b10:	682b      	ldr	r3, [r5, #0]
 8012b12:	1d1a      	adds	r2, r3, #4
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	602a      	str	r2, [r5, #0]
 8012b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b20:	2301      	movs	r3, #1
 8012b22:	e09f      	b.n	8012c64 <_printf_i+0x1ec>
 8012b24:	6820      	ldr	r0, [r4, #0]
 8012b26:	682b      	ldr	r3, [r5, #0]
 8012b28:	0607      	lsls	r7, r0, #24
 8012b2a:	f103 0104 	add.w	r1, r3, #4
 8012b2e:	6029      	str	r1, [r5, #0]
 8012b30:	d501      	bpl.n	8012b36 <_printf_i+0xbe>
 8012b32:	681e      	ldr	r6, [r3, #0]
 8012b34:	e003      	b.n	8012b3e <_printf_i+0xc6>
 8012b36:	0646      	lsls	r6, r0, #25
 8012b38:	d5fb      	bpl.n	8012b32 <_printf_i+0xba>
 8012b3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012b3e:	2e00      	cmp	r6, #0
 8012b40:	da03      	bge.n	8012b4a <_printf_i+0xd2>
 8012b42:	232d      	movs	r3, #45	; 0x2d
 8012b44:	4276      	negs	r6, r6
 8012b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b4a:	485a      	ldr	r0, [pc, #360]	; (8012cb4 <_printf_i+0x23c>)
 8012b4c:	230a      	movs	r3, #10
 8012b4e:	e012      	b.n	8012b76 <_printf_i+0xfe>
 8012b50:	682b      	ldr	r3, [r5, #0]
 8012b52:	6820      	ldr	r0, [r4, #0]
 8012b54:	1d19      	adds	r1, r3, #4
 8012b56:	6029      	str	r1, [r5, #0]
 8012b58:	0605      	lsls	r5, r0, #24
 8012b5a:	d501      	bpl.n	8012b60 <_printf_i+0xe8>
 8012b5c:	681e      	ldr	r6, [r3, #0]
 8012b5e:	e002      	b.n	8012b66 <_printf_i+0xee>
 8012b60:	0641      	lsls	r1, r0, #25
 8012b62:	d5fb      	bpl.n	8012b5c <_printf_i+0xe4>
 8012b64:	881e      	ldrh	r6, [r3, #0]
 8012b66:	4853      	ldr	r0, [pc, #332]	; (8012cb4 <_printf_i+0x23c>)
 8012b68:	2f6f      	cmp	r7, #111	; 0x6f
 8012b6a:	bf0c      	ite	eq
 8012b6c:	2308      	moveq	r3, #8
 8012b6e:	230a      	movne	r3, #10
 8012b70:	2100      	movs	r1, #0
 8012b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b76:	6865      	ldr	r5, [r4, #4]
 8012b78:	60a5      	str	r5, [r4, #8]
 8012b7a:	2d00      	cmp	r5, #0
 8012b7c:	bfa2      	ittt	ge
 8012b7e:	6821      	ldrge	r1, [r4, #0]
 8012b80:	f021 0104 	bicge.w	r1, r1, #4
 8012b84:	6021      	strge	r1, [r4, #0]
 8012b86:	b90e      	cbnz	r6, 8012b8c <_printf_i+0x114>
 8012b88:	2d00      	cmp	r5, #0
 8012b8a:	d04b      	beq.n	8012c24 <_printf_i+0x1ac>
 8012b8c:	4615      	mov	r5, r2
 8012b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b92:	fb03 6711 	mls	r7, r3, r1, r6
 8012b96:	5dc7      	ldrb	r7, [r0, r7]
 8012b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b9c:	4637      	mov	r7, r6
 8012b9e:	42bb      	cmp	r3, r7
 8012ba0:	460e      	mov	r6, r1
 8012ba2:	d9f4      	bls.n	8012b8e <_printf_i+0x116>
 8012ba4:	2b08      	cmp	r3, #8
 8012ba6:	d10b      	bne.n	8012bc0 <_printf_i+0x148>
 8012ba8:	6823      	ldr	r3, [r4, #0]
 8012baa:	07de      	lsls	r6, r3, #31
 8012bac:	d508      	bpl.n	8012bc0 <_printf_i+0x148>
 8012bae:	6923      	ldr	r3, [r4, #16]
 8012bb0:	6861      	ldr	r1, [r4, #4]
 8012bb2:	4299      	cmp	r1, r3
 8012bb4:	bfde      	ittt	le
 8012bb6:	2330      	movle	r3, #48	; 0x30
 8012bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012bc0:	1b52      	subs	r2, r2, r5
 8012bc2:	6122      	str	r2, [r4, #16]
 8012bc4:	f8cd a000 	str.w	sl, [sp]
 8012bc8:	464b      	mov	r3, r9
 8012bca:	aa03      	add	r2, sp, #12
 8012bcc:	4621      	mov	r1, r4
 8012bce:	4640      	mov	r0, r8
 8012bd0:	f7ff fee4 	bl	801299c <_printf_common>
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	d14a      	bne.n	8012c6e <_printf_i+0x1f6>
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bdc:	b004      	add	sp, #16
 8012bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	f043 0320 	orr.w	r3, r3, #32
 8012be8:	6023      	str	r3, [r4, #0]
 8012bea:	4833      	ldr	r0, [pc, #204]	; (8012cb8 <_printf_i+0x240>)
 8012bec:	2778      	movs	r7, #120	; 0x78
 8012bee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012bf2:	6823      	ldr	r3, [r4, #0]
 8012bf4:	6829      	ldr	r1, [r5, #0]
 8012bf6:	061f      	lsls	r7, r3, #24
 8012bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012bfc:	d402      	bmi.n	8012c04 <_printf_i+0x18c>
 8012bfe:	065f      	lsls	r7, r3, #25
 8012c00:	bf48      	it	mi
 8012c02:	b2b6      	uxthmi	r6, r6
 8012c04:	07df      	lsls	r7, r3, #31
 8012c06:	bf48      	it	mi
 8012c08:	f043 0320 	orrmi.w	r3, r3, #32
 8012c0c:	6029      	str	r1, [r5, #0]
 8012c0e:	bf48      	it	mi
 8012c10:	6023      	strmi	r3, [r4, #0]
 8012c12:	b91e      	cbnz	r6, 8012c1c <_printf_i+0x1a4>
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	f023 0320 	bic.w	r3, r3, #32
 8012c1a:	6023      	str	r3, [r4, #0]
 8012c1c:	2310      	movs	r3, #16
 8012c1e:	e7a7      	b.n	8012b70 <_printf_i+0xf8>
 8012c20:	4824      	ldr	r0, [pc, #144]	; (8012cb4 <_printf_i+0x23c>)
 8012c22:	e7e4      	b.n	8012bee <_printf_i+0x176>
 8012c24:	4615      	mov	r5, r2
 8012c26:	e7bd      	b.n	8012ba4 <_printf_i+0x12c>
 8012c28:	682b      	ldr	r3, [r5, #0]
 8012c2a:	6826      	ldr	r6, [r4, #0]
 8012c2c:	6961      	ldr	r1, [r4, #20]
 8012c2e:	1d18      	adds	r0, r3, #4
 8012c30:	6028      	str	r0, [r5, #0]
 8012c32:	0635      	lsls	r5, r6, #24
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	d501      	bpl.n	8012c3c <_printf_i+0x1c4>
 8012c38:	6019      	str	r1, [r3, #0]
 8012c3a:	e002      	b.n	8012c42 <_printf_i+0x1ca>
 8012c3c:	0670      	lsls	r0, r6, #25
 8012c3e:	d5fb      	bpl.n	8012c38 <_printf_i+0x1c0>
 8012c40:	8019      	strh	r1, [r3, #0]
 8012c42:	2300      	movs	r3, #0
 8012c44:	6123      	str	r3, [r4, #16]
 8012c46:	4615      	mov	r5, r2
 8012c48:	e7bc      	b.n	8012bc4 <_printf_i+0x14c>
 8012c4a:	682b      	ldr	r3, [r5, #0]
 8012c4c:	1d1a      	adds	r2, r3, #4
 8012c4e:	602a      	str	r2, [r5, #0]
 8012c50:	681d      	ldr	r5, [r3, #0]
 8012c52:	6862      	ldr	r2, [r4, #4]
 8012c54:	2100      	movs	r1, #0
 8012c56:	4628      	mov	r0, r5
 8012c58:	f7ed faba 	bl	80001d0 <memchr>
 8012c5c:	b108      	cbz	r0, 8012c62 <_printf_i+0x1ea>
 8012c5e:	1b40      	subs	r0, r0, r5
 8012c60:	6060      	str	r0, [r4, #4]
 8012c62:	6863      	ldr	r3, [r4, #4]
 8012c64:	6123      	str	r3, [r4, #16]
 8012c66:	2300      	movs	r3, #0
 8012c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c6c:	e7aa      	b.n	8012bc4 <_printf_i+0x14c>
 8012c6e:	6923      	ldr	r3, [r4, #16]
 8012c70:	462a      	mov	r2, r5
 8012c72:	4649      	mov	r1, r9
 8012c74:	4640      	mov	r0, r8
 8012c76:	47d0      	blx	sl
 8012c78:	3001      	adds	r0, #1
 8012c7a:	d0ad      	beq.n	8012bd8 <_printf_i+0x160>
 8012c7c:	6823      	ldr	r3, [r4, #0]
 8012c7e:	079b      	lsls	r3, r3, #30
 8012c80:	d413      	bmi.n	8012caa <_printf_i+0x232>
 8012c82:	68e0      	ldr	r0, [r4, #12]
 8012c84:	9b03      	ldr	r3, [sp, #12]
 8012c86:	4298      	cmp	r0, r3
 8012c88:	bfb8      	it	lt
 8012c8a:	4618      	movlt	r0, r3
 8012c8c:	e7a6      	b.n	8012bdc <_printf_i+0x164>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4632      	mov	r2, r6
 8012c92:	4649      	mov	r1, r9
 8012c94:	4640      	mov	r0, r8
 8012c96:	47d0      	blx	sl
 8012c98:	3001      	adds	r0, #1
 8012c9a:	d09d      	beq.n	8012bd8 <_printf_i+0x160>
 8012c9c:	3501      	adds	r5, #1
 8012c9e:	68e3      	ldr	r3, [r4, #12]
 8012ca0:	9903      	ldr	r1, [sp, #12]
 8012ca2:	1a5b      	subs	r3, r3, r1
 8012ca4:	42ab      	cmp	r3, r5
 8012ca6:	dcf2      	bgt.n	8012c8e <_printf_i+0x216>
 8012ca8:	e7eb      	b.n	8012c82 <_printf_i+0x20a>
 8012caa:	2500      	movs	r5, #0
 8012cac:	f104 0619 	add.w	r6, r4, #25
 8012cb0:	e7f5      	b.n	8012c9e <_printf_i+0x226>
 8012cb2:	bf00      	nop
 8012cb4:	08015bb4 	.word	0x08015bb4
 8012cb8:	08015bc5 	.word	0x08015bc5

08012cbc <__sflush_r>:
 8012cbc:	898a      	ldrh	r2, [r1, #12]
 8012cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc2:	4605      	mov	r5, r0
 8012cc4:	0710      	lsls	r0, r2, #28
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	d458      	bmi.n	8012d7c <__sflush_r+0xc0>
 8012cca:	684b      	ldr	r3, [r1, #4]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	dc05      	bgt.n	8012cdc <__sflush_r+0x20>
 8012cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dc02      	bgt.n	8012cdc <__sflush_r+0x20>
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cde:	2e00      	cmp	r6, #0
 8012ce0:	d0f9      	beq.n	8012cd6 <__sflush_r+0x1a>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ce8:	682f      	ldr	r7, [r5, #0]
 8012cea:	6a21      	ldr	r1, [r4, #32]
 8012cec:	602b      	str	r3, [r5, #0]
 8012cee:	d032      	beq.n	8012d56 <__sflush_r+0x9a>
 8012cf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012cf2:	89a3      	ldrh	r3, [r4, #12]
 8012cf4:	075a      	lsls	r2, r3, #29
 8012cf6:	d505      	bpl.n	8012d04 <__sflush_r+0x48>
 8012cf8:	6863      	ldr	r3, [r4, #4]
 8012cfa:	1ac0      	subs	r0, r0, r3
 8012cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cfe:	b10b      	cbz	r3, 8012d04 <__sflush_r+0x48>
 8012d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d02:	1ac0      	subs	r0, r0, r3
 8012d04:	2300      	movs	r3, #0
 8012d06:	4602      	mov	r2, r0
 8012d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d0a:	6a21      	ldr	r1, [r4, #32]
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	47b0      	blx	r6
 8012d10:	1c43      	adds	r3, r0, #1
 8012d12:	89a3      	ldrh	r3, [r4, #12]
 8012d14:	d106      	bne.n	8012d24 <__sflush_r+0x68>
 8012d16:	6829      	ldr	r1, [r5, #0]
 8012d18:	291d      	cmp	r1, #29
 8012d1a:	d82b      	bhi.n	8012d74 <__sflush_r+0xb8>
 8012d1c:	4a29      	ldr	r2, [pc, #164]	; (8012dc4 <__sflush_r+0x108>)
 8012d1e:	410a      	asrs	r2, r1
 8012d20:	07d6      	lsls	r6, r2, #31
 8012d22:	d427      	bmi.n	8012d74 <__sflush_r+0xb8>
 8012d24:	2200      	movs	r2, #0
 8012d26:	6062      	str	r2, [r4, #4]
 8012d28:	04d9      	lsls	r1, r3, #19
 8012d2a:	6922      	ldr	r2, [r4, #16]
 8012d2c:	6022      	str	r2, [r4, #0]
 8012d2e:	d504      	bpl.n	8012d3a <__sflush_r+0x7e>
 8012d30:	1c42      	adds	r2, r0, #1
 8012d32:	d101      	bne.n	8012d38 <__sflush_r+0x7c>
 8012d34:	682b      	ldr	r3, [r5, #0]
 8012d36:	b903      	cbnz	r3, 8012d3a <__sflush_r+0x7e>
 8012d38:	6560      	str	r0, [r4, #84]	; 0x54
 8012d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d3c:	602f      	str	r7, [r5, #0]
 8012d3e:	2900      	cmp	r1, #0
 8012d40:	d0c9      	beq.n	8012cd6 <__sflush_r+0x1a>
 8012d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d46:	4299      	cmp	r1, r3
 8012d48:	d002      	beq.n	8012d50 <__sflush_r+0x94>
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	f7ff fc96 	bl	801267c <_free_r>
 8012d50:	2000      	movs	r0, #0
 8012d52:	6360      	str	r0, [r4, #52]	; 0x34
 8012d54:	e7c0      	b.n	8012cd8 <__sflush_r+0x1c>
 8012d56:	2301      	movs	r3, #1
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b0      	blx	r6
 8012d5c:	1c41      	adds	r1, r0, #1
 8012d5e:	d1c8      	bne.n	8012cf2 <__sflush_r+0x36>
 8012d60:	682b      	ldr	r3, [r5, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d0c5      	beq.n	8012cf2 <__sflush_r+0x36>
 8012d66:	2b1d      	cmp	r3, #29
 8012d68:	d001      	beq.n	8012d6e <__sflush_r+0xb2>
 8012d6a:	2b16      	cmp	r3, #22
 8012d6c:	d101      	bne.n	8012d72 <__sflush_r+0xb6>
 8012d6e:	602f      	str	r7, [r5, #0]
 8012d70:	e7b1      	b.n	8012cd6 <__sflush_r+0x1a>
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d78:	81a3      	strh	r3, [r4, #12]
 8012d7a:	e7ad      	b.n	8012cd8 <__sflush_r+0x1c>
 8012d7c:	690f      	ldr	r7, [r1, #16]
 8012d7e:	2f00      	cmp	r7, #0
 8012d80:	d0a9      	beq.n	8012cd6 <__sflush_r+0x1a>
 8012d82:	0793      	lsls	r3, r2, #30
 8012d84:	680e      	ldr	r6, [r1, #0]
 8012d86:	bf08      	it	eq
 8012d88:	694b      	ldreq	r3, [r1, #20]
 8012d8a:	600f      	str	r7, [r1, #0]
 8012d8c:	bf18      	it	ne
 8012d8e:	2300      	movne	r3, #0
 8012d90:	eba6 0807 	sub.w	r8, r6, r7
 8012d94:	608b      	str	r3, [r1, #8]
 8012d96:	f1b8 0f00 	cmp.w	r8, #0
 8012d9a:	dd9c      	ble.n	8012cd6 <__sflush_r+0x1a>
 8012d9c:	6a21      	ldr	r1, [r4, #32]
 8012d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012da0:	4643      	mov	r3, r8
 8012da2:	463a      	mov	r2, r7
 8012da4:	4628      	mov	r0, r5
 8012da6:	47b0      	blx	r6
 8012da8:	2800      	cmp	r0, #0
 8012daa:	dc06      	bgt.n	8012dba <__sflush_r+0xfe>
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	f04f 30ff 	mov.w	r0, #4294967295
 8012db8:	e78e      	b.n	8012cd8 <__sflush_r+0x1c>
 8012dba:	4407      	add	r7, r0
 8012dbc:	eba8 0800 	sub.w	r8, r8, r0
 8012dc0:	e7e9      	b.n	8012d96 <__sflush_r+0xda>
 8012dc2:	bf00      	nop
 8012dc4:	dfbffffe 	.word	0xdfbffffe

08012dc8 <_fflush_r>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	690b      	ldr	r3, [r1, #16]
 8012dcc:	4605      	mov	r5, r0
 8012dce:	460c      	mov	r4, r1
 8012dd0:	b913      	cbnz	r3, 8012dd8 <_fflush_r+0x10>
 8012dd2:	2500      	movs	r5, #0
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	bd38      	pop	{r3, r4, r5, pc}
 8012dd8:	b118      	cbz	r0, 8012de2 <_fflush_r+0x1a>
 8012dda:	6a03      	ldr	r3, [r0, #32]
 8012ddc:	b90b      	cbnz	r3, 8012de2 <_fflush_r+0x1a>
 8012dde:	f7ff fa15 	bl	801220c <__sinit>
 8012de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d0f3      	beq.n	8012dd2 <_fflush_r+0xa>
 8012dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012dec:	07d0      	lsls	r0, r2, #31
 8012dee:	d404      	bmi.n	8012dfa <_fflush_r+0x32>
 8012df0:	0599      	lsls	r1, r3, #22
 8012df2:	d402      	bmi.n	8012dfa <_fflush_r+0x32>
 8012df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012df6:	f7ff fc2a 	bl	801264e <__retarget_lock_acquire_recursive>
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	f7ff ff5d 	bl	8012cbc <__sflush_r>
 8012e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e04:	07da      	lsls	r2, r3, #31
 8012e06:	4605      	mov	r5, r0
 8012e08:	d4e4      	bmi.n	8012dd4 <_fflush_r+0xc>
 8012e0a:	89a3      	ldrh	r3, [r4, #12]
 8012e0c:	059b      	lsls	r3, r3, #22
 8012e0e:	d4e1      	bmi.n	8012dd4 <_fflush_r+0xc>
 8012e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e12:	f7ff fc1d 	bl	8012650 <__retarget_lock_release_recursive>
 8012e16:	e7dd      	b.n	8012dd4 <_fflush_r+0xc>

08012e18 <__swhatbuf_r>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	460c      	mov	r4, r1
 8012e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e20:	2900      	cmp	r1, #0
 8012e22:	b096      	sub	sp, #88	; 0x58
 8012e24:	4615      	mov	r5, r2
 8012e26:	461e      	mov	r6, r3
 8012e28:	da0d      	bge.n	8012e46 <__swhatbuf_r+0x2e>
 8012e2a:	89a3      	ldrh	r3, [r4, #12]
 8012e2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012e30:	f04f 0100 	mov.w	r1, #0
 8012e34:	bf0c      	ite	eq
 8012e36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012e3a:	2340      	movne	r3, #64	; 0x40
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	6031      	str	r1, [r6, #0]
 8012e40:	602b      	str	r3, [r5, #0]
 8012e42:	b016      	add	sp, #88	; 0x58
 8012e44:	bd70      	pop	{r4, r5, r6, pc}
 8012e46:	466a      	mov	r2, sp
 8012e48:	f000 f878 	bl	8012f3c <_fstat_r>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	dbec      	blt.n	8012e2a <__swhatbuf_r+0x12>
 8012e50:	9901      	ldr	r1, [sp, #4]
 8012e52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012e56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012e5a:	4259      	negs	r1, r3
 8012e5c:	4159      	adcs	r1, r3
 8012e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e62:	e7eb      	b.n	8012e3c <__swhatbuf_r+0x24>

08012e64 <__smakebuf_r>:
 8012e64:	898b      	ldrh	r3, [r1, #12]
 8012e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e68:	079d      	lsls	r5, r3, #30
 8012e6a:	4606      	mov	r6, r0
 8012e6c:	460c      	mov	r4, r1
 8012e6e:	d507      	bpl.n	8012e80 <__smakebuf_r+0x1c>
 8012e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e74:	6023      	str	r3, [r4, #0]
 8012e76:	6123      	str	r3, [r4, #16]
 8012e78:	2301      	movs	r3, #1
 8012e7a:	6163      	str	r3, [r4, #20]
 8012e7c:	b002      	add	sp, #8
 8012e7e:	bd70      	pop	{r4, r5, r6, pc}
 8012e80:	ab01      	add	r3, sp, #4
 8012e82:	466a      	mov	r2, sp
 8012e84:	f7ff ffc8 	bl	8012e18 <__swhatbuf_r>
 8012e88:	9900      	ldr	r1, [sp, #0]
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f7ff f867 	bl	8011f60 <_malloc_r>
 8012e92:	b948      	cbnz	r0, 8012ea8 <__smakebuf_r+0x44>
 8012e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e98:	059a      	lsls	r2, r3, #22
 8012e9a:	d4ef      	bmi.n	8012e7c <__smakebuf_r+0x18>
 8012e9c:	f023 0303 	bic.w	r3, r3, #3
 8012ea0:	f043 0302 	orr.w	r3, r3, #2
 8012ea4:	81a3      	strh	r3, [r4, #12]
 8012ea6:	e7e3      	b.n	8012e70 <__smakebuf_r+0xc>
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	6020      	str	r0, [r4, #0]
 8012eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eb0:	81a3      	strh	r3, [r4, #12]
 8012eb2:	9b00      	ldr	r3, [sp, #0]
 8012eb4:	6163      	str	r3, [r4, #20]
 8012eb6:	9b01      	ldr	r3, [sp, #4]
 8012eb8:	6120      	str	r0, [r4, #16]
 8012eba:	b15b      	cbz	r3, 8012ed4 <__smakebuf_r+0x70>
 8012ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	f000 f84d 	bl	8012f60 <_isatty_r>
 8012ec6:	b128      	cbz	r0, 8012ed4 <__smakebuf_r+0x70>
 8012ec8:	89a3      	ldrh	r3, [r4, #12]
 8012eca:	f023 0303 	bic.w	r3, r3, #3
 8012ece:	f043 0301 	orr.w	r3, r3, #1
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	431d      	orrs	r5, r3
 8012ed8:	81a5      	strh	r5, [r4, #12]
 8012eda:	e7cf      	b.n	8012e7c <__smakebuf_r+0x18>

08012edc <_raise_r>:
 8012edc:	291f      	cmp	r1, #31
 8012ede:	b538      	push	{r3, r4, r5, lr}
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	460d      	mov	r5, r1
 8012ee4:	d904      	bls.n	8012ef0 <_raise_r+0x14>
 8012ee6:	2316      	movs	r3, #22
 8012ee8:	6003      	str	r3, [r0, #0]
 8012eea:	f04f 30ff 	mov.w	r0, #4294967295
 8012eee:	bd38      	pop	{r3, r4, r5, pc}
 8012ef0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012ef2:	b112      	cbz	r2, 8012efa <_raise_r+0x1e>
 8012ef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ef8:	b94b      	cbnz	r3, 8012f0e <_raise_r+0x32>
 8012efa:	4620      	mov	r0, r4
 8012efc:	f000 f852 	bl	8012fa4 <_getpid_r>
 8012f00:	462a      	mov	r2, r5
 8012f02:	4601      	mov	r1, r0
 8012f04:	4620      	mov	r0, r4
 8012f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f0a:	f000 b839 	b.w	8012f80 <_kill_r>
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d00a      	beq.n	8012f28 <_raise_r+0x4c>
 8012f12:	1c59      	adds	r1, r3, #1
 8012f14:	d103      	bne.n	8012f1e <_raise_r+0x42>
 8012f16:	2316      	movs	r3, #22
 8012f18:	6003      	str	r3, [r0, #0]
 8012f1a:	2001      	movs	r0, #1
 8012f1c:	e7e7      	b.n	8012eee <_raise_r+0x12>
 8012f1e:	2400      	movs	r4, #0
 8012f20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f24:	4628      	mov	r0, r5
 8012f26:	4798      	blx	r3
 8012f28:	2000      	movs	r0, #0
 8012f2a:	e7e0      	b.n	8012eee <_raise_r+0x12>

08012f2c <raise>:
 8012f2c:	4b02      	ldr	r3, [pc, #8]	; (8012f38 <raise+0xc>)
 8012f2e:	4601      	mov	r1, r0
 8012f30:	6818      	ldr	r0, [r3, #0]
 8012f32:	f7ff bfd3 	b.w	8012edc <_raise_r>
 8012f36:	bf00      	nop
 8012f38:	20000084 	.word	0x20000084

08012f3c <_fstat_r>:
 8012f3c:	b538      	push	{r3, r4, r5, lr}
 8012f3e:	4d07      	ldr	r5, [pc, #28]	; (8012f5c <_fstat_r+0x20>)
 8012f40:	2300      	movs	r3, #0
 8012f42:	4604      	mov	r4, r0
 8012f44:	4608      	mov	r0, r1
 8012f46:	4611      	mov	r1, r2
 8012f48:	602b      	str	r3, [r5, #0]
 8012f4a:	f7ed fec6 	bl	8000cda <_fstat>
 8012f4e:	1c43      	adds	r3, r0, #1
 8012f50:	d102      	bne.n	8012f58 <_fstat_r+0x1c>
 8012f52:	682b      	ldr	r3, [r5, #0]
 8012f54:	b103      	cbz	r3, 8012f58 <_fstat_r+0x1c>
 8012f56:	6023      	str	r3, [r4, #0]
 8012f58:	bd38      	pop	{r3, r4, r5, pc}
 8012f5a:	bf00      	nop
 8012f5c:	200086f0 	.word	0x200086f0

08012f60 <_isatty_r>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	4d06      	ldr	r5, [pc, #24]	; (8012f7c <_isatty_r+0x1c>)
 8012f64:	2300      	movs	r3, #0
 8012f66:	4604      	mov	r4, r0
 8012f68:	4608      	mov	r0, r1
 8012f6a:	602b      	str	r3, [r5, #0]
 8012f6c:	f7ed fec5 	bl	8000cfa <_isatty>
 8012f70:	1c43      	adds	r3, r0, #1
 8012f72:	d102      	bne.n	8012f7a <_isatty_r+0x1a>
 8012f74:	682b      	ldr	r3, [r5, #0]
 8012f76:	b103      	cbz	r3, 8012f7a <_isatty_r+0x1a>
 8012f78:	6023      	str	r3, [r4, #0]
 8012f7a:	bd38      	pop	{r3, r4, r5, pc}
 8012f7c:	200086f0 	.word	0x200086f0

08012f80 <_kill_r>:
 8012f80:	b538      	push	{r3, r4, r5, lr}
 8012f82:	4d07      	ldr	r5, [pc, #28]	; (8012fa0 <_kill_r+0x20>)
 8012f84:	2300      	movs	r3, #0
 8012f86:	4604      	mov	r4, r0
 8012f88:	4608      	mov	r0, r1
 8012f8a:	4611      	mov	r1, r2
 8012f8c:	602b      	str	r3, [r5, #0]
 8012f8e:	f7ed fe43 	bl	8000c18 <_kill>
 8012f92:	1c43      	adds	r3, r0, #1
 8012f94:	d102      	bne.n	8012f9c <_kill_r+0x1c>
 8012f96:	682b      	ldr	r3, [r5, #0]
 8012f98:	b103      	cbz	r3, 8012f9c <_kill_r+0x1c>
 8012f9a:	6023      	str	r3, [r4, #0]
 8012f9c:	bd38      	pop	{r3, r4, r5, pc}
 8012f9e:	bf00      	nop
 8012fa0:	200086f0 	.word	0x200086f0

08012fa4 <_getpid_r>:
 8012fa4:	f7ed be30 	b.w	8000c08 <_getpid>

08012fa8 <_init>:
 8012fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012faa:	bf00      	nop
 8012fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fae:	bc08      	pop	{r3}
 8012fb0:	469e      	mov	lr, r3
 8012fb2:	4770      	bx	lr

08012fb4 <_fini>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	bf00      	nop
 8012fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fba:	bc08      	pop	{r3}
 8012fbc:	469e      	mov	lr, r3
 8012fbe:	4770      	bx	lr
