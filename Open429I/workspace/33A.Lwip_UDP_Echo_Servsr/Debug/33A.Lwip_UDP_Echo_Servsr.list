
33A.Lwip_UDP_Echo_Servsr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be8  0800f39c  0800f39c  0001f39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f84  08011f84  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011f84  08011f84  00021f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f8c  08011f8c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f8c  08011f8c  00021f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f90  08011f90  00021f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011f94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          000084ac  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008534  20008534  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ae47  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000508f  00000000  00000000  0004af42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d0  00000000  00000000  0004ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fce  00000000  00000000  000513a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fb9e  00000000  00000000  00052376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024823  00000000  00000000  00081f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eaee3  00000000  00000000  000a6737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000578c  00000000  00000000  0019161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00196da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f384 	.word	0x0800f384

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f384 	.word	0x0800f384

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_GPIO_Init+0x84>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <MX_GPIO_Init+0x84>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_GPIO_Init+0x84>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_GPIO_Init+0x84>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <MX_GPIO_Init+0x84>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_GPIO_Init+0x84>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_GPIO_Init+0x84>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <MX_GPIO_Init+0x84>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_GPIO_Init+0x84>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_GPIO_Init+0x84>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_GPIO_Init+0x84>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_GPIO_Init+0x84>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fc5a 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f86c 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f7ff ffb4 	bl	800058c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000624:	f000 fa58 	bl	8000ad8 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000628:	f003 f8fa 	bl	8003820 <MX_LWIP_Init>

  /* Configure the Network interface */
  //Netif_Config();

  /* tcp echo server Init */
  udp_echoserver_init();
 800062c:	f000 fa02 	bl	8000a34 <udp_echoserver_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("welcome to www.waveshere.com !!!\n\r");
 8000630:	4829      	ldr	r0, [pc, #164]	; (80006d8 <main+0xc4>)
 8000632:	f00d ff95 	bl	800e560 <iprintf>

  while (1)
  {
	if(udp_flag)
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <main+0xc8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d046      	beq.n	80006cc <main+0xb8>
	{
		udp_flag = 0;
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0xc8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]

		switch(udp_data)
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <main+0xcc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b33      	cmp	r3, #51	; 0x33
 800064a:	d00e      	beq.n	800066a <main+0x56>
 800064c:	2b33      	cmp	r3, #51	; 0x33
 800064e:	dc10      	bgt.n	8000672 <main+0x5e>
 8000650:	2b31      	cmp	r3, #49	; 0x31
 8000652:	d002      	beq.n	800065a <main+0x46>
 8000654:	2b32      	cmp	r3, #50	; 0x32
 8000656:	d004      	beq.n	8000662 <main+0x4e>
 8000658:	e00b      	b.n	8000672 <main+0x5e>
		{
		case '1': SW1_flag = 1; break;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <main+0xd0>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e007      	b.n	8000672 <main+0x5e>
		case '2': SW2_flag = 1; break;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0xd4>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e003      	b.n	8000672 <main+0x5e>
		case '3': SW3_flag = 1; break;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <main+0xd8>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	bf00      	nop
		}

		if(SW1_flag){
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <main+0xd0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00a      	beq.n	8000690 <main+0x7c>
			SW1_flag = 0;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <main+0xd0>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <main+0xdc>)
 8000684:	f002 f84e 	bl	8002724 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f000 fc93 	bl	8000fb4 <HAL_Delay>
 800068e:	e01d      	b.n	80006cc <main+0xb8>

		}
		else if(SW2_flag){
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <main+0xd4>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00a      	beq.n	80006ae <main+0x9a>
			SW2_flag = 0;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <main+0xd4>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <main+0xdc>)
 80006a2:	f002 f83f 	bl	8002724 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80006a6:	20c8      	movs	r0, #200	; 0xc8
 80006a8:	f000 fc84 	bl	8000fb4 <HAL_Delay>
 80006ac:	e00e      	b.n	80006cc <main+0xb8>

		}
		else if(SW3_flag){
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0xd8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00a      	beq.n	80006cc <main+0xb8>
			SW3_flag = 0;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <main+0xd8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <main+0xdc>)
 80006c2:	f002 f82f 	bl	8002724 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f000 fc74 	bl	8000fb4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Read a received packet from the Ethernet buffers and send it
	   to the lwIP for handling */
	ethernetif_input(&gnetif);
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <main+0xe0>)
 80006ce:	f003 fb0b 	bl	8003ce8 <ethernetif_input>

	/* Handle timeouts */
	sys_check_timeouts();
 80006d2:	f00a fdc9 	bl	800b268 <sys_check_timeouts>
	if(udp_flag)
 80006d6:	e7ae      	b.n	8000636 <main+0x22>
 80006d8:	0800f39c 	.word	0x0800f39c
 80006dc:	200000ad 	.word	0x200000ad
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	200000a4 	.word	0x200000a4
 80006e8:	200000a5 	.word	0x200000a5
 80006ec:	200000a6 	.word	0x200000a6
 80006f0:	40021400 	.word	0x40021400
 80006f4:	200000fc 	.word	0x200000fc

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00d ff8f 	bl	800e62a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000768:	2319      	movs	r3, #25
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800076c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	4618      	mov	r0, r3
 8000780:	f001 ffea 	bl	8002758 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800078a:	f000 f81f 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2105      	movs	r1, #5
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fa4b 	bl	8002c48 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007b8:	f000 f808 	bl	80007cc <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f000 fb7e 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return 1;
 8000880:	2301      	movs	r3, #1
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <_kill>:

int _kill(int pid, int sig)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <_kill+0x20>)
 8000898:	2216      	movs	r2, #22
 800089a:	601a      	str	r2, [r3, #0]
  return -1;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20008524 	.word	0x20008524

080008b0 <_exit>:

void _exit (int status)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ffe5 	bl	800088c <_kill>
  while (1) {}    /* Make sure we hang here */
 80008c2:	e7fe      	b.n	80008c2 <_exit+0x12>

080008c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00a      	b.n	80008ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d6:	f3af 8000 	nop.w
 80008da:	4601      	mov	r1, r0
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	60ba      	str	r2, [r7, #8]
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf0      	blt.n	80008d6 <_read+0x12>
  }

  return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e009      	b.n	8000924 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf1      	blt.n	8000910 <_write+0x12>
  }
  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_close>:

int _close(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095e:	605a      	str	r2, [r3, #4]
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_isatty>:

int _isatty(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d205      	bcs.n	80009dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <_sbrk+0x6c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20030000 	.word	0x20030000
 8000a00:	00000400 	.word	0x00000400
 8000a04:	200000a8 	.word	0x200000a8
 8000a08:	20008538 	.word	0x20008538
 8000a0c:	20008524 	.word	0x20008524

08000a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000a3a:	f00b f983 	bl	800bd44 <udp_new>
 8000a3e:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d013      	beq.n	8000a6e <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000a46:	2207      	movs	r2, #7
 8000a48:	490b      	ldr	r1, [pc, #44]	; (8000a78 <udp_echoserver_init+0x44>)
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f00a fffa 	bl	800ba44 <udp_bind>
 8000a50:	4603      	mov	r3, r0
 8000a52:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d105      	bne.n	8000a68 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4907      	ldr	r1, [pc, #28]	; (8000a7c <udp_echoserver_init+0x48>)
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f00b f90d 	bl	800bc80 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000a66:	e002      	b.n	8000a6e <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f00b f929 	bl	800bcc0 <udp_remove>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08011e94 	.word	0x08011e94
 8000a7c:	08000a81 	.word	0x08000a81

08000a80 <udp_echoserver_receive_callback>:
extern UART_HandleTypeDef huart1;
uint8_t udp_data;
uint8_t udp_flag;

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	603b      	str	r3, [r7, #0]

  MEMCPY(&udp_data, p->payload, p->len);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6859      	ldr	r1, [r3, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	895b      	ldrh	r3, [r3, #10]
 8000a96:	461a      	mov	r2, r3
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <udp_echoserver_receive_callback+0x50>)
 8000a9a:	f00d fe3c 	bl	800e716 <memcpy>
  HAL_UART_Transmit(&huart1, &udp_data, 1, 10);
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	490b      	ldr	r1, [pc, #44]	; (8000ad0 <udp_echoserver_receive_callback+0x50>)
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <udp_echoserver_receive_callback+0x54>)
 8000aa6:	f002 faff 	bl	80030a8 <HAL_UART_Transmit>

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000aaa:	2207      	movs	r2, #7
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	68b8      	ldr	r0, [r7, #8]
 8000ab0:	f00b f850 	bl	800bb54 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	68b8      	ldr	r0, [r7, #8]
 8000ab8:	f00a fdda 	bl	800b670 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000abc:	68b8      	ldr	r0, [r7, #8]
 8000abe:	f00b f8b7 	bl	800bc30 <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f004 fece 	bl	8005864 <pbuf_free>
   
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000ac 	.word	0x200000ac
 8000ad4:	200000b0 	.word	0x200000b0

08000ad8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f002 fa7a 	bl	8003008 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f7ff fe57 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000b0 	.word	0x200000b0
 8000b28:	40011000 	.word	0x40011000

08000b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12c      	bne.n	8000ba8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba4:	f001 fc12 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc0:	f7ff ff26 	bl	8000a10 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f00d fd6d 	bl	800e6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd11 	bl	8000614 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bf4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c00:	08011f94 	.word	0x08011f94
  ldr r2, =_sbss
 8000c04:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c08:	20008534 	.word	0x20008534

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>

08000c0e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00b      	beq.n	8000c36 <DP83848_RegisterBusIO+0x28>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <DP83848_RegisterBusIO+0x28>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <DP83848_RegisterBusIO+0x28>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e014      	b.n	8000c66 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691a      	ldr	r2, [r3, #16]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d17c      	bne.n	8000d8c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e01c      	b.n	8000ce6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f107 0208 	add.w	r2, r7, #8
 8000cb4:	2119      	movs	r1, #25
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	4798      	blx	r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da03      	bge.n	8000cc8 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000cc0:	f06f 0304 	mvn.w	r3, #4
 8000cc4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000cc6:	e00b      	b.n	8000ce0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d105      	bne.n	8000ce0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
         break;
 8000cde:	e005      	b.n	8000cec <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2b1f      	cmp	r3, #31
 8000cea:	d9df      	bls.n	8000cac <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b1f      	cmp	r3, #31
 8000cf2:	d902      	bls.n	8000cfa <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000cf4:	f06f 0302 	mvn.w	r3, #2
 8000cf8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d145      	bne.n	8000d8c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6810      	ldr	r0, [r2, #0]
 8000d08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4798      	blx	r3
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db37      	blt.n	8000d86 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6810      	ldr	r0, [r2, #0]
 8000d1e:	f107 0208 	add.w	r2, r7, #8
 8000d22:	2100      	movs	r1, #0
 8000d24:	4798      	blx	r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db28      	blt.n	8000d7e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4798      	blx	r3
 8000d32:	4603      	mov	r3, r0
 8000d34:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000d36:	e01c      	b.n	8000d72 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4798      	blx	r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d4a:	d80e      	bhi.n	8000d6a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6810      	ldr	r0, [r2, #0]
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4798      	blx	r3
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	da07      	bge.n	8000d72 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000d62:	f06f 0304 	mvn.w	r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
                 break;
 8000d68:	e010      	b.n	8000d8c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000d6a:	f06f 0301 	mvn.w	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
               break;
 8000d70:	e00c      	b.n	8000d8c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1dd      	bne.n	8000d38 <DP83848_Init+0xc6>
 8000d7c:	e006      	b.n	8000d8c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000d7e:	f06f 0304 	mvn.w	r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	e002      	b.n	8000d8c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000d86:	f06f 0303 	mvn.w	r3, #3
 8000d8a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d112      	bne.n	8000db8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4798      	blx	r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000d9c:	bf00      	nop
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4798      	blx	r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000db0:	d9f5      	bls.n	8000d9e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000db8:	693b      	ldr	r3, [r7, #16]
 }
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6810      	ldr	r0, [r2, #0]
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4798      	blx	r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	da02      	bge.n	8000dea <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000de4:	f06f 0304 	mvn.w	r3, #4
 8000de8:	e06e      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6810      	ldr	r0, [r2, #0]
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	2101      	movs	r1, #1
 8000df8:	4798      	blx	r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da02      	bge.n	8000e06 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e00:	f06f 0304 	mvn.w	r3, #4
 8000e04:	e060      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e059      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6810      	ldr	r0, [r2, #0]
 8000e1c:	f107 020c 	add.w	r2, r7, #12
 8000e20:	2100      	movs	r1, #0
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da02      	bge.n	8000e30 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e2a:	f06f 0304 	mvn.w	r3, #4
 8000e2e:	e04b      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d11b      	bne.n	8000e72 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <DP83848_GetLinkState+0x90>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e03a      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e033      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e02c      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e02a      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6810      	ldr	r0, [r2, #0]
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4798      	blx	r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	da02      	bge.n	8000e8e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000e88:	f06f 0304 	mvn.w	r3, #4
 8000e8c:	e01c      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	e015      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0306 	and.w	r3, r3, #6
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d101      	bne.n	8000eaa <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e00e      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f003 0306 	and.w	r3, r3, #6
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e007      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0306 	and.w	r3, r3, #6
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d101      	bne.n	8000ec6 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e000      	b.n	8000ec8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000ec6:	2305      	movs	r3, #5
    }
  }
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f931 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fc68 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f93b 	bl	80011ae <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f911 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200000f8 	.word	0x200000f8

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200000f8 	.word	0x200000f8

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff47 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff5c 	bl	8001044 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffb0 	bl	800111c <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e06c      	b.n	80012b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d106      	bne.n	80011f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2223      	movs	r2, #35	; 0x23
 80011e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 fdeb 	bl	8003dc8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <HAL_ETH_Init+0xf4>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <HAL_ETH_Init+0xf4>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_ETH_Init+0xf4>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_ETH_Init+0xf8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_ETH_Init+0xf8>)
 8001214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001218:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_ETH_Init+0xf8>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4927      	ldr	r1, [pc, #156]	; (80012c0 <HAL_ETH_Init+0xf8>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_ETH_Init+0xf8>)
 800122a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff feaa 	bl	8000f9c <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800124a:	e011      	b.n	8001270 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800124c:	f7ff fea6 	bl	8000f9c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800125a:	d909      	bls.n	8001270 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2204      	movs	r2, #4
 8001260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	22e0      	movs	r2, #224	; 0xe0
 8001268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e021      	b.n	80012b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1e4      	bne.n	800124c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fdfc 	bl	8001e80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fea3 	bl	8001fd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fef9 	bl	8002086 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fe61 	bl	8001f64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2210      	movs	r2, #16
 80012ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800

080012c4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d150      	bne.n	8001378 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2223      	movs	r2, #35	; 0x23
 80012da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2204      	movs	r2, #4
 80012e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f9fd 	bl	80016e4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0208 	orr.w	r2, r2, #8
 80012f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fe56 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0204 	orr.w	r2, r2, #4
 800131e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fe43 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fc42 	bl	8001bc0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800134e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001352:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800136a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2223      	movs	r2, #35	; 0x23
 8001370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001390:	2b23      	cmp	r3, #35	; 0x23
 8001392:	d14a      	bne.n	800142a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2223      	movs	r2, #35	; 0x23
 8001398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013b2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f023 0302 	bic.w	r3, r3, #2
 80013c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ca:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0204 	bic.w	r2, r2, #4
 80013da:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fde5 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fbe4 	bl	8001bc0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0208 	bic.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff fdcf 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2210      	movs	r2, #16
 8001422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
  }
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e07c      	b.n	8001554 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001460:	2b23      	cmp	r3, #35	; 0x23
 8001462:	d176      	bne.n	8001552 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001464:	2200      	movs	r2, #0
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fe79 	bl	8002160 <ETH_Prepare_Tx_Descriptors>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d009      	beq.n	8001488 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147a:	f043 0202 	orr.w	r2, r3, #2
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e065      	b.n	8001554 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001488:	f3bf 8f4f 	dsb	sy
}
 800148c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3206      	adds	r2, #6
 8001496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d904      	bls.n	80014b8 <HAL_ETH_Transmit+0x84>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	1f1a      	subs	r2, r3, #4
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3106      	adds	r1, #6
 80014c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014cc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014ce:	f7ff fd65 	bl	8000f9c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014d4:	e037      	b.n	8001546 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d011      	beq.n	800150c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	f043 0208 	orr.w	r2, r3, #8
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e023      	b.n	8001554 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001512:	d018      	beq.n	8001546 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001514:	f7ff fd42 	bl	8000f9c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d302      	bcc.n	800152a <HAL_ETH_Transmit+0xf6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001530:	f043 0204 	orr.w	r2, r3, #4
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001540:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e006      	b.n	8001554 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	dbc3      	blt.n	80014d6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
  }
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0a8      	b.n	80016da <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800158e:	2b23      	cmp	r3, #35	; 0x23
 8001590:	d001      	beq.n	8001596 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0a1      	b.n	80016da <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	3212      	adds	r2, #18
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015ac:	f1c3 0304 	rsb	r3, r3, #4
 80015b0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015b2:	e06a      	b.n	800168a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d103      	bne.n	80015e4 <HAL_ETH_ReadData+0x88>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d040      	beq.n	8001666 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00c      	beq.n	8001628 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001618:	3b04      	subs	r3, #4
 800161a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001640:	461a      	mov	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	b29b      	uxth	r3, r3
 8001646:	f002 fd6f 	bl	8004128 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	441a      	add	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d902      	bls.n	8001678 <HAL_ETH_ReadData+0x11c>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b04      	subs	r3, #4
 8001676:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	3212      	adds	r2, #18
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800168e:	2b00      	cmp	r3, #0
 8001690:	db06      	blt.n	80016a0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d202      	bcs.n	80016a0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d089      	beq.n	80015b4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	441a      	add	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f815 	bl	80016e4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80016f0:	2301      	movs	r3, #1
 80016f2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	3212      	adds	r2, #18
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800170a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800170c:	e03d      	b.n	800178a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d112      	bne.n	800173c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fcd4 	bl	80040c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	74fb      	strb	r3, [r7, #19]
 800172a:	e007      	b.n	800173c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	461a      	mov	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	461a      	mov	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d023      	beq.n	800178a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <ETH_UpdateDescriptor+0xfc>)
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	e003      	b.n	800175a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001758:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3301      	adds	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d902      	bls.n	8001778 <ETH_UpdateDescriptor+0x94>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b04      	subs	r3, #4
 8001776:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	3212      	adds	r2, #18
 800177e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001782:	617b      	str	r3, [r7, #20]
      desccount--;
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	3b01      	subs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <ETH_UpdateDescriptor+0xb2>
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1bb      	bne.n	800170e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	429a      	cmp	r2, r3
 800179e:	d01a      	beq.n	80017d6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	3301      	adds	r3, #1
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80017aa:	f3bf 8f5f 	dmb	sy
}
 80017ae:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	18ca      	adds	r2, r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	80004600 	.word	0x80004600

080017e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 031c 	and.w	r3, r3, #28
 8001800:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	02db      	lsls	r3, r3, #11
 8001806:	b29b      	uxth	r3, r3
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4313      	orrs	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f023 0302 	bic.w	r3, r3, #2
 8001822:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001834:	f7ff fbb2 	bl	8000f9c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800183a:	e00d      	b.n	8001858 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800183c:	f7ff fbae 	bl	8000f9c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184a:	d301      	bcc.n	8001850 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e010      	b.n	8001872 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ec      	bne.n	800183c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 031c 	and.w	r3, r3, #28
 8001896:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	02db      	lsls	r3, r3, #11
 800189c:	b29b      	uxth	r3, r3
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	019b      	lsls	r3, r3, #6
 80018a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d4:	f7ff fb62 	bl	8000f9c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018da:	e00d      	b.n	80018f8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80018dc:	f7ff fb5e 	bl	8000f9c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ea:	d301      	bcc.n	80018f0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e009      	b.n	8001904 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ec      	bne.n	80018dc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0d9      	b.n	8001ad4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf0c      	ite	eq
 80019de:	2301      	moveq	r3, #1
 80019e0:	2300      	movne	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bf14      	ite	ne
 8001a3a:	2301      	movne	r3, #1
 8001a3c:	2300      	moveq	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf14      	ite	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	2300      	moveq	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e00b      	b.n	8001b0c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d105      	bne.n	8001b0a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001afe:	6839      	ldr	r1, [r7, #0]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f883 	bl	8001c0c <ETH_SetMACConfig>

    return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 031c 	bic.w	r3, r3, #28
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b2c:	f001 fa38 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8001b30:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_ETH_SetMDIOClockRange+0x98>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d908      	bls.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d804      	bhi.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e027      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d908      	bls.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x52>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d204      	bcs.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f043 030c 	orr.w	r3, r3, #12
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e01a      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d303      	bcc.n	8001b76 <HAL_ETH_SetMDIOClockRange+0x62>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d911      	bls.n	8001b9a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d908      	bls.n	8001b90 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d804      	bhi.n	8001b90 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e005      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e000      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b9a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	01312cff 	.word	0x01312cff
 8001bb0:	02160ebf 	.word	0x02160ebf
 8001bb4:	03938700 	.word	0x03938700
 8001bb8:	05f5e0ff 	.word	0x05f5e0ff
 8001bbc:	08f0d17f 	.word	0x08f0d17f

08001bc0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001be2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff f9df 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c00:	6193      	str	r3, [r2, #24]
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <ETH_SetMACConfig+0x15c>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7c1b      	ldrb	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <ETH_SetMACConfig+0x28>
 8001c2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c32:	e000      	b.n	8001c36 <ETH_SetMACConfig+0x2a>
 8001c34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	7c5b      	ldrb	r3, [r3, #17]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <ETH_SetMACConfig+0x38>
 8001c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c42:	e000      	b.n	8001c46 <ETH_SetMACConfig+0x3a>
 8001c44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7fdb      	ldrb	r3, [r3, #31]
 8001c52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	7f92      	ldrb	r2, [r2, #30]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d102      	bne.n	8001c6a <ETH_SetMACConfig+0x5e>
 8001c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c68:	e000      	b.n	8001c6c <ETH_SetMACConfig+0x60>
 8001c6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7f1b      	ldrb	r3, [r3, #28]
 8001c72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_SetMACConfig+0x88>
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	e000      	b.n	8001c96 <ETH_SetMACConfig+0x8a>
 8001c94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7bdb      	ldrb	r3, [r3, #15]
 8001c9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ca4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f974 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d101      	bne.n	8001cfa <ETH_SetMACConfig+0xee>
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	e000      	b.n	8001cfc <ETH_SetMACConfig+0xf0>
 8001cfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cfc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d0a:	2a01      	cmp	r2, #1
 8001d0c:	d101      	bne.n	8001d12 <ETH_SetMACConfig+0x106>
 8001d0e:	2208      	movs	r2, #8
 8001d10:	e000      	b.n	8001d14 <ETH_SetMACConfig+0x108>
 8001d12:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d14:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d1c:	2a01      	cmp	r2, #1
 8001d1e:	d101      	bne.n	8001d24 <ETH_SetMACConfig+0x118>
 8001d20:	2204      	movs	r2, #4
 8001d22:	e000      	b.n	8001d26 <ETH_SetMACConfig+0x11a>
 8001d24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d2e:	2a01      	cmp	r2, #1
 8001d30:	d101      	bne.n	8001d36 <ETH_SetMACConfig+0x12a>
 8001d32:	2202      	movs	r2, #2
 8001d34:	e000      	b.n	8001d38 <ETH_SetMACConfig+0x12c>
 8001d36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff f92f 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	ff20810f 	.word	0xff20810f

08001d6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <ETH_SetDMAConfig+0x110>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7b1b      	ldrb	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <ETH_SetDMAConfig+0x2c>
 8001d92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d96:	e000      	b.n	8001d9a <ETH_SetDMAConfig+0x2e>
 8001d98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	7b5b      	ldrb	r3, [r3, #13]
 8001d9e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	7f52      	ldrb	r2, [r2, #29]
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d102      	bne.n	8001db0 <ETH_SetDMAConfig+0x44>
 8001daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dae:	e000      	b.n	8001db2 <ETH_SetDMAConfig+0x46>
 8001db0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001db2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	7b9b      	ldrb	r3, [r3, #14]
 8001db8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	7f1b      	ldrb	r3, [r3, #28]
 8001dc6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001dc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7f9b      	ldrb	r3, [r3, #30]
 8001dce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dd0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dde:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de0:	4313      	orrs	r3, r2
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	461a      	mov	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff f8d6 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	791b      	ldrb	r3, [r3, #4]
 8001e1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff f8a7 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f8de3f23 	.word	0xf8de3f23

08001e80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0a6      	sub	sp, #152	; 0x98
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ef4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fe86 	bl	8001c0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff08 	bl	8001d6c <ETH_SetDMAConfig>
}
 8001f5c:	bf00      	nop
 8001f5e:	3798      	adds	r7, #152	; 0x98
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3305      	adds	r3, #5
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	3204      	adds	r2, #4
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <ETH_MACAddressConfig+0x68>)
 8001f86:	4413      	add	r3, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3303      	adds	r3, #3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061a      	lsls	r2, r3, #24
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <ETH_MACAddressConfig+0x6c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40028040 	.word	0x40028040
 8001fd0:	40028044 	.word	0x40028044

08001fd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e03e      	b.n	8002060 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68d9      	ldr	r1, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	3206      	adds	r2, #6
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d80c      	bhi.n	8002044 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	e004      	b.n	800204e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d9bd      	bls.n	8001fe2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002078:	611a      	str	r2, [r3, #16]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e046      	b.n	8002122 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6919      	ldr	r1, [r3, #16]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80020d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	3212      	adds	r2, #18
 80020ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d80c      	bhi.n	8002112 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	e004      	b.n	800211c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d9b5      	bls.n	8002094 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	60da      	str	r2, [r3, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002160:	b480      	push	{r7}
 8002162:	b08d      	sub	sp, #52	; 0x34
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3318      	adds	r3, #24
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800219e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021a2:	d007      	beq.n	80021b4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	3304      	adds	r3, #4
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	e103      	b.n	80023c0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80021d0:	f023 031f 	bic.w	r3, r3, #31
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	6852      	ldr	r2, [r2, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	431a      	orrs	r2, r3
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800223e:	f3bf 8f5f 	dmb	sy
}
 8002242:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002250:	e084      	b.n	800235c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d006      	beq.n	8002272 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e005      	b.n	800227e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	3301      	adds	r3, #1
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	2b03      	cmp	r3, #3
 8002288:	d902      	bls.n	8002290 <ETH_Prepare_Tx_Descriptors+0x130>
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	3b04      	subs	r3, #4
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b2:	d007      	beq.n	80022c4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	3304      	adds	r3, #4
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d029      	beq.n	8002318 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d6:	e019      	b.n	800230c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80022d8:	f3bf 8f5f 	dmb	sy
}
 80022dc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	3301      	adds	r3, #1
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d902      	bls.n	80022fc <ETH_Prepare_Tx_Descriptors+0x19c>
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	3b04      	subs	r3, #4
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	3301      	adds	r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
 800230c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	429a      	cmp	r2, r3
 8002312:	d3e1      	bcc.n	80022d8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002314:	2302      	movs	r3, #2
 8002316:	e053      	b.n	80023c0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3301      	adds	r3, #1
 800231c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002336:	f023 031f 	bic.w	r3, r3, #31
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	6852      	ldr	r2, [r2, #4]
 800233e:	431a      	orrs	r2, r3
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3301      	adds	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800234a:	f3bf 8f5f 	dmb	sy
}
 800234e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f47f af76 	bne.w	8002252 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e005      	b.n	8002386 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002396:	6979      	ldr	r1, [r7, #20]
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	3304      	adds	r3, #4
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80023ba:	b662      	cpsie	i
}
 80023bc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3734      	adds	r7, #52	; 0x34
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e177      	b.n	80026d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 8166 	bne.w	80026d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d005      	beq.n	800241e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241a:	2b02      	cmp	r3, #2
 800241c:	d130      	bne.n	8002480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0201 	and.w	r2, r3, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b03      	cmp	r3, #3
 800248a:	d017      	beq.n	80024bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d123      	bne.n	8002510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80c0 	beq.w	80026d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_GPIO_Init+0x324>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_GPIO_Init+0x324>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_GPIO_Init+0x324>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256e:	4a61      	ldr	r2, [pc, #388]	; (80026f4 <HAL_GPIO_Init+0x328>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <HAL_GPIO_Init+0x32c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d037      	beq.n	800260a <HAL_GPIO_Init+0x23e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a57      	ldr	r2, [pc, #348]	; (80026fc <HAL_GPIO_Init+0x330>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_GPIO_Init+0x23a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a56      	ldr	r2, [pc, #344]	; (8002700 <HAL_GPIO_Init+0x334>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02b      	beq.n	8002602 <HAL_GPIO_Init+0x236>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a55      	ldr	r2, [pc, #340]	; (8002704 <HAL_GPIO_Init+0x338>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d025      	beq.n	80025fe <HAL_GPIO_Init+0x232>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a54      	ldr	r2, [pc, #336]	; (8002708 <HAL_GPIO_Init+0x33c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <HAL_GPIO_Init+0x22e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a53      	ldr	r2, [pc, #332]	; (800270c <HAL_GPIO_Init+0x340>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x22a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_GPIO_Init+0x344>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_GPIO_Init+0x348>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_GPIO_Init+0x34c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_GPIO_Init+0x350>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x21a>
 80025e2:	2309      	movs	r3, #9
 80025e4:	e012      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025e6:	230a      	movs	r3, #10
 80025e8:	e010      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025ea:	2308      	movs	r3, #8
 80025ec:	e00e      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00c      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x240>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x240>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x240>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_GPIO_Init+0x328>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_GPIO_Init+0x354>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a34      	ldr	r2, [pc, #208]	; (8002720 <HAL_GPIO_Init+0x354>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_GPIO_Init+0x354>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a29      	ldr	r2, [pc, #164]	; (8002720 <HAL_GPIO_Init+0x354>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_GPIO_Init+0x354>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_GPIO_Init+0x354>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_GPIO_Init+0x354>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_GPIO_Init+0x354>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f ae84 	bls.w	80023e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40021400 	.word	0x40021400
 8002710:	40021800 	.word	0x40021800
 8002714:	40021c00 	.word	0x40021c00
 8002718:	40022000 	.word	0x40022000
 800271c:	40022400 	.word	0x40022400
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43d9      	mvns	r1, r3
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	400b      	ands	r3, r1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e267      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d075      	beq.n	8002862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d00c      	beq.n	800279c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278a:	2b08      	cmp	r3, #8
 800278c:	d112      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4b82      	ldr	r3, [pc, #520]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279a:	d10b      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	4b7e      	ldr	r3, [pc, #504]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05b      	beq.n	8002860 <HAL_RCC_OscConfig+0x108>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d157      	bne.n	8002860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e242      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x74>
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e01d      	b.n	8002808 <HAL_RCC_OscConfig+0xb0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x98>
 80027d6:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6f      	ldr	r2, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6c      	ldr	r2, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0xb0>
 80027f0:	4b69      	ldr	r3, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a68      	ldr	r2, [pc, #416]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b66      	ldr	r3, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a65      	ldr	r2, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fbc4 	bl	8000f9c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe fbc0 	bl	8000f9c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e207      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0xc0>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fbb0 	bl	8000f9c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002840:	f7fe fbac 	bl	8000f9c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1f3      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	4b51      	ldr	r3, [pc, #324]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0xe8>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d063      	beq.n	8002936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002882:	2b08      	cmp	r3, #8
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x152>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1c7      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4937      	ldr	r1, [pc, #220]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	e03a      	b.n	8002936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x244>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fb65 	bl	8000f9c <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe fb61 	bl	8000f9c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1a8      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4925      	ldr	r1, [pc, #148]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x244>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fb44 	bl	8000f9c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe fb40 	bl	8000f9c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e187      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d036      	beq.n	80029b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0x248>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fb24 	bl	8000f9c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002958:	f7fe fb20 	bl	8000f9c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e167      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x200>
 8002976:	e01b      	b.n	80029b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x248>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe fb0d 	bl	8000f9c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	e00e      	b.n	80029a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002986:	f7fe fb09 	bl	8000f9c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d907      	bls.n	80029a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e150      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
 8002998:	40023800 	.word	0x40023800
 800299c:	42470000 	.word	0x42470000
 80029a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ea      	bne.n	8002986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8097 	beq.w	8002aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a7c      	ldr	r2, [pc, #496]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b7a      	ldr	r3, [pc, #488]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b77      	ldr	r3, [pc, #476]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d118      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b74      	ldr	r3, [pc, #464]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a73      	ldr	r2, [pc, #460]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fac9 	bl	8000f9c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe fac5 	bl	8000f9c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e10c      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2ea>
 8002a34:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	4a63      	ldr	r2, [pc, #396]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x324>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x30c>
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0x324>
 8002a64:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a70:	4b55      	ldr	r3, [pc, #340]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 0304 	bic.w	r3, r3, #4
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fa8a 	bl	8000f9c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fa86 	bl	8000f9c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0cb      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ee      	beq.n	8002a8c <HAL_RCC_OscConfig+0x334>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fa74 	bl	8000f9c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fa70 	bl	8000f9c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0b5      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ee      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a38      	ldr	r2, [pc, #224]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a1 	beq.w	8002c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d05c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d141      	bne.n	8002b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_OscConfig+0x478>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fa44 	bl	8000f9c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fa40 	bl	8000f9c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e087      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x478>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe fa19 	bl	8000f9c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fa15 	bl	8000f9c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e05c      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x416>
 8002b8c:	e054      	b.n	8002c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCC_OscConfig+0x478>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fa02 	bl	8000f9c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe f9fe 	bl	8000f9c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e045      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x444>
 8002bba:	e03d      	b.n	8002c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e038      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x4ec>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d028      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d121      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d11a      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d111      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0cc      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d90c      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0b8      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc0:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	494d      	ldr	r1, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d044      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d119      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e07f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e067      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4934      	ldr	r1, [pc, #208]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fe f930 	bl	8000f9c <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe f92c 	bl	8000f9c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e04f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d20c      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e032      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4916      	ldr	r1, [pc, #88]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dce:	f000 f821 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f890 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08011da0 	.word	0x08011da0
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b090      	sub	sp, #64	; 0x40
 8002e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e20:	2300      	movs	r3, #0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e24:	2300      	movs	r3, #0
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d00d      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x40>
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	f200 80a1 	bhi.w	8002f80 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x34>
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e46:	e09b      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e4c:	e09b      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4e:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e52:	e098      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e54:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5e:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	2200      	movs	r2, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	627a      	str	r2, [r7, #36]	; 0x24
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e80:	fb03 f201 	mul.w	r2, r3, r1
 8002e84:	2300      	movs	r3, #0
 8002e86:	fb00 f303 	mul.w	r3, r0, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a43      	ldr	r2, [pc, #268]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e8e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e94:	460a      	mov	r2, r1
 8002e96:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9a:	4413      	add	r3, r2
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	61fa      	str	r2, [r7, #28]
 8002ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002eae:	f7fd f9ef 	bl	8000290 <__aeabi_uldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eba:	e053      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	617a      	str	r2, [r7, #20]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ece:	f04f 0b00 	mov.w	fp, #0
 8002ed2:	4652      	mov	r2, sl
 8002ed4:	465b      	mov	r3, fp
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	ebb2 080a 	subs.w	r8, r2, sl
 8002eee:	eb63 090b 	sbc.w	r9, r3, fp
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002efe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f06:	ebb2 0408 	subs.w	r4, r2, r8
 8002f0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	00eb      	lsls	r3, r5, #3
 8002f18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1c:	00e2      	lsls	r2, r4, #3
 8002f1e:	4614      	mov	r4, r2
 8002f20:	461d      	mov	r5, r3
 8002f22:	eb14 030a 	adds.w	r3, r4, sl
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	eb45 030b 	adc.w	r3, r5, fp
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	028b      	lsls	r3, r1, #10
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f44:	4621      	mov	r1, r4
 8002f46:	028a      	lsls	r2, r1, #10
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	60fa      	str	r2, [r7, #12]
 8002f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f58:	f7fd f99a 	bl	8000290 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4613      	mov	r3, r2
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3740      	adds	r7, #64	; 0x40
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	017d7840 	.word	0x017d7840

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08011db0 	.word	0x08011db0

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffdc 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0b5b      	lsrs	r3, r3, #13
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	08011db0 	.word	0x08011db0

08003008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e042      	b.n	80030a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fd7c 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	; 0x24
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f973 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d175      	bne.n	80031b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Transmit+0x2c>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e06e      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fd ff59 	bl	8000f9c <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x6c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800311c:	e02e      	b.n	800317c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	2180      	movs	r1, #128	; 0x80
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f848 	bl	80031be <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e03a      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	3302      	adds	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e007      	b.n	800316e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1cb      	bne.n	800311e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f814 	bl	80031be <UART_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ce:	e03b      	b.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d6:	d037      	beq.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d8:	f7fd fee0 	bl	8000f9c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	6a3a      	ldr	r2, [r7, #32]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d302      	bcc.n	80031ee <UART_WaitOnFlagUntilTimeout+0x30>
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e03a      	b.n	8003268 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d023      	beq.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d020      	beq.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d01d      	beq.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d116      	bne.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f81d 	bl	8003270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2208      	movs	r2, #8
 800323a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e00f      	b.n	8003268 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	429a      	cmp	r2, r3
 8003264:	d0b4      	beq.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b095      	sub	sp, #84	; 0x54
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003298:	643a      	str	r2, [r7, #64]	; 0x40
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800329e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d119      	bne.n	800331c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f023 0310 	bic.w	r3, r3, #16
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003308:	61ba      	str	r2, [r7, #24]
 800330a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	613b      	str	r3, [r7, #16]
   return(result);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
}
 800332a:	bf00      	nop
 800332c:	3754      	adds	r7, #84	; 0x54
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b0c0      	sub	sp, #256	; 0x100
 800333e:	af00      	add	r7, sp, #0
 8003340:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	ea40 0301 	orr.w	r3, r0, r1
 8003360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003390:	f021 010c 	bic.w	r1, r1, #12
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800339e:	430b      	orrs	r3, r1
 80033a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	6999      	ldr	r1, [r3, #24]
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	ea40 0301 	orr.w	r3, r0, r1
 80033be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b8f      	ldr	r3, [pc, #572]	; (8003604 <UART_SetConfig+0x2cc>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <UART_SetConfig+0xa0>
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8d      	ldr	r3, [pc, #564]	; (8003608 <UART_SetConfig+0x2d0>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d104      	bne.n	80033e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7ff fe02 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80033dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033e0:	e003      	b.n	80033ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033e2:	f7ff fde9 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 80033e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f4:	f040 810c 	bne.w	8003610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003402:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	1891      	adds	r1, r2, r2
 8003410:	65b9      	str	r1, [r7, #88]	; 0x58
 8003412:	415b      	adcs	r3, r3
 8003414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800341a:	4621      	mov	r1, r4
 800341c:	eb12 0801 	adds.w	r8, r2, r1
 8003420:	4629      	mov	r1, r5
 8003422:	eb43 0901 	adc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003448:	462b      	mov	r3, r5
 800344a:	eb49 0303 	adc.w	r3, r9, r3
 800344e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800345e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003466:	460b      	mov	r3, r1
 8003468:	18db      	adds	r3, r3, r3
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
 800346c:	4613      	mov	r3, r2
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	657b      	str	r3, [r7, #84]	; 0x54
 8003474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800347c:	f7fc ff08 	bl	8000290 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <UART_SetConfig+0x2d4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800349c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034a8:	415b      	adcs	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034b0:	4641      	mov	r1, r8
 80034b2:	eb12 0a01 	adds.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb43 0b01 	adc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	4692      	mov	sl, r2
 80034d2:	469b      	mov	fp, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	eb1a 0303 	adds.w	r3, sl, r3
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034de:	464b      	mov	r3, r9
 80034e0:	eb4b 0303 	adc.w	r3, fp, r3
 80034e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
 800350a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800350e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003512:	f7fc febd 	bl	8000290 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4611      	mov	r1, r2
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <UART_SetConfig+0x2d4>)
 800351e:	fba3 2301 	umull	r2, r3, r3, r1
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	; 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <UART_SetConfig+0x2d4>)
 8003534:	fba3 2302 	umull	r2, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003540:	441c      	add	r4, r3
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800354c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	63b9      	str	r1, [r7, #56]	; 0x38
 800355c:	415b      	adcs	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6339      	str	r1, [r7, #48]	; 0x30
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003598:	464b      	mov	r3, r9
 800359a:	460a      	mov	r2, r1
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035b8:	460b      	mov	r3, r1
 80035ba:	18db      	adds	r3, r3, r3
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035be:	4613      	mov	r3, r2
 80035c0:	eb42 0303 	adc.w	r3, r2, r3
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ce:	f7fc fe5f 	bl	8000290 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <UART_SetConfig+0x2d4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <UART_SetConfig+0x2d4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003600:	e106      	b.n	8003810 <UART_SetConfig+0x4d8>
 8003602:	bf00      	nop
 8003604:	40011000 	.word	0x40011000
 8003608:	40011400 	.word	0x40011400
 800360c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800361a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800361e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6239      	str	r1, [r7, #32]
 800362a:	415b      	adcs	r3, r3
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003632:	4641      	mov	r1, r8
 8003634:	1854      	adds	r4, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0501 	adc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003658:	464b      	mov	r3, r9
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800366e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800367e:	4629      	mov	r1, r5
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003688:	4621      	mov	r1, r4
 800368a:	008a      	lsls	r2, r1, #2
 800368c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003690:	f7fc fdfe 	bl	8000290 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b60      	ldr	r3, [pc, #384]	; (800381c <UART_SetConfig+0x4e4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	61b9      	str	r1, [r7, #24]
 80036bc:	415b      	adcs	r3, r3
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6139      	str	r1, [r7, #16]
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	67bb      	str	r3, [r7, #120]	; 0x78
 800370e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800372e:	f7fc fdaf 	bl	8000290 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4611      	mov	r1, r2
 8003738:	4b38      	ldr	r3, [pc, #224]	; (800381c <UART_SetConfig+0x4e4>)
 800373a:	fba3 2301 	umull	r2, r3, r3, r1
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2264      	movs	r2, #100	; 0x64
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	1acb      	subs	r3, r1, r3
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	3332      	adds	r3, #50	; 0x32
 800374c:	4a33      	ldr	r2, [pc, #204]	; (800381c <UART_SetConfig+0x4e4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003758:	441c      	add	r4, r3
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	673b      	str	r3, [r7, #112]	; 0x70
 8003762:	677a      	str	r2, [r7, #116]	; 0x74
 8003764:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	1891      	adds	r1, r2, r2
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	415b      	adcs	r3, r3
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003778:	4641      	mov	r1, r8
 800377a:	1851      	adds	r1, r2, r1
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	4649      	mov	r1, r9
 8003780:	414b      	adcs	r3, r1
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003790:	4659      	mov	r1, fp
 8003792:	00cb      	lsls	r3, r1, #3
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379a:	4651      	mov	r1, sl
 800379c:	00ca      	lsls	r2, r1, #3
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	4642      	mov	r2, r8
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037aa:	464b      	mov	r3, r9
 80037ac:	460a      	mov	r2, r1
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	663b      	str	r3, [r7, #96]	; 0x60
 80037be:	667a      	str	r2, [r7, #100]	; 0x64
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037de:	f7fc fd57 	bl	8000290 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <UART_SetConfig+0x4e4>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	3332      	adds	r3, #50	; 0x32
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <UART_SetConfig+0x4e4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4422      	add	r2, r4
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381c:	51eb851f 	.word	0x51eb851f

08003820 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003826:	4b87      	ldr	r3, [pc, #540]	; (8003a44 <MX_LWIP_Init+0x224>)
 8003828:	22c0      	movs	r2, #192	; 0xc0
 800382a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800382c:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <MX_LWIP_Init+0x224>)
 800382e:	22a8      	movs	r2, #168	; 0xa8
 8003830:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 45;
 8003832:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <MX_LWIP_Init+0x224>)
 8003834:	222d      	movs	r2, #45	; 0x2d
 8003836:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 254;
 8003838:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <MX_LWIP_Init+0x224>)
 800383a:	22fe      	movs	r2, #254	; 0xfe
 800383c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800383e:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003844:	4b80      	ldr	r3, [pc, #512]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <MX_LWIP_Init+0x228>)
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003850:	4b7d      	ldr	r3, [pc, #500]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003852:	2200      	movs	r2, #0
 8003854:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003856:	4b7d      	ldr	r3, [pc, #500]	; (8003a4c <MX_LWIP_Init+0x22c>)
 8003858:	22c0      	movs	r2, #192	; 0xc0
 800385a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800385c:	4b7b      	ldr	r3, [pc, #492]	; (8003a4c <MX_LWIP_Init+0x22c>)
 800385e:	22a8      	movs	r2, #168	; 0xa8
 8003860:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 45;
 8003862:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <MX_LWIP_Init+0x22c>)
 8003864:	222d      	movs	r2, #45	; 0x2d
 8003866:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003868:	4b78      	ldr	r3, [pc, #480]	; (8003a4c <MX_LWIP_Init+0x22c>)
 800386a:	2201      	movs	r2, #1
 800386c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800386e:	f000 fcc9 	bl	8004204 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <MX_LWIP_Init+0x224>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	061a      	lsls	r2, r3, #24
 8003878:	4b72      	ldr	r3, [pc, #456]	; (8003a44 <MX_LWIP_Init+0x224>)
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	431a      	orrs	r2, r3
 8003880:	4b70      	ldr	r3, [pc, #448]	; (8003a44 <MX_LWIP_Init+0x224>)
 8003882:	789b      	ldrb	r3, [r3, #2]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4313      	orrs	r3, r2
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <MX_LWIP_Init+0x224>)
 800388a:	78d2      	ldrb	r2, [r2, #3]
 800388c:	4313      	orrs	r3, r2
 800388e:	061a      	lsls	r2, r3, #24
 8003890:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <MX_LWIP_Init+0x224>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	0619      	lsls	r1, r3, #24
 8003896:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <MX_LWIP_Init+0x224>)
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	4319      	orrs	r1, r3
 800389e:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038a0:	789b      	ldrb	r3, [r3, #2]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	430b      	orrs	r3, r1
 80038a6:	4967      	ldr	r1, [pc, #412]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038a8:	78c9      	ldrb	r1, [r1, #3]
 80038aa:	430b      	orrs	r3, r1
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038b2:	431a      	orrs	r2, r3
 80038b4:	4b63      	ldr	r3, [pc, #396]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	0619      	lsls	r1, r3, #24
 80038ba:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	4319      	orrs	r1, r3
 80038c2:	4b60      	ldr	r3, [pc, #384]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038c4:	789b      	ldrb	r3, [r3, #2]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	430b      	orrs	r3, r1
 80038ca:	495e      	ldr	r1, [pc, #376]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038cc:	78c9      	ldrb	r1, [r1, #3]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038d6:	431a      	orrs	r2, r3
 80038d8:	4b5a      	ldr	r3, [pc, #360]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0619      	lsls	r1, r3, #24
 80038de:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	4319      	orrs	r1, r3
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038e8:	789b      	ldrb	r3, [r3, #2]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	430b      	orrs	r3, r1
 80038ee:	4955      	ldr	r1, [pc, #340]	; (8003a44 <MX_LWIP_Init+0x224>)
 80038f0:	78c9      	ldrb	r1, [r1, #3]
 80038f2:	430b      	orrs	r3, r1
 80038f4:	0e1b      	lsrs	r3, r3, #24
 80038f6:	4313      	orrs	r3, r2
 80038f8:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <MX_LWIP_Init+0x230>)
 80038fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80038fc:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <MX_LWIP_Init+0x228>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	061a      	lsls	r2, r3, #24
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <MX_LWIP_Init+0x228>)
 800390c:	789b      	ldrb	r3, [r3, #2]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	4313      	orrs	r3, r2
 8003912:	4a4d      	ldr	r2, [pc, #308]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003914:	78d2      	ldrb	r2, [r2, #3]
 8003916:	4313      	orrs	r3, r2
 8003918:	061a      	lsls	r2, r3, #24
 800391a:	4b4b      	ldr	r3, [pc, #300]	; (8003a48 <MX_LWIP_Init+0x228>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	0619      	lsls	r1, r3, #24
 8003920:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	4319      	orrs	r1, r3
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <MX_LWIP_Init+0x228>)
 800392a:	789b      	ldrb	r3, [r3, #2]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	430b      	orrs	r3, r1
 8003930:	4945      	ldr	r1, [pc, #276]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003932:	78c9      	ldrb	r1, [r1, #3]
 8003934:	430b      	orrs	r3, r1
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800393c:	431a      	orrs	r2, r3
 800393e:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	0619      	lsls	r1, r3, #24
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	4319      	orrs	r1, r3
 800394c:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <MX_LWIP_Init+0x228>)
 800394e:	789b      	ldrb	r3, [r3, #2]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	430b      	orrs	r3, r1
 8003954:	493c      	ldr	r1, [pc, #240]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003956:	78c9      	ldrb	r1, [r1, #3]
 8003958:	430b      	orrs	r3, r1
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003960:	431a      	orrs	r2, r3
 8003962:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	0619      	lsls	r1, r3, #24
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <MX_LWIP_Init+0x228>)
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	4319      	orrs	r1, r3
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <MX_LWIP_Init+0x228>)
 8003972:	789b      	ldrb	r3, [r3, #2]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	430b      	orrs	r3, r1
 8003978:	4933      	ldr	r1, [pc, #204]	; (8003a48 <MX_LWIP_Init+0x228>)
 800397a:	78c9      	ldrb	r1, [r1, #3]
 800397c:	430b      	orrs	r3, r1
 800397e:	0e1b      	lsrs	r3, r3, #24
 8003980:	4313      	orrs	r3, r2
 8003982:	4a34      	ldr	r2, [pc, #208]	; (8003a54 <MX_LWIP_Init+0x234>)
 8003984:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <MX_LWIP_Init+0x22c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	061a      	lsls	r2, r3, #24
 800398c:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <MX_LWIP_Init+0x22c>)
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <MX_LWIP_Init+0x22c>)
 8003996:	789b      	ldrb	r3, [r3, #2]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	4313      	orrs	r3, r2
 800399c:	4a2b      	ldr	r2, [pc, #172]	; (8003a4c <MX_LWIP_Init+0x22c>)
 800399e:	78d2      	ldrb	r2, [r2, #3]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	061a      	lsls	r2, r3, #24
 80039a4:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	0619      	lsls	r1, r3, #24
 80039aa:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	4319      	orrs	r1, r3
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	430b      	orrs	r3, r1
 80039ba:	4924      	ldr	r1, [pc, #144]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039bc:	78c9      	ldrb	r1, [r1, #3]
 80039be:	430b      	orrs	r3, r1
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039c6:	431a      	orrs	r2, r3
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	0619      	lsls	r1, r3, #24
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039d0:	785b      	ldrb	r3, [r3, #1]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	4319      	orrs	r1, r3
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	430b      	orrs	r3, r1
 80039de:	491b      	ldr	r1, [pc, #108]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039e0:	78c9      	ldrb	r1, [r1, #3]
 80039e2:	430b      	orrs	r3, r1
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039ea:	431a      	orrs	r2, r3
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	0619      	lsls	r1, r3, #24
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	4319      	orrs	r1, r3
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <MX_LWIP_Init+0x22c>)
 80039fc:	789b      	ldrb	r3, [r3, #2]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	430b      	orrs	r3, r1
 8003a02:	4912      	ldr	r1, [pc, #72]	; (8003a4c <MX_LWIP_Init+0x22c>)
 8003a04:	78c9      	ldrb	r1, [r1, #3]
 8003a06:	430b      	orrs	r3, r1
 8003a08:	0e1b      	lsrs	r3, r3, #24
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <MX_LWIP_Init+0x238>)
 8003a0e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <MX_LWIP_Init+0x23c>)
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <MX_LWIP_Init+0x240>)
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_LWIP_Init+0x238>)
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <MX_LWIP_Init+0x234>)
 8003a20:	490b      	ldr	r1, [pc, #44]	; (8003a50 <MX_LWIP_Init+0x230>)
 8003a22:	4810      	ldr	r0, [pc, #64]	; (8003a64 <MX_LWIP_Init+0x244>)
 8003a24:	f001 f8da 	bl	8004bdc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <MX_LWIP_Init+0x244>)
 8003a2a:	f001 fa89 	bl	8004f40 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003a2e:	480d      	ldr	r0, [pc, #52]	; (8003a64 <MX_LWIP_Init+0x244>)
 8003a30:	f001 fa96 	bl	8004f60 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003a34:	490c      	ldr	r1, [pc, #48]	; (8003a68 <MX_LWIP_Init+0x248>)
 8003a36:	480b      	ldr	r0, [pc, #44]	; (8003a64 <MX_LWIP_Init+0x244>)
 8003a38:	f001 fb94 	bl	8005164 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000013c 	.word	0x2000013c
 8003a48:	20000140 	.word	0x20000140
 8003a4c:	20000144 	.word	0x20000144
 8003a50:	20000130 	.word	0x20000130
 8003a54:	20000134 	.word	0x20000134
 8003a58:	20000138 	.word	0x20000138
 8003a5c:	0800e1b5 	.word	0x0800e1b5
 8003a60:	08003d29 	.word	0x08003d29
 8003a64:	200000fc 	.word	0x200000fc
 8003a68:	08003a6d 	.word	0x08003a6d

08003a6c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003a8c:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <low_level_init+0x110>)
 8003a8e:	4a41      	ldr	r2, [pc, #260]	; (8003b94 <low_level_init+0x114>)
 8003a90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003a92:	2300      	movs	r3, #0
 8003a94:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003a9a:	23e1      	movs	r3, #225	; 0xe1
 8003a9c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003aaa:	4a39      	ldr	r2, [pc, #228]	; (8003b90 <low_level_init+0x110>)
 8003aac:	f107 0308 	add.w	r3, r7, #8
 8003ab0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <low_level_init+0x110>)
 8003ab4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ab8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <low_level_init+0x110>)
 8003abc:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <low_level_init+0x118>)
 8003abe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003ac0:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <low_level_init+0x110>)
 8003ac2:	4a36      	ldr	r2, [pc, #216]	; (8003b9c <low_level_init+0x11c>)
 8003ac4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003ac6:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <low_level_init+0x110>)
 8003ac8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003acc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003ace:	4830      	ldr	r0, [pc, #192]	; (8003b90 <low_level_init+0x110>)
 8003ad0:	f7fd fb7a 	bl	80011c8 <HAL_ETH_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003ad8:	2238      	movs	r2, #56	; 0x38
 8003ada:	2100      	movs	r1, #0
 8003adc:	4830      	ldr	r0, [pc, #192]	; (8003ba0 <low_level_init+0x120>)
 8003ade:	f00a fda4 	bl	800e62a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <low_level_init+0x120>)
 8003ae4:	2221      	movs	r2, #33	; 0x21
 8003ae6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <low_level_init+0x120>)
 8003aea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003aee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <low_level_init+0x120>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003af6:	482b      	ldr	r0, [pc, #172]	; (8003ba4 <low_level_init+0x124>)
 8003af8:	f000 ff38 	bl	800496c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2206      	movs	r2, #6
 8003b00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b04:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <low_level_init+0x110>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <low_level_init+0x110>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	785a      	ldrb	r2, [r3, #1]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <low_level_init+0x110>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	789a      	ldrb	r2, [r3, #2]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <low_level_init+0x110>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	78da      	ldrb	r2, [r3, #3]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <low_level_init+0x110>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	791a      	ldrb	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <low_level_init+0x110>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	795a      	ldrb	r2, [r3, #5]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b52:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b5a:	f043 030a 	orr.w	r3, r3, #10
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8003b66:	4910      	ldr	r1, [pc, #64]	; (8003ba8 <low_level_init+0x128>)
 8003b68:	4810      	ldr	r0, [pc, #64]	; (8003bac <low_level_init+0x12c>)
 8003b6a:	f7fd f850 	bl	8000c0e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8003b6e:	480f      	ldr	r0, [pc, #60]	; (8003bac <low_level_init+0x12c>)
 8003b70:	f7fd f87f 	bl	8000c72 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa18 	bl	8003fb0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003b80:	e001      	b.n	8003b86 <low_level_init+0x106>
    Error_Handler();
 8003b82:	f7fc fe23 	bl	80007cc <Error_Handler>
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20004c14 	.word	0x20004c14
 8003b94:	40028000 	.word	0x40028000
 8003b98:	20004b74 	.word	0x20004b74
 8003b9c:	20004ad4 	.word	0x20004ad4
 8003ba0:	20004cc4 	.word	0x20004cc4
 8003ba4:	08011db8 	.word	0x08011db8
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	20004cfc 	.word	0x20004cfc

08003bb0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b092      	sub	sp, #72	; 0x48
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	2230      	movs	r2, #48	; 0x30
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f00a fd2a 	bl	800e62a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	2230      	movs	r2, #48	; 0x30
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f00a fd23 	bl	800e62a <memset>

  for(q = p; q != NULL; q = q->next)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
 8003be8:	e045      	b.n	8003c76 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d902      	bls.n	8003bf6 <low_level_output+0x46>
      return ERR_IF;
 8003bf0:	f06f 030b 	mvn.w	r3, #11
 8003bf4:	e055      	b.n	8003ca2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3348      	adds	r3, #72	; 0x48
 8003c06:	443b      	add	r3, r7
 8003c08:	3b3c      	subs	r3, #60	; 0x3c
 8003c0a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	895b      	ldrh	r3, [r3, #10]
 8003c10:	4619      	mov	r1, r3
 8003c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	3348      	adds	r3, #72	; 0x48
 8003c1e:	443b      	add	r3, r7
 8003c20:	3b38      	subs	r3, #56	; 0x38
 8003c22:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d011      	beq.n	8003c4e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	f107 000c 	add.w	r0, r7, #12
 8003c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c34:	460b      	mov	r3, r1
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	440b      	add	r3, r1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	18c1      	adds	r1, r0, r3
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	3348      	adds	r3, #72	; 0x48
 8003c48:	443b      	add	r3, r7
 8003c4a:	3b34      	subs	r3, #52	; 0x34
 8003c4c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	3348      	adds	r3, #72	; 0x48
 8003c62:	443b      	add	r3, r7
 8003c64:	3b34      	subs	r3, #52	; 0x34
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	643b      	str	r3, [r7, #64]	; 0x40
 8003c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1b6      	bne.n	8003bea <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	891b      	ldrh	r3, [r3, #8]
 8003c80:	461a      	mov	r2, r3
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <low_level_output+0xfc>)
 8003c84:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <low_level_output+0xfc>)
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <low_level_output+0xfc>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003c94:	2214      	movs	r2, #20
 8003c96:	4905      	ldr	r1, [pc, #20]	; (8003cac <low_level_output+0xfc>)
 8003c98:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <low_level_output+0x100>)
 8003c9a:	f7fd fbcb 	bl	8001434 <HAL_ETH_Transmit>

  return errval;
 8003c9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3748      	adds	r7, #72	; 0x48
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20004cc4 	.word	0x20004cc4
 8003cb0:	20004c14 	.word	0x20004c14

08003cb4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <low_level_input+0x2c>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <low_level_input+0x30>)
 8003cd0:	f7fd fc44 	bl	800155c <HAL_ETH_ReadData>
  }

  return p;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20004ad0 	.word	0x20004ad0
 8003ce4:	20004c14 	.word	0x20004c14

08003ce8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ffdd 	bl	8003cb4 <low_level_input>
 8003cfa:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	4798      	blx	r3
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f001 fda6 	bl	8005864 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ea      	bne.n	8003cf4 <ethernetif_input+0xc>
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <ethernetif_init+0x1c>
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <ethernetif_init+0x48>)
 8003d38:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8003d3c:	490d      	ldr	r1, [pc, #52]	; (8003d74 <ethernetif_init+0x4c>)
 8003d3e:	480e      	ldr	r0, [pc, #56]	; (8003d78 <ethernetif_init+0x50>)
 8003d40:	f00a fc0e 	bl	800e560 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2273      	movs	r2, #115	; 0x73
 8003d48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2274      	movs	r2, #116	; 0x74
 8003d50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <ethernetif_init+0x54>)
 8003d58:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <ethernetif_init+0x58>)
 8003d5e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fe8d 	bl	8003a80 <low_level_init>

  return ERR_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	0800f3c0 	.word	0x0800f3c0
 8003d74:	0800f3dc 	.word	0x0800f3dc
 8003d78:	0800f3ec 	.word	0x0800f3ec
 8003d7c:	0800c66d 	.word	0x0800c66d
 8003d80:	08003bb1 	.word	0x08003bb1

08003d84 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	4807      	ldr	r0, [pc, #28]	; (8003db0 <pbuf_free_custom+0x2c>)
 8003d94:	f000 fecc 	bl	8004b30 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <pbuf_free_custom+0x30>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <pbuf_free_custom+0x30>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
  }
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	08011db8 	.word	0x08011db8
 8003db4:	20004ad0 	.word	0x20004ad0

08003db8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003dbc:	f7fd f8ee 	bl	8000f9c <HAL_GetTick>
 8003dc0:	4603      	mov	r3, r0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08e      	sub	sp, #56	; 0x38
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_ETH_MspInit+0x138>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f040 8085 	bne.w	8003ef6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4a43      	ldr	r2, [pc, #268]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfc:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	4a3c      	ldr	r2, [pc, #240]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e16:	6313      	str	r3, [r2, #48]	; 0x30
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	4a35      	ldr	r2, [pc, #212]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e32:	6313      	str	r3, [r2, #48]	; 0x30
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e50:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	6313      	str	r3, [r2, #48]	; 0x30
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <HAL_ETH_MspInit+0x13c>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003e94:	2332      	movs	r3, #50	; 0x32
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ea4:	230b      	movs	r3, #11
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eac:	4619      	mov	r1, r3
 8003eae:	4816      	ldr	r0, [pc, #88]	; (8003f08 <HAL_ETH_MspInit+0x140>)
 8003eb0:	f7fe fa8c 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003eb4:	2386      	movs	r3, #134	; 0x86
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ec4:	230b      	movs	r3, #11
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ecc:	4619      	mov	r1, r3
 8003ece:	480f      	ldr	r0, [pc, #60]	; (8003f0c <HAL_ETH_MspInit+0x144>)
 8003ed0:	f7fe fa7c 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003ed4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ee6:	230b      	movs	r3, #11
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4807      	ldr	r0, [pc, #28]	; (8003f10 <HAL_ETH_MspInit+0x148>)
 8003ef2:	f7fe fa6b 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3738      	adds	r7, #56	; 0x38
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40028000 	.word	0x40028000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020800 	.word	0x40020800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020400 	.word	0x40020400

08003f14 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <ETH_PHY_IO_Init+0x10>)
 8003f1a:	f7fd fdfb 	bl	8001b14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20004c14 	.word	0x20004c14

08003f28 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	4807      	ldr	r0, [pc, #28]	; (8003f68 <ETH_PHY_IO_ReadReg+0x30>)
 8003f4c:	f7fd fc4a 	bl	80017e4 <HAL_ETH_ReadPHYRegister>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e000      	b.n	8003f5e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20004c14 	.word	0x20004c14

08003f6c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	4807      	ldr	r0, [pc, #28]	; (8003f9c <ETH_PHY_IO_WriteReg+0x30>)
 8003f80:	f7fd fc7b 	bl	800187a <HAL_ETH_WritePHYRegister>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	e000      	b.n	8003f92 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20004c14 	.word	0x20004c14

08003fa0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003fa4:	f7fc fffa 	bl	8000f9c <HAL_GetTick>
 8003fa8:	4603      	mov	r3, r0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b0a0      	sub	sp, #128	; 0x80
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	2264      	movs	r2, #100	; 0x64
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00a fb32 	bl	800e62a <memset>
  int32_t PHYLinkState = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fce:	2300      	movs	r3, #0
 8003fd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8003fd6:	483a      	ldr	r0, [pc, #232]	; (80040c0 <ethernet_link_check_state+0x110>)
 8003fd8:	f7fc fef3 	bl	8000dc2 <DP83848_GetLinkState>
 8003fdc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <ethernet_link_check_state+0x5a>
 8003ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	dc09      	bgt.n	800400a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003ff6:	4833      	ldr	r0, [pc, #204]	; (80040c4 <ethernet_link_check_state+0x114>)
 8003ff8:	f7fd f9c3 	bl	8001382 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 f81b 	bl	8005038 <netif_set_down>
    netif_set_link_down(netif);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 f87e 	bl	8005104 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004008:	e055      	b.n	80040b6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d14e      	bne.n	80040b6 <ethernet_link_check_state+0x106>
 8004018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800401a:	2b01      	cmp	r3, #1
 800401c:	dd4b      	ble.n	80040b6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	3b02      	subs	r3, #2
 8004022:	2b03      	cmp	r3, #3
 8004024:	d82a      	bhi.n	800407c <ethernet_link_check_state+0xcc>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <ethernet_link_check_state+0x7c>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	0800403d 	.word	0x0800403d
 8004030:	0800404f 	.word	0x0800404f
 8004034:	0800405f 	.word	0x0800405f
 8004038:	0800406f 	.word	0x0800406f
      duplex = ETH_FULLDUPLEX_MODE;
 800403c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004040:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004042:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004046:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004048:	2301      	movs	r3, #1
 800404a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800404c:	e017      	b.n	800407e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800404e:	2300      	movs	r3, #0
 8004050:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004056:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004058:	2301      	movs	r3, #1
 800405a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800405c:	e00f      	b.n	800407e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800405e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004062:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004064:	2300      	movs	r3, #0
 8004066:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004068:	2301      	movs	r3, #1
 800406a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800406c:	e007      	b.n	800407e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800406e:	2300      	movs	r3, #0
 8004070:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004072:	2300      	movs	r3, #0
 8004074:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004076:	2301      	movs	r3, #1
 8004078:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800407a:	e000      	b.n	800407e <ethernet_link_check_state+0xce>
      break;
 800407c:	bf00      	nop
    if(linkchanged)
 800407e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d018      	beq.n	80040b6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4619      	mov	r1, r3
 800408a:	480e      	ldr	r0, [pc, #56]	; (80040c4 <ethernet_link_check_state+0x114>)
 800408c:	f7fd fc3e 	bl	800190c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004096:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	4619      	mov	r1, r3
 800409e:	4809      	ldr	r0, [pc, #36]	; (80040c4 <ethernet_link_check_state+0x114>)
 80040a0:	f7fd fd1e 	bl	8001ae0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80040a4:	4807      	ldr	r0, [pc, #28]	; (80040c4 <ethernet_link_check_state+0x114>)
 80040a6:	f7fd f90d 	bl	80012c4 <HAL_ETH_Start>
      netif_set_up(netif);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 ff58 	bl	8004f60 <netif_set_up>
      netif_set_link_up(netif);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fff3 	bl	800509c <netif_set_link_up>
}
 80040b6:	bf00      	nop
 80040b8:	3780      	adds	r7, #128	; 0x80
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20004cfc 	.word	0x20004cfc
 80040c4:	20004c14 	.word	0x20004c14

080040c8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80040d0:	4812      	ldr	r0, [pc, #72]	; (800411c <HAL_ETH_RxAllocateCallback+0x54>)
 80040d2:	f000 fcbf 	bl	8004a54 <memp_malloc_pool>
 80040d6:	60f8      	str	r0, [r7, #12]
  if (p)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d014      	beq.n	8004108 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f103 0220 	add.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <HAL_ETH_RxAllocateCallback+0x58>)
 80040ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2241      	movs	r2, #65	; 0x41
 80040fe:	2100      	movs	r1, #0
 8004100:	2000      	movs	r0, #0
 8004102:	f001 f9f5 	bl	80054f0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004106:	e005      	b.n	8004114 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_ETH_RxAllocateCallback+0x5c>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	08011db8 	.word	0x08011db8
 8004120:	08003d85 	.word	0x08003d85
 8004124:	20004ad0 	.word	0x20004ad0

08004128 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3b20      	subs	r3, #32
 8004146:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2200      	movs	r2, #0
 8004152:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e003      	b.n	8004172 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e009      	b.n	8004194 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	891a      	ldrh	r2, [r3, #8]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	4413      	add	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f2      	bne.n	8004180 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	3724      	adds	r7, #36	; 0x24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	b21a      	sxth	r2, r3
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	b29b      	uxth	r3, r3
 80041be:	b21b      	sxth	r3, r3
 80041c0:	4313      	orrs	r3, r2
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	b29b      	uxth	r3, r3
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	061a      	lsls	r2, r3, #24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0e1b      	lsrs	r3, r3, #24
 80041f6:	4313      	orrs	r3, r2
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800420e:	f000 f8d5 	bl	80043bc <mem_init>
  memp_init();
 8004212:	f000 fbdb 	bl	80049cc <memp_init>
  pbuf_init();
  netif_init();
 8004216:	f000 fcd9 	bl	8004bcc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800421a:	f007 f867 	bl	800b2ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800421e:	f001 fdbf 	bl	8005da0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004222:	f006 ffd9 	bl	800b1d8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <ptr_to_mem+0x20>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	4413      	add	r3, r2
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20005388 	.word	0x20005388

08004254 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <mem_to_ptr+0x20>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	b29b      	uxth	r3, r3
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20005388 	.word	0x20005388

08004278 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004280:	4b45      	ldr	r3, [pc, #276]	; (8004398 <plug_holes+0x120>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d206      	bcs.n	8004298 <plug_holes+0x20>
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <plug_holes+0x124>)
 800428c:	f240 12df 	movw	r2, #479	; 0x1df
 8004290:	4943      	ldr	r1, [pc, #268]	; (80043a0 <plug_holes+0x128>)
 8004292:	4844      	ldr	r0, [pc, #272]	; (80043a4 <plug_holes+0x12c>)
 8004294:	f00a f964 	bl	800e560 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <plug_holes+0x130>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d306      	bcc.n	80042b0 <plug_holes+0x38>
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <plug_holes+0x124>)
 80042a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80042a8:	4940      	ldr	r1, [pc, #256]	; (80043ac <plug_holes+0x134>)
 80042aa:	483e      	ldr	r0, [pc, #248]	; (80043a4 <plug_holes+0x12c>)
 80042ac:	f00a f958 	bl	800e560 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <plug_holes+0x4e>
 80042b8:	4b38      	ldr	r3, [pc, #224]	; (800439c <plug_holes+0x124>)
 80042ba:	f240 12e1 	movw	r2, #481	; 0x1e1
 80042be:	493c      	ldr	r1, [pc, #240]	; (80043b0 <plug_holes+0x138>)
 80042c0:	4838      	ldr	r0, [pc, #224]	; (80043a4 <plug_holes+0x12c>)
 80042c2:	f00a f94d 	bl	800e560 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80042ce:	d906      	bls.n	80042de <plug_holes+0x66>
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <plug_holes+0x124>)
 80042d2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80042d6:	4937      	ldr	r1, [pc, #220]	; (80043b4 <plug_holes+0x13c>)
 80042d8:	4832      	ldr	r0, [pc, #200]	; (80043a4 <plug_holes+0x12c>)
 80042da:	f00a f941 	bl	800e560 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ffa4 	bl	8004230 <ptr_to_mem>
 80042e8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d024      	beq.n	800433c <plug_holes+0xc4>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	791b      	ldrb	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d120      	bne.n	800433c <plug_holes+0xc4>
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <plug_holes+0x130>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	429a      	cmp	r2, r3
 8004302:	d01b      	beq.n	800433c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <plug_holes+0x140>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	429a      	cmp	r2, r3
 800430c:	d102      	bne.n	8004314 <plug_holes+0x9c>
      lfree = mem;
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <plug_holes+0x140>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004324:	d00a      	beq.n	800433c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff80 	bl	8004230 <ptr_to_mem>
 8004330:	4604      	mov	r4, r0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff8e 	bl	8004254 <mem_to_ptr>
 8004338:	4603      	mov	r3, r0
 800433a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	885b      	ldrh	r3, [r3, #2]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff75 	bl	8004230 <ptr_to_mem>
 8004346:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d01f      	beq.n	8004390 <plug_holes+0x118>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	791b      	ldrb	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11b      	bne.n	8004390 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <plug_holes+0x140>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d102      	bne.n	8004368 <plug_holes+0xf0>
      lfree = pmem;
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <plug_holes+0x140>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004378:	d00a      	beq.n	8004390 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff ff56 	bl	8004230 <ptr_to_mem>
 8004384:	4604      	mov	r4, r0
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f7ff ff64 	bl	8004254 <mem_to_ptr>
 800438c:	4603      	mov	r3, r0
 800438e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	20005388 	.word	0x20005388
 800439c:	0800f414 	.word	0x0800f414
 80043a0:	0800f444 	.word	0x0800f444
 80043a4:	0800f45c 	.word	0x0800f45c
 80043a8:	2000538c 	.word	0x2000538c
 80043ac:	0800f484 	.word	0x0800f484
 80043b0:	0800f4a0 	.word	0x0800f4a0
 80043b4:	0800f4bc 	.word	0x0800f4bc
 80043b8:	20005390 	.word	0x20005390

080043bc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <mem_init+0x68>)
 80043c4:	3303      	adds	r3, #3
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b16      	ldr	r3, [pc, #88]	; (8004428 <mem_init+0x6c>)
 80043ce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <mem_init+0x6c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80043dc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80043ea:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80043ee:	f7ff ff1f 	bl	8004230 <ptr_to_mem>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4a0d      	ldr	r2, [pc, #52]	; (800442c <mem_init+0x70>)
 80043f6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <mem_init+0x70>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2201      	movs	r2, #1
 80043fe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <mem_init+0x70>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004408:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <mem_init+0x70>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004412:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <mem_init+0x6c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a05      	ldr	r2, [pc, #20]	; (8004430 <mem_init+0x74>)
 800441a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20004d34 	.word	0x20004d34
 8004428:	20005388 	.word	0x20005388
 800442c:	2000538c 	.word	0x2000538c
 8004430:	20005390 	.word	0x20005390

08004434 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ff09 	bl	8004254 <mem_to_ptr>
 8004442:	4603      	mov	r3, r0
 8004444:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fef0 	bl	8004230 <ptr_to_mem>
 8004450:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	885b      	ldrh	r3, [r3, #2]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff feea 	bl	8004230 <ptr_to_mem>
 800445c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004466:	d818      	bhi.n	800449a <mem_link_valid+0x66>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	885b      	ldrh	r3, [r3, #2]
 800446c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004470:	d813      	bhi.n	800449a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004476:	8afa      	ldrh	r2, [r7, #22]
 8004478:	429a      	cmp	r2, r3
 800447a:	d004      	beq.n	8004486 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	8afa      	ldrh	r2, [r7, #22]
 8004482:	429a      	cmp	r2, r3
 8004484:	d109      	bne.n	800449a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <mem_link_valid+0x74>)
 8004488:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	429a      	cmp	r2, r3
 800448e:	d006      	beq.n	800449e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	885b      	ldrh	r3, [r3, #2]
 8004494:	8afa      	ldrh	r2, [r7, #22]
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <mem_link_valid+0x6a>
    return 0;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <mem_link_valid+0x6c>
  }
  return 1;
 800449e:	2301      	movs	r3, #1
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	2000538c 	.word	0x2000538c

080044ac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d04c      	beq.n	8004554 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80044c4:	4b25      	ldr	r3, [pc, #148]	; (800455c <mem_free+0xb0>)
 80044c6:	f240 2273 	movw	r2, #627	; 0x273
 80044ca:	4925      	ldr	r1, [pc, #148]	; (8004560 <mem_free+0xb4>)
 80044cc:	4825      	ldr	r0, [pc, #148]	; (8004564 <mem_free+0xb8>)
 80044ce:	f00a f847 	bl	800e560 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80044d2:	e040      	b.n	8004556 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b08      	subs	r3, #8
 80044d8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <mem_free+0xbc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d306      	bcc.n	80044f2 <mem_free+0x46>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f103 020c 	add.w	r2, r3, #12
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <mem_free+0xc0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d907      	bls.n	8004502 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <mem_free+0xb0>)
 80044f4:	f240 227f 	movw	r2, #639	; 0x27f
 80044f8:	491d      	ldr	r1, [pc, #116]	; (8004570 <mem_free+0xc4>)
 80044fa:	481a      	ldr	r0, [pc, #104]	; (8004564 <mem_free+0xb8>)
 80044fc:	f00a f830 	bl	800e560 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004500:	e029      	b.n	8004556 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	791b      	ldrb	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <mem_free+0xb0>)
 800450c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004510:	4918      	ldr	r1, [pc, #96]	; (8004574 <mem_free+0xc8>)
 8004512:	4814      	ldr	r0, [pc, #80]	; (8004564 <mem_free+0xb8>)
 8004514:	f00a f824 	bl	800e560 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004518:	e01d      	b.n	8004556 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff ff8a 	bl	8004434 <mem_link_valid>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <mem_free+0xb0>)
 8004528:	f240 2295 	movw	r2, #661	; 0x295
 800452c:	4912      	ldr	r1, [pc, #72]	; (8004578 <mem_free+0xcc>)
 800452e:	480d      	ldr	r0, [pc, #52]	; (8004564 <mem_free+0xb8>)
 8004530:	f00a f816 	bl	800e560 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004534:	e00f      	b.n	8004556 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <mem_free+0xd0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	429a      	cmp	r2, r3
 8004544:	d202      	bcs.n	800454c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <mem_free+0xd0>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fe93 	bl	8004278 <plug_holes>
 8004552:	e000      	b.n	8004556 <mem_free+0xaa>
    return;
 8004554:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	0800f414 	.word	0x0800f414
 8004560:	0800f4e8 	.word	0x0800f4e8
 8004564:	0800f45c 	.word	0x0800f45c
 8004568:	20005388 	.word	0x20005388
 800456c:	2000538c 	.word	0x2000538c
 8004570:	0800f50c 	.word	0x0800f50c
 8004574:	0800f528 	.word	0x0800f528
 8004578:	0800f550 	.word	0x0800f550
 800457c:	20005390 	.word	0x20005390

08004580 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	3303      	adds	r3, #3
 8004590:	b29b      	uxth	r3, r3
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004598:	8bfb      	ldrh	r3, [r7, #30]
 800459a:	2b0b      	cmp	r3, #11
 800459c:	d801      	bhi.n	80045a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800459e:	230c      	movs	r3, #12
 80045a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80045a2:	8bfb      	ldrh	r3, [r7, #30]
 80045a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045a8:	d803      	bhi.n	80045b2 <mem_trim+0x32>
 80045aa:	8bfa      	ldrh	r2, [r7, #30]
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d201      	bcs.n	80045b6 <mem_trim+0x36>
    return NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e0cc      	b.n	8004750 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80045b6:	4b68      	ldr	r3, [pc, #416]	; (8004758 <mem_trim+0x1d8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d304      	bcc.n	80045ca <mem_trim+0x4a>
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <mem_trim+0x1dc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d306      	bcc.n	80045d8 <mem_trim+0x58>
 80045ca:	4b65      	ldr	r3, [pc, #404]	; (8004760 <mem_trim+0x1e0>)
 80045cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80045d0:	4964      	ldr	r1, [pc, #400]	; (8004764 <mem_trim+0x1e4>)
 80045d2:	4865      	ldr	r0, [pc, #404]	; (8004768 <mem_trim+0x1e8>)
 80045d4:	f009 ffc4 	bl	800e560 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80045d8:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <mem_trim+0x1d8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d304      	bcc.n	80045ec <mem_trim+0x6c>
 80045e2:	4b5e      	ldr	r3, [pc, #376]	; (800475c <mem_trim+0x1dc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d301      	bcc.n	80045f0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	e0af      	b.n	8004750 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b08      	subs	r3, #8
 80045f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80045f6:	69b8      	ldr	r0, [r7, #24]
 80045f8:	f7ff fe2c 	bl	8004254 <mem_to_ptr>
 80045fc:	4603      	mov	r3, r0
 80045fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	8afb      	ldrh	r3, [r7, #22]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b08      	subs	r3, #8
 800460c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800460e:	8bfa      	ldrh	r2, [r7, #30]
 8004610:	8abb      	ldrh	r3, [r7, #20]
 8004612:	429a      	cmp	r2, r3
 8004614:	d906      	bls.n	8004624 <mem_trim+0xa4>
 8004616:	4b52      	ldr	r3, [pc, #328]	; (8004760 <mem_trim+0x1e0>)
 8004618:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800461c:	4953      	ldr	r1, [pc, #332]	; (800476c <mem_trim+0x1ec>)
 800461e:	4852      	ldr	r0, [pc, #328]	; (8004768 <mem_trim+0x1e8>)
 8004620:	f009 ff9e 	bl	800e560 <iprintf>
  if (newsize > size) {
 8004624:	8bfa      	ldrh	r2, [r7, #30]
 8004626:	8abb      	ldrh	r3, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	d901      	bls.n	8004630 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	e08f      	b.n	8004750 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004630:	8bfa      	ldrh	r2, [r7, #30]
 8004632:	8abb      	ldrh	r3, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d101      	bne.n	800463c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	e089      	b.n	8004750 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fdf5 	bl	8004230 <ptr_to_mem>
 8004646:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	791b      	ldrb	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d13f      	bne.n	80046d0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004658:	d106      	bne.n	8004668 <mem_trim+0xe8>
 800465a:	4b41      	ldr	r3, [pc, #260]	; (8004760 <mem_trim+0x1e0>)
 800465c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004660:	4943      	ldr	r1, [pc, #268]	; (8004770 <mem_trim+0x1f0>)
 8004662:	4841      	ldr	r0, [pc, #260]	; (8004768 <mem_trim+0x1e8>)
 8004664:	f009 ff7c 	bl	800e560 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800466e:	8afa      	ldrh	r2, [r7, #22]
 8004670:	8bfb      	ldrh	r3, [r7, #30]
 8004672:	4413      	add	r3, r2
 8004674:	b29b      	uxth	r3, r3
 8004676:	3308      	adds	r3, #8
 8004678:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800467a:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <mem_trim+0x1f4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d106      	bne.n	8004692 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fdd2 	bl	8004230 <ptr_to_mem>
 800468c:	4603      	mov	r3, r0
 800468e:	4a39      	ldr	r2, [pc, #228]	; (8004774 <mem_trim+0x1f4>)
 8004690:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004692:	89fb      	ldrh	r3, [r7, #14]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fdcb 	bl	8004230 <ptr_to_mem>
 800469a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2200      	movs	r2, #0
 80046a0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	89ba      	ldrh	r2, [r7, #12]
 80046a6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	8afa      	ldrh	r2, [r7, #22]
 80046ac:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	89fa      	ldrh	r2, [r7, #14]
 80046b2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80046bc:	d047      	beq.n	800474e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fdb4 	bl	8004230 <ptr_to_mem>
 80046c8:	4602      	mov	r2, r0
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	8053      	strh	r3, [r2, #2]
 80046ce:	e03e      	b.n	800474e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80046d0:	8bfb      	ldrh	r3, [r7, #30]
 80046d2:	f103 0214 	add.w	r2, r3, #20
 80046d6:	8abb      	ldrh	r3, [r7, #20]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d838      	bhi.n	800474e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80046dc:	8afa      	ldrh	r2, [r7, #22]
 80046de:	8bfb      	ldrh	r3, [r7, #30]
 80046e0:	4413      	add	r3, r2
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3308      	adds	r3, #8
 80046e6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80046f0:	d106      	bne.n	8004700 <mem_trim+0x180>
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <mem_trim+0x1e0>)
 80046f4:	f240 3216 	movw	r2, #790	; 0x316
 80046f8:	491d      	ldr	r1, [pc, #116]	; (8004770 <mem_trim+0x1f0>)
 80046fa:	481b      	ldr	r0, [pc, #108]	; (8004768 <mem_trim+0x1e8>)
 80046fc:	f009 ff30 	bl	800e560 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fd94 	bl	8004230 <ptr_to_mem>
 8004708:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <mem_trim+0x1f4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d202      	bcs.n	800471a <mem_trim+0x19a>
      lfree = mem2;
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <mem_trim+0x1f4>)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2200      	movs	r2, #0
 800471e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	8afa      	ldrh	r2, [r7, #22]
 800472c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	89fa      	ldrh	r2, [r7, #14]
 8004732:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800473c:	d007      	beq.n	800474e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fd74 	bl	8004230 <ptr_to_mem>
 8004748:	4602      	mov	r2, r0
 800474a:	89fb      	ldrh	r3, [r7, #14]
 800474c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800474e:	687b      	ldr	r3, [r7, #4]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20005388 	.word	0x20005388
 800475c:	2000538c 	.word	0x2000538c
 8004760:	0800f414 	.word	0x0800f414
 8004764:	0800f584 	.word	0x0800f584
 8004768:	0800f45c 	.word	0x0800f45c
 800476c:	0800f59c 	.word	0x0800f59c
 8004770:	0800f5bc 	.word	0x0800f5bc
 8004774:	20005390 	.word	0x20005390

08004778 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <mem_malloc+0x14>
    return NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	e0d9      	b.n	8004940 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	3303      	adds	r3, #3
 8004790:	b29b      	uxth	r3, r3
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004798:	8bbb      	ldrh	r3, [r7, #28]
 800479a:	2b0b      	cmp	r3, #11
 800479c:	d801      	bhi.n	80047a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800479e:	230c      	movs	r3, #12
 80047a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80047a2:	8bbb      	ldrh	r3, [r7, #28]
 80047a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047a8:	d803      	bhi.n	80047b2 <mem_malloc+0x3a>
 80047aa:	8bba      	ldrh	r2, [r7, #28]
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d201      	bcs.n	80047b6 <mem_malloc+0x3e>
    return NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e0c4      	b.n	8004940 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80047b6:	4b64      	ldr	r3, [pc, #400]	; (8004948 <mem_malloc+0x1d0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fd4a 	bl	8004254 <mem_to_ptr>
 80047c0:	4603      	mov	r3, r0
 80047c2:	83fb      	strh	r3, [r7, #30]
 80047c4:	e0b4      	b.n	8004930 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80047c6:	8bfb      	ldrh	r3, [r7, #30]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fd31 	bl	8004230 <ptr_to_mem>
 80047ce:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f040 80a4 	bne.w	8004922 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	8bfb      	ldrh	r3, [r7, #30]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f1a3 0208 	sub.w	r2, r3, #8
 80047e8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80047ea:	429a      	cmp	r2, r3
 80047ec:	f0c0 8099 	bcc.w	8004922 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	8bfb      	ldrh	r3, [r7, #30]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f1a3 0208 	sub.w	r2, r3, #8
 80047fe:	8bbb      	ldrh	r3, [r7, #28]
 8004800:	3314      	adds	r3, #20
 8004802:	429a      	cmp	r2, r3
 8004804:	d333      	bcc.n	800486e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004806:	8bfa      	ldrh	r2, [r7, #30]
 8004808:	8bbb      	ldrh	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	3308      	adds	r3, #8
 8004810:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004812:	8a7b      	ldrh	r3, [r7, #18]
 8004814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004818:	d106      	bne.n	8004828 <mem_malloc+0xb0>
 800481a:	4b4c      	ldr	r3, [pc, #304]	; (800494c <mem_malloc+0x1d4>)
 800481c:	f240 3287 	movw	r2, #903	; 0x387
 8004820:	494b      	ldr	r1, [pc, #300]	; (8004950 <mem_malloc+0x1d8>)
 8004822:	484c      	ldr	r0, [pc, #304]	; (8004954 <mem_malloc+0x1dc>)
 8004824:	f009 fe9c 	bl	800e560 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004828:	8a7b      	ldrh	r3, [r7, #18]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fd00 	bl	8004230 <ptr_to_mem>
 8004830:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8bfa      	ldrh	r2, [r7, #30]
 8004844:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	8a7a      	ldrh	r2, [r7, #18]
 800484a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2201      	movs	r2, #1
 8004850:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800485a:	d00b      	beq.n	8004874 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fce5 	bl	8004230 <ptr_to_mem>
 8004866:	4602      	mov	r2, r0
 8004868:	8a7b      	ldrh	r3, [r7, #18]
 800486a:	8053      	strh	r3, [r2, #2]
 800486c:	e002      	b.n	8004874 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2201      	movs	r2, #1
 8004872:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004874:	4b34      	ldr	r3, [pc, #208]	; (8004948 <mem_malloc+0x1d0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d127      	bne.n	80048ce <mem_malloc+0x156>
          struct mem *cur = lfree;
 800487e:	4b32      	ldr	r3, [pc, #200]	; (8004948 <mem_malloc+0x1d0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004884:	e005      	b.n	8004892 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fcd0 	bl	8004230 <ptr_to_mem>
 8004890:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	791b      	ldrb	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <mem_malloc+0x12c>
 800489a:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <mem_malloc+0x1e0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1f0      	bne.n	8004886 <mem_malloc+0x10e>
          }
          lfree = cur;
 80048a4:	4a28      	ldr	r2, [pc, #160]	; (8004948 <mem_malloc+0x1d0>)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80048aa:	4b27      	ldr	r3, [pc, #156]	; (8004948 <mem_malloc+0x1d0>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <mem_malloc+0x1e0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d00b      	beq.n	80048ce <mem_malloc+0x156>
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <mem_malloc+0x1d0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	791b      	ldrb	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <mem_malloc+0x156>
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <mem_malloc+0x1d4>)
 80048c2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80048c6:	4925      	ldr	r1, [pc, #148]	; (800495c <mem_malloc+0x1e4>)
 80048c8:	4822      	ldr	r0, [pc, #136]	; (8004954 <mem_malloc+0x1dc>)
 80048ca:	f009 fe49 	bl	800e560 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80048ce:	8bba      	ldrh	r2, [r7, #28]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4413      	add	r3, r2
 80048d4:	3308      	adds	r3, #8
 80048d6:	4a20      	ldr	r2, [pc, #128]	; (8004958 <mem_malloc+0x1e0>)
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	4293      	cmp	r3, r2
 80048dc:	d906      	bls.n	80048ec <mem_malloc+0x174>
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <mem_malloc+0x1d4>)
 80048e0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80048e4:	491e      	ldr	r1, [pc, #120]	; (8004960 <mem_malloc+0x1e8>)
 80048e6:	481b      	ldr	r0, [pc, #108]	; (8004954 <mem_malloc+0x1dc>)
 80048e8:	f009 fe3a 	bl	800e560 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <mem_malloc+0x18c>
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <mem_malloc+0x1d4>)
 80048f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80048fc:	4919      	ldr	r1, [pc, #100]	; (8004964 <mem_malloc+0x1ec>)
 80048fe:	4815      	ldr	r0, [pc, #84]	; (8004954 <mem_malloc+0x1dc>)
 8004900:	f009 fe2e 	bl	800e560 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <mem_malloc+0x1a4>
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <mem_malloc+0x1d4>)
 8004910:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004914:	4914      	ldr	r1, [pc, #80]	; (8004968 <mem_malloc+0x1f0>)
 8004916:	480f      	ldr	r0, [pc, #60]	; (8004954 <mem_malloc+0x1dc>)
 8004918:	f009 fe22 	bl	800e560 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3308      	adds	r3, #8
 8004920:	e00e      	b.n	8004940 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004922:	8bfb      	ldrh	r3, [r7, #30]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fc83 	bl	8004230 <ptr_to_mem>
 800492a:	4603      	mov	r3, r0
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004930:	8bfa      	ldrh	r2, [r7, #30]
 8004932:	8bbb      	ldrh	r3, [r7, #28]
 8004934:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004938:	429a      	cmp	r2, r3
 800493a:	f4ff af44 	bcc.w	80047c6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20005390 	.word	0x20005390
 800494c:	0800f414 	.word	0x0800f414
 8004950:	0800f5bc 	.word	0x0800f5bc
 8004954:	0800f45c 	.word	0x0800f45c
 8004958:	2000538c 	.word	0x2000538c
 800495c:	0800f5d0 	.word	0x0800f5d0
 8004960:	0800f5ec 	.word	0x0800f5ec
 8004964:	0800f61c 	.word	0x0800f61c
 8004968:	0800f64c 	.word	0x0800f64c

0800496c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	3303      	adds	r3, #3
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e011      	b.n	80049b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4413      	add	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	885b      	ldrh	r3, [r3, #2]
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4293      	cmp	r3, r2
 80049bc:	dbe7      	blt.n	800498e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80049d2:	2300      	movs	r3, #0
 80049d4:	80fb      	strh	r3, [r7, #6]
 80049d6:	e009      	b.n	80049ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	4a08      	ldr	r2, [pc, #32]	; (80049fc <memp_init+0x30>)
 80049dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ffc3 	bl	800496c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	3301      	adds	r3, #1
 80049ea:	80fb      	strh	r3, [r7, #6]
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d9f2      	bls.n	80049d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08011e30 	.word	0x08011e30

08004a00 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <do_memp_malloc_pool+0x38>
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <do_memp_malloc_pool+0x48>)
 8004a2c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004a30:	4906      	ldr	r1, [pc, #24]	; (8004a4c <do_memp_malloc_pool+0x4c>)
 8004a32:	4807      	ldr	r0, [pc, #28]	; (8004a50 <do_memp_malloc_pool+0x50>)
 8004a34:	f009 fd94 	bl	800e560 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	e000      	b.n	8004a3e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	0800f670 	.word	0x0800f670
 8004a4c:	0800f6a0 	.word	0x0800f6a0
 8004a50:	0800f6c4 	.word	0x0800f6c4

08004a54 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <memp_malloc_pool+0x1c>
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <memp_malloc_pool+0x38>)
 8004a64:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004a68:	4909      	ldr	r1, [pc, #36]	; (8004a90 <memp_malloc_pool+0x3c>)
 8004a6a:	480a      	ldr	r0, [pc, #40]	; (8004a94 <memp_malloc_pool+0x40>)
 8004a6c:	f009 fd78 	bl	800e560 <iprintf>
  if (desc == NULL) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <memp_malloc_pool+0x26>
    return NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e003      	b.n	8004a82 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff ffc0 	bl	8004a00 <do_memp_malloc_pool>
 8004a80:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	0800f670 	.word	0x0800f670
 8004a90:	0800f6ec 	.word	0x0800f6ec
 8004a94:	0800f6c4 	.word	0x0800f6c4

08004a98 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d908      	bls.n	8004aba <memp_malloc+0x22>
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <memp_malloc+0x3c>)
 8004aaa:	f240 1257 	movw	r2, #343	; 0x157
 8004aae:	490a      	ldr	r1, [pc, #40]	; (8004ad8 <memp_malloc+0x40>)
 8004ab0:	480a      	ldr	r0, [pc, #40]	; (8004adc <memp_malloc+0x44>)
 8004ab2:	f009 fd55 	bl	800e560 <iprintf>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e008      	b.n	8004acc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <memp_malloc+0x48>)
 8004abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff9c 	bl	8004a00 <do_memp_malloc_pool>
 8004ac8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	0800f670 	.word	0x0800f670
 8004ad8:	0800f700 	.word	0x0800f700
 8004adc:	0800f6c4 	.word	0x0800f6c4
 8004ae0:	08011e30 	.word	0x08011e30

08004ae4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <do_memp_free_pool+0x22>
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <do_memp_free_pool+0x40>)
 8004afa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004afe:	490a      	ldr	r1, [pc, #40]	; (8004b28 <do_memp_free_pool+0x44>)
 8004b00:	480a      	ldr	r0, [pc, #40]	; (8004b2c <do_memp_free_pool+0x48>)
 8004b02:	f009 fd2d 	bl	800e560 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	0800f670 	.word	0x0800f670
 8004b28:	0800f720 	.word	0x0800f720
 8004b2c:	0800f6c4 	.word	0x0800f6c4

08004b30 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <memp_free_pool+0x1e>
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <memp_free_pool+0x3c>)
 8004b42:	f240 1295 	movw	r2, #405	; 0x195
 8004b46:	490a      	ldr	r1, [pc, #40]	; (8004b70 <memp_free_pool+0x40>)
 8004b48:	480a      	ldr	r0, [pc, #40]	; (8004b74 <memp_free_pool+0x44>)
 8004b4a:	f009 fd09 	bl	800e560 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <memp_free_pool+0x34>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffc1 	bl	8004ae4 <do_memp_free_pool>
 8004b62:	e000      	b.n	8004b66 <memp_free_pool+0x36>
    return;
 8004b64:	bf00      	nop
}
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	0800f670 	.word	0x0800f670
 8004b70:	0800f6ec 	.word	0x0800f6ec
 8004b74:	0800f6c4 	.word	0x0800f6c4

08004b78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	6039      	str	r1, [r7, #0]
 8004b82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d907      	bls.n	8004b9a <memp_free+0x22>
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <memp_free+0x44>)
 8004b8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004b90:	490b      	ldr	r1, [pc, #44]	; (8004bc0 <memp_free+0x48>)
 8004b92:	480c      	ldr	r0, [pc, #48]	; (8004bc4 <memp_free+0x4c>)
 8004b94:	f009 fce4 	bl	800e560 <iprintf>
 8004b98:	e00c      	b.n	8004bb4 <memp_free+0x3c>

  if (mem == NULL) {
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <memp_free+0x50>)
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff9a 	bl	8004ae4 <do_memp_free_pool>
 8004bb0:	e000      	b.n	8004bb4 <memp_free+0x3c>
    return;
 8004bb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0800f670 	.word	0x0800f670
 8004bc0:	0800f740 	.word	0x0800f740
 8004bc4:	0800f6c4 	.word	0x0800f6c4
 8004bc8:	08011e30 	.word	0x08011e30

08004bcc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d108      	bne.n	8004c02 <netif_add+0x26>
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <netif_add+0x174>)
 8004bf2:	f240 1227 	movw	r2, #295	; 0x127
 8004bf6:	4957      	ldr	r1, [pc, #348]	; (8004d54 <netif_add+0x178>)
 8004bf8:	4857      	ldr	r0, [pc, #348]	; (8004d58 <netif_add+0x17c>)
 8004bfa:	f009 fcb1 	bl	800e560 <iprintf>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e0a2      	b.n	8004d48 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d108      	bne.n	8004c1a <netif_add+0x3e>
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <netif_add+0x174>)
 8004c0a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004c0e:	4953      	ldr	r1, [pc, #332]	; (8004d5c <netif_add+0x180>)
 8004c10:	4851      	ldr	r0, [pc, #324]	; (8004d58 <netif_add+0x17c>)
 8004c12:	f009 fca5 	bl	800e560 <iprintf>
 8004c16:	2300      	movs	r3, #0
 8004c18:	e096      	b.n	8004d48 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004c20:	4b4f      	ldr	r3, [pc, #316]	; (8004d60 <netif_add+0x184>)
 8004c22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004c2a:	4b4d      	ldr	r3, [pc, #308]	; (8004d60 <netif_add+0x184>)
 8004c2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004c34:	4b4a      	ldr	r3, [pc, #296]	; (8004d60 <netif_add+0x184>)
 8004c36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a45      	ldr	r2, [pc, #276]	; (8004d64 <netif_add+0x188>)
 8004c4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004c6a:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <netif_add+0x18c>)
 8004c6c:	781a      	ldrb	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f913 	bl	8004eac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	4798      	blx	r3
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <netif_add+0xba>
    return NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e058      	b.n	8004d48 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c9c:	2bff      	cmp	r3, #255	; 0xff
 8004c9e:	d103      	bne.n	8004ca8 <netif_add+0xcc>
        netif->num = 0;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004cac:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <netif_add+0x190>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	e02b      	b.n	8004d0c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d106      	bne.n	8004cca <netif_add+0xee>
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <netif_add+0x174>)
 8004cbe:	f240 128b 	movw	r2, #395	; 0x18b
 8004cc2:	492b      	ldr	r1, [pc, #172]	; (8004d70 <netif_add+0x194>)
 8004cc4:	4824      	ldr	r0, [pc, #144]	; (8004d58 <netif_add+0x17c>)
 8004cc6:	f009 fc4b 	bl	800e560 <iprintf>
        num_netifs++;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2bff      	cmp	r3, #255	; 0xff
 8004cd4:	dd06      	ble.n	8004ce4 <netif_add+0x108>
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <netif_add+0x174>)
 8004cd8:	f240 128d 	movw	r2, #397	; 0x18d
 8004cdc:	4925      	ldr	r1, [pc, #148]	; (8004d74 <netif_add+0x198>)
 8004cde:	481e      	ldr	r0, [pc, #120]	; (8004d58 <netif_add+0x17c>)
 8004ce0:	f009 fc3e 	bl	800e560 <iprintf>
        if (netif2->num == netif->num) {
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d108      	bne.n	8004d06 <netif_add+0x12a>
          netif->num++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004d04:	e005      	b.n	8004d12 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d0      	bne.n	8004cb4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1be      	bne.n	8004c96 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d1e:	2bfe      	cmp	r3, #254	; 0xfe
 8004d20:	d103      	bne.n	8004d2a <netif_add+0x14e>
    netif_num = 0;
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <netif_add+0x18c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	e006      	b.n	8004d38 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d30:	3301      	adds	r3, #1
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <netif_add+0x18c>)
 8004d36:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <netif_add+0x190>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <netif_add+0x190>)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	0800f75c 	.word	0x0800f75c
 8004d54:	0800f7f0 	.word	0x0800f7f0
 8004d58:	0800f7ac 	.word	0x0800f7ac
 8004d5c:	0800f80c 	.word	0x0800f80c
 8004d60:	08011e94 	.word	0x08011e94
 8004d64:	08005187 	.word	0x08005187
 8004d68:	20008288 	.word	0x20008288
 8004d6c:	20008280 	.word	0x20008280
 8004d70:	0800f830 	.word	0x0800f830
 8004d74:	0800f844 	.word	0x0800f844

08004d78 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 fb53 	bl	8007430 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f006 fff1 	bl	800bd74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <netif_do_set_ipaddr+0x20>
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <netif_do_set_ipaddr+0x88>)
 8004db0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004db4:	491c      	ldr	r1, [pc, #112]	; (8004e28 <netif_do_set_ipaddr+0x8c>)
 8004db6:	481d      	ldr	r0, [pc, #116]	; (8004e2c <netif_do_set_ipaddr+0x90>)
 8004db8:	f009 fbd2 	bl	800e560 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <netif_do_set_ipaddr+0x34>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <netif_do_set_ipaddr+0x88>)
 8004dc4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004dc8:	4917      	ldr	r1, [pc, #92]	; (8004e28 <netif_do_set_ipaddr+0x8c>)
 8004dca:	4818      	ldr	r0, [pc, #96]	; (8004e2c <netif_do_set_ipaddr+0x90>)
 8004dcc:	f009 fbc8 	bl	800e560 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d01c      	beq.n	8004e18 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3304      	adds	r3, #4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ffbf 	bl	8004d78 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <netif_do_set_ipaddr+0x6a>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	e000      	b.n	8004e08 <netif_do_set_ipaddr+0x6c>
 8004e06:	2300      	movs	r3, #0
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8d2 	bl	8004fb8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	0800f75c 	.word	0x0800f75c
 8004e28:	0800f874 	.word	0x0800f874
 8004e2c:	0800f7ac 	.word	0x0800f7ac

08004e30 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3308      	adds	r3, #8
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d00a      	beq.n	8004e60 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <netif_do_set_netmask+0x26>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	e000      	b.n	8004e58 <netif_do_set_netmask+0x28>
 8004e56:	2300      	movs	r3, #0
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	330c      	adds	r3, #12
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d00a      	beq.n	8004e9e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <netif_do_set_gw+0x26>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	e000      	b.n	8004e96 <netif_do_set_gw+0x28>
 8004e94:	2300      	movs	r3, #0
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <netif_set_addr+0x90>)
 8004eca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <netif_set_addr+0x90>)
 8004ed4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <netif_set_addr+0x90>)
 8004ede:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <netif_set_addr+0x42>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <netif_set_addr+0x46>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <netif_set_addr+0x48>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	461a      	mov	r2, r3
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff ff49 	bl	8004d9c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7ff ff8e 	bl	8004e30 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff ffa8 	bl	8004e6e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff35 	bl	8004d9c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004f32:	bf00      	nop
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	08011e94 	.word	0x08011e94

08004f40 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <netif_set_default+0x1c>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20008284 	.word	0x20008284

08004f60 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <netif_set_up+0x1e>
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <netif_set_up+0x4c>)
 8004f70:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <netif_set_up+0x50>)
 8004f76:	480f      	ldr	r0, [pc, #60]	; (8004fb4 <netif_set_up+0x54>)
 8004f78:	f009 faf2 	bl	800e560 <iprintf>
 8004f7c:	e013      	b.n	8004fa6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10c      	bne.n	8004fa6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f809 	bl	8004fb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	0800f75c 	.word	0x0800f75c
 8004fb0:	0800f8e4 	.word	0x0800f8e4
 8004fb4:	0800f7ac 	.word	0x0800f7ac

08004fb8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <netif_issue_reports+0x20>
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <netif_issue_reports+0x74>)
 8004fcc:	f240 326d 	movw	r2, #877	; 0x36d
 8004fd0:	4917      	ldr	r1, [pc, #92]	; (8005030 <netif_issue_reports+0x78>)
 8004fd2:	4818      	ldr	r0, [pc, #96]	; (8005034 <netif_issue_reports+0x7c>)
 8004fd4:	f009 fac4 	bl	800e560 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01e      	beq.n	8005024 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d013      	beq.n	8005026 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3304      	adds	r3, #4
 8005002:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00e      	beq.n	8005026 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f007 fe13 	bl	800cc48 <etharp_request>
 8005022:	e000      	b.n	8005026 <netif_issue_reports+0x6e>
    return;
 8005024:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	0800f75c 	.word	0x0800f75c
 8005030:	0800f900 	.word	0x0800f900
 8005034:	0800f7ac 	.word	0x0800f7ac

08005038 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d107      	bne.n	8005056 <netif_set_down+0x1e>
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <netif_set_down+0x58>)
 8005048:	f240 329b 	movw	r2, #923	; 0x39b
 800504c:	4911      	ldr	r1, [pc, #68]	; (8005094 <netif_set_down+0x5c>)
 800504e:	4812      	ldr	r0, [pc, #72]	; (8005098 <netif_set_down+0x60>)
 8005050:	f009 fa86 	bl	800e560 <iprintf>
 8005054:	e019      	b.n	800508a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f007 f99d 	bl	800c3c4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	0800f75c 	.word	0x0800f75c
 8005094:	0800f924 	.word	0x0800f924
 8005098:	0800f7ac 	.word	0x0800f7ac

0800509c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d107      	bne.n	80050ba <netif_set_link_up+0x1e>
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <netif_set_link_up+0x5c>)
 80050ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80050b0:	4912      	ldr	r1, [pc, #72]	; (80050fc <netif_set_link_up+0x60>)
 80050b2:	4813      	ldr	r0, [pc, #76]	; (8005100 <netif_set_link_up+0x64>)
 80050b4:	f009 fa54 	bl	800e560 <iprintf>
 80050b8:	e01b      	b.n	80050f2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d114      	bne.n	80050f2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050ce:	f043 0304 	orr.w	r3, r3, #4
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80050da:	2103      	movs	r1, #3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff6b 	bl	8004fb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <netif_set_link_up+0x56>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	0800f75c 	.word	0x0800f75c
 80050fc:	0800f944 	.word	0x0800f944
 8005100:	0800f7ac 	.word	0x0800f7ac

08005104 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <netif_set_link_down+0x1e>
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <netif_set_link_down+0x54>)
 8005114:	f240 4206 	movw	r2, #1030	; 0x406
 8005118:	4910      	ldr	r1, [pc, #64]	; (800515c <netif_set_link_down+0x58>)
 800511a:	4811      	ldr	r0, [pc, #68]	; (8005160 <netif_set_link_down+0x5c>)
 800511c:	f009 fa20 	bl	800e560 <iprintf>
 8005120:	e017      	b.n	8005152 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005136:	f023 0304 	bic.w	r3, r3, #4
 800513a:	b2da      	uxtb	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <netif_set_link_down+0x4e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	0800f75c 	.word	0x0800f75c
 800515c:	0800f968 	.word	0x0800f968
 8005160:	0800f7ac 	.word	0x0800f7ac

08005164 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	61da      	str	r2, [r3, #28]
  }
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005192:	f06f 030b 	mvn.w	r3, #11
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <netif_get_by_index+0x48>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e00c      	b.n	80051d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051c2:	3301      	adds	r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	79fa      	ldrb	r2, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d101      	bne.n	80051d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	e006      	b.n	80051de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ef      	bne.n	80051bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20008280 	.word	0x20008280

080051f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <pbuf_free_ooseq+0x38>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <pbuf_free_ooseq+0x3c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	e00a      	b.n	800521a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f002 f94d 	bl	80074ac <tcp_free_ooseq>
      return;
 8005212:	e005      	b.n	8005220 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f1      	bne.n	8005204 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20008289 	.word	0x20008289
 800522c:	20008298 	.word	0x20008298

08005230 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <pbuf_pool_is_empty+0x14>)
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	20008289 	.word	0x20008289

08005248 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	460b      	mov	r3, r1
 8005258:	80fb      	strh	r3, [r7, #6]
 800525a:	4613      	mov	r3, r2
 800525c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88ba      	ldrh	r2, [r7, #4]
 8005274:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005276:	8b3b      	ldrh	r3, [r7, #24]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	7f3a      	ldrb	r2, [r7, #28]
 8005282:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	73da      	strb	r2, [r3, #15]
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
 80052a6:	460b      	mov	r3, r1
 80052a8:	80bb      	strh	r3, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80052b8:	d07f      	beq.n	80053ba <pbuf_alloc+0x11e>
 80052ba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80052be:	f300 80c8 	bgt.w	8005452 <pbuf_alloc+0x1b6>
 80052c2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80052c6:	d010      	beq.n	80052ea <pbuf_alloc+0x4e>
 80052c8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80052cc:	f300 80c1 	bgt.w	8005452 <pbuf_alloc+0x1b6>
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d002      	beq.n	80052da <pbuf_alloc+0x3e>
 80052d4:	2b41      	cmp	r3, #65	; 0x41
 80052d6:	f040 80bc 	bne.w	8005452 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	88bb      	ldrh	r3, [r7, #4]
 80052de:	4619      	mov	r1, r3
 80052e0:	2000      	movs	r0, #0
 80052e2:	f000 f8d1 	bl	8005488 <pbuf_alloc_reference>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80052e8:	e0bd      	b.n	8005466 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80052f2:	88bb      	ldrh	r3, [r7, #4]
 80052f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80052f6:	2008      	movs	r0, #8
 80052f8:	f7ff fbce 	bl	8004a98 <memp_malloc>
 80052fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005304:	f7ff ff94 	bl	8005230 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <pbuf_alloc+0x78>
            pbuf_free(p);
 800530e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005310:	f000 faa8 	bl	8005864 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	e0a7      	b.n	8005468 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800531a:	3303      	adds	r3, #3
 800531c:	b29b      	uxth	r3, r3
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	b29b      	uxth	r3, r3
 8005324:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005328:	b29b      	uxth	r3, r3
 800532a:	8b7a      	ldrh	r2, [r7, #26]
 800532c:	4293      	cmp	r3, r2
 800532e:	bf28      	it	cs
 8005330:	4613      	movcs	r3, r2
 8005332:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005336:	3310      	adds	r3, #16
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	3303      	adds	r3, #3
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	4618      	mov	r0, r3
 8005344:	89f9      	ldrh	r1, [r7, #14]
 8005346:	8b7a      	ldrh	r2, [r7, #26]
 8005348:	2300      	movs	r3, #0
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	887b      	ldrh	r3, [r7, #2]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	460b      	mov	r3, r1
 8005352:	4601      	mov	r1, r0
 8005354:	6938      	ldr	r0, [r7, #16]
 8005356:	f7ff ff77 	bl	8005248 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d006      	beq.n	8005374 <pbuf_alloc+0xd8>
 8005366:	4b42      	ldr	r3, [pc, #264]	; (8005470 <pbuf_alloc+0x1d4>)
 8005368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800536c:	4941      	ldr	r1, [pc, #260]	; (8005474 <pbuf_alloc+0x1d8>)
 800536e:	4842      	ldr	r0, [pc, #264]	; (8005478 <pbuf_alloc+0x1dc>)
 8005370:	f009 f8f6 	bl	800e560 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005376:	3303      	adds	r3, #3
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005380:	d106      	bne.n	8005390 <pbuf_alloc+0xf4>
 8005382:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <pbuf_alloc+0x1d4>)
 8005384:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005388:	493c      	ldr	r1, [pc, #240]	; (800547c <pbuf_alloc+0x1e0>)
 800538a:	483b      	ldr	r0, [pc, #236]	; (8005478 <pbuf_alloc+0x1dc>)
 800538c:	f009 f8e8 	bl	800e560 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
 800539a:	e002      	b.n	80053a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80053a6:	8b7a      	ldrh	r2, [r7, #26]
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80053b2:	8b7b      	ldrh	r3, [r7, #26]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d19e      	bne.n	80052f6 <pbuf_alloc+0x5a>
      break;
 80053b8:	e055      	b.n	8005466 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80053ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053bc:	3303      	adds	r3, #3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f023 0303 	bic.w	r3, r3, #3
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	88bb      	ldrh	r3, [r7, #4]
 80053c8:	3303      	adds	r3, #3
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f023 0303 	bic.w	r3, r3, #3
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80053d6:	8b3b      	ldrh	r3, [r7, #24]
 80053d8:	3310      	adds	r3, #16
 80053da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80053dc:	8b3a      	ldrh	r2, [r7, #24]
 80053de:	88bb      	ldrh	r3, [r7, #4]
 80053e0:	3303      	adds	r3, #3
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d306      	bcc.n	80053f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80053ea:	8afa      	ldrh	r2, [r7, #22]
 80053ec:	88bb      	ldrh	r3, [r7, #4]
 80053ee:	3303      	adds	r3, #3
 80053f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d201      	bcs.n	80053fc <pbuf_alloc+0x160>
        return NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e035      	b.n	8005468 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f9ba 	bl	8004778 <mem_malloc>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <pbuf_alloc+0x174>
        return NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	e02b      	b.n	8005468 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005412:	3310      	adds	r3, #16
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	4413      	add	r3, r2
 8005418:	3303      	adds	r3, #3
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	4618      	mov	r0, r3
 8005420:	88b9      	ldrh	r1, [r7, #4]
 8005422:	88ba      	ldrh	r2, [r7, #4]
 8005424:	2300      	movs	r3, #0
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	460b      	mov	r3, r1
 800542e:	4601      	mov	r1, r0
 8005430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005432:	f7ff ff09 	bl	8005248 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <pbuf_alloc+0x1c8>
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <pbuf_alloc+0x1d4>)
 8005444:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005448:	490d      	ldr	r1, [pc, #52]	; (8005480 <pbuf_alloc+0x1e4>)
 800544a:	480b      	ldr	r0, [pc, #44]	; (8005478 <pbuf_alloc+0x1dc>)
 800544c:	f009 f888 	bl	800e560 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005450:	e008      	b.n	8005464 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pbuf_alloc+0x1d4>)
 8005454:	f240 1227 	movw	r2, #295	; 0x127
 8005458:	490a      	ldr	r1, [pc, #40]	; (8005484 <pbuf_alloc+0x1e8>)
 800545a:	4807      	ldr	r0, [pc, #28]	; (8005478 <pbuf_alloc+0x1dc>)
 800545c:	f009 f880 	bl	800e560 <iprintf>
      return NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	e001      	b.n	8005468 <pbuf_alloc+0x1cc>
      break;
 8005464:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005468:	4618      	mov	r0, r3
 800546a:	3728      	adds	r7, #40	; 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	0800f98c 	.word	0x0800f98c
 8005474:	0800f9bc 	.word	0x0800f9bc
 8005478:	0800f9ec 	.word	0x0800f9ec
 800547c:	0800fa14 	.word	0x0800fa14
 8005480:	0800fa48 	.word	0x0800fa48
 8005484:	0800fa74 	.word	0x0800fa74

08005488 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
 8005494:	4613      	mov	r3, r2
 8005496:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005498:	883b      	ldrh	r3, [r7, #0]
 800549a:	2b41      	cmp	r3, #65	; 0x41
 800549c:	d009      	beq.n	80054b2 <pbuf_alloc_reference+0x2a>
 800549e:	883b      	ldrh	r3, [r7, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d006      	beq.n	80054b2 <pbuf_alloc_reference+0x2a>
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <pbuf_alloc_reference+0x5c>)
 80054a6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80054aa:	490f      	ldr	r1, [pc, #60]	; (80054e8 <pbuf_alloc_reference+0x60>)
 80054ac:	480f      	ldr	r0, [pc, #60]	; (80054ec <pbuf_alloc_reference+0x64>)
 80054ae:	f009 f857 	bl	800e560 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80054b2:	2007      	movs	r0, #7
 80054b4:	f7ff faf0 	bl	8004a98 <memp_malloc>
 80054b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e00b      	b.n	80054dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80054c4:	8879      	ldrh	r1, [r7, #2]
 80054c6:	887a      	ldrh	r2, [r7, #2]
 80054c8:	2300      	movs	r3, #0
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	883b      	ldrh	r3, [r7, #0]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	460b      	mov	r3, r1
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff feb7 	bl	8005248 <pbuf_init_alloced_pbuf>
  return p;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	0800f98c 	.word	0x0800f98c
 80054e8:	0800fa90 	.word	0x0800fa90
 80054ec:	0800f9ec 	.word	0x0800f9ec

080054f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	460b      	mov	r3, r1
 80054fe:	81bb      	strh	r3, [r7, #12]
 8005500:	4613      	mov	r3, r2
 8005502:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005508:	8a7b      	ldrh	r3, [r7, #18]
 800550a:	3303      	adds	r3, #3
 800550c:	f023 0203 	bic.w	r2, r3, #3
 8005510:	89bb      	ldrh	r3, [r7, #12]
 8005512:	441a      	add	r2, r3
 8005514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005516:	429a      	cmp	r2, r3
 8005518:	d901      	bls.n	800551e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	e018      	b.n	8005550 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005524:	8a7b      	ldrh	r3, [r7, #18]
 8005526:	3303      	adds	r3, #3
 8005528:	f023 0303 	bic.w	r3, r3, #3
 800552c:	6a3a      	ldr	r2, [r7, #32]
 800552e:	4413      	add	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e001      	b.n	8005538 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	89b9      	ldrh	r1, [r7, #12]
 800553c:	89ba      	ldrh	r2, [r7, #12]
 800553e:	2302      	movs	r3, #2
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	460b      	mov	r3, r1
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	f7ff fe7d 	bl	8005248 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800554e:	687b      	ldr	r3, [r7, #4]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <pbuf_realloc+0x20>
 800556a:	4b3a      	ldr	r3, [pc, #232]	; (8005654 <pbuf_realloc+0xfc>)
 800556c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005570:	4939      	ldr	r1, [pc, #228]	; (8005658 <pbuf_realloc+0x100>)
 8005572:	483a      	ldr	r0, [pc, #232]	; (800565c <pbuf_realloc+0x104>)
 8005574:	f008 fff4 	bl	800e560 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	891b      	ldrh	r3, [r3, #8]
 800557c:	887a      	ldrh	r2, [r7, #2]
 800557e:	429a      	cmp	r2, r3
 8005580:	d263      	bcs.n	800564a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	891a      	ldrh	r2, [r3, #8]
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005594:	e018      	b.n	80055c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	895b      	ldrh	r3, [r3, #10]
 800559a:	897a      	ldrh	r2, [r7, #10]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	891a      	ldrh	r2, [r3, #8]
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <pbuf_realloc+0x70>
 80055ba:	4b26      	ldr	r3, [pc, #152]	; (8005654 <pbuf_realloc+0xfc>)
 80055bc:	f240 12af 	movw	r2, #431	; 0x1af
 80055c0:	4927      	ldr	r1, [pc, #156]	; (8005660 <pbuf_realloc+0x108>)
 80055c2:	4826      	ldr	r0, [pc, #152]	; (800565c <pbuf_realloc+0x104>)
 80055c4:	f008 ffcc 	bl	800e560 <iprintf>
  while (rem_len > q->len) {
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	897a      	ldrh	r2, [r7, #10]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d8e1      	bhi.n	8005596 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	7b1b      	ldrb	r3, [r3, #12]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d121      	bne.n	8005622 <pbuf_realloc+0xca>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	895b      	ldrh	r3, [r3, #10]
 80055e2:	897a      	ldrh	r2, [r7, #10]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d01c      	beq.n	8005622 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	7b5b      	ldrb	r3, [r3, #13]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d116      	bne.n	8005622 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	897b      	ldrh	r3, [r7, #10]
 8005600:	4413      	add	r3, r2
 8005602:	b29b      	uxth	r3, r3
 8005604:	4619      	mov	r1, r3
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7fe ffba 	bl	8004580 <mem_trim>
 800560c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <pbuf_realloc+0xca>
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <pbuf_realloc+0xfc>)
 8005616:	f240 12bd 	movw	r2, #445	; 0x1bd
 800561a:	4912      	ldr	r1, [pc, #72]	; (8005664 <pbuf_realloc+0x10c>)
 800561c:	480f      	ldr	r0, [pc, #60]	; (800565c <pbuf_realloc+0x104>)
 800561e:	f008 ff9f 	bl	800e560 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	897a      	ldrh	r2, [r7, #10]
 8005626:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	895a      	ldrh	r2, [r3, #10]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f911 	bl	8005864 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e000      	b.n	800564c <pbuf_realloc+0xf4>
    return;
 800564a:	bf00      	nop

}
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0800f98c 	.word	0x0800f98c
 8005658:	0800faa4 	.word	0x0800faa4
 800565c:	0800f9ec 	.word	0x0800f9ec
 8005660:	0800fabc 	.word	0x0800fabc
 8005664:	0800fad4 	.word	0x0800fad4

08005668 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <pbuf_add_header_impl+0x22>
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <pbuf_add_header_impl+0xc4>)
 800567e:	f240 12df 	movw	r2, #479	; 0x1df
 8005682:	492b      	ldr	r1, [pc, #172]	; (8005730 <pbuf_add_header_impl+0xc8>)
 8005684:	482b      	ldr	r0, [pc, #172]	; (8005734 <pbuf_add_header_impl+0xcc>)
 8005686:	f008 ff6b 	bl	800e560 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <pbuf_add_header_impl+0x30>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005696:	d301      	bcc.n	800569c <pbuf_add_header_impl+0x34>
    return 1;
 8005698:	2301      	movs	r3, #1
 800569a:	e043      	b.n	8005724 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e03e      	b.n	8005724 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	891a      	ldrh	r2, [r3, #8]
 80056ae:	8a7b      	ldrh	r3, [r7, #18]
 80056b0:	4413      	add	r3, r2
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8a7a      	ldrh	r2, [r7, #18]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d901      	bls.n	80056be <pbuf_add_header_impl+0x56>
    return 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e032      	b.n	8005724 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	7b1b      	ldrb	r3, [r3, #12]
 80056c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80056c4:	8a3b      	ldrh	r3, [r7, #16]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	425b      	negs	r3, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3310      	adds	r3, #16
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d20d      	bcs.n	8005700 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e01d      	b.n	8005724 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d006      	beq.n	80056fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	425b      	negs	r3, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e001      	b.n	8005700 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e011      	b.n	8005724 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	895a      	ldrh	r2, [r3, #10]
 800570a:	8a7b      	ldrh	r3, [r7, #18]
 800570c:	4413      	add	r3, r2
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	891a      	ldrh	r2, [r3, #8]
 8005718:	8a7b      	ldrh	r3, [r7, #18]
 800571a:	4413      	add	r3, r2
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	811a      	strh	r2, [r3, #8]


  return 0;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	0800f98c 	.word	0x0800f98c
 8005730:	0800faf0 	.word	0x0800faf0
 8005734:	0800f9ec 	.word	0x0800f9ec

08005738 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ff8e 	bl	8005668 <pbuf_add_header_impl>
 800574c:	4603      	mov	r3, r0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <pbuf_remove_header+0x1e>
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <pbuf_remove_header+0x94>)
 800576a:	f240 224b 	movw	r2, #587	; 0x24b
 800576e:	4920      	ldr	r1, [pc, #128]	; (80057f0 <pbuf_remove_header+0x98>)
 8005770:	4820      	ldr	r0, [pc, #128]	; (80057f4 <pbuf_remove_header+0x9c>)
 8005772:	f008 fef5 	bl	800e560 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <pbuf_remove_header+0x2c>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005782:	d301      	bcc.n	8005788 <pbuf_remove_header+0x30>
    return 1;
 8005784:	2301      	movs	r3, #1
 8005786:	e02c      	b.n	80057e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <pbuf_remove_header+0x3a>
    return 0;
 800578e:	2300      	movs	r3, #0
 8005790:	e027      	b.n	80057e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	895b      	ldrh	r3, [r3, #10]
 800579a:	89fa      	ldrh	r2, [r7, #14]
 800579c:	429a      	cmp	r2, r3
 800579e:	d908      	bls.n	80057b2 <pbuf_remove_header+0x5a>
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <pbuf_remove_header+0x94>)
 80057a2:	f240 2255 	movw	r2, #597	; 0x255
 80057a6:	4914      	ldr	r1, [pc, #80]	; (80057f8 <pbuf_remove_header+0xa0>)
 80057a8:	4812      	ldr	r0, [pc, #72]	; (80057f4 <pbuf_remove_header+0x9c>)
 80057aa:	f008 fed9 	bl	800e560 <iprintf>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e017      	b.n	80057e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	441a      	add	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	895a      	ldrh	r2, [r3, #10]
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	891a      	ldrh	r2, [r3, #8]
 80057d6:	89fb      	ldrh	r3, [r7, #14]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800f98c 	.word	0x0800f98c
 80057f0:	0800faf0 	.word	0x0800faf0
 80057f4:	0800f9ec 	.word	0x0800f9ec
 80057f8:	0800fafc 	.word	0x0800fafc

080057fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	807b      	strh	r3, [r7, #2]
 8005808:	4613      	mov	r3, r2
 800580a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800580c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da08      	bge.n	8005826 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005814:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005818:	425b      	negs	r3, r3
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff9b 	bl	8005758 <pbuf_remove_header>
 8005822:	4603      	mov	r3, r0
 8005824:	e007      	b.n	8005836 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005826:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800582a:	787a      	ldrb	r2, [r7, #1]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff1a 	bl	8005668 <pbuf_add_header_impl>
 8005834:	4603      	mov	r3, r0
  }
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800584a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800584e:	2201      	movs	r2, #1
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ffd2 	bl	80057fc <pbuf_header_impl>
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <pbuf_free+0x22>
 8005878:	4b38      	ldr	r3, [pc, #224]	; (800595c <pbuf_free+0xf8>)
 800587a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800587e:	4938      	ldr	r1, [pc, #224]	; (8005960 <pbuf_free+0xfc>)
 8005880:	4838      	ldr	r0, [pc, #224]	; (8005964 <pbuf_free+0x100>)
 8005882:	f008 fe6d 	bl	800e560 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005886:	2300      	movs	r3, #0
 8005888:	e063      	b.n	8005952 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800588e:	e05c      	b.n	800594a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7b9b      	ldrb	r3, [r3, #14]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <pbuf_free+0x42>
 8005898:	4b30      	ldr	r3, [pc, #192]	; (800595c <pbuf_free+0xf8>)
 800589a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800589e:	4932      	ldr	r1, [pc, #200]	; (8005968 <pbuf_free+0x104>)
 80058a0:	4830      	ldr	r0, [pc, #192]	; (8005964 <pbuf_free+0x100>)
 80058a2:	f008 fe5d 	bl	800e560 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7b9b      	ldrb	r3, [r3, #14]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	739a      	strb	r2, [r3, #14]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7b9b      	ldrb	r3, [r3, #14]
 80058b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80058b8:	7dbb      	ldrb	r3, [r7, #22]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d143      	bne.n	8005946 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7b1b      	ldrb	r3, [r3, #12]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7b5b      	ldrb	r3, [r3, #13]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d011      	beq.n	80058fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <pbuf_free+0x90>
 80058e6:	4b1d      	ldr	r3, [pc, #116]	; (800595c <pbuf_free+0xf8>)
 80058e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80058ec:	491f      	ldr	r1, [pc, #124]	; (800596c <pbuf_free+0x108>)
 80058ee:	481d      	ldr	r0, [pc, #116]	; (8005964 <pbuf_free+0x100>)
 80058f0:	f008 fe36 	bl	800e560 <iprintf>
        pc->custom_free_function(p);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
 80058fc:	e01d      	b.n	800593a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d104      	bne.n	800590e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	2008      	movs	r0, #8
 8005908:	f7ff f936 	bl	8004b78 <memp_free>
 800590c:	e015      	b.n	800593a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d104      	bne.n	800591e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	2007      	movs	r0, #7
 8005918:	f7ff f92e 	bl	8004b78 <memp_free>
 800591c:	e00d      	b.n	800593a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <pbuf_free+0xc8>
          mem_free(p);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fe fdc1 	bl	80044ac <mem_free>
 800592a:	e006      	b.n	800593a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <pbuf_free+0xf8>)
 800592e:	f240 320f 	movw	r2, #783	; 0x30f
 8005932:	490f      	ldr	r1, [pc, #60]	; (8005970 <pbuf_free+0x10c>)
 8005934:	480b      	ldr	r0, [pc, #44]	; (8005964 <pbuf_free+0x100>)
 8005936:	f008 fe13 	bl	800e560 <iprintf>
        }
      }
      count++;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	3301      	adds	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	607b      	str	r3, [r7, #4]
 8005944:	e001      	b.n	800594a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d19f      	bne.n	8005890 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	0800f98c 	.word	0x0800f98c
 8005960:	0800faf0 	.word	0x0800faf0
 8005964:	0800f9ec 	.word	0x0800f9ec
 8005968:	0800fb1c 	.word	0x0800fb1c
 800596c:	0800fb34 	.word	0x0800fb34
 8005970:	0800fb58 	.word	0x0800fb58

08005974 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005980:	e005      	b.n	800598e <pbuf_clen+0x1a>
    ++len;
 8005982:	89fb      	ldrh	r3, [r7, #14]
 8005984:	3301      	adds	r3, #1
 8005986:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f6      	bne.n	8005982 <pbuf_clen+0xe>
  }
  return len;
 8005994:	89fb      	ldrh	r3, [r7, #14]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d010      	beq.n	80059d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	7b9b      	ldrb	r3, [r3, #14]
 80059b6:	3301      	adds	r3, #1
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	7b9b      	ldrb	r3, [r3, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <pbuf_ref+0x30>
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <pbuf_ref+0x38>)
 80059c8:	f240 3242 	movw	r2, #834	; 0x342
 80059cc:	4904      	ldr	r1, [pc, #16]	; (80059e0 <pbuf_ref+0x3c>)
 80059ce:	4805      	ldr	r0, [pc, #20]	; (80059e4 <pbuf_ref+0x40>)
 80059d0:	f008 fdc6 	bl	800e560 <iprintf>
  }
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	0800f98c 	.word	0x0800f98c
 80059e0:	0800fb6c 	.word	0x0800fb6c
 80059e4:	0800f9ec 	.word	0x0800f9ec

080059e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <pbuf_cat+0x16>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <pbuf_cat+0x26>
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <pbuf_cat+0x98>)
 8005a00:	f240 3259 	movw	r2, #857	; 0x359
 8005a04:	491f      	ldr	r1, [pc, #124]	; (8005a84 <pbuf_cat+0x9c>)
 8005a06:	4820      	ldr	r0, [pc, #128]	; (8005a88 <pbuf_cat+0xa0>)
 8005a08:	f008 fdaa 	bl	800e560 <iprintf>
 8005a0c:	e034      	b.n	8005a78 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e00a      	b.n	8005a2a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	891a      	ldrh	r2, [r3, #8]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	891b      	ldrh	r3, [r3, #8]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	891a      	ldrh	r2, [r3, #8]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	895b      	ldrh	r3, [r3, #10]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d006      	beq.n	8005a4c <pbuf_cat+0x64>
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <pbuf_cat+0x98>)
 8005a40:	f240 3262 	movw	r2, #866	; 0x362
 8005a44:	4911      	ldr	r1, [pc, #68]	; (8005a8c <pbuf_cat+0xa4>)
 8005a46:	4810      	ldr	r0, [pc, #64]	; (8005a88 <pbuf_cat+0xa0>)
 8005a48:	f008 fd8a 	bl	800e560 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <pbuf_cat+0x7a>
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <pbuf_cat+0x98>)
 8005a56:	f240 3263 	movw	r2, #867	; 0x363
 8005a5a:	490d      	ldr	r1, [pc, #52]	; (8005a90 <pbuf_cat+0xa8>)
 8005a5c:	480a      	ldr	r0, [pc, #40]	; (8005a88 <pbuf_cat+0xa0>)
 8005a5e:	f008 fd7f 	bl	800e560 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	891a      	ldrh	r2, [r3, #8]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	891b      	ldrh	r3, [r3, #8]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	0800f98c 	.word	0x0800f98c
 8005a84:	0800fb80 	.word	0x0800fb80
 8005a88:	0800f9ec 	.word	0x0800f9ec
 8005a8c:	0800fbb8 	.word	0x0800fbb8
 8005a90:	0800fbe8 	.word	0x0800fbe8

08005a94 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ffa1 	bl	80059e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005aa6:	6838      	ldr	r0, [r7, #0]
 8005aa8:	f7ff ff7c 	bl	80059a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <pbuf_copy+0x2a>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <pbuf_copy+0x2a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	891a      	ldrh	r2, [r3, #8]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	891b      	ldrh	r3, [r3, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d209      	bcs.n	8005af2 <pbuf_copy+0x3e>
 8005ade:	4b57      	ldr	r3, [pc, #348]	; (8005c3c <pbuf_copy+0x188>)
 8005ae0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005ae4:	4956      	ldr	r1, [pc, #344]	; (8005c40 <pbuf_copy+0x18c>)
 8005ae6:	4857      	ldr	r0, [pc, #348]	; (8005c44 <pbuf_copy+0x190>)
 8005ae8:	f008 fd3a 	bl	800e560 <iprintf>
 8005aec:	f06f 030f 	mvn.w	r3, #15
 8005af0:	e09f      	b.n	8005c32 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	895b      	ldrh	r3, [r3, #10]
 8005af6:	461a      	mov	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	895b      	ldrh	r3, [r3, #10]
 8005b00:	4619      	mov	r1, r3
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1acb      	subs	r3, r1, r3
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d306      	bcc.n	8005b18 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	895b      	ldrh	r3, [r3, #10]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e005      	b.n	8005b24 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	18d0      	adds	r0, r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4619      	mov	r1, r3
 8005b38:	f008 fded 	bl	800e716 <memcpy>
    offset_to += len;
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	895b      	ldrh	r3, [r3, #10]
 8005b50:	461a      	mov	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d906      	bls.n	8005b66 <pbuf_copy+0xb2>
 8005b58:	4b38      	ldr	r3, [pc, #224]	; (8005c3c <pbuf_copy+0x188>)
 8005b5a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005b5e:	493a      	ldr	r1, [pc, #232]	; (8005c48 <pbuf_copy+0x194>)
 8005b60:	4838      	ldr	r0, [pc, #224]	; (8005c44 <pbuf_copy+0x190>)
 8005b62:	f008 fcfd 	bl	800e560 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	895b      	ldrh	r3, [r3, #10]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d906      	bls.n	8005b80 <pbuf_copy+0xcc>
 8005b72:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <pbuf_copy+0x188>)
 8005b74:	f240 32da 	movw	r2, #986	; 0x3da
 8005b78:	4934      	ldr	r1, [pc, #208]	; (8005c4c <pbuf_copy+0x198>)
 8005b7a:	4832      	ldr	r0, [pc, #200]	; (8005c44 <pbuf_copy+0x190>)
 8005b7c:	f008 fcf0 	bl	800e560 <iprintf>
    if (offset_from >= p_from->len) {
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	895b      	ldrh	r3, [r3, #10]
 8005b84:	461a      	mov	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d304      	bcc.n	8005b96 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	895b      	ldrh	r3, [r3, #10]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d114      	bne.n	8005bcc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <pbuf_copy+0x118>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <pbuf_copy+0x118>
 8005bb8:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <pbuf_copy+0x188>)
 8005bba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005bbe:	4924      	ldr	r1, [pc, #144]	; (8005c50 <pbuf_copy+0x19c>)
 8005bc0:	4820      	ldr	r0, [pc, #128]	; (8005c44 <pbuf_copy+0x190>)
 8005bc2:	f008 fccd 	bl	800e560 <iprintf>
 8005bc6:	f06f 030f 	mvn.w	r3, #15
 8005bca:	e032      	b.n	8005c32 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d013      	beq.n	8005bfa <pbuf_copy+0x146>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	895a      	ldrh	r2, [r3, #10]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	891b      	ldrh	r3, [r3, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d10d      	bne.n	8005bfa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <pbuf_copy+0x146>
 8005be6:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <pbuf_copy+0x188>)
 8005be8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005bec:	4919      	ldr	r1, [pc, #100]	; (8005c54 <pbuf_copy+0x1a0>)
 8005bee:	4815      	ldr	r0, [pc, #84]	; (8005c44 <pbuf_copy+0x190>)
 8005bf0:	f008 fcb6 	bl	800e560 <iprintf>
 8005bf4:	f06f 0305 	mvn.w	r3, #5
 8005bf8:	e01b      	b.n	8005c32 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d013      	beq.n	8005c28 <pbuf_copy+0x174>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	895a      	ldrh	r2, [r3, #10]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	891b      	ldrh	r3, [r3, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d10d      	bne.n	8005c28 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <pbuf_copy+0x174>
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <pbuf_copy+0x188>)
 8005c16:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005c1a:	490e      	ldr	r1, [pc, #56]	; (8005c54 <pbuf_copy+0x1a0>)
 8005c1c:	4809      	ldr	r0, [pc, #36]	; (8005c44 <pbuf_copy+0x190>)
 8005c1e:	f008 fc9f 	bl	800e560 <iprintf>
 8005c22:	f06f 0305 	mvn.w	r3, #5
 8005c26:	e004      	b.n	8005c32 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f47f af61 	bne.w	8005af2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	0800f98c 	.word	0x0800f98c
 8005c40:	0800fc34 	.word	0x0800fc34
 8005c44:	0800f9ec 	.word	0x0800f9ec
 8005c48:	0800fc64 	.word	0x0800fc64
 8005c4c:	0800fc7c 	.word	0x0800fc7c
 8005c50:	0800fc98 	.word	0x0800fc98
 8005c54:	0800fca8 	.word	0x0800fca8

08005c58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	460b      	mov	r3, r1
 8005c68:	80fb      	strh	r3, [r7, #6]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <pbuf_copy_partial+0x36>
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <pbuf_copy_partial+0xd4>)
 8005c7e:	f240 420a 	movw	r2, #1034	; 0x40a
 8005c82:	492b      	ldr	r1, [pc, #172]	; (8005d30 <pbuf_copy_partial+0xd8>)
 8005c84:	482b      	ldr	r0, [pc, #172]	; (8005d34 <pbuf_copy_partial+0xdc>)
 8005c86:	f008 fc6b 	bl	800e560 <iprintf>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e04a      	b.n	8005d24 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <pbuf_copy_partial+0x4e>
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <pbuf_copy_partial+0xd4>)
 8005c96:	f240 420b 	movw	r2, #1035	; 0x40b
 8005c9a:	4927      	ldr	r1, [pc, #156]	; (8005d38 <pbuf_copy_partial+0xe0>)
 8005c9c:	4825      	ldr	r0, [pc, #148]	; (8005d34 <pbuf_copy_partial+0xdc>)
 8005c9e:	f008 fc5f 	bl	800e560 <iprintf>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e03e      	b.n	8005d24 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	e034      	b.n	8005d16 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005cac:	88bb      	ldrh	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <pbuf_copy_partial+0x70>
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	895b      	ldrh	r3, [r3, #10]
 8005cb6:	88ba      	ldrh	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d305      	bcc.n	8005cc8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	895b      	ldrh	r3, [r3, #10]
 8005cc0:	88ba      	ldrh	r2, [r7, #4]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	80bb      	strh	r3, [r7, #4]
 8005cc6:	e023      	b.n	8005d10 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	895a      	ldrh	r2, [r3, #10]
 8005ccc:	88bb      	ldrh	r3, [r7, #4]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005cd2:	8b3a      	ldrh	r2, [r7, #24]
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d901      	bls.n	8005cde <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005cde:	8b7b      	ldrh	r3, [r7, #26]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	18d0      	adds	r0, r2, r3
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	88bb      	ldrh	r3, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	8b3a      	ldrh	r2, [r7, #24]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f008 fd11 	bl	800e716 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005cf4:	8afa      	ldrh	r2, [r7, #22]
 8005cf6:	8b3b      	ldrh	r3, [r7, #24]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005cfc:	8b7a      	ldrh	r2, [r7, #26]
 8005cfe:	8b3b      	ldrh	r3, [r7, #24]
 8005d00:	4413      	add	r3, r2
 8005d02:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	8b3b      	ldrh	r3, [r7, #24]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <pbuf_copy_partial+0xca>
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1c4      	bne.n	8005cac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005d22:	8afb      	ldrh	r3, [r7, #22]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	0800f98c 	.word	0x0800f98c
 8005d30:	0800fcd4 	.word	0x0800fcd4
 8005d34:	0800f9ec 	.word	0x0800f9ec
 8005d38:	0800fcf4 	.word	0x0800fcf4

08005d3c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	603a      	str	r2, [r7, #0]
 8005d46:	71fb      	strb	r3, [r7, #7]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	8919      	ldrh	r1, [r3, #8]
 8005d50:	88ba      	ldrh	r2, [r7, #4]
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff faa1 	bl	800529c <pbuf_alloc>
 8005d5a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <pbuf_clone+0x2a>
    return NULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e011      	b.n	8005d8a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fea3 	bl	8005ab4 <pbuf_copy>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005d72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d006      	beq.n	8005d88 <pbuf_clone+0x4c>
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <pbuf_clone+0x58>)
 8005d7c:	f240 5224 	movw	r2, #1316	; 0x524
 8005d80:	4905      	ldr	r1, [pc, #20]	; (8005d98 <pbuf_clone+0x5c>)
 8005d82:	4806      	ldr	r0, [pc, #24]	; (8005d9c <pbuf_clone+0x60>)
 8005d84:	f008 fbec 	bl	800e560 <iprintf>
  return q;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	0800f98c 	.word	0x0800f98c
 8005d98:	0800fe00 	.word	0x0800fe00
 8005d9c:	0800f9ec 	.word	0x0800f9ec

08005da0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005da4:	f008 fadc 	bl	800e360 <rand>
 8005da8:	4603      	mov	r3, r0
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	4b01      	ldr	r3, [pc, #4]	; (8005dc0 <tcp_init+0x20>)
 8005dba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000020 	.word	0x20000020

08005dc4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7d1b      	ldrb	r3, [r3, #20]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <tcp_free+0x1c>
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <tcp_free+0x2c>)
 8005dd6:	22d4      	movs	r2, #212	; 0xd4
 8005dd8:	4906      	ldr	r1, [pc, #24]	; (8005df4 <tcp_free+0x30>)
 8005dda:	4807      	ldr	r0, [pc, #28]	; (8005df8 <tcp_free+0x34>)
 8005ddc:	f008 fbc0 	bl	800e560 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	2001      	movs	r0, #1
 8005de4:	f7fe fec8 	bl	8004b78 <memp_free>
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	0800fe8c 	.word	0x0800fe8c
 8005df4:	0800febc 	.word	0x0800febc
 8005df8:	0800fed0 	.word	0x0800fed0

08005dfc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7d1b      	ldrb	r3, [r3, #20]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d105      	bne.n	8005e18 <tcp_free_listen+0x1c>
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <tcp_free_listen+0x2c>)
 8005e0e:	22df      	movs	r2, #223	; 0xdf
 8005e10:	4906      	ldr	r1, [pc, #24]	; (8005e2c <tcp_free_listen+0x30>)
 8005e12:	4807      	ldr	r0, [pc, #28]	; (8005e30 <tcp_free_listen+0x34>)
 8005e14:	f008 fba4 	bl	800e560 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	2002      	movs	r0, #2
 8005e1c:	f7fe feac 	bl	8004b78 <memp_free>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	0800fe8c 	.word	0x0800fe8c
 8005e2c:	0800fef8 	.word	0x0800fef8
 8005e30:	0800fed0 	.word	0x0800fed0

08005e34 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e38:	f000 fea2 	bl	8006b80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e3c:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <tcp_tmr+0x28>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	3301      	adds	r3, #1
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <tcp_tmr+0x28>)
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <tcp_tmr+0x28>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005e54:	f000 fb54 	bl	8006500 <tcp_slowtmr>
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200082a1 	.word	0x200082a1

08005e60 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <tcp_remove_listener+0x1c>
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <tcp_remove_listener+0x48>)
 8005e72:	22ff      	movs	r2, #255	; 0xff
 8005e74:	490d      	ldr	r1, [pc, #52]	; (8005eac <tcp_remove_listener+0x4c>)
 8005e76:	480e      	ldr	r0, [pc, #56]	; (8005eb0 <tcp_remove_listener+0x50>)
 8005e78:	f008 fb72 	bl	800e560 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e00a      	b.n	8005e98 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d102      	bne.n	8005e92 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f1      	bne.n	8005e82 <tcp_remove_listener+0x22>
    }
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	0800fe8c 	.word	0x0800fe8c
 8005eac:	0800ff14 	.word	0x0800ff14
 8005eb0:	0800fed0 	.word	0x0800fed0

08005eb4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <tcp_listen_closed+0x1c>
 8005ec2:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <tcp_listen_closed+0x60>)
 8005ec4:	f240 1211 	movw	r2, #273	; 0x111
 8005ec8:	4913      	ldr	r1, [pc, #76]	; (8005f18 <tcp_listen_closed+0x64>)
 8005eca:	4814      	ldr	r0, [pc, #80]	; (8005f1c <tcp_listen_closed+0x68>)
 8005ecc:	f008 fb48 	bl	800e560 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	7d1b      	ldrb	r3, [r3, #20]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d006      	beq.n	8005ee6 <tcp_listen_closed+0x32>
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <tcp_listen_closed+0x60>)
 8005eda:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005ede:	4910      	ldr	r1, [pc, #64]	; (8005f20 <tcp_listen_closed+0x6c>)
 8005ee0:	480e      	ldr	r0, [pc, #56]	; (8005f1c <tcp_listen_closed+0x68>)
 8005ee2:	f008 fb3d 	bl	800e560 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e00b      	b.n	8005f04 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005eec:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <tcp_listen_closed+0x70>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff ffb1 	bl	8005e60 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d9f0      	bls.n	8005eec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	0800fe8c 	.word	0x0800fe8c
 8005f18:	0800ff3c 	.word	0x0800ff3c
 8005f1c:	0800fed0 	.word	0x0800fed0
 8005f20:	0800ff48 	.word	0x0800ff48
 8005f24:	08011e6c 	.word	0x08011e6c

08005f28 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005f28:	b5b0      	push	{r4, r5, r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af04      	add	r7, sp, #16
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <tcp_close_shutdown+0x20>
 8005f3a:	4b63      	ldr	r3, [pc, #396]	; (80060c8 <tcp_close_shutdown+0x1a0>)
 8005f3c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005f40:	4962      	ldr	r1, [pc, #392]	; (80060cc <tcp_close_shutdown+0x1a4>)
 8005f42:	4863      	ldr	r0, [pc, #396]	; (80060d0 <tcp_close_shutdown+0x1a8>)
 8005f44:	f008 fb0c 	bl	800e560 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d066      	beq.n	800601c <tcp_close_shutdown+0xf4>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	7d1b      	ldrb	r3, [r3, #20]
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d003      	beq.n	8005f5e <tcp_close_shutdown+0x36>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7d1b      	ldrb	r3, [r3, #20]
 8005f5a:	2b07      	cmp	r3, #7
 8005f5c:	d15e      	bne.n	800601c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <tcp_close_shutdown+0x48>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005f6e:	d055      	beq.n	800601c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8b5b      	ldrh	r3, [r3, #26]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <tcp_close_shutdown+0x62>
 8005f7c:	4b52      	ldr	r3, [pc, #328]	; (80060c8 <tcp_close_shutdown+0x1a0>)
 8005f7e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005f82:	4954      	ldr	r1, [pc, #336]	; (80060d4 <tcp_close_shutdown+0x1ac>)
 8005f84:	4852      	ldr	r0, [pc, #328]	; (80060d0 <tcp_close_shutdown+0x1a8>)
 8005f86:	f008 faeb 	bl	800e560 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005f92:	687d      	ldr	r5, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	8ad2      	ldrh	r2, [r2, #22]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	8b09      	ldrh	r1, [r1, #24]
 8005fa0:	9102      	str	r1, [sp, #8]
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4601      	mov	r1, r0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f004 fe91 	bl	800acd4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 f8c6 	bl	8007144 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005fb8:	4b47      	ldr	r3, [pc, #284]	; (80060d8 <tcp_close_shutdown+0x1b0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d105      	bne.n	8005fce <tcp_close_shutdown+0xa6>
 8005fc2:	4b45      	ldr	r3, [pc, #276]	; (80060d8 <tcp_close_shutdown+0x1b0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a43      	ldr	r2, [pc, #268]	; (80060d8 <tcp_close_shutdown+0x1b0>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e013      	b.n	8005ff6 <tcp_close_shutdown+0xce>
 8005fce:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <tcp_close_shutdown+0x1b0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e00c      	b.n	8005ff0 <tcp_close_shutdown+0xc8>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d104      	bne.n	8005fea <tcp_close_shutdown+0xc2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e005      	b.n	8005ff6 <tcp_close_shutdown+0xce>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1ef      	bne.n	8005fd6 <tcp_close_shutdown+0xae>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	60da      	str	r2, [r3, #12]
 8005ffc:	4b37      	ldr	r3, [pc, #220]	; (80060dc <tcp_close_shutdown+0x1b4>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006002:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <tcp_close_shutdown+0x1b8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d102      	bne.n	8006012 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800600c:	f003 fd5e 	bl	8009acc <tcp_trigger_input_pcb_close>
 8006010:	e002      	b.n	8006018 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fed6 	bl	8005dc4 <tcp_free>
      }
      return ERR_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e050      	b.n	80060be <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7d1b      	ldrb	r3, [r3, #20]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d03b      	beq.n	800609c <tcp_close_shutdown+0x174>
 8006024:	2b02      	cmp	r3, #2
 8006026:	dc44      	bgt.n	80060b2 <tcp_close_shutdown+0x18a>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <tcp_close_shutdown+0x10a>
 800602c:	2b01      	cmp	r3, #1
 800602e:	d02a      	beq.n	8006086 <tcp_close_shutdown+0x15e>
 8006030:	e03f      	b.n	80060b2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8adb      	ldrh	r3, [r3, #22]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d021      	beq.n	800607e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800603a:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <tcp_close_shutdown+0x1bc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d105      	bne.n	8006050 <tcp_close_shutdown+0x128>
 8006044:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <tcp_close_shutdown+0x1bc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <tcp_close_shutdown+0x1bc>)
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e013      	b.n	8006078 <tcp_close_shutdown+0x150>
 8006050:	4b24      	ldr	r3, [pc, #144]	; (80060e4 <tcp_close_shutdown+0x1bc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	e00c      	b.n	8006072 <tcp_close_shutdown+0x14a>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d104      	bne.n	800606c <tcp_close_shutdown+0x144>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	60da      	str	r2, [r3, #12]
 800606a:	e005      	b.n	8006078 <tcp_close_shutdown+0x150>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1ef      	bne.n	8006058 <tcp_close_shutdown+0x130>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fea0 	bl	8005dc4 <tcp_free>
      break;
 8006084:	e01a      	b.n	80060bc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff14 	bl	8005eb4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4816      	ldr	r0, [pc, #88]	; (80060e8 <tcp_close_shutdown+0x1c0>)
 8006090:	f001 f8a8 	bl	80071e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff feb1 	bl	8005dfc <tcp_free_listen>
      break;
 800609a:	e00f      	b.n	80060bc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	480e      	ldr	r0, [pc, #56]	; (80060d8 <tcp_close_shutdown+0x1b0>)
 80060a0:	f001 f8a0 	bl	80071e4 <tcp_pcb_remove>
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <tcp_close_shutdown+0x1b4>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fe8a 	bl	8005dc4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80060b0:	e004      	b.n	80060bc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f81a 	bl	80060ec <tcp_close_shutdown_fin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	e000      	b.n	80060be <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bdb0      	pop	{r4, r5, r7, pc}
 80060c6:	bf00      	nop
 80060c8:	0800fe8c 	.word	0x0800fe8c
 80060cc:	0800ff60 	.word	0x0800ff60
 80060d0:	0800fed0 	.word	0x0800fed0
 80060d4:	0800ff80 	.word	0x0800ff80
 80060d8:	20008298 	.word	0x20008298
 80060dc:	200082a0 	.word	0x200082a0
 80060e0:	200082d8 	.word	0x200082d8
 80060e4:	20008290 	.word	0x20008290
 80060e8:	20008294 	.word	0x20008294

080060ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <tcp_close_shutdown_fin+0x1c>
 80060fa:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <tcp_close_shutdown_fin+0xc8>)
 80060fc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006100:	492d      	ldr	r1, [pc, #180]	; (80061b8 <tcp_close_shutdown_fin+0xcc>)
 8006102:	482e      	ldr	r0, [pc, #184]	; (80061bc <tcp_close_shutdown_fin+0xd0>)
 8006104:	f008 fa2c 	bl	800e560 <iprintf>

  switch (pcb->state) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	7d1b      	ldrb	r3, [r3, #20]
 800610c:	2b07      	cmp	r3, #7
 800610e:	d020      	beq.n	8006152 <tcp_close_shutdown_fin+0x66>
 8006110:	2b07      	cmp	r3, #7
 8006112:	dc2b      	bgt.n	800616c <tcp_close_shutdown_fin+0x80>
 8006114:	2b03      	cmp	r3, #3
 8006116:	d002      	beq.n	800611e <tcp_close_shutdown_fin+0x32>
 8006118:	2b04      	cmp	r3, #4
 800611a:	d00d      	beq.n	8006138 <tcp_close_shutdown_fin+0x4c>
 800611c:	e026      	b.n	800616c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f003 fee6 	bl	8009ef0 <tcp_send_fin>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11f      	bne.n	8006170 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2205      	movs	r2, #5
 8006134:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006136:	e01b      	b.n	8006170 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f003 fed9 	bl	8009ef0 <tcp_send_fin>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d114      	bne.n	8006174 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2205      	movs	r2, #5
 800614e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006150:	e010      	b.n	8006174 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f003 fecc 	bl	8009ef0 <tcp_send_fin>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800615c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2209      	movs	r2, #9
 8006168:	751a      	strb	r2, [r3, #20]
      }
      break;
 800616a:	e005      	b.n	8006178 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e01c      	b.n	80061aa <tcp_close_shutdown_fin+0xbe>
      break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <tcp_close_shutdown_fin+0x8e>
      break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <tcp_close_shutdown_fin+0x8e>
      break;
 8006178:	bf00      	nop
  }

  if (err == ERR_OK) {
 800617a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f003 fff2 	bl	800a16c <tcp_output>
 8006188:	e00d      	b.n	80061a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d108      	bne.n	80061a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8b5b      	ldrh	r3, [r3, #26]
 8006198:	f043 0308 	orr.w	r3, r3, #8
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e001      	b.n	80061aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80061a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	0800fe8c 	.word	0x0800fe8c
 80061b8:	0800ff3c 	.word	0x0800ff3c
 80061bc:	0800fed0 	.word	0x0800fed0

080061c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <tcp_close+0x22>
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <tcp_close+0x4c>)
 80061d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80061d4:	490e      	ldr	r1, [pc, #56]	; (8006210 <tcp_close+0x50>)
 80061d6:	480f      	ldr	r0, [pc, #60]	; (8006214 <tcp_close+0x54>)
 80061d8:	f008 f9c2 	bl	800e560 <iprintf>
 80061dc:	f06f 030f 	mvn.w	r3, #15
 80061e0:	e00f      	b.n	8006202 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7d1b      	ldrb	r3, [r3, #20]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d006      	beq.n	80061f8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8b5b      	ldrh	r3, [r3, #26]
 80061ee:	f043 0310 	orr.w	r3, r3, #16
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80061f8:	2101      	movs	r1, #1
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fe94 	bl	8005f28 <tcp_close_shutdown>
 8006200:	4603      	mov	r3, r0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	0800fe8c 	.word	0x0800fe8c
 8006210:	0800ff9c 	.word	0x0800ff9c
 8006214:	0800fed0 	.word	0x0800fed0

08006218 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	; 0x38
 800621c:	af04      	add	r7, sp, #16
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <tcp_abandon+0x20>
 8006228:	4b52      	ldr	r3, [pc, #328]	; (8006374 <tcp_abandon+0x15c>)
 800622a:	f240 223d 	movw	r2, #573	; 0x23d
 800622e:	4952      	ldr	r1, [pc, #328]	; (8006378 <tcp_abandon+0x160>)
 8006230:	4852      	ldr	r0, [pc, #328]	; (800637c <tcp_abandon+0x164>)
 8006232:	f008 f995 	bl	800e560 <iprintf>
 8006236:	e099      	b.n	800636c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7d1b      	ldrb	r3, [r3, #20]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <tcp_abandon+0x36>
 8006240:	4b4c      	ldr	r3, [pc, #304]	; (8006374 <tcp_abandon+0x15c>)
 8006242:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006246:	494e      	ldr	r1, [pc, #312]	; (8006380 <tcp_abandon+0x168>)
 8006248:	484c      	ldr	r0, [pc, #304]	; (800637c <tcp_abandon+0x164>)
 800624a:	f008 f989 	bl	800e560 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7d1b      	ldrb	r3, [r3, #20]
 8006252:	2b0a      	cmp	r3, #10
 8006254:	d107      	bne.n	8006266 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	484a      	ldr	r0, [pc, #296]	; (8006384 <tcp_abandon+0x16c>)
 800625a:	f000 ffc3 	bl	80071e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fdb0 	bl	8005dc4 <tcp_free>
 8006264:	e082      	b.n	800636c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006272:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	7d1b      	ldrb	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d126      	bne.n	80062de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8adb      	ldrh	r3, [r3, #22]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02e      	beq.n	80062f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006298:	4b3b      	ldr	r3, [pc, #236]	; (8006388 <tcp_abandon+0x170>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d105      	bne.n	80062ae <tcp_abandon+0x96>
 80062a2:	4b39      	ldr	r3, [pc, #228]	; (8006388 <tcp_abandon+0x170>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a37      	ldr	r2, [pc, #220]	; (8006388 <tcp_abandon+0x170>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e013      	b.n	80062d6 <tcp_abandon+0xbe>
 80062ae:	4b36      	ldr	r3, [pc, #216]	; (8006388 <tcp_abandon+0x170>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e00c      	b.n	80062d0 <tcp_abandon+0xb8>
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d104      	bne.n	80062ca <tcp_abandon+0xb2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e005      	b.n	80062d6 <tcp_abandon+0xbe>
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1ef      	bne.n	80062b6 <tcp_abandon+0x9e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	60da      	str	r2, [r3, #12]
 80062dc:	e00b      	b.n	80062f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8adb      	ldrh	r3, [r3, #22]
 80062e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4828      	ldr	r0, [pc, #160]	; (800638c <tcp_abandon+0x174>)
 80062ec:	f000 ff7a 	bl	80071e4 <tcp_pcb_remove>
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <tcp_abandon+0x178>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fd1c 	bl	8006d40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fd13 	bl	8006d40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fd0a 	bl	8006d40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00e      	beq.n	8006350 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	8b12      	ldrh	r2, [r2, #24]
 800633c:	9202      	str	r2, [sp, #8]
 800633e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006340:	9201      	str	r2, [sp, #4]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	460b      	mov	r3, r1
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	69b9      	ldr	r1, [r7, #24]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f004 fcc2 	bl	800acd4 <tcp_rst>
    }
    last_state = pcb->state;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7d1b      	ldrb	r3, [r3, #20]
 8006354:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fd34 	bl	8005dc4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <tcp_abandon+0x154>
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f06f 010c 	mvn.w	r1, #12
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	4798      	blx	r3
  }
}
 800636c:	3728      	adds	r7, #40	; 0x28
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	0800fe8c 	.word	0x0800fe8c
 8006378:	0800ffd0 	.word	0x0800ffd0
 800637c:	0800fed0 	.word	0x0800fed0
 8006380:	0800ffec 	.word	0x0800ffec
 8006384:	2000829c 	.word	0x2000829c
 8006388:	20008290 	.word	0x20008290
 800638c:	20008298 	.word	0x20008298
 8006390:	200082a0 	.word	0x200082a0

08006394 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800639c:	2101      	movs	r1, #1
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff ff3a 	bl	8006218 <tcp_abandon>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <tcp_update_rcv_ann_wnd+0x1c>
 80063ba:	4b25      	ldr	r3, [pc, #148]	; (8006450 <tcp_update_rcv_ann_wnd+0xa4>)
 80063bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80063c0:	4924      	ldr	r1, [pc, #144]	; (8006454 <tcp_update_rcv_ann_wnd+0xa8>)
 80063c2:	4825      	ldr	r0, [pc, #148]	; (8006458 <tcp_update_rcv_ann_wnd+0xac>)
 80063c4:	f008 f8cc 	bl	800e560 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80063d0:	4413      	add	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80063dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80063e0:	bf28      	it	cs
 80063e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80063e6:	b292      	uxth	r2, r2
 80063e8:	4413      	add	r3, r2
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	db08      	blt.n	8006404 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	e020      	b.n	8006446 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	dd03      	ble.n	800641a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006418:	e014      	b.n	8006444 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d306      	bcc.n	800643c <tcp_update_rcv_ann_wnd+0x90>
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <tcp_update_rcv_ann_wnd+0xa4>)
 8006430:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006434:	4909      	ldr	r1, [pc, #36]	; (800645c <tcp_update_rcv_ann_wnd+0xb0>)
 8006436:	4808      	ldr	r0, [pc, #32]	; (8006458 <tcp_update_rcv_ann_wnd+0xac>)
 8006438:	f008 f892 	bl	800e560 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006444:	2300      	movs	r3, #0
  }
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	0800fe8c 	.word	0x0800fe8c
 8006454:	080100e8 	.word	0x080100e8
 8006458:	0800fed0 	.word	0x0800fed0
 800645c:	0801010c 	.word	0x0801010c

08006460 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <tcp_recved+0x22>
 8006472:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <tcp_recved+0x90>)
 8006474:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006478:	491e      	ldr	r1, [pc, #120]	; (80064f4 <tcp_recved+0x94>)
 800647a:	481f      	ldr	r0, [pc, #124]	; (80064f8 <tcp_recved+0x98>)
 800647c:	f008 f870 	bl	800e560 <iprintf>
 8006480:	e032      	b.n	80064e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	7d1b      	ldrb	r3, [r3, #20]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d106      	bne.n	8006498 <tcp_recved+0x38>
 800648a:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <tcp_recved+0x90>)
 800648c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006490:	491a      	ldr	r1, [pc, #104]	; (80064fc <tcp_recved+0x9c>)
 8006492:	4819      	ldr	r0, [pc, #100]	; (80064f8 <tcp_recved+0x98>)
 8006494:	f008 f864 	bl	800e560 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	4413      	add	r3, r2
 80064a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80064a2:	89fb      	ldrh	r3, [r7, #14]
 80064a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80064a8:	d804      	bhi.n	80064b4 <tcp_recved+0x54>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ae:	89fa      	ldrh	r2, [r7, #14]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d204      	bcs.n	80064be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80064bc:	e002      	b.n	80064c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	89fa      	ldrh	r2, [r7, #14]
 80064c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff71 	bl	80063ac <tcp_update_rcv_ann_wnd>
 80064ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80064d2:	d309      	bcc.n	80064e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8b5b      	ldrh	r3, [r3, #26]
 80064d8:	f043 0302 	orr.w	r3, r3, #2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f003 fe42 	bl	800a16c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	0800fe8c 	.word	0x0800fe8c
 80064f4:	08010128 	.word	0x08010128
 80064f8:	0800fed0 	.word	0x0800fed0
 80064fc:	08010140 	.word	0x08010140

08006500 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006500:	b5b0      	push	{r4, r5, r7, lr}
 8006502:	b090      	sub	sp, #64	; 0x40
 8006504:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800650c:	4b94      	ldr	r3, [pc, #592]	; (8006760 <tcp_slowtmr+0x260>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	4a93      	ldr	r2, [pc, #588]	; (8006760 <tcp_slowtmr+0x260>)
 8006514:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006516:	4b93      	ldr	r3, [pc, #588]	; (8006764 <tcp_slowtmr+0x264>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4b91      	ldr	r3, [pc, #580]	; (8006764 <tcp_slowtmr+0x264>)
 8006520:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006526:	4b90      	ldr	r3, [pc, #576]	; (8006768 <tcp_slowtmr+0x268>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800652c:	e29f      	b.n	8006a6e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	7d1b      	ldrb	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <tcp_slowtmr+0x44>
 8006536:	4b8d      	ldr	r3, [pc, #564]	; (800676c <tcp_slowtmr+0x26c>)
 8006538:	f240 42be 	movw	r2, #1214	; 0x4be
 800653c:	498c      	ldr	r1, [pc, #560]	; (8006770 <tcp_slowtmr+0x270>)
 800653e:	488d      	ldr	r0, [pc, #564]	; (8006774 <tcp_slowtmr+0x274>)
 8006540:	f008 f80e 	bl	800e560 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	7d1b      	ldrb	r3, [r3, #20]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d106      	bne.n	800655a <tcp_slowtmr+0x5a>
 800654c:	4b87      	ldr	r3, [pc, #540]	; (800676c <tcp_slowtmr+0x26c>)
 800654e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006552:	4989      	ldr	r1, [pc, #548]	; (8006778 <tcp_slowtmr+0x278>)
 8006554:	4887      	ldr	r0, [pc, #540]	; (8006774 <tcp_slowtmr+0x274>)
 8006556:	f008 f803 	bl	800e560 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	7d1b      	ldrb	r3, [r3, #20]
 800655e:	2b0a      	cmp	r3, #10
 8006560:	d106      	bne.n	8006570 <tcp_slowtmr+0x70>
 8006562:	4b82      	ldr	r3, [pc, #520]	; (800676c <tcp_slowtmr+0x26c>)
 8006564:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006568:	4984      	ldr	r1, [pc, #528]	; (800677c <tcp_slowtmr+0x27c>)
 800656a:	4882      	ldr	r0, [pc, #520]	; (8006774 <tcp_slowtmr+0x274>)
 800656c:	f007 fff8 	bl	800e560 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	7f9a      	ldrb	r2, [r3, #30]
 8006574:	4b7b      	ldr	r3, [pc, #492]	; (8006764 <tcp_slowtmr+0x264>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d105      	bne.n	8006588 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006586:	e272      	b.n	8006a6e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006588:	4b76      	ldr	r3, [pc, #472]	; (8006764 <tcp_slowtmr+0x264>)
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	7d1b      	ldrb	r3, [r3, #20]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d10a      	bne.n	80065ba <tcp_slowtmr+0xba>
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d905      	bls.n	80065ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 80065ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b2:	3301      	adds	r3, #1
 80065b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065b8:	e11e      	b.n	80067f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065c0:	2b0b      	cmp	r3, #11
 80065c2:	d905      	bls.n	80065d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80065c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c8:	3301      	adds	r3, #1
 80065ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065ce:	e113      	b.n	80067f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d075      	beq.n	80066c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <tcp_slowtmr+0xf0>
 80065e2:	4b62      	ldr	r3, [pc, #392]	; (800676c <tcp_slowtmr+0x26c>)
 80065e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80065e8:	4965      	ldr	r1, [pc, #404]	; (8006780 <tcp_slowtmr+0x280>)
 80065ea:	4862      	ldr	r0, [pc, #392]	; (8006774 <tcp_slowtmr+0x274>)
 80065ec:	f007 ffb8 	bl	800e560 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <tcp_slowtmr+0x106>
 80065f8:	4b5c      	ldr	r3, [pc, #368]	; (800676c <tcp_slowtmr+0x26c>)
 80065fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80065fe:	4961      	ldr	r1, [pc, #388]	; (8006784 <tcp_slowtmr+0x284>)
 8006600:	485c      	ldr	r0, [pc, #368]	; (8006774 <tcp_slowtmr+0x274>)
 8006602:	f007 ffad 	bl	800e560 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800660c:	2b0b      	cmp	r3, #11
 800660e:	d905      	bls.n	800661c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006614:	3301      	adds	r3, #1
 8006616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800661a:	e0ed      	b.n	80067f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006622:	3b01      	subs	r3, #1
 8006624:	4a58      	ldr	r2, [pc, #352]	; (8006788 <tcp_slowtmr+0x288>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006630:	7c7a      	ldrb	r2, [r7, #17]
 8006632:	429a      	cmp	r2, r3
 8006634:	d907      	bls.n	8006646 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800663c:	3301      	adds	r3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800664c:	7c7a      	ldrb	r2, [r7, #17]
 800664e:	429a      	cmp	r2, r3
 8006650:	f200 80d2 	bhi.w	80067f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006654:	2301      	movs	r3, #1
 8006656:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006664:	f004 fc2a 	bl	800aebc <tcp_zero_window_probe>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d014      	beq.n	8006698 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800666e:	2300      	movs	r3, #0
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	e011      	b.n	8006698 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800667a:	4619      	mov	r1, r3
 800667c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800667e:	f003 faef 	bl	8009c60 <tcp_split_unsent_seg>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d107      	bne.n	8006698 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800668a:	f003 fd6f 	bl	800a16c <tcp_output>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80ac 	beq.w	80067f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	f200 80a2 	bhi.w	80067f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066ba:	3301      	adds	r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80066c4:	e098      	b.n	80067f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db0f      	blt.n	80066f0 <tcp_slowtmr+0x1f0>
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80066d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80066da:	4293      	cmp	r3, r2
 80066dc:	d008      	beq.n	80066f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3301      	adds	r3, #1
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	b21a      	sxth	r2, r3
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80066fc:	429a      	cmp	r2, r3
 80066fe:	db7b      	blt.n	80067f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006702:	f004 f827 	bl	800a754 <tcp_rexmit_rto_prepare>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <tcp_slowtmr+0x21c>
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	2b00      	cmp	r3, #0
 8006712:	d171      	bne.n	80067f8 <tcp_slowtmr+0x2f8>
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d06d      	beq.n	80067f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	7d1b      	ldrb	r3, [r3, #20]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d03a      	beq.n	800679a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800672a:	2b0c      	cmp	r3, #12
 800672c:	bf28      	it	cs
 800672e:	230c      	movcs	r3, #12
 8006730:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006738:	10db      	asrs	r3, r3, #3
 800673a:	b21b      	sxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006744:	4413      	add	r3, r2
 8006746:	7efa      	ldrb	r2, [r7, #27]
 8006748:	4910      	ldr	r1, [pc, #64]	; (800678c <tcp_slowtmr+0x28c>)
 800674a:	5c8a      	ldrb	r2, [r1, r2]
 800674c:	4093      	lsls	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006756:	4293      	cmp	r3, r2
 8006758:	dc1a      	bgt.n	8006790 <tcp_slowtmr+0x290>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	b21a      	sxth	r2, r3
 800675e:	e019      	b.n	8006794 <tcp_slowtmr+0x294>
 8006760:	2000828c 	.word	0x2000828c
 8006764:	200082a2 	.word	0x200082a2
 8006768:	20008298 	.word	0x20008298
 800676c:	0800fe8c 	.word	0x0800fe8c
 8006770:	080101d0 	.word	0x080101d0
 8006774:	0800fed0 	.word	0x0800fed0
 8006778:	080101fc 	.word	0x080101fc
 800677c:	08010228 	.word	0x08010228
 8006780:	08010258 	.word	0x08010258
 8006784:	0801028c 	.word	0x0801028c
 8006788:	08011e64 	.word	0x08011e64
 800678c:	08011e54 	.word	0x08011e54
 8006790:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	2200      	movs	r2, #0
 800679e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80067ac:	4293      	cmp	r3, r2
 80067ae:	bf28      	it	cs
 80067b0:	4613      	movcs	r3, r2
 80067b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80067b4:	8a7b      	ldrh	r3, [r7, #18]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d206      	bcs.n	80067e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80067f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067f4:	f004 f81e 	bl	800a834 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	7d1b      	ldrb	r3, [r3, #20]
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	d111      	bne.n	8006824 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	8b5b      	ldrh	r3, [r3, #26]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800680c:	4b9d      	ldr	r3, [pc, #628]	; (8006a84 <tcp_slowtmr+0x584>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b28      	cmp	r3, #40	; 0x28
 8006818:	d904      	bls.n	8006824 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800681a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800681e:	3301      	adds	r3, #1
 8006820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	7a5b      	ldrb	r3, [r3, #9]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d04c      	beq.n	80068ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006834:	2b04      	cmp	r3, #4
 8006836:	d003      	beq.n	8006840 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800683c:	2b07      	cmp	r3, #7
 800683e:	d144      	bne.n	80068ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006840:	4b90      	ldr	r3, [pc, #576]	; (8006a84 <tcp_slowtmr+0x584>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006850:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006854:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006858:	498b      	ldr	r1, [pc, #556]	; (8006a88 <tcp_slowtmr+0x588>)
 800685a:	fba1 1303 	umull	r1, r3, r1, r3
 800685e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006860:	429a      	cmp	r2, r3
 8006862:	d90a      	bls.n	800687a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006868:	3301      	adds	r3, #1
 800686a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800686e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006872:	3301      	adds	r3, #1
 8006874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006878:	e027      	b.n	80068ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800687a:	4b82      	ldr	r3, [pc, #520]	; (8006a84 <tcp_slowtmr+0x584>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006890:	4618      	mov	r0, r3
 8006892:	4b7e      	ldr	r3, [pc, #504]	; (8006a8c <tcp_slowtmr+0x58c>)
 8006894:	fb00 f303 	mul.w	r3, r0, r3
 8006898:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800689a:	497b      	ldr	r1, [pc, #492]	; (8006a88 <tcp_slowtmr+0x588>)
 800689c:	fba1 1303 	umull	r1, r3, r1, r3
 80068a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d911      	bls.n	80068ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80068a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068a8:	f004 fac8 	bl	800ae3c <tcp_keepalive>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80068b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80068c0:	3301      	adds	r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d011      	beq.n	80068f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80068d2:	4b6c      	ldr	r3, [pc, #432]	; (8006a84 <tcp_slowtmr+0x584>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80068e2:	4619      	mov	r1, r3
 80068e4:	460b      	mov	r3, r1
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	440b      	add	r3, r1
 80068ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d302      	bcc.n	80068f6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80068f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068f2:	f000 fddb 	bl	80074ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	7d1b      	ldrb	r3, [r3, #20]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d10b      	bne.n	8006916 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068fe:	4b61      	ldr	r3, [pc, #388]	; (8006a84 <tcp_slowtmr+0x584>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b28      	cmp	r3, #40	; 0x28
 800690a:	d904      	bls.n	8006916 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800690c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006910:	3301      	adds	r3, #1
 8006912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	7d1b      	ldrb	r3, [r3, #20]
 800691a:	2b09      	cmp	r3, #9
 800691c:	d10b      	bne.n	8006936 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800691e:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <tcp_slowtmr+0x584>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2bf0      	cmp	r3, #240	; 0xf0
 800692a:	d904      	bls.n	8006936 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800692c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006930:	3301      	adds	r3, #1
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800693a:	2b00      	cmp	r3, #0
 800693c:	d060      	beq.n	8006a00 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006944:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006948:	f000 fbfc 	bl	8007144 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006952:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <tcp_slowtmr+0x590>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006958:	429a      	cmp	r2, r3
 800695a:	d106      	bne.n	800696a <tcp_slowtmr+0x46a>
 800695c:	4b4d      	ldr	r3, [pc, #308]	; (8006a94 <tcp_slowtmr+0x594>)
 800695e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006962:	494d      	ldr	r1, [pc, #308]	; (8006a98 <tcp_slowtmr+0x598>)
 8006964:	484d      	ldr	r0, [pc, #308]	; (8006a9c <tcp_slowtmr+0x59c>)
 8006966:	f007 fdfb 	bl	800e560 <iprintf>
        prev->next = pcb->next;
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e00f      	b.n	8006994 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006974:	4b46      	ldr	r3, [pc, #280]	; (8006a90 <tcp_slowtmr+0x590>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697a:	429a      	cmp	r2, r3
 800697c:	d006      	beq.n	800698c <tcp_slowtmr+0x48c>
 800697e:	4b45      	ldr	r3, [pc, #276]	; (8006a94 <tcp_slowtmr+0x594>)
 8006980:	f240 5271 	movw	r2, #1393	; 0x571
 8006984:	4946      	ldr	r1, [pc, #280]	; (8006aa0 <tcp_slowtmr+0x5a0>)
 8006986:	4845      	ldr	r0, [pc, #276]	; (8006a9c <tcp_slowtmr+0x59c>)
 8006988:	f007 fdea 	bl	800e560 <iprintf>
        tcp_active_pcbs = pcb->next;
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4a3f      	ldr	r2, [pc, #252]	; (8006a90 <tcp_slowtmr+0x590>)
 8006992:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006994:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80069a4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	3304      	adds	r3, #4
 80069aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ac:	8ad2      	ldrh	r2, [r2, #22]
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	8b09      	ldrh	r1, [r1, #24]
 80069b2:	9102      	str	r1, [sp, #8]
 80069b4:	9201      	str	r2, [sp, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	462b      	mov	r3, r5
 80069ba:	4622      	mov	r2, r4
 80069bc:	4601      	mov	r1, r0
 80069be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069c0:	f004 f988 	bl	800acd4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	7d1b      	ldrb	r3, [r3, #20]
 80069ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80069da:	6838      	ldr	r0, [r7, #0]
 80069dc:	f7ff f9f2 	bl	8005dc4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80069e0:	4b30      	ldr	r3, [pc, #192]	; (8006aa4 <tcp_slowtmr+0x5a4>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <tcp_slowtmr+0x4f6>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f06f 010c 	mvn.w	r1, #12
 80069f2:	68b8      	ldr	r0, [r7, #8]
 80069f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80069f6:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <tcp_slowtmr+0x5a4>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d037      	beq.n	8006a6e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80069fe:	e590      	b.n	8006522 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	7f1b      	ldrb	r3, [r3, #28]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	7f1a      	ldrb	r2, [r3, #28]
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	7f5b      	ldrb	r3, [r3, #29]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d325      	bcc.n	8006a6e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <tcp_slowtmr+0x5a4>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <tcp_slowtmr+0x550>
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a40:	6912      	ldr	r2, [r2, #16]
 8006a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006a4e:	e002      	b.n	8006a56 <tcp_slowtmr+0x556>
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <tcp_slowtmr+0x5a4>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d000      	beq.n	8006a60 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006a5e:	e560      	b.n	8006522 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006a60:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6a:	f003 fb7f 	bl	800a16c <tcp_output>
  while (pcb != NULL) {
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f47f ad5c 	bne.w	800652e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <tcp_slowtmr+0x5a8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006a80:	e067      	b.n	8006b52 <tcp_slowtmr+0x652>
 8006a82:	bf00      	nop
 8006a84:	2000828c 	.word	0x2000828c
 8006a88:	10624dd3 	.word	0x10624dd3
 8006a8c:	000124f8 	.word	0x000124f8
 8006a90:	20008298 	.word	0x20008298
 8006a94:	0800fe8c 	.word	0x0800fe8c
 8006a98:	080102c4 	.word	0x080102c4
 8006a9c:	0800fed0 	.word	0x0800fed0
 8006aa0:	080102f0 	.word	0x080102f0
 8006aa4:	200082a0 	.word	0x200082a0
 8006aa8:	2000829c 	.word	0x2000829c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	7d1b      	ldrb	r3, [r3, #20]
 8006ab0:	2b0a      	cmp	r3, #10
 8006ab2:	d006      	beq.n	8006ac2 <tcp_slowtmr+0x5c2>
 8006ab4:	4b2b      	ldr	r3, [pc, #172]	; (8006b64 <tcp_slowtmr+0x664>)
 8006ab6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006aba:	492b      	ldr	r1, [pc, #172]	; (8006b68 <tcp_slowtmr+0x668>)
 8006abc:	482b      	ldr	r0, [pc, #172]	; (8006b6c <tcp_slowtmr+0x66c>)
 8006abe:	f007 fd4f 	bl	800e560 <iprintf>
    pcb_remove = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ac8:	4b29      	ldr	r3, [pc, #164]	; (8006b70 <tcp_slowtmr+0x670>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2bf0      	cmp	r3, #240	; 0xf0
 8006ad4:	d904      	bls.n	8006ae0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ada:	3301      	adds	r3, #1
 8006adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02f      	beq.n	8006b48 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aea:	f000 fb2b 	bl	8007144 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d010      	beq.n	8006b16 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006af4:	4b1f      	ldr	r3, [pc, #124]	; (8006b74 <tcp_slowtmr+0x674>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d106      	bne.n	8006b0c <tcp_slowtmr+0x60c>
 8006afe:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <tcp_slowtmr+0x664>)
 8006b00:	f240 52af 	movw	r2, #1455	; 0x5af
 8006b04:	491c      	ldr	r1, [pc, #112]	; (8006b78 <tcp_slowtmr+0x678>)
 8006b06:	4819      	ldr	r0, [pc, #100]	; (8006b6c <tcp_slowtmr+0x66c>)
 8006b08:	f007 fd2a 	bl	800e560 <iprintf>
        prev->next = pcb->next;
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	60da      	str	r2, [r3, #12]
 8006b14:	e00f      	b.n	8006b36 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006b16:	4b17      	ldr	r3, [pc, #92]	; (8006b74 <tcp_slowtmr+0x674>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d006      	beq.n	8006b2e <tcp_slowtmr+0x62e>
 8006b20:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <tcp_slowtmr+0x664>)
 8006b22:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006b26:	4915      	ldr	r1, [pc, #84]	; (8006b7c <tcp_slowtmr+0x67c>)
 8006b28:	4810      	ldr	r0, [pc, #64]	; (8006b6c <tcp_slowtmr+0x66c>)
 8006b2a:	f007 fd19 	bl	800e560 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	4a10      	ldr	r2, [pc, #64]	; (8006b74 <tcp_slowtmr+0x674>)
 8006b34:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006b40:	69f8      	ldr	r0, [r7, #28]
 8006b42:	f7ff f93f 	bl	8005dc4 <tcp_free>
 8006b46:	e004      	b.n	8006b52 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1a9      	bne.n	8006aac <tcp_slowtmr+0x5ac>
    }
  }
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	3730      	adds	r7, #48	; 0x30
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bdb0      	pop	{r4, r5, r7, pc}
 8006b62:	bf00      	nop
 8006b64:	0800fe8c 	.word	0x0800fe8c
 8006b68:	0801031c 	.word	0x0801031c
 8006b6c:	0800fed0 	.word	0x0800fed0
 8006b70:	2000828c 	.word	0x2000828c
 8006b74:	2000829c 	.word	0x2000829c
 8006b78:	0801034c 	.word	0x0801034c
 8006b7c:	08010374 	.word	0x08010374

08006b80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006b86:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006b90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006b92:	4b2b      	ldr	r3, [pc, #172]	; (8006c40 <tcp_fasttmr+0xc0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006b98:	e048      	b.n	8006c2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7f9a      	ldrb	r2, [r3, #30]
 8006b9e:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d03f      	beq.n	8006c26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006ba6:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8b5b      	ldrh	r3, [r3, #26]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d010      	beq.n	8006bdc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8b5b      	ldrh	r3, [r3, #26]
 8006bbe:	f043 0302 	orr.w	r3, r3, #2
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f003 facf 	bl	800a16c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8b5b      	ldrh	r3, [r3, #26]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8b5b      	ldrh	r3, [r3, #26]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8b5b      	ldrh	r3, [r3, #26]
 8006bec:	f023 0308 	bic.w	r3, r3, #8
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fa78 	bl	80060ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <tcp_fasttmr+0xc4>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f819 	bl	8006c48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <tcp_fasttmr+0xc4>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d000      	beq.n	8006c20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006c1e:	e7b8      	b.n	8006b92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	e002      	b.n	8006c2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1b3      	bne.n	8006b9a <tcp_fasttmr+0x1a>
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200082a2 	.word	0x200082a2
 8006c40:	20008298 	.word	0x20008298
 8006c44:	200082a0 	.word	0x200082a0

08006c48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <tcp_process_refused_data+0x22>
 8006c56:	4b37      	ldr	r3, [pc, #220]	; (8006d34 <tcp_process_refused_data+0xec>)
 8006c58:	f240 6209 	movw	r2, #1545	; 0x609
 8006c5c:	4936      	ldr	r1, [pc, #216]	; (8006d38 <tcp_process_refused_data+0xf0>)
 8006c5e:	4837      	ldr	r0, [pc, #220]	; (8006d3c <tcp_process_refused_data+0xf4>)
 8006c60:	f007 fc7e 	bl	800e560 <iprintf>
 8006c64:	f06f 030f 	mvn.w	r3, #15
 8006c68:	e060      	b.n	8006d2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6e:	7b5b      	ldrb	r3, [r3, #13]
 8006c70:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c76:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <tcp_process_refused_data+0x58>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6918      	ldr	r0, [r3, #16]
 8006c92:	2300      	movs	r3, #0
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	47a0      	blx	r4
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73fb      	strb	r3, [r7, #15]
 8006c9e:	e007      	b.n	8006cb0 <tcp_process_refused_data+0x68>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f000 f8a4 	bl	8006df4 <tcp_recv_null>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d12a      	bne.n	8006d0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d033      	beq.n	8006d2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006cca:	d005      	beq.n	8006cd8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <tcp_process_refused_data+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6918      	ldr	r0, [r3, #16]
 8006cec:	2300      	movs	r3, #0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	47a0      	blx	r4
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e001      	b.n	8006cfe <tcp_process_refused_data+0xb6>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d02:	f113 0f0d 	cmn.w	r3, #13
 8006d06:	d110      	bne.n	8006d2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006d08:	f06f 030c 	mvn.w	r3, #12
 8006d0c:	e00e      	b.n	8006d2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d12:	f113 0f0d 	cmn.w	r3, #13
 8006d16:	d102      	bne.n	8006d1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006d18:	f06f 030c 	mvn.w	r3, #12
 8006d1c:	e006      	b.n	8006d2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006d24:	f06f 0304 	mvn.w	r3, #4
 8006d28:	e000      	b.n	8006d2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd90      	pop	{r4, r7, pc}
 8006d34:	0800fe8c 	.word	0x0800fe8c
 8006d38:	0801039c 	.word	0x0801039c
 8006d3c:	0800fed0 	.word	0x0800fed0

08006d40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006d48:	e007      	b.n	8006d5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f80a 	bl	8006d6a <tcp_seg_free>
    seg = next;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f4      	bne.n	8006d4a <tcp_segs_free+0xa>
  }
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00c      	beq.n	8006d92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe fd6d 	bl	8005864 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	2003      	movs	r0, #3
 8006d8e:	f7fd fef3 	bl	8004b78 <memp_free>
  }
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <tcp_seg_copy+0x1c>
 8006daa:	4b0f      	ldr	r3, [pc, #60]	; (8006de8 <tcp_seg_copy+0x4c>)
 8006dac:	f240 6282 	movw	r2, #1666	; 0x682
 8006db0:	490e      	ldr	r1, [pc, #56]	; (8006dec <tcp_seg_copy+0x50>)
 8006db2:	480f      	ldr	r0, [pc, #60]	; (8006df0 <tcp_seg_copy+0x54>)
 8006db4:	f007 fbd4 	bl	800e560 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006db8:	2003      	movs	r0, #3
 8006dba:	f7fd fe6d 	bl	8004a98 <memp_malloc>
 8006dbe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <tcp_seg_copy+0x2e>
    return NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e00a      	b.n	8006de0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006dca:	2210      	movs	r2, #16
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f007 fca1 	bl	800e716 <memcpy>
  pbuf_ref(cseg->p);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fde3 	bl	80059a4 <pbuf_ref>
  return cseg;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	0800fe8c 	.word	0x0800fe8c
 8006dec:	080103e0 	.word	0x080103e0
 8006df0:	0800fed0 	.word	0x0800fed0

08006df4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <tcp_recv_null+0x28>
 8006e08:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <tcp_recv_null+0x60>)
 8006e0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006e0e:	4912      	ldr	r1, [pc, #72]	; (8006e58 <tcp_recv_null+0x64>)
 8006e10:	4812      	ldr	r0, [pc, #72]	; (8006e5c <tcp_recv_null+0x68>)
 8006e12:	f007 fba5 	bl	800e560 <iprintf>
 8006e16:	f06f 030f 	mvn.w	r3, #15
 8006e1a:	e016      	b.n	8006e4a <tcp_recv_null+0x56>

  if (p != NULL) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	891b      	ldrh	r3, [r3, #8]
 8006e26:	4619      	mov	r1, r3
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f7ff fb19 	bl	8006460 <tcp_recved>
    pbuf_free(p);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fe fd18 	bl	8005864 <pbuf_free>
 8006e34:	e008      	b.n	8006e48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006e3e:	68b8      	ldr	r0, [r7, #8]
 8006e40:	f7ff f9be 	bl	80061c0 <tcp_close>
 8006e44:	4603      	mov	r3, r0
 8006e46:	e000      	b.n	8006e4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	0800fe8c 	.word	0x0800fe8c
 8006e58:	080103fc 	.word	0x080103fc
 8006e5c:	0800fed0 	.word	0x0800fed0

08006e60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	db01      	blt.n	8006e76 <tcp_kill_prio+0x16>
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	e000      	b.n	8006e78 <tcp_kill_prio+0x18>
 8006e76:	237f      	movs	r3, #127	; 0x7f
 8006e78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d034      	beq.n	8006eea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e8e:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <tcp_kill_prio+0x94>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e01f      	b.n	8006ed6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	7d5b      	ldrb	r3, [r3, #21]
 8006e9a:	7afa      	ldrb	r2, [r7, #11]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d80c      	bhi.n	8006eba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006ea4:	7afa      	ldrb	r2, [r7, #11]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d112      	bne.n	8006ed0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <tcp_kill_prio+0x98>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d80a      	bhi.n	8006ed0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006eba:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <tcp_kill_prio+0x98>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	7d5b      	ldrb	r3, [r3, #21]
 8006ece:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1dc      	bne.n	8006e96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006ee2:	6938      	ldr	r0, [r7, #16]
 8006ee4:	f7ff fa56 	bl	8006394 <tcp_abort>
 8006ee8:	e000      	b.n	8006eec <tcp_kill_prio+0x8c>
    return;
 8006eea:	bf00      	nop
  }
}
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20008298 	.word	0x20008298
 8006ef8:	2000828c 	.word	0x2000828c

08006efc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d009      	beq.n	8006f20 <tcp_kill_state+0x24>
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	2b09      	cmp	r3, #9
 8006f10:	d006      	beq.n	8006f20 <tcp_kill_state+0x24>
 8006f12:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <tcp_kill_state+0x80>)
 8006f14:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006f18:	4919      	ldr	r1, [pc, #100]	; (8006f80 <tcp_kill_state+0x84>)
 8006f1a:	481a      	ldr	r0, [pc, #104]	; (8006f84 <tcp_kill_state+0x88>)
 8006f1c:	f007 fb20 	bl	800e560 <iprintf>

  inactivity = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f28:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <tcp_kill_state+0x8c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e017      	b.n	8006f60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	7d1b      	ldrb	r3, [r3, #20]
 8006f34:	79fa      	ldrb	r2, [r7, #7]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d10f      	bne.n	8006f5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <tcp_kill_state+0x90>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d807      	bhi.n	8006f5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <tcp_kill_state+0x90>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e4      	bne.n	8006f30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f7ff f952 	bl	8006218 <tcp_abandon>
  }
}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	0800fe8c 	.word	0x0800fe8c
 8006f80:	08010418 	.word	0x08010418
 8006f84:	0800fed0 	.word	0x0800fed0
 8006f88:	20008298 	.word	0x20008298
 8006f8c:	2000828c 	.word	0x2000828c

08006f90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <tcp_kill_timewait+0x58>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	e012      	b.n	8006fcc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fa6:	4b11      	ldr	r3, [pc, #68]	; (8006fec <tcp_kill_timewait+0x5c>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d807      	bhi.n	8006fc6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <tcp_kill_timewait+0x5c>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e9      	bne.n	8006fa6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006fd8:	68b8      	ldr	r0, [r7, #8]
 8006fda:	f7ff f9db 	bl	8006394 <tcp_abort>
  }
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2000829c 	.word	0x2000829c
 8006fec:	2000828c 	.word	0x2000828c

08006ff0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006ff6:	4b10      	ldr	r3, [pc, #64]	; (8007038 <tcp_handle_closepend+0x48>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006ffc:	e014      	b.n	8007028 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8b5b      	ldrh	r3, [r3, #26]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8b5b      	ldrh	r3, [r3, #26]
 8007014:	f023 0308 	bic.w	r3, r3, #8
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff f864 	bl	80060ec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e7      	bne.n	8006ffe <tcp_handle_closepend+0xe>
  }
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20008298 	.word	0x20008298

0800703c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007046:	2001      	movs	r0, #1
 8007048:	f7fd fd26 	bl	8004a98 <memp_malloc>
 800704c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d126      	bne.n	80070a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007054:	f7ff ffcc 	bl	8006ff0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007058:	f7ff ff9a 	bl	8006f90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800705c:	2001      	movs	r0, #1
 800705e:	f7fd fd1b 	bl	8004a98 <memp_malloc>
 8007062:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d11b      	bne.n	80070a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800706a:	2009      	movs	r0, #9
 800706c:	f7ff ff46 	bl	8006efc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007070:	2001      	movs	r0, #1
 8007072:	f7fd fd11 	bl	8004a98 <memp_malloc>
 8007076:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d111      	bne.n	80070a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800707e:	2008      	movs	r0, #8
 8007080:	f7ff ff3c 	bl	8006efc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007084:	2001      	movs	r0, #1
 8007086:	f7fd fd07 	bl	8004a98 <memp_malloc>
 800708a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fee3 	bl	8006e60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800709a:	2001      	movs	r0, #1
 800709c:	f7fd fcfc 	bl	8004a98 <memp_malloc>
 80070a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d03f      	beq.n	8007128 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80070a8:	229c      	movs	r2, #156	; 0x9c
 80070aa:	2100      	movs	r1, #0
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f007 fabc 	bl	800e62a <memset>
    pcb->prio = prio;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	79fa      	ldrb	r2, [r7, #7]
 80070b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80070be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80070c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80070de:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2206      	movs	r2, #6
 80070e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2206      	movs	r2, #6
 80070ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070f4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <tcp_alloc+0xf8>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <tcp_alloc+0xfc>)
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007114:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a08      	ldr	r2, [pc, #32]	; (800713c <tcp_alloc+0x100>)
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a07      	ldr	r2, [pc, #28]	; (8007140 <tcp_alloc+0x104>)
 8007124:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007128:	68fb      	ldr	r3, [r7, #12]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000828c 	.word	0x2000828c
 8007138:	200082a2 	.word	0x200082a2
 800713c:	08006df5 	.word	0x08006df5
 8007140:	006ddd00 	.word	0x006ddd00

08007144 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d107      	bne.n	8007162 <tcp_pcb_purge+0x1e>
 8007152:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <tcp_pcb_purge+0x94>)
 8007154:	f640 0251 	movw	r2, #2129	; 0x851
 8007158:	4920      	ldr	r1, [pc, #128]	; (80071dc <tcp_pcb_purge+0x98>)
 800715a:	4821      	ldr	r0, [pc, #132]	; (80071e0 <tcp_pcb_purge+0x9c>)
 800715c:	f007 fa00 	bl	800e560 <iprintf>
 8007160:	e037      	b.n	80071d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7d1b      	ldrb	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d033      	beq.n	80071d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800716e:	2b0a      	cmp	r3, #10
 8007170:	d02f      	beq.n	80071d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007176:	2b01      	cmp	r3, #1
 8007178:	d02b      	beq.n	80071d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fb6c 	bl	8005864 <pbuf_free>
      pcb->refused_data = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f986 	bl	80074ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fdc7 	bl	8006d40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fdc2 	bl	8006d40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	0800fe8c 	.word	0x0800fe8c
 80071dc:	080104d8 	.word	0x080104d8
 80071e0:	0800fed0 	.word	0x0800fed0

080071e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <tcp_pcb_remove+0x1e>
 80071f4:	4b3e      	ldr	r3, [pc, #248]	; (80072f0 <tcp_pcb_remove+0x10c>)
 80071f6:	f640 0283 	movw	r2, #2179	; 0x883
 80071fa:	493e      	ldr	r1, [pc, #248]	; (80072f4 <tcp_pcb_remove+0x110>)
 80071fc:	483e      	ldr	r0, [pc, #248]	; (80072f8 <tcp_pcb_remove+0x114>)
 80071fe:	f007 f9af 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <tcp_pcb_remove+0x32>
 8007208:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <tcp_pcb_remove+0x10c>)
 800720a:	f640 0284 	movw	r2, #2180	; 0x884
 800720e:	493b      	ldr	r1, [pc, #236]	; (80072fc <tcp_pcb_remove+0x118>)
 8007210:	4839      	ldr	r0, [pc, #228]	; (80072f8 <tcp_pcb_remove+0x114>)
 8007212:	f007 f9a5 	bl	800e560 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d105      	bne.n	800722c <tcp_pcb_remove+0x48>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e013      	b.n	8007254 <tcp_pcb_remove+0x70>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e00c      	b.n	800724e <tcp_pcb_remove+0x6a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d104      	bne.n	8007248 <tcp_pcb_remove+0x64>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	e005      	b.n	8007254 <tcp_pcb_remove+0x70>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1ef      	bne.n	8007234 <tcp_pcb_remove+0x50>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f7ff ff72 	bl	8007144 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	7d1b      	ldrb	r3, [r3, #20]
 8007264:	2b0a      	cmp	r3, #10
 8007266:	d013      	beq.n	8007290 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800726c:	2b01      	cmp	r3, #1
 800726e:	d00f      	beq.n	8007290 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	8b5b      	ldrh	r3, [r3, #26]
 8007274:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	8b5b      	ldrh	r3, [r3, #26]
 8007280:	f043 0302 	orr.w	r3, r3, #2
 8007284:	b29a      	uxth	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800728a:	6838      	ldr	r0, [r7, #0]
 800728c:	f002 ff6e 	bl	800a16c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	7d1b      	ldrb	r3, [r3, #20]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d020      	beq.n	80072da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <tcp_pcb_remove+0xca>
 80072a0:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <tcp_pcb_remove+0x10c>)
 80072a2:	f640 0293 	movw	r2, #2195	; 0x893
 80072a6:	4916      	ldr	r1, [pc, #88]	; (8007300 <tcp_pcb_remove+0x11c>)
 80072a8:	4813      	ldr	r0, [pc, #76]	; (80072f8 <tcp_pcb_remove+0x114>)
 80072aa:	f007 f959 	bl	800e560 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d006      	beq.n	80072c4 <tcp_pcb_remove+0xe0>
 80072b6:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <tcp_pcb_remove+0x10c>)
 80072b8:	f640 0294 	movw	r2, #2196	; 0x894
 80072bc:	4911      	ldr	r1, [pc, #68]	; (8007304 <tcp_pcb_remove+0x120>)
 80072be:	480e      	ldr	r0, [pc, #56]	; (80072f8 <tcp_pcb_remove+0x114>)
 80072c0:	f007 f94e 	bl	800e560 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <tcp_pcb_remove+0xf6>
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <tcp_pcb_remove+0x10c>)
 80072ce:	f640 0296 	movw	r2, #2198	; 0x896
 80072d2:	490d      	ldr	r1, [pc, #52]	; (8007308 <tcp_pcb_remove+0x124>)
 80072d4:	4808      	ldr	r0, [pc, #32]	; (80072f8 <tcp_pcb_remove+0x114>)
 80072d6:	f007 f943 	bl	800e560 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2200      	movs	r2, #0
 80072de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	0800fe8c 	.word	0x0800fe8c
 80072f4:	080104f4 	.word	0x080104f4
 80072f8:	0800fed0 	.word	0x0800fed0
 80072fc:	08010510 	.word	0x08010510
 8007300:	08010530 	.word	0x08010530
 8007304:	08010548 	.word	0x08010548
 8007308:	08010564 	.word	0x08010564

0800730c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <tcp_next_iss+0x1c>
 800731a:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <tcp_next_iss+0x38>)
 800731c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007320:	4909      	ldr	r1, [pc, #36]	; (8007348 <tcp_next_iss+0x3c>)
 8007322:	480a      	ldr	r0, [pc, #40]	; (800734c <tcp_next_iss+0x40>)
 8007324:	f007 f91c 	bl	800e560 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <tcp_next_iss+0x44>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <tcp_next_iss+0x48>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4413      	add	r3, r2
 8007332:	4a07      	ldr	r2, [pc, #28]	; (8007350 <tcp_next_iss+0x44>)
 8007334:	6013      	str	r3, [r2, #0]
  return iss;
 8007336:	4b06      	ldr	r3, [pc, #24]	; (8007350 <tcp_next_iss+0x44>)
 8007338:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	0800fe8c 	.word	0x0800fe8c
 8007348:	0801057c 	.word	0x0801057c
 800734c:	0800fed0 	.word	0x0800fed0
 8007350:	20000024 	.word	0x20000024
 8007354:	2000828c 	.word	0x2000828c

08007358 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <tcp_eff_send_mss_netif+0x22>
 800736c:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <tcp_eff_send_mss_netif+0x68>)
 800736e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007372:	4914      	ldr	r1, [pc, #80]	; (80073c4 <tcp_eff_send_mss_netif+0x6c>)
 8007374:	4814      	ldr	r0, [pc, #80]	; (80073c8 <tcp_eff_send_mss_netif+0x70>)
 8007376:	f007 f8f3 	bl	800e560 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	e019      	b.n	80073b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007388:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800738a:	8afb      	ldrh	r3, [r7, #22]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d012      	beq.n	80073b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007390:	2328      	movs	r3, #40	; 0x28
 8007392:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007394:	8afa      	ldrh	r2, [r7, #22]
 8007396:	8abb      	ldrh	r3, [r7, #20]
 8007398:	429a      	cmp	r2, r3
 800739a:	d904      	bls.n	80073a6 <tcp_eff_send_mss_netif+0x4e>
 800739c:	8afa      	ldrh	r2, [r7, #22]
 800739e:	8abb      	ldrh	r3, [r7, #20]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	e000      	b.n	80073a8 <tcp_eff_send_mss_netif+0x50>
 80073a6:	2300      	movs	r3, #0
 80073a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80073aa:	8a7a      	ldrh	r2, [r7, #18]
 80073ac:	89fb      	ldrh	r3, [r7, #14]
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bf28      	it	cs
 80073b2:	4613      	movcs	r3, r2
 80073b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80073b6:	89fb      	ldrh	r3, [r7, #14]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	0800fe8c 	.word	0x0800fe8c
 80073c4:	08010598 	.word	0x08010598
 80073c8:	0800fed0 	.word	0x0800fed0

080073cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d119      	bne.n	8007414 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80073e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80073e6:	4910      	ldr	r1, [pc, #64]	; (8007428 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80073e8:	4810      	ldr	r0, [pc, #64]	; (800742c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80073ea:	f007 f8b9 	bl	800e560 <iprintf>

  while (pcb != NULL) {
 80073ee:	e011      	b.n	8007414 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d108      	bne.n	800740e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7fe ffc6 	bl	8006394 <tcp_abort>
      pcb = next;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	e002      	b.n	8007414 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1ea      	bne.n	80073f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	0800fe8c 	.word	0x0800fe8c
 8007428:	080105c0 	.word	0x080105c0
 800742c:	0800fed0 	.word	0x0800fed0

08007430 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02a      	beq.n	8007496 <tcp_netif_ip_addr_changed+0x66>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d026      	beq.n	8007496 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <tcp_netif_ip_addr_changed+0x70>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff ffbc 	bl	80073cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007454:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <tcp_netif_ip_addr_changed+0x74>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff ffb6 	bl	80073cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d017      	beq.n	8007496 <tcp_netif_ip_addr_changed+0x66>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d013      	beq.n	8007496 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800746e:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <tcp_netif_ip_addr_changed+0x78>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e00c      	b.n	8007490 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d103      	bne.n	800748a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1ef      	bne.n	8007476 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20008298 	.word	0x20008298
 80074a4:	20008290 	.word	0x20008290
 80074a8:	20008294 	.word	0x20008294

080074ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fc3d 	bl	8006d40 <tcp_segs_free>
    pcb->ooseq = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b08d      	sub	sp, #52	; 0x34
 80074d8:	af04      	add	r7, sp, #16
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <tcp_input+0x1c>
 80074e4:	4b9b      	ldr	r3, [pc, #620]	; (8007754 <tcp_input+0x280>)
 80074e6:	2283      	movs	r2, #131	; 0x83
 80074e8:	499b      	ldr	r1, [pc, #620]	; (8007758 <tcp_input+0x284>)
 80074ea:	489c      	ldr	r0, [pc, #624]	; (800775c <tcp_input+0x288>)
 80074ec:	f007 f838 	bl	800e560 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a9a      	ldr	r2, [pc, #616]	; (8007760 <tcp_input+0x28c>)
 80074f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	895b      	ldrh	r3, [r3, #10]
 80074fc:	2b13      	cmp	r3, #19
 80074fe:	f240 83d1 	bls.w	8007ca4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007502:	4b98      	ldr	r3, [pc, #608]	; (8007764 <tcp_input+0x290>)
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	4a97      	ldr	r2, [pc, #604]	; (8007764 <tcp_input+0x290>)
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	4611      	mov	r1, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f005 ffd1 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	f040 83c7 	bne.w	8007ca8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800751a:	4b92      	ldr	r3, [pc, #584]	; (8007764 <tcp_input+0x290>)
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007522:	2be0      	cmp	r3, #224	; 0xe0
 8007524:	f000 83c0 	beq.w	8007ca8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007528:	4b8d      	ldr	r3, [pc, #564]	; (8007760 <tcp_input+0x28c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	899b      	ldrh	r3, [r3, #12]
 800752e:	b29b      	uxth	r3, r3
 8007530:	4618      	mov	r0, r3
 8007532:	f7fc fe39 	bl	80041a8 <lwip_htons>
 8007536:	4603      	mov	r3, r0
 8007538:	0b1b      	lsrs	r3, r3, #12
 800753a:	b29b      	uxth	r3, r3
 800753c:	b2db      	uxtb	r3, r3
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007542:	7cbb      	ldrb	r3, [r7, #18]
 8007544:	2b13      	cmp	r3, #19
 8007546:	f240 83b1 	bls.w	8007cac <tcp_input+0x7d8>
 800754a:	7cbb      	ldrb	r3, [r7, #18]
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	891b      	ldrh	r3, [r3, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	f200 83aa 	bhi.w	8007cac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007558:	7cbb      	ldrb	r3, [r7, #18]
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b14      	subs	r3, #20
 800755e:	b29a      	uxth	r2, r3
 8007560:	4b81      	ldr	r3, [pc, #516]	; (8007768 <tcp_input+0x294>)
 8007562:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007564:	4b81      	ldr	r3, [pc, #516]	; (800776c <tcp_input+0x298>)
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	895a      	ldrh	r2, [r3, #10]
 800756e:	7cbb      	ldrb	r3, [r7, #18]
 8007570:	b29b      	uxth	r3, r3
 8007572:	429a      	cmp	r2, r3
 8007574:	d309      	bcc.n	800758a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007576:	4b7c      	ldr	r3, [pc, #496]	; (8007768 <tcp_input+0x294>)
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	4b7d      	ldr	r3, [pc, #500]	; (8007770 <tcp_input+0x29c>)
 800757c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800757e:	7cbb      	ldrb	r3, [r7, #18]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fe f8e8 	bl	8005758 <pbuf_remove_header>
 8007588:	e04e      	b.n	8007628 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <tcp_input+0xca>
 8007592:	4b70      	ldr	r3, [pc, #448]	; (8007754 <tcp_input+0x280>)
 8007594:	22c2      	movs	r2, #194	; 0xc2
 8007596:	4977      	ldr	r1, [pc, #476]	; (8007774 <tcp_input+0x2a0>)
 8007598:	4870      	ldr	r0, [pc, #448]	; (800775c <tcp_input+0x288>)
 800759a:	f006 ffe1 	bl	800e560 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800759e:	2114      	movs	r1, #20
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7fe f8d9 	bl	8005758 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	895a      	ldrh	r2, [r3, #10]
 80075aa:	4b71      	ldr	r3, [pc, #452]	; (8007770 <tcp_input+0x29c>)
 80075ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80075ae:	4b6e      	ldr	r3, [pc, #440]	; (8007768 <tcp_input+0x294>)
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	4b6f      	ldr	r3, [pc, #444]	; (8007770 <tcp_input+0x29c>)
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80075ba:	4b6d      	ldr	r3, [pc, #436]	; (8007770 <tcp_input+0x29c>)
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7fe f8c9 	bl	8005758 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	895b      	ldrh	r3, [r3, #10]
 80075cc:	8a3a      	ldrh	r2, [r7, #16]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	f200 836e 	bhi.w	8007cb0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4a64      	ldr	r2, [pc, #400]	; (800776c <tcp_input+0x298>)
 80075dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	8a3a      	ldrh	r2, [r7, #16]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe f8b6 	bl	8005758 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	891a      	ldrh	r2, [r3, #8]
 80075f0:	8a3b      	ldrh	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	895b      	ldrh	r3, [r3, #10]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <tcp_input+0x13a>
 8007602:	4b54      	ldr	r3, [pc, #336]	; (8007754 <tcp_input+0x280>)
 8007604:	22df      	movs	r2, #223	; 0xdf
 8007606:	495c      	ldr	r1, [pc, #368]	; (8007778 <tcp_input+0x2a4>)
 8007608:	4854      	ldr	r0, [pc, #336]	; (800775c <tcp_input+0x288>)
 800760a:	f006 ffa9 	bl	800e560 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	891a      	ldrh	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	891b      	ldrh	r3, [r3, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	d005      	beq.n	8007628 <tcp_input+0x154>
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <tcp_input+0x280>)
 800761e:	22e0      	movs	r2, #224	; 0xe0
 8007620:	4956      	ldr	r1, [pc, #344]	; (800777c <tcp_input+0x2a8>)
 8007622:	484e      	ldr	r0, [pc, #312]	; (800775c <tcp_input+0x288>)
 8007624:	f006 ff9c 	bl	800e560 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007628:	4b4d      	ldr	r3, [pc, #308]	; (8007760 <tcp_input+0x28c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	4a4b      	ldr	r2, [pc, #300]	; (8007760 <tcp_input+0x28c>)
 8007632:	6814      	ldr	r4, [r2, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f7fc fdb7 	bl	80041a8 <lwip_htons>
 800763a:	4603      	mov	r3, r0
 800763c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800763e:	4b48      	ldr	r3, [pc, #288]	; (8007760 <tcp_input+0x28c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	b29b      	uxth	r3, r3
 8007646:	4a46      	ldr	r2, [pc, #280]	; (8007760 <tcp_input+0x28c>)
 8007648:	6814      	ldr	r4, [r2, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f7fc fdac 	bl	80041a8 <lwip_htons>
 8007650:	4603      	mov	r3, r0
 8007652:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007654:	4b42      	ldr	r3, [pc, #264]	; (8007760 <tcp_input+0x28c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4a41      	ldr	r2, [pc, #260]	; (8007760 <tcp_input+0x28c>)
 800765c:	6814      	ldr	r4, [r2, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f7fc fdb7 	bl	80041d2 <lwip_htonl>
 8007664:	4603      	mov	r3, r0
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	4a45      	ldr	r2, [pc, #276]	; (8007780 <tcp_input+0x2ac>)
 800766c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800766e:	4b3c      	ldr	r3, [pc, #240]	; (8007760 <tcp_input+0x28c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	4a3a      	ldr	r2, [pc, #232]	; (8007760 <tcp_input+0x28c>)
 8007676:	6814      	ldr	r4, [r2, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fc fdaa 	bl	80041d2 <lwip_htonl>
 800767e:	4603      	mov	r3, r0
 8007680:	60a3      	str	r3, [r4, #8]
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	4a3f      	ldr	r2, [pc, #252]	; (8007784 <tcp_input+0x2b0>)
 8007686:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007688:	4b35      	ldr	r3, [pc, #212]	; (8007760 <tcp_input+0x28c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	89db      	ldrh	r3, [r3, #14]
 800768e:	b29b      	uxth	r3, r3
 8007690:	4a33      	ldr	r2, [pc, #204]	; (8007760 <tcp_input+0x28c>)
 8007692:	6814      	ldr	r4, [r2, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f7fc fd87 	bl	80041a8 <lwip_htons>
 800769a:	4603      	mov	r3, r0
 800769c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800769e:	4b30      	ldr	r3, [pc, #192]	; (8007760 <tcp_input+0x28c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	899b      	ldrh	r3, [r3, #12]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fc fd7e 	bl	80041a8 <lwip_htons>
 80076ac:	4603      	mov	r3, r0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4b34      	ldr	r3, [pc, #208]	; (8007788 <tcp_input+0x2b4>)
 80076b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	891a      	ldrh	r2, [r3, #8]
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <tcp_input+0x2b8>)
 80076c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80076c2:	4b31      	ldr	r3, [pc, #196]	; (8007788 <tcp_input+0x2b4>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00c      	beq.n	80076e8 <tcp_input+0x214>
    tcplen++;
 80076ce:	4b2f      	ldr	r3, [pc, #188]	; (800778c <tcp_input+0x2b8>)
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	4b2d      	ldr	r3, [pc, #180]	; (800778c <tcp_input+0x2b8>)
 80076d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	891a      	ldrh	r2, [r3, #8]
 80076de:	4b2b      	ldr	r3, [pc, #172]	; (800778c <tcp_input+0x2b8>)
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	f200 82e6 	bhi.w	8007cb4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076ec:	4b28      	ldr	r3, [pc, #160]	; (8007790 <tcp_input+0x2bc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	e09d      	b.n	8007830 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	7d1b      	ldrb	r3, [r3, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d105      	bne.n	8007708 <tcp_input+0x234>
 80076fc:	4b15      	ldr	r3, [pc, #84]	; (8007754 <tcp_input+0x280>)
 80076fe:	22fb      	movs	r2, #251	; 0xfb
 8007700:	4924      	ldr	r1, [pc, #144]	; (8007794 <tcp_input+0x2c0>)
 8007702:	4816      	ldr	r0, [pc, #88]	; (800775c <tcp_input+0x288>)
 8007704:	f006 ff2c 	bl	800e560 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	7d1b      	ldrb	r3, [r3, #20]
 800770c:	2b0a      	cmp	r3, #10
 800770e:	d105      	bne.n	800771c <tcp_input+0x248>
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <tcp_input+0x280>)
 8007712:	22fc      	movs	r2, #252	; 0xfc
 8007714:	4920      	ldr	r1, [pc, #128]	; (8007798 <tcp_input+0x2c4>)
 8007716:	4811      	ldr	r0, [pc, #68]	; (800775c <tcp_input+0x288>)
 8007718:	f006 ff22 	bl	800e560 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	7d1b      	ldrb	r3, [r3, #20]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d105      	bne.n	8007730 <tcp_input+0x25c>
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <tcp_input+0x280>)
 8007726:	22fd      	movs	r2, #253	; 0xfd
 8007728:	491c      	ldr	r1, [pc, #112]	; (800779c <tcp_input+0x2c8>)
 800772a:	480c      	ldr	r0, [pc, #48]	; (800775c <tcp_input+0x288>)
 800772c:	f006 ff18 	bl	800e560 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	7a1b      	ldrb	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d033      	beq.n	80077a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	7a1a      	ldrb	r2, [r3, #8]
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <tcp_input+0x290>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007744:	3301      	adds	r3, #1
 8007746:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007748:	429a      	cmp	r2, r3
 800774a:	d029      	beq.n	80077a0 <tcp_input+0x2cc>
      prev = pcb;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	61bb      	str	r3, [r7, #24]
      continue;
 8007750:	e06b      	b.n	800782a <tcp_input+0x356>
 8007752:	bf00      	nop
 8007754:	080105f4 	.word	0x080105f4
 8007758:	08010628 	.word	0x08010628
 800775c:	08010640 	.word	0x08010640
 8007760:	200082b4 	.word	0x200082b4
 8007764:	20004d1c 	.word	0x20004d1c
 8007768:	200082b8 	.word	0x200082b8
 800776c:	200082bc 	.word	0x200082bc
 8007770:	200082ba 	.word	0x200082ba
 8007774:	08010668 	.word	0x08010668
 8007778:	08010678 	.word	0x08010678
 800777c:	08010684 	.word	0x08010684
 8007780:	200082c4 	.word	0x200082c4
 8007784:	200082c8 	.word	0x200082c8
 8007788:	200082d0 	.word	0x200082d0
 800778c:	200082ce 	.word	0x200082ce
 8007790:	20008298 	.word	0x20008298
 8007794:	080106a4 	.word	0x080106a4
 8007798:	080106cc 	.word	0x080106cc
 800779c:	080106f8 	.word	0x080106f8
    }

    if (pcb->remote_port == tcphdr->src &&
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	8b1a      	ldrh	r2, [r3, #24]
 80077a4:	4b72      	ldr	r3, [pc, #456]	; (8007970 <tcp_input+0x49c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d13a      	bne.n	8007826 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	8ada      	ldrh	r2, [r3, #22]
 80077b4:	4b6e      	ldr	r3, [pc, #440]	; (8007970 <tcp_input+0x49c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80077bc:	429a      	cmp	r2, r3
 80077be:	d132      	bne.n	8007826 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4b6b      	ldr	r3, [pc, #428]	; (8007974 <tcp_input+0x4a0>)
 80077c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d12c      	bne.n	8007826 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b68      	ldr	r3, [pc, #416]	; (8007974 <tcp_input+0x4a0>)
 80077d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d126      	bne.n	8007826 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d106      	bne.n	80077f0 <tcp_input+0x31c>
 80077e2:	4b65      	ldr	r3, [pc, #404]	; (8007978 <tcp_input+0x4a4>)
 80077e4:	f240 120d 	movw	r2, #269	; 0x10d
 80077e8:	4964      	ldr	r1, [pc, #400]	; (800797c <tcp_input+0x4a8>)
 80077ea:	4865      	ldr	r0, [pc, #404]	; (8007980 <tcp_input+0x4ac>)
 80077ec:	f006 feb8 	bl	800e560 <iprintf>
      if (prev != NULL) {
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <tcp_input+0x338>
        prev->next = pcb->next;
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80077fe:	4b61      	ldr	r3, [pc, #388]	; (8007984 <tcp_input+0x4b0>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007806:	4a5f      	ldr	r2, [pc, #380]	; (8007984 <tcp_input+0x4b0>)
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	429a      	cmp	r2, r3
 8007814:	d111      	bne.n	800783a <tcp_input+0x366>
 8007816:	4b58      	ldr	r3, [pc, #352]	; (8007978 <tcp_input+0x4a4>)
 8007818:	f240 1215 	movw	r2, #277	; 0x115
 800781c:	495a      	ldr	r1, [pc, #360]	; (8007988 <tcp_input+0x4b4>)
 800781e:	4858      	ldr	r0, [pc, #352]	; (8007980 <tcp_input+0x4ac>)
 8007820:	f006 fe9e 	bl	800e560 <iprintf>
      break;
 8007824:	e009      	b.n	800783a <tcp_input+0x366>
    }
    prev = pcb;
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f47f af5e 	bne.w	80076f4 <tcp_input+0x220>
 8007838:	e000      	b.n	800783c <tcp_input+0x368>
      break;
 800783a:	bf00      	nop
  }

  if (pcb == NULL) {
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 80aa 	bne.w	8007998 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007844:	4b51      	ldr	r3, [pc, #324]	; (800798c <tcp_input+0x4b8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e03f      	b.n	80078cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	7d1b      	ldrb	r3, [r3, #20]
 8007850:	2b0a      	cmp	r3, #10
 8007852:	d006      	beq.n	8007862 <tcp_input+0x38e>
 8007854:	4b48      	ldr	r3, [pc, #288]	; (8007978 <tcp_input+0x4a4>)
 8007856:	f240 121f 	movw	r2, #287	; 0x11f
 800785a:	494d      	ldr	r1, [pc, #308]	; (8007990 <tcp_input+0x4bc>)
 800785c:	4848      	ldr	r0, [pc, #288]	; (8007980 <tcp_input+0x4ac>)
 800785e:	f006 fe7f 	bl	800e560 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	7a1b      	ldrb	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	7a1a      	ldrb	r2, [r3, #8]
 800786e:	4b41      	ldr	r3, [pc, #260]	; (8007974 <tcp_input+0x4a0>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007876:	3301      	adds	r3, #1
 8007878:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800787a:	429a      	cmp	r2, r3
 800787c:	d122      	bne.n	80078c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	8b1a      	ldrh	r2, [r3, #24]
 8007882:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <tcp_input+0x49c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	429a      	cmp	r2, r3
 800788c:	d11b      	bne.n	80078c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	8ada      	ldrh	r2, [r3, #22]
 8007892:	4b37      	ldr	r3, [pc, #220]	; (8007970 <tcp_input+0x49c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	885b      	ldrh	r3, [r3, #2]
 8007898:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800789a:	429a      	cmp	r2, r3
 800789c:	d113      	bne.n	80078c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4b34      	ldr	r3, [pc, #208]	; (8007974 <tcp_input+0x4a0>)
 80078a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d10d      	bne.n	80078c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b31      	ldr	r3, [pc, #196]	; (8007974 <tcp_input+0x4a0>)
 80078b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d107      	bne.n	80078c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80078b6:	69f8      	ldr	r0, [r7, #28]
 80078b8:	f000 fb56 	bl	8007f68 <tcp_timewait_input>
        }
        pbuf_free(p);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fd ffd1 	bl	8005864 <pbuf_free>
        return;
 80078c2:	e1fd      	b.n	8007cc0 <tcp_input+0x7ec>
        continue;
 80078c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1bc      	bne.n	800784c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80078d6:	4b2f      	ldr	r3, [pc, #188]	; (8007994 <tcp_input+0x4c0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e02a      	b.n	8007934 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	7a1b      	ldrb	r3, [r3, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00c      	beq.n	8007900 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	7a1a      	ldrb	r2, [r3, #8]
 80078ea:	4b22      	ldr	r3, [pc, #136]	; (8007974 <tcp_input+0x4a0>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d002      	beq.n	8007900 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	61bb      	str	r3, [r7, #24]
        continue;
 80078fe:	e016      	b.n	800792e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	8ada      	ldrh	r2, [r3, #22]
 8007904:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <tcp_input+0x49c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	b29b      	uxth	r3, r3
 800790c:	429a      	cmp	r2, r3
 800790e:	d10c      	bne.n	800792a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	4b17      	ldr	r3, [pc, #92]	; (8007974 <tcp_input+0x4a0>)
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	d00f      	beq.n	800793c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00d      	beq.n	800793e <tcp_input+0x46a>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1d1      	bne.n	80078de <tcp_input+0x40a>
 800793a:	e000      	b.n	800793e <tcp_input+0x46a>
            break;
 800793c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d029      	beq.n	8007998 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <tcp_input+0x4c0>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800795a:	4a0e      	ldr	r2, [pc, #56]	; (8007994 <tcp_input+0x4c0>)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007960:	6978      	ldr	r0, [r7, #20]
 8007962:	f000 fa03 	bl	8007d6c <tcp_listen_input>
      }
      pbuf_free(p);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fd ff7c 	bl	8005864 <pbuf_free>
      return;
 800796c:	e1a8      	b.n	8007cc0 <tcp_input+0x7ec>
 800796e:	bf00      	nop
 8007970:	200082b4 	.word	0x200082b4
 8007974:	20004d1c 	.word	0x20004d1c
 8007978:	080105f4 	.word	0x080105f4
 800797c:	08010720 	.word	0x08010720
 8007980:	08010640 	.word	0x08010640
 8007984:	20008298 	.word	0x20008298
 8007988:	0801074c 	.word	0x0801074c
 800798c:	2000829c 	.word	0x2000829c
 8007990:	08010778 	.word	0x08010778
 8007994:	20008294 	.word	0x20008294
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8158 	beq.w	8007c50 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80079a0:	4b95      	ldr	r3, [pc, #596]	; (8007bf8 <tcp_input+0x724>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	891a      	ldrh	r2, [r3, #8]
 80079aa:	4b93      	ldr	r3, [pc, #588]	; (8007bf8 <tcp_input+0x724>)
 80079ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80079ae:	4a92      	ldr	r2, [pc, #584]	; (8007bf8 <tcp_input+0x724>)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80079b4:	4b91      	ldr	r3, [pc, #580]	; (8007bfc <tcp_input+0x728>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a8f      	ldr	r2, [pc, #572]	; (8007bf8 <tcp_input+0x724>)
 80079ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80079bc:	4b90      	ldr	r3, [pc, #576]	; (8007c00 <tcp_input+0x72c>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80079c2:	4b90      	ldr	r3, [pc, #576]	; (8007c04 <tcp_input+0x730>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80079c8:	4b8f      	ldr	r3, [pc, #572]	; (8007c08 <tcp_input+0x734>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80079ce:	4b8f      	ldr	r3, [pc, #572]	; (8007c0c <tcp_input+0x738>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d006      	beq.n	80079e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7b5b      	ldrb	r3, [r3, #13]
 80079de:	f043 0301 	orr.w	r3, r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d017      	beq.n	8007a20 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80079f0:	69f8      	ldr	r0, [r7, #28]
 80079f2:	f7ff f929 	bl	8006c48 <tcp_process_refused_data>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f113 0f0d 	cmn.w	r3, #13
 80079fc:	d007      	beq.n	8007a0e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00c      	beq.n	8007a20 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a06:	4b82      	ldr	r3, [pc, #520]	; (8007c10 <tcp_input+0x73c>)
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d008      	beq.n	8007a20 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f040 80e3 	bne.w	8007bde <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007a18:	69f8      	ldr	r0, [r7, #28]
 8007a1a:	f003 f9ad 	bl	800ad78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007a1e:	e0de      	b.n	8007bde <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007a20:	4a7c      	ldr	r2, [pc, #496]	; (8007c14 <tcp_input+0x740>)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007a26:	69f8      	ldr	r0, [r7, #28]
 8007a28:	f000 fb18 	bl	800805c <tcp_process>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007a30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a34:	f113 0f0d 	cmn.w	r3, #13
 8007a38:	f000 80d3 	beq.w	8007be2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007a3c:	4b71      	ldr	r3, [pc, #452]	; (8007c04 <tcp_input+0x730>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d015      	beq.n	8007a74 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <tcp_input+0x590>
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	6912      	ldr	r2, [r2, #16]
 8007a5c:	f06f 010d 	mvn.w	r1, #13
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	486c      	ldr	r0, [pc, #432]	; (8007c18 <tcp_input+0x744>)
 8007a68:	f7ff fbbc 	bl	80071e4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007a6c:	69f8      	ldr	r0, [r7, #28]
 8007a6e:	f7fe f9a9 	bl	8005dc4 <tcp_free>
 8007a72:	e0da      	b.n	8007c2a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007a78:	4b63      	ldr	r3, [pc, #396]	; (8007c08 <tcp_input+0x734>)
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01d      	beq.n	8007abc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007a80:	4b61      	ldr	r3, [pc, #388]	; (8007c08 <tcp_input+0x734>)
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <tcp_input+0x5d2>
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	6910      	ldr	r0, [r2, #16]
 8007a9a:	89fa      	ldrh	r2, [r7, #14]
 8007a9c:	69f9      	ldr	r1, [r7, #28]
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	74fb      	strb	r3, [r7, #19]
 8007aa4:	e001      	b.n	8007aaa <tcp_input+0x5d6>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007aaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007aae:	f113 0f0d 	cmn.w	r3, #13
 8007ab2:	f000 8098 	beq.w	8007be6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007ab6:	4b54      	ldr	r3, [pc, #336]	; (8007c08 <tcp_input+0x734>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007abc:	69f8      	ldr	r0, [r7, #28]
 8007abe:	f000 f915 	bl	8007cec <tcp_input_delayed_close>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f040 8090 	bne.w	8007bea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007aca:	4b4d      	ldr	r3, [pc, #308]	; (8007c00 <tcp_input+0x72c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d041      	beq.n	8007b56 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d006      	beq.n	8007ae8 <tcp_input+0x614>
 8007ada:	4b50      	ldr	r3, [pc, #320]	; (8007c1c <tcp_input+0x748>)
 8007adc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007ae0:	494f      	ldr	r1, [pc, #316]	; (8007c20 <tcp_input+0x74c>)
 8007ae2:	4850      	ldr	r0, [pc, #320]	; (8007c24 <tcp_input+0x750>)
 8007ae4:	f006 fd3c 	bl	800e560 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	8b5b      	ldrh	r3, [r3, #26]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007af4:	4b42      	ldr	r3, [pc, #264]	; (8007c00 <tcp_input+0x72c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fd feb3 	bl	8005864 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007afe:	69f8      	ldr	r0, [r7, #28]
 8007b00:	f7fe fc48 	bl	8006394 <tcp_abort>
            goto aborted;
 8007b04:	e091      	b.n	8007c2a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <tcp_input+0x656>
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	6918      	ldr	r0, [r3, #16]
 8007b1a:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <tcp_input+0x72c>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	69f9      	ldr	r1, [r7, #28]
 8007b22:	47a0      	blx	r4
 8007b24:	4603      	mov	r3, r0
 8007b26:	74fb      	strb	r3, [r7, #19]
 8007b28:	e008      	b.n	8007b3c <tcp_input+0x668>
 8007b2a:	4b35      	ldr	r3, [pc, #212]	; (8007c00 <tcp_input+0x72c>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	69f9      	ldr	r1, [r7, #28]
 8007b32:	2000      	movs	r0, #0
 8007b34:	f7ff f95e 	bl	8006df4 <tcp_recv_null>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007b3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b40:	f113 0f0d 	cmn.w	r3, #13
 8007b44:	d053      	beq.n	8007bee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007b46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007b4e:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <tcp_input+0x72c>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007b56:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <tcp_input+0x730>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d030      	beq.n	8007bc4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b6e:	7b5a      	ldrb	r2, [r3, #13]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b74:	f042 0220 	orr.w	r2, r2, #32
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	735a      	strb	r2, [r3, #13]
 8007b7c:	e022      	b.n	8007bc4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007b86:	d005      	beq.n	8007b94 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <tcp_input+0x6e2>
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	6918      	ldr	r0, [r3, #16]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	47a0      	blx	r4
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	74fb      	strb	r3, [r7, #19]
 8007bb4:	e001      	b.n	8007bba <tcp_input+0x6e6>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007bba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bbe:	f113 0f0d 	cmn.w	r3, #13
 8007bc2:	d016      	beq.n	8007bf2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007bc4:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <tcp_input+0x740>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007bca:	69f8      	ldr	r0, [r7, #28]
 8007bcc:	f000 f88e 	bl	8007cec <tcp_input_delayed_close>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d128      	bne.n	8007c28 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007bd6:	69f8      	ldr	r0, [r7, #28]
 8007bd8:	f002 fac8 	bl	800a16c <tcp_output>
 8007bdc:	e025      	b.n	8007c2a <tcp_input+0x756>
        goto aborted;
 8007bde:	bf00      	nop
 8007be0:	e023      	b.n	8007c2a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007be2:	bf00      	nop
 8007be4:	e021      	b.n	8007c2a <tcp_input+0x756>
              goto aborted;
 8007be6:	bf00      	nop
 8007be8:	e01f      	b.n	8007c2a <tcp_input+0x756>
          goto aborted;
 8007bea:	bf00      	nop
 8007bec:	e01d      	b.n	8007c2a <tcp_input+0x756>
            goto aborted;
 8007bee:	bf00      	nop
 8007bf0:	e01b      	b.n	8007c2a <tcp_input+0x756>
              goto aborted;
 8007bf2:	bf00      	nop
 8007bf4:	e019      	b.n	8007c2a <tcp_input+0x756>
 8007bf6:	bf00      	nop
 8007bf8:	200082a4 	.word	0x200082a4
 8007bfc:	200082b4 	.word	0x200082b4
 8007c00:	200082d4 	.word	0x200082d4
 8007c04:	200082d1 	.word	0x200082d1
 8007c08:	200082cc 	.word	0x200082cc
 8007c0c:	200082d0 	.word	0x200082d0
 8007c10:	200082ce 	.word	0x200082ce
 8007c14:	200082d8 	.word	0x200082d8
 8007c18:	20008298 	.word	0x20008298
 8007c1c:	080105f4 	.word	0x080105f4
 8007c20:	080107a8 	.word	0x080107a8
 8007c24:	08010640 	.word	0x08010640
          goto aborted;
 8007c28:	bf00      	nop
    tcp_input_pcb = NULL;
 8007c2a:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <tcp_input+0x7f4>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007c30:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <tcp_input+0x7f8>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007c36:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <tcp_input+0x7fc>)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d03f      	beq.n	8007cbe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <tcp_input+0x7fc>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fd fe0e 	bl	8005864 <pbuf_free>
      inseg.p = NULL;
 8007c48:	4b21      	ldr	r3, [pc, #132]	; (8007cd0 <tcp_input+0x7fc>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007c4e:	e036      	b.n	8007cbe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007c50:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <tcp_input+0x800>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	899b      	ldrh	r3, [r3, #12]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fc faa5 	bl	80041a8 <lwip_htons>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d118      	bne.n	8007c9c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <tcp_input+0x804>)
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <tcp_input+0x808>)
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <tcp_input+0x80c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c7a:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <tcp_input+0x800>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c7e:	885b      	ldrh	r3, [r3, #2]
 8007c80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c82:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <tcp_input+0x800>)
 8007c84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c86:	8812      	ldrh	r2, [r2, #0]
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	9202      	str	r2, [sp, #8]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <tcp_input+0x810>)
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <tcp_input+0x814>)
 8007c94:	4602      	mov	r2, r0
 8007c96:	2000      	movs	r0, #0
 8007c98:	f003 f81c 	bl	800acd4 <tcp_rst>
    pbuf_free(p);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fd fde1 	bl	8005864 <pbuf_free>
  return;
 8007ca2:	e00c      	b.n	8007cbe <tcp_input+0x7ea>
    goto dropped;
 8007ca4:	bf00      	nop
 8007ca6:	e006      	b.n	8007cb6 <tcp_input+0x7e2>
    goto dropped;
 8007ca8:	bf00      	nop
 8007caa:	e004      	b.n	8007cb6 <tcp_input+0x7e2>
    goto dropped;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <tcp_input+0x7e2>
      goto dropped;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <tcp_input+0x7e2>
      goto dropped;
 8007cb4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fd fdd4 	bl	8005864 <pbuf_free>
 8007cbc:	e000      	b.n	8007cc0 <tcp_input+0x7ec>
  return;
 8007cbe:	bf00      	nop
}
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd90      	pop	{r4, r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200082d8 	.word	0x200082d8
 8007ccc:	200082d4 	.word	0x200082d4
 8007cd0:	200082a4 	.word	0x200082a4
 8007cd4:	200082b4 	.word	0x200082b4
 8007cd8:	200082c8 	.word	0x200082c8
 8007cdc:	200082ce 	.word	0x200082ce
 8007ce0:	200082c4 	.word	0x200082c4
 8007ce4:	20004d2c 	.word	0x20004d2c
 8007ce8:	20004d30 	.word	0x20004d30

08007cec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <tcp_input_delayed_close+0x1c>
 8007cfa:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <tcp_input_delayed_close+0x6c>)
 8007cfc:	f240 225a 	movw	r2, #602	; 0x25a
 8007d00:	4916      	ldr	r1, [pc, #88]	; (8007d5c <tcp_input_delayed_close+0x70>)
 8007d02:	4817      	ldr	r0, [pc, #92]	; (8007d60 <tcp_input_delayed_close+0x74>)
 8007d04:	f006 fc2c 	bl	800e560 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007d08:	4b16      	ldr	r3, [pc, #88]	; (8007d64 <tcp_input_delayed_close+0x78>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01c      	beq.n	8007d4e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8b5b      	ldrh	r3, [r3, #26]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <tcp_input_delayed_close+0x50>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6912      	ldr	r2, [r2, #16]
 8007d34:	f06f 010e 	mvn.w	r1, #14
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	480a      	ldr	r0, [pc, #40]	; (8007d68 <tcp_input_delayed_close+0x7c>)
 8007d40:	f7ff fa50 	bl	80071e4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fe f83d 	bl	8005dc4 <tcp_free>
    return 1;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	080105f4 	.word	0x080105f4
 8007d5c:	080107c4 	.word	0x080107c4
 8007d60:	08010640 	.word	0x08010640
 8007d64:	200082d1 	.word	0x200082d1
 8007d68:	20008298 	.word	0x20008298

08007d6c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b08b      	sub	sp, #44	; 0x2c
 8007d70:	af04      	add	r7, sp, #16
 8007d72:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007d74:	4b6f      	ldr	r3, [pc, #444]	; (8007f34 <tcp_listen_input+0x1c8>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 80d2 	bne.w	8007f26 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <tcp_listen_input+0x2a>
 8007d88:	4b6b      	ldr	r3, [pc, #428]	; (8007f38 <tcp_listen_input+0x1cc>)
 8007d8a:	f240 2281 	movw	r2, #641	; 0x281
 8007d8e:	496b      	ldr	r1, [pc, #428]	; (8007f3c <tcp_listen_input+0x1d0>)
 8007d90:	486b      	ldr	r0, [pc, #428]	; (8007f40 <tcp_listen_input+0x1d4>)
 8007d92:	f006 fbe5 	bl	800e560 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007d96:	4b67      	ldr	r3, [pc, #412]	; (8007f34 <tcp_listen_input+0x1c8>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d019      	beq.n	8007dd6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007da2:	4b68      	ldr	r3, [pc, #416]	; (8007f44 <tcp_listen_input+0x1d8>)
 8007da4:	6819      	ldr	r1, [r3, #0]
 8007da6:	4b68      	ldr	r3, [pc, #416]	; (8007f48 <tcp_listen_input+0x1dc>)
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	4b67      	ldr	r3, [pc, #412]	; (8007f4c <tcp_listen_input+0x1e0>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007db2:	4b67      	ldr	r3, [pc, #412]	; (8007f50 <tcp_listen_input+0x1e4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dba:	4a65      	ldr	r2, [pc, #404]	; (8007f50 <tcp_listen_input+0x1e4>)
 8007dbc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dbe:	8812      	ldrh	r2, [r2, #0]
 8007dc0:	b292      	uxth	r2, r2
 8007dc2:	9202      	str	r2, [sp, #8]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	4b63      	ldr	r3, [pc, #396]	; (8007f54 <tcp_listen_input+0x1e8>)
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4b63      	ldr	r3, [pc, #396]	; (8007f58 <tcp_listen_input+0x1ec>)
 8007dcc:	4602      	mov	r2, r0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f002 ff80 	bl	800acd4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007dd4:	e0a9      	b.n	8007f2a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007dd6:	4b57      	ldr	r3, [pc, #348]	; (8007f34 <tcp_listen_input+0x1c8>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80a3 	beq.w	8007f2a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7d5b      	ldrb	r3, [r3, #21]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff f927 	bl	800703c <tcp_alloc>
 8007dee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d111      	bne.n	8007e1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <tcp_listen_input+0xa8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6910      	ldr	r0, [r2, #16]
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	4798      	blx	r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]
      return;
 8007e12:	e08b      	b.n	8007f2c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e14:	23f0      	movs	r3, #240	; 0xf0
 8007e16:	73bb      	strb	r3, [r7, #14]
      return;
 8007e18:	e088      	b.n	8007f2c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007e1a:	4b50      	ldr	r3, [pc, #320]	; (8007f5c <tcp_listen_input+0x1f0>)
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007e22:	4b4e      	ldr	r3, [pc, #312]	; (8007f5c <tcp_listen_input+0x1f0>)
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	8ada      	ldrh	r2, [r3, #22]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007e32:	4b47      	ldr	r3, [pc, #284]	; (8007f50 <tcp_listen_input+0x1e4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2203      	movs	r2, #3
 8007e42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007e44:	4b41      	ldr	r3, [pc, #260]	; (8007f4c <tcp_listen_input+0x1e0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007e56:	6978      	ldr	r0, [r7, #20]
 8007e58:	f7ff fa58 	bl	800730c <tcp_next_iss>
 8007e5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007e76:	4b35      	ldr	r3, [pc, #212]	; (8007f4c <tcp_listen_input+0x1e0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	1e5a      	subs	r2, r3, #1
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7a5b      	ldrb	r3, [r3, #9]
 8007e92:	f003 030c 	and.w	r3, r3, #12
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7a1a      	ldrb	r2, [r3, #8]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007ea4:	4b2e      	ldr	r3, [pc, #184]	; (8007f60 <tcp_listen_input+0x1f4>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	60da      	str	r2, [r3, #12]
 8007eac:	4a2c      	ldr	r2, [pc, #176]	; (8007f60 <tcp_listen_input+0x1f4>)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	f003 f8d1 	bl	800b058 <tcp_timer_needed>
 8007eb6:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <tcp_listen_input+0x1f8>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f001 fd8f 	bl	80099e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007ec2:	4b23      	ldr	r3, [pc, #140]	; (8007f50 <tcp_listen_input+0x1e4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	89db      	ldrh	r3, [r3, #14]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f005 f84f 	bl	800cf88 <ip4_route>
 8007eea:	4601      	mov	r1, r0
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f7ff fa30 	bl	8007358 <tcp_eff_send_mss_netif>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	461a      	mov	r2, r3
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007f00:	2112      	movs	r1, #18
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	f002 f844 	bl	8009f90 <tcp_enqueue_flags>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007f14:	2100      	movs	r1, #0
 8007f16:	6978      	ldr	r0, [r7, #20]
 8007f18:	f7fe f97e 	bl	8006218 <tcp_abandon>
      return;
 8007f1c:	e006      	b.n	8007f2c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f002 f924 	bl	800a16c <tcp_output>
  return;
 8007f24:	e001      	b.n	8007f2a <tcp_listen_input+0x1be>
    return;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <tcp_listen_input+0x1c0>
  return;
 8007f2a:	bf00      	nop
}
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd90      	pop	{r4, r7, pc}
 8007f32:	bf00      	nop
 8007f34:	200082d0 	.word	0x200082d0
 8007f38:	080105f4 	.word	0x080105f4
 8007f3c:	080107ec 	.word	0x080107ec
 8007f40:	08010640 	.word	0x08010640
 8007f44:	200082c8 	.word	0x200082c8
 8007f48:	200082ce 	.word	0x200082ce
 8007f4c:	200082c4 	.word	0x200082c4
 8007f50:	200082b4 	.word	0x200082b4
 8007f54:	20004d2c 	.word	0x20004d2c
 8007f58:	20004d30 	.word	0x20004d30
 8007f5c:	20004d1c 	.word	0x20004d1c
 8007f60:	20008298 	.word	0x20008298
 8007f64:	200082a0 	.word	0x200082a0

08007f68 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007f70:	4b2f      	ldr	r3, [pc, #188]	; (8008030 <tcp_timewait_input+0xc8>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d153      	bne.n	8008024 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <tcp_timewait_input+0x28>
 8007f82:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <tcp_timewait_input+0xcc>)
 8007f84:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007f88:	492b      	ldr	r1, [pc, #172]	; (8008038 <tcp_timewait_input+0xd0>)
 8007f8a:	482c      	ldr	r0, [pc, #176]	; (800803c <tcp_timewait_input+0xd4>)
 8007f8c:	f006 fae8 	bl	800e560 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007f90:	4b27      	ldr	r3, [pc, #156]	; (8008030 <tcp_timewait_input+0xc8>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d02a      	beq.n	8007ff2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007f9c:	4b28      	ldr	r3, [pc, #160]	; (8008040 <tcp_timewait_input+0xd8>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	db2d      	blt.n	8008006 <tcp_timewait_input+0x9e>
 8007faa:	4b25      	ldr	r3, [pc, #148]	; (8008040 <tcp_timewait_input+0xd8>)
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007fb6:	440b      	add	r3, r1
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc23      	bgt.n	8008006 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fbe:	4b21      	ldr	r3, [pc, #132]	; (8008044 <tcp_timewait_input+0xdc>)
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <tcp_timewait_input+0xe0>)
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <tcp_timewait_input+0xd8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fce:	4b1f      	ldr	r3, [pc, #124]	; (800804c <tcp_timewait_input+0xe4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fd6:	4a1d      	ldr	r2, [pc, #116]	; (800804c <tcp_timewait_input+0xe4>)
 8007fd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fda:	8812      	ldrh	r2, [r2, #0]
 8007fdc:	b292      	uxth	r2, r2
 8007fde:	9202      	str	r2, [sp, #8]
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <tcp_timewait_input+0xe8>)
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <tcp_timewait_input+0xec>)
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f002 fe72 	bl	800acd4 <tcp_rst>
      return;
 8007ff0:	e01b      	b.n	800802a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <tcp_timewait_input+0xc8>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007ffe:	4b16      	ldr	r3, [pc, #88]	; (8008058 <tcp_timewait_input+0xf0>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <tcp_timewait_input+0xe0>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8b5b      	ldrh	r3, [r3, #26]
 8008012:	f043 0302 	orr.w	r3, r3, #2
 8008016:	b29a      	uxth	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f002 f8a5 	bl	800a16c <tcp_output>
  }
  return;
 8008022:	e001      	b.n	8008028 <tcp_timewait_input+0xc0>
    return;
 8008024:	bf00      	nop
 8008026:	e000      	b.n	800802a <tcp_timewait_input+0xc2>
  return;
 8008028:	bf00      	nop
}
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200082d0 	.word	0x200082d0
 8008034:	080105f4 	.word	0x080105f4
 8008038:	0801080c 	.word	0x0801080c
 800803c:	08010640 	.word	0x08010640
 8008040:	200082c4 	.word	0x200082c4
 8008044:	200082c8 	.word	0x200082c8
 8008048:	200082ce 	.word	0x200082ce
 800804c:	200082b4 	.word	0x200082b4
 8008050:	20004d2c 	.word	0x20004d2c
 8008054:	20004d30 	.word	0x20004d30
 8008058:	2000828c 	.word	0x2000828c

0800805c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b08d      	sub	sp, #52	; 0x34
 8008060:	af04      	add	r7, sp, #16
 8008062:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <tcp_process+0x24>
 8008072:	4b9d      	ldr	r3, [pc, #628]	; (80082e8 <tcp_process+0x28c>)
 8008074:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008078:	499c      	ldr	r1, [pc, #624]	; (80082ec <tcp_process+0x290>)
 800807a:	489d      	ldr	r0, [pc, #628]	; (80082f0 <tcp_process+0x294>)
 800807c:	f006 fa70 	bl	800e560 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008080:	4b9c      	ldr	r3, [pc, #624]	; (80082f4 <tcp_process+0x298>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d04e      	beq.n	800812a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	7d1b      	ldrb	r3, [r3, #20]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d108      	bne.n	80080a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008098:	4b97      	ldr	r3, [pc, #604]	; (80082f8 <tcp_process+0x29c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d123      	bne.n	80080e8 <tcp_process+0x8c>
        acceptable = 1;
 80080a0:	2301      	movs	r3, #1
 80080a2:	76fb      	strb	r3, [r7, #27]
 80080a4:	e020      	b.n	80080e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080aa:	4b94      	ldr	r3, [pc, #592]	; (80082fc <tcp_process+0x2a0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d102      	bne.n	80080b8 <tcp_process+0x5c>
        acceptable = 1;
 80080b2:	2301      	movs	r3, #1
 80080b4:	76fb      	strb	r3, [r7, #27]
 80080b6:	e017      	b.n	80080e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80080b8:	4b90      	ldr	r3, [pc, #576]	; (80082fc <tcp_process+0x2a0>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	db10      	blt.n	80080e8 <tcp_process+0x8c>
 80080c6:	4b8d      	ldr	r3, [pc, #564]	; (80082fc <tcp_process+0x2a0>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80080d2:	440b      	add	r3, r1
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dc06      	bgt.n	80080e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	8b5b      	ldrh	r3, [r3, #26]
 80080de:	f043 0302 	orr.w	r3, r3, #2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80080e8:	7efb      	ldrb	r3, [r7, #27]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01b      	beq.n	8008126 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	7d1b      	ldrb	r3, [r3, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <tcp_process+0xa8>
 80080f6:	4b7c      	ldr	r3, [pc, #496]	; (80082e8 <tcp_process+0x28c>)
 80080f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80080fc:	4980      	ldr	r1, [pc, #512]	; (8008300 <tcp_process+0x2a4>)
 80080fe:	487c      	ldr	r0, [pc, #496]	; (80082f0 <tcp_process+0x294>)
 8008100:	f006 fa2e 	bl	800e560 <iprintf>
      recv_flags |= TF_RESET;
 8008104:	4b7f      	ldr	r3, [pc, #508]	; (8008304 <tcp_process+0x2a8>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f043 0308 	orr.w	r3, r3, #8
 800810c:	b2da      	uxtb	r2, r3
 800810e:	4b7d      	ldr	r3, [pc, #500]	; (8008304 <tcp_process+0x2a8>)
 8008110:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	8b5b      	ldrh	r3, [r3, #26]
 8008116:	f023 0301 	bic.w	r3, r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008120:	f06f 030d 	mvn.w	r3, #13
 8008124:	e37a      	b.n	800881c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	e378      	b.n	800881c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800812a:	4b72      	ldr	r3, [pc, #456]	; (80082f4 <tcp_process+0x298>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d010      	beq.n	8008158 <tcp_process+0xfc>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	7d1b      	ldrb	r3, [r3, #20]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d00c      	beq.n	8008158 <tcp_process+0xfc>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7d1b      	ldrb	r3, [r3, #20]
 8008142:	2b03      	cmp	r3, #3
 8008144:	d008      	beq.n	8008158 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8b5b      	ldrh	r3, [r3, #26]
 800814a:	f043 0302 	orr.w	r3, r3, #2
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	e361      	b.n	800881c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8b5b      	ldrh	r3, [r3, #26]
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008164:	4b68      	ldr	r3, [pc, #416]	; (8008308 <tcp_process+0x2ac>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 fc2f 	bl	80099e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	7d1b      	ldrb	r3, [r3, #20]
 8008186:	3b02      	subs	r3, #2
 8008188:	2b07      	cmp	r3, #7
 800818a:	f200 8337 	bhi.w	80087fc <tcp_process+0x7a0>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <tcp_process+0x138>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081b5 	.word	0x080081b5
 8008198:	080083e5 	.word	0x080083e5
 800819c:	0800855d 	.word	0x0800855d
 80081a0:	08008587 	.word	0x08008587
 80081a4:	080086ab 	.word	0x080086ab
 80081a8:	0800855d 	.word	0x0800855d
 80081ac:	08008737 	.word	0x08008737
 80081b0:	080087c7 	.word	0x080087c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80081b4:	4b4f      	ldr	r3, [pc, #316]	; (80082f4 <tcp_process+0x298>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 80e4 	beq.w	800838a <tcp_process+0x32e>
 80081c2:	4b4c      	ldr	r3, [pc, #304]	; (80082f4 <tcp_process+0x298>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80dd 	beq.w	800838a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	4b48      	ldr	r3, [pc, #288]	; (80082f8 <tcp_process+0x29c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	f040 80d5 	bne.w	800838a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80081e0:	4b46      	ldr	r3, [pc, #280]	; (80082fc <tcp_process+0x2a0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80081f2:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <tcp_process+0x29c>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80081fa:	4b44      	ldr	r3, [pc, #272]	; (800830c <tcp_process+0x2b0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	89db      	ldrh	r3, [r3, #14]
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008214:	4b39      	ldr	r3, [pc, #228]	; (80082fc <tcp_process+0x2a0>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	1e5a      	subs	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2204      	movs	r2, #4
 8008222:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	4618      	mov	r0, r3
 800822e:	f004 feab 	bl	800cf88 <ip4_route>
 8008232:	4601      	mov	r1, r0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	461a      	mov	r2, r3
 800823a:	4620      	mov	r0, r4
 800823c:	f7ff f88c 	bl	8007358 <tcp_eff_send_mss_netif>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800824c:	009a      	lsls	r2, r3, #2
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	f241 111c 	movw	r1, #4380	; 0x111c
 8008258:	428b      	cmp	r3, r1
 800825a:	bf38      	it	cc
 800825c:	460b      	movcc	r3, r1
 800825e:	429a      	cmp	r2, r3
 8008260:	d204      	bcs.n	800826c <tcp_process+0x210>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	b29b      	uxth	r3, r3
 800826a:	e00d      	b.n	8008288 <tcp_process+0x22c>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	f241 121c 	movw	r2, #4380	; 0x111c
 8008276:	4293      	cmp	r3, r2
 8008278:	d904      	bls.n	8008284 <tcp_process+0x228>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	e001      	b.n	8008288 <tcp_process+0x22c>
 8008284:	f241 131c 	movw	r3, #4380	; 0x111c
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <tcp_process+0x24a>
 8008298:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <tcp_process+0x28c>)
 800829a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800829e:	491c      	ldr	r1, [pc, #112]	; (8008310 <tcp_process+0x2b4>)
 80082a0:	4813      	ldr	r0, [pc, #76]	; (80082f0 <tcp_process+0x294>)
 80082a2:	f006 f95d 	bl	800e560 <iprintf>
        --pcb->snd_queuelen;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d12a      	bne.n	8008318 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <tcp_process+0x280>
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <tcp_process+0x28c>)
 80082d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80082d4:	490f      	ldr	r1, [pc, #60]	; (8008314 <tcp_process+0x2b8>)
 80082d6:	4806      	ldr	r0, [pc, #24]	; (80082f0 <tcp_process+0x294>)
 80082d8:	f006 f942 	bl	800e560 <iprintf>
          pcb->unsent = rseg->next;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80082e4:	e01c      	b.n	8008320 <tcp_process+0x2c4>
 80082e6:	bf00      	nop
 80082e8:	080105f4 	.word	0x080105f4
 80082ec:	0801082c 	.word	0x0801082c
 80082f0:	08010640 	.word	0x08010640
 80082f4:	200082d0 	.word	0x200082d0
 80082f8:	200082c8 	.word	0x200082c8
 80082fc:	200082c4 	.word	0x200082c4
 8008300:	08010848 	.word	0x08010848
 8008304:	200082d1 	.word	0x200082d1
 8008308:	2000828c 	.word	0x2000828c
 800830c:	200082b4 	.word	0x200082b4
 8008310:	08010868 	.word	0x08010868
 8008314:	08010880 	.word	0x08010880
        } else {
          pcb->unacked = rseg->next;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008320:	69f8      	ldr	r0, [r7, #28]
 8008322:	f7fe fd22 	bl	8006d6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008334:	861a      	strh	r2, [r3, #48]	; 0x30
 8008336:	e006      	b.n	8008346 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <tcp_process+0x30a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6910      	ldr	r0, [r2, #16]
 800835a:	2200      	movs	r2, #0
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4798      	blx	r3
 8008360:	4603      	mov	r3, r0
 8008362:	76bb      	strb	r3, [r7, #26]
 8008364:	e001      	b.n	800836a <tcp_process+0x30e>
 8008366:	2300      	movs	r3, #0
 8008368:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800836a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800836e:	f113 0f0d 	cmn.w	r3, #13
 8008372:	d102      	bne.n	800837a <tcp_process+0x31e>
          return ERR_ABRT;
 8008374:	f06f 030c 	mvn.w	r3, #12
 8008378:	e250      	b.n	800881c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	8b5b      	ldrh	r3, [r3, #26]
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008388:	e23a      	b.n	8008800 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800838a:	4b98      	ldr	r3, [pc, #608]	; (80085ec <tcp_process+0x590>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f003 0310 	and.w	r3, r3, #16
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8234 	beq.w	8008800 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008398:	4b95      	ldr	r3, [pc, #596]	; (80085f0 <tcp_process+0x594>)
 800839a:	6819      	ldr	r1, [r3, #0]
 800839c:	4b95      	ldr	r3, [pc, #596]	; (80085f4 <tcp_process+0x598>)
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	4b95      	ldr	r3, [pc, #596]	; (80085f8 <tcp_process+0x59c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083a8:	4b94      	ldr	r3, [pc, #592]	; (80085fc <tcp_process+0x5a0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ac:	885b      	ldrh	r3, [r3, #2]
 80083ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083b0:	4a92      	ldr	r2, [pc, #584]	; (80085fc <tcp_process+0x5a0>)
 80083b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083b4:	8812      	ldrh	r2, [r2, #0]
 80083b6:	b292      	uxth	r2, r2
 80083b8:	9202      	str	r2, [sp, #8]
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	4b90      	ldr	r3, [pc, #576]	; (8008600 <tcp_process+0x5a4>)
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	4b90      	ldr	r3, [pc, #576]	; (8008604 <tcp_process+0x5a8>)
 80083c2:	4602      	mov	r2, r0
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f002 fc85 	bl	800acd4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083d0:	2b05      	cmp	r3, #5
 80083d2:	f200 8215 	bhi.w	8008800 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 fa51 	bl	800a884 <tcp_rexmit_rto>
      break;
 80083e2:	e20d      	b.n	8008800 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80083e4:	4b81      	ldr	r3, [pc, #516]	; (80085ec <tcp_process+0x590>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80a1 	beq.w	8008534 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80083f2:	4b7f      	ldr	r3, [pc, #508]	; (80085f0 <tcp_process+0x594>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	db7e      	blt.n	8008500 <tcp_process+0x4a4>
 8008402:	4b7b      	ldr	r3, [pc, #492]	; (80085f0 <tcp_process+0x594>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	dc77      	bgt.n	8008500 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2204      	movs	r2, #4
 8008414:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d102      	bne.n	8008424 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800841e:	23fa      	movs	r3, #250	; 0xfa
 8008420:	76bb      	strb	r3, [r7, #26]
 8008422:	e01d      	b.n	8008460 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <tcp_process+0x3e0>
 800842e:	4b76      	ldr	r3, [pc, #472]	; (8008608 <tcp_process+0x5ac>)
 8008430:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008434:	4975      	ldr	r1, [pc, #468]	; (800860c <tcp_process+0x5b0>)
 8008436:	4876      	ldr	r0, [pc, #472]	; (8008610 <tcp_process+0x5b4>)
 8008438:	f006 f892 	bl	800e560 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <tcp_process+0x400>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6910      	ldr	r0, [r2, #16]
 8008450:	2200      	movs	r2, #0
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4798      	blx	r3
 8008456:	4603      	mov	r3, r0
 8008458:	76bb      	strb	r3, [r7, #26]
 800845a:	e001      	b.n	8008460 <tcp_process+0x404>
 800845c:	23f0      	movs	r3, #240	; 0xf0
 800845e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008460:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008468:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800846c:	f113 0f0d 	cmn.w	r3, #13
 8008470:	d002      	beq.n	8008478 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7fd ff8e 	bl	8006394 <tcp_abort>
            }
            return ERR_ABRT;
 8008478:	f06f 030c 	mvn.w	r3, #12
 800847c:	e1ce      	b.n	800881c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fae0 	bl	8008a44 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008484:	4b63      	ldr	r3, [pc, #396]	; (8008614 <tcp_process+0x5b8>)
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <tcp_process+0x43c>
            recv_acked--;
 800848c:	4b61      	ldr	r3, [pc, #388]	; (8008614 <tcp_process+0x5b8>)
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	4b5f      	ldr	r3, [pc, #380]	; (8008614 <tcp_process+0x5b8>)
 8008496:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800849c:	009a      	lsls	r2, r3, #2
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf38      	it	cc
 80084ac:	460b      	movcc	r3, r1
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d204      	bcs.n	80084bc <tcp_process+0x460>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	e00d      	b.n	80084d8 <tcp_process+0x47c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d904      	bls.n	80084d4 <tcp_process+0x478>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	e001      	b.n	80084d8 <tcp_process+0x47c>
 80084d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80084de:	4b4e      	ldr	r3, [pc, #312]	; (8008618 <tcp_process+0x5bc>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d037      	beq.n	800855a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	8b5b      	ldrh	r3, [r3, #26]
 80084ee:	f043 0302 	orr.w	r3, r3, #2
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2207      	movs	r2, #7
 80084fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80084fe:	e02c      	b.n	800855a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008500:	4b3b      	ldr	r3, [pc, #236]	; (80085f0 <tcp_process+0x594>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <tcp_process+0x598>)
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	4b3b      	ldr	r3, [pc, #236]	; (80085f8 <tcp_process+0x59c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008510:	4b3a      	ldr	r3, [pc, #232]	; (80085fc <tcp_process+0x5a0>)
 8008512:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008518:	4a38      	ldr	r2, [pc, #224]	; (80085fc <tcp_process+0x5a0>)
 800851a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800851c:	8812      	ldrh	r2, [r2, #0]
 800851e:	b292      	uxth	r2, r2
 8008520:	9202      	str	r2, [sp, #8]
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	4b36      	ldr	r3, [pc, #216]	; (8008600 <tcp_process+0x5a4>)
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4b36      	ldr	r3, [pc, #216]	; (8008604 <tcp_process+0x5a8>)
 800852a:	4602      	mov	r2, r0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 fbd1 	bl	800acd4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008532:	e167      	b.n	8008804 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008534:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <tcp_process+0x590>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8161 	beq.w	8008804 <tcp_process+0x7a8>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	4b2b      	ldr	r3, [pc, #172]	; (80085f8 <tcp_process+0x59c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	f040 8159 	bne.w	8008804 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f002 f9b8 	bl	800a8c8 <tcp_rexmit>
      break;
 8008558:	e154      	b.n	8008804 <tcp_process+0x7a8>
 800855a:	e153      	b.n	8008804 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa71 	bl	8008a44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008562:	4b2d      	ldr	r3, [pc, #180]	; (8008618 <tcp_process+0x5bc>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 814c 	beq.w	8008808 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	8b5b      	ldrh	r3, [r3, #26]
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	b29a      	uxth	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2207      	movs	r2, #7
 8008582:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008584:	e140      	b.n	8008808 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa5c 	bl	8008a44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <tcp_process+0x5bc>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b00      	cmp	r3, #0
 8008596:	d071      	beq.n	800867c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008598:	4b14      	ldr	r3, [pc, #80]	; (80085ec <tcp_process+0x590>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	f003 0310 	and.w	r3, r3, #16
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d060      	beq.n	8008666 <tcp_process+0x60a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085a8:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <tcp_process+0x594>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d15a      	bne.n	8008666 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d156      	bne.n	8008666 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8b5b      	ldrh	r3, [r3, #26]
 80085bc:	f043 0302 	orr.w	r3, r3, #2
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fe fdbc 	bl	8007144 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80085cc:	4b13      	ldr	r3, [pc, #76]	; (800861c <tcp_process+0x5c0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d105      	bne.n	80085e2 <tcp_process+0x586>
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <tcp_process+0x5c0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a0f      	ldr	r2, [pc, #60]	; (800861c <tcp_process+0x5c0>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	e02e      	b.n	8008640 <tcp_process+0x5e4>
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <tcp_process+0x5c0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e027      	b.n	800863a <tcp_process+0x5de>
 80085ea:	bf00      	nop
 80085ec:	200082d0 	.word	0x200082d0
 80085f0:	200082c8 	.word	0x200082c8
 80085f4:	200082ce 	.word	0x200082ce
 80085f8:	200082c4 	.word	0x200082c4
 80085fc:	200082b4 	.word	0x200082b4
 8008600:	20004d2c 	.word	0x20004d2c
 8008604:	20004d30 	.word	0x20004d30
 8008608:	080105f4 	.word	0x080105f4
 800860c:	08010894 	.word	0x08010894
 8008610:	08010640 	.word	0x08010640
 8008614:	200082cc 	.word	0x200082cc
 8008618:	200082d1 	.word	0x200082d1
 800861c:	20008298 	.word	0x20008298
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d104      	bne.n	8008634 <tcp_process+0x5d8>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	e005      	b.n	8008640 <tcp_process+0x5e4>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1ef      	bne.n	8008620 <tcp_process+0x5c4>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	60da      	str	r2, [r3, #12]
 8008646:	4b77      	ldr	r3, [pc, #476]	; (8008824 <tcp_process+0x7c8>)
 8008648:	2201      	movs	r2, #1
 800864a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	220a      	movs	r2, #10
 8008650:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008652:	4b75      	ldr	r3, [pc, #468]	; (8008828 <tcp_process+0x7cc>)
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]
 800865a:	4a73      	ldr	r2, [pc, #460]	; (8008828 <tcp_process+0x7cc>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	f002 fcfa 	bl	800b058 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008664:	e0d2      	b.n	800880c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	8b5b      	ldrh	r3, [r3, #26]
 800866a:	f043 0302 	orr.w	r3, r3, #2
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2208      	movs	r2, #8
 8008678:	751a      	strb	r2, [r3, #20]
      break;
 800867a:	e0c7      	b.n	800880c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800867c:	4b6b      	ldr	r3, [pc, #428]	; (800882c <tcp_process+0x7d0>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80c1 	beq.w	800880c <tcp_process+0x7b0>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800868e:	4b68      	ldr	r3, [pc, #416]	; (8008830 <tcp_process+0x7d4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	f040 80ba 	bne.w	800880c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 80b5 	bne.w	800880c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2206      	movs	r2, #6
 80086a6:	751a      	strb	r2, [r3, #20]
      break;
 80086a8:	e0b0      	b.n	800880c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9ca 	bl	8008a44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80086b0:	4b60      	ldr	r3, [pc, #384]	; (8008834 <tcp_process+0x7d8>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80a9 	beq.w	8008810 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	8b5b      	ldrh	r3, [r3, #26]
 80086c2:	f043 0302 	orr.w	r3, r3, #2
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7fe fd39 	bl	8007144 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80086d2:	4b59      	ldr	r3, [pc, #356]	; (8008838 <tcp_process+0x7dc>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d105      	bne.n	80086e8 <tcp_process+0x68c>
 80086dc:	4b56      	ldr	r3, [pc, #344]	; (8008838 <tcp_process+0x7dc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	4a55      	ldr	r2, [pc, #340]	; (8008838 <tcp_process+0x7dc>)
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	e013      	b.n	8008710 <tcp_process+0x6b4>
 80086e8:	4b53      	ldr	r3, [pc, #332]	; (8008838 <tcp_process+0x7dc>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	e00c      	b.n	800870a <tcp_process+0x6ae>
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d104      	bne.n	8008704 <tcp_process+0x6a8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	e005      	b.n	8008710 <tcp_process+0x6b4>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1ef      	bne.n	80086f0 <tcp_process+0x694>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	4b43      	ldr	r3, [pc, #268]	; (8008824 <tcp_process+0x7c8>)
 8008718:	2201      	movs	r2, #1
 800871a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	220a      	movs	r2, #10
 8008720:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008722:	4b41      	ldr	r3, [pc, #260]	; (8008828 <tcp_process+0x7cc>)
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	4a3f      	ldr	r2, [pc, #252]	; (8008828 <tcp_process+0x7cc>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	f002 fc92 	bl	800b058 <tcp_timer_needed>
      }
      break;
 8008734:	e06c      	b.n	8008810 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f984 	bl	8008a44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800873c:	4b3b      	ldr	r3, [pc, #236]	; (800882c <tcp_process+0x7d0>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b00      	cmp	r3, #0
 8008746:	d065      	beq.n	8008814 <tcp_process+0x7b8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800874c:	4b38      	ldr	r3, [pc, #224]	; (8008830 <tcp_process+0x7d4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d15f      	bne.n	8008814 <tcp_process+0x7b8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d15b      	bne.n	8008814 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fe fcf1 	bl	8007144 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008762:	4b35      	ldr	r3, [pc, #212]	; (8008838 <tcp_process+0x7dc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d105      	bne.n	8008778 <tcp_process+0x71c>
 800876c:	4b32      	ldr	r3, [pc, #200]	; (8008838 <tcp_process+0x7dc>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	4a31      	ldr	r2, [pc, #196]	; (8008838 <tcp_process+0x7dc>)
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e013      	b.n	80087a0 <tcp_process+0x744>
 8008778:	4b2f      	ldr	r3, [pc, #188]	; (8008838 <tcp_process+0x7dc>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e00c      	b.n	800879a <tcp_process+0x73e>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d104      	bne.n	8008794 <tcp_process+0x738>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	e005      	b.n	80087a0 <tcp_process+0x744>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1ef      	bne.n	8008780 <tcp_process+0x724>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	60da      	str	r2, [r3, #12]
 80087a6:	4b1f      	ldr	r3, [pc, #124]	; (8008824 <tcp_process+0x7c8>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	220a      	movs	r2, #10
 80087b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80087b2:	4b1d      	ldr	r3, [pc, #116]	; (8008828 <tcp_process+0x7cc>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	4a1b      	ldr	r2, [pc, #108]	; (8008828 <tcp_process+0x7cc>)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	f002 fc4a 	bl	800b058 <tcp_timer_needed>
      }
      break;
 80087c4:	e026      	b.n	8008814 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f93c 	bl	8008a44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80087cc:	4b17      	ldr	r3, [pc, #92]	; (800882c <tcp_process+0x7d0>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 0310 	and.w	r3, r3, #16
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01f      	beq.n	8008818 <tcp_process+0x7bc>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087dc:	4b14      	ldr	r3, [pc, #80]	; (8008830 <tcp_process+0x7d4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d119      	bne.n	8008818 <tcp_process+0x7bc>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d115      	bne.n	8008818 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80087ec:	4b11      	ldr	r3, [pc, #68]	; (8008834 <tcp_process+0x7d8>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f043 0310 	orr.w	r3, r3, #16
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <tcp_process+0x7d8>)
 80087f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80087fa:	e00d      	b.n	8008818 <tcp_process+0x7bc>
    default:
      break;
 80087fc:	bf00      	nop
 80087fe:	e00c      	b.n	800881a <tcp_process+0x7be>
      break;
 8008800:	bf00      	nop
 8008802:	e00a      	b.n	800881a <tcp_process+0x7be>
      break;
 8008804:	bf00      	nop
 8008806:	e008      	b.n	800881a <tcp_process+0x7be>
      break;
 8008808:	bf00      	nop
 800880a:	e006      	b.n	800881a <tcp_process+0x7be>
      break;
 800880c:	bf00      	nop
 800880e:	e004      	b.n	800881a <tcp_process+0x7be>
      break;
 8008810:	bf00      	nop
 8008812:	e002      	b.n	800881a <tcp_process+0x7be>
      break;
 8008814:	bf00      	nop
 8008816:	e000      	b.n	800881a <tcp_process+0x7be>
      break;
 8008818:	bf00      	nop
  }
  return ERR_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3724      	adds	r7, #36	; 0x24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd90      	pop	{r4, r7, pc}
 8008824:	200082a0 	.word	0x200082a0
 8008828:	2000829c 	.word	0x2000829c
 800882c:	200082d0 	.word	0x200082d0
 8008830:	200082c8 	.word	0x200082c8
 8008834:	200082d1 	.word	0x200082d1
 8008838:	20008298 	.word	0x20008298

0800883c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <tcp_oos_insert_segment+0x1e>
 800884c:	4b3b      	ldr	r3, [pc, #236]	; (800893c <tcp_oos_insert_segment+0x100>)
 800884e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008852:	493b      	ldr	r1, [pc, #236]	; (8008940 <tcp_oos_insert_segment+0x104>)
 8008854:	483b      	ldr	r0, [pc, #236]	; (8008944 <tcp_oos_insert_segment+0x108>)
 8008856:	f005 fe83 	bl	800e560 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	899b      	ldrh	r3, [r3, #12]
 8008860:	b29b      	uxth	r3, r3
 8008862:	4618      	mov	r0, r3
 8008864:	f7fb fca0 	bl	80041a8 <lwip_htons>
 8008868:	4603      	mov	r3, r0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d028      	beq.n	80088c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008874:	6838      	ldr	r0, [r7, #0]
 8008876:	f7fe fa63 	bl	8006d40 <tcp_segs_free>
    next = NULL;
 800887a:	2300      	movs	r3, #0
 800887c:	603b      	str	r3, [r7, #0]
 800887e:	e056      	b.n	800892e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	899b      	ldrh	r3, [r3, #12]
 8008886:	b29b      	uxth	r3, r3
 8008888:	4618      	mov	r0, r3
 800888a:	f7fb fc8d 	bl	80041a8 <lwip_htons>
 800888e:	4603      	mov	r3, r0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00d      	beq.n	80088b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	899b      	ldrh	r3, [r3, #12]
 80088a0:	b29c      	uxth	r4, r3
 80088a2:	2001      	movs	r0, #1
 80088a4:	f7fb fc80 	bl	80041a8 <lwip_htons>
 80088a8:	4603      	mov	r3, r0
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	4322      	orrs	r2, r4
 80088b2:	b292      	uxth	r2, r2
 80088b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f7fe fa52 	bl	8006d6a <tcp_seg_free>
    while (next &&
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	891b      	ldrh	r3, [r3, #8]
 80088d0:	461a      	mov	r2, r3
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <tcp_oos_insert_segment+0x10c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	441a      	add	r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	8909      	ldrh	r1, [r1, #8]
 80088e2:	440b      	add	r3, r1
 80088e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	daca      	bge.n	8008880 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01e      	beq.n	800892e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	891b      	ldrh	r3, [r3, #8]
 80088f4:	461a      	mov	r2, r3
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <tcp_oos_insert_segment+0x10c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	441a      	add	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008904:	2b00      	cmp	r3, #0
 8008906:	dd12      	ble.n	800892e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b29a      	uxth	r2, r3
 8008910:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <tcp_oos_insert_segment+0x10c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	891b      	ldrh	r3, [r3, #8]
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fc fe15 	bl	8005558 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	bd90      	pop	{r4, r7, pc}
 800893c:	080105f4 	.word	0x080105f4
 8008940:	080108b4 	.word	0x080108b4
 8008944:	08010640 	.word	0x08010640
 8008948:	200082c4 	.word	0x200082c4

0800894c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800895a:	e03e      	b.n	80089da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd f802 	bl	8005974 <pbuf_clen>
 8008970:	4603      	mov	r3, r0
 8008972:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800897a:	8a7a      	ldrh	r2, [r7, #18]
 800897c:	429a      	cmp	r2, r3
 800897e:	d906      	bls.n	800898e <tcp_free_acked_segments+0x42>
 8008980:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <tcp_free_acked_segments+0xe0>)
 8008982:	f240 4257 	movw	r2, #1111	; 0x457
 8008986:	492a      	ldr	r1, [pc, #168]	; (8008a30 <tcp_free_acked_segments+0xe4>)
 8008988:	482a      	ldr	r0, [pc, #168]	; (8008a34 <tcp_free_acked_segments+0xe8>)
 800898a:	f005 fde9 	bl	800e560 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008994:	8a7b      	ldrh	r3, [r7, #18]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	891a      	ldrh	r2, [r3, #8]
 80089a4:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <tcp_free_acked_segments+0xec>)
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	4413      	add	r3, r2
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <tcp_free_acked_segments+0xec>)
 80089ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f7fe f9da 	bl	8006d6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <tcp_free_acked_segments+0x8e>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <tcp_free_acked_segments+0x8e>
 80089cc:	4b17      	ldr	r3, [pc, #92]	; (8008a2c <tcp_free_acked_segments+0xe0>)
 80089ce:	f240 4261 	movw	r2, #1121	; 0x461
 80089d2:	491a      	ldr	r1, [pc, #104]	; (8008a3c <tcp_free_acked_segments+0xf0>)
 80089d4:	4817      	ldr	r0, [pc, #92]	; (8008a34 <tcp_free_acked_segments+0xe8>)
 80089d6:	f005 fdc3 	bl	800e560 <iprintf>
  while (seg_list != NULL &&
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d020      	beq.n	8008a22 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fb fbf3 	bl	80041d2 <lwip_htonl>
 80089ec:	4604      	mov	r4, r0
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	891b      	ldrh	r3, [r3, #8]
 80089f2:	461d      	mov	r5, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	899b      	ldrh	r3, [r3, #12]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fb fbd3 	bl	80041a8 <lwip_htons>
 8008a02:	4603      	mov	r3, r0
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <tcp_free_acked_segments+0xc6>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <tcp_free_acked_segments+0xc8>
 8008a12:	2300      	movs	r3, #0
 8008a14:	442b      	add	r3, r5
 8008a16:	18e2      	adds	r2, r4, r3
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <tcp_free_acked_segments+0xf4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd9c      	ble.n	800895c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008a22:	68bb      	ldr	r3, [r7, #8]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a2c:	080105f4 	.word	0x080105f4
 8008a30:	080108dc 	.word	0x080108dc
 8008a34:	08010640 	.word	0x08010640
 8008a38:	200082cc 	.word	0x200082cc
 8008a3c:	08010904 	.word	0x08010904
 8008a40:	200082c8 	.word	0x200082c8

08008a44 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008a44:	b5b0      	push	{r4, r5, r7, lr}
 8008a46:	b094      	sub	sp, #80	; 0x50
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <tcp_receive+0x20>
 8008a56:	4b91      	ldr	r3, [pc, #580]	; (8008c9c <tcp_receive+0x258>)
 8008a58:	f240 427b 	movw	r2, #1147	; 0x47b
 8008a5c:	4990      	ldr	r1, [pc, #576]	; (8008ca0 <tcp_receive+0x25c>)
 8008a5e:	4891      	ldr	r0, [pc, #580]	; (8008ca4 <tcp_receive+0x260>)
 8008a60:	f005 fd7e 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7d1b      	ldrb	r3, [r3, #20]
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d806      	bhi.n	8008a7a <tcp_receive+0x36>
 8008a6c:	4b8b      	ldr	r3, [pc, #556]	; (8008c9c <tcp_receive+0x258>)
 8008a6e:	f240 427c 	movw	r2, #1148	; 0x47c
 8008a72:	498d      	ldr	r1, [pc, #564]	; (8008ca8 <tcp_receive+0x264>)
 8008a74:	488b      	ldr	r0, [pc, #556]	; (8008ca4 <tcp_receive+0x260>)
 8008a76:	f005 fd73 	bl	800e560 <iprintf>

  if (flags & TCP_ACK) {
 8008a7a:	4b8c      	ldr	r3, [pc, #560]	; (8008cac <tcp_receive+0x268>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 8264 	beq.w	8008f50 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a94:	4413      	add	r3, r2
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a9c:	4b84      	ldr	r3, [pc, #528]	; (8008cb0 <tcp_receive+0x26c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	db1b      	blt.n	8008ade <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aaa:	4b81      	ldr	r3, [pc, #516]	; (8008cb0 <tcp_receive+0x26c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d106      	bne.n	8008ac0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ab6:	4b7f      	ldr	r3, [pc, #508]	; (8008cb4 <tcp_receive+0x270>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db0e      	blt.n	8008ade <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ac4:	4b7b      	ldr	r3, [pc, #492]	; (8008cb4 <tcp_receive+0x270>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d125      	bne.n	8008b18 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008acc:	4b7a      	ldr	r3, [pc, #488]	; (8008cb8 <tcp_receive+0x274>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	89db      	ldrh	r3, [r3, #14]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d91c      	bls.n	8008b18 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008ade:	4b76      	ldr	r3, [pc, #472]	; (8008cb8 <tcp_receive+0x274>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	89db      	ldrh	r3, [r3, #14]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d205      	bcs.n	8008b08 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008b08:	4b69      	ldr	r3, [pc, #420]	; (8008cb0 <tcp_receive+0x26c>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008b10:	4b68      	ldr	r3, [pc, #416]	; (8008cb4 <tcp_receive+0x270>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008b18:	4b66      	ldr	r3, [pc, #408]	; (8008cb4 <tcp_receive+0x270>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dc58      	bgt.n	8008bd8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008b26:	4b65      	ldr	r3, [pc, #404]	; (8008cbc <tcp_receive+0x278>)
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d14b      	bne.n	8008bc6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008b38:	4413      	add	r3, r2
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d142      	bne.n	8008bc6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	db3d      	blt.n	8008bc6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b4e:	4b59      	ldr	r3, [pc, #356]	; (8008cb4 <tcp_receive+0x270>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d137      	bne.n	8008bc6 <tcp_receive+0x182>
              found_dupack = 1;
 8008b56:	2301      	movs	r3, #1
 8008b58:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b60:	2bff      	cmp	r3, #255	; 0xff
 8008b62:	d007      	beq.n	8008b74 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d91b      	bls.n	8008bb6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b88:	4413      	add	r3, r2
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d30a      	bcc.n	8008bac <tcp_receive+0x168>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ba0:	4413      	add	r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008baa:	e004      	b.n	8008bb6 <tcp_receive+0x172>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d902      	bls.n	8008bc6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 feed 	bl	800a9a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f040 8161 	bne.w	8008e90 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bd6:	e15b      	b.n	8008e90 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008bd8:	4b36      	ldr	r3, [pc, #216]	; (8008cb4 <tcp_receive+0x270>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f2c0 814e 	blt.w	8008e86 <tcp_receive+0x442>
 8008bea:	4b32      	ldr	r3, [pc, #200]	; (8008cb4 <tcp_receive+0x270>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f300 8146 	bgt.w	8008e86 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	8b5b      	ldrh	r3, [r3, #26]
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d010      	beq.n	8008c28 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8b5b      	ldrh	r3, [r3, #26]
 8008c0a:	f023 0304 	bic.w	r3, r3, #4
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c36:	10db      	asrs	r3, r3, #3
 8008c38:	b21b      	sxth	r3, r3
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4413      	add	r3, r2
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	b21a      	sxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008c50:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <tcp_receive+0x270>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <tcp_receive+0x270>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	7d1b      	ldrb	r3, [r3, #20]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	f240 8097 	bls.w	8008da8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d245      	bcs.n	8008d16 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8b5b      	ldrh	r3, [r3, #26]
 8008c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d014      	beq.n	8008cc0 <tcp_receive+0x27c>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e013      	b.n	8008cc2 <tcp_receive+0x27e>
 8008c9a:	bf00      	nop
 8008c9c:	080105f4 	.word	0x080105f4
 8008ca0:	08010924 	.word	0x08010924
 8008ca4:	08010640 	.word	0x08010640
 8008ca8:	08010940 	.word	0x08010940
 8008cac:	200082d0 	.word	0x200082d0
 8008cb0:	200082c4 	.word	0x200082c4
 8008cb4:	200082c8 	.word	0x200082c8
 8008cb8:	200082b4 	.word	0x200082b4
 8008cbc:	200082ce 	.word	0x200082ce
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008cc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cd0:	fb12 f303 	smulbb	r3, r2, r3
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	bf28      	it	cs
 8008cdc:	4613      	movcs	r3, r2
 8008cde:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ce8:	4413      	add	r3, r2
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d309      	bcc.n	8008d0a <tcp_receive+0x2c6>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008cfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cfe:	4413      	add	r3, r2
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d08:	e04e      	b.n	8008da8 <tcp_receive+0x364>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d14:	e048      	b.n	8008da8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d1e:	4413      	add	r3, r2
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d309      	bcc.n	8008d40 <tcp_receive+0x2fc>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d34:	4413      	add	r3, r2
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008d3e:	e004      	b.n	8008d4a <tcp_receive+0x306>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d326      	bcc.n	8008da8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d7a:	4413      	add	r3, r2
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d30a      	bcc.n	8008d9e <tcp_receive+0x35a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d92:	4413      	add	r3, r2
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d9c:	e004      	b.n	8008da8 <tcp_receive+0x364>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008da4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db0:	4a98      	ldr	r2, [pc, #608]	; (8009014 <tcp_receive+0x5d0>)
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fdca 	bl	800894c <tcp_free_acked_segments>
 8008db8:	4602      	mov	r2, r0
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	4a94      	ldr	r2, [pc, #592]	; (8009018 <tcp_receive+0x5d4>)
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fdbf 	bl	800894c <tcp_free_acked_segments>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008de2:	861a      	strh	r2, [r3, #48]	; 0x30
 8008de4:	e002      	b.n	8008dec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d103      	bne.n	8008e02 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008e08:	4b84      	ldr	r3, [pc, #528]	; (800901c <tcp_receive+0x5d8>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	8b5b      	ldrh	r3, [r3, #26]
 8008e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d035      	beq.n	8008e8e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d118      	bne.n	8008e5c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00c      	beq.n	8008e4c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fb f9c7 	bl	80041d2 <lwip_htonl>
 8008e44:	4603      	mov	r3, r0
 8008e46:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc20      	bgt.n	8008e8e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8b5b      	ldrh	r3, [r3, #26]
 8008e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e5a:	e018      	b.n	8008e8e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fb f9b2 	bl	80041d2 <lwip_htonl>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	1ae3      	subs	r3, r4, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dc0b      	bgt.n	8008e8e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8b5b      	ldrh	r3, [r3, #26]
 8008e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e84:	e003      	b.n	8008e8e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 ff76 	bl	800ad78 <tcp_send_empty_ack>
 8008e8c:	e000      	b.n	8008e90 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e8e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d05b      	beq.n	8008f50 <tcp_receive+0x50c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9c:	4b60      	ldr	r3, [pc, #384]	; (8009020 <tcp_receive+0x5dc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da54      	bge.n	8008f50 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008ea6:	4b5f      	ldr	r3, [pc, #380]	; (8009024 <tcp_receive+0x5e0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008eba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ec4:	10db      	asrs	r3, r3, #3
 8008ec6:	b21b      	sxth	r3, r3
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ede:	4413      	add	r3, r2
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	b21a      	sxth	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008ee8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	da05      	bge.n	8008efc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008ef0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008efc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f06:	109b      	asrs	r3, r3, #2
 8008f08:	b21b      	sxth	r3, r3
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f20:	4413      	add	r3, r2
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	b21a      	sxth	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f30:	10db      	asrs	r3, r3, #3
 8008f32:	b21b      	sxth	r3, r3
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4413      	add	r3, r2
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	b21a      	sxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008f50:	4b35      	ldr	r3, [pc, #212]	; (8009028 <tcp_receive+0x5e4>)
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 84e2 	beq.w	800991e <tcp_receive+0xeda>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7d1b      	ldrb	r3, [r3, #20]
 8008f5e:	2b06      	cmp	r3, #6
 8008f60:	f200 84dd 	bhi.w	800991e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f68:	4b30      	ldr	r3, [pc, #192]	; (800902c <tcp_receive+0x5e8>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f2c0 808f 	blt.w	8009094 <tcp_receive+0x650>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f7a:	4b2b      	ldr	r3, [pc, #172]	; (8009028 <tcp_receive+0x5e4>)
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4b2a      	ldr	r3, [pc, #168]	; (800902c <tcp_receive+0x5e8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	440b      	add	r3, r1
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	3301      	adds	r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f300 8082 	bgt.w	8009094 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008f90:	4b27      	ldr	r3, [pc, #156]	; (8009030 <tcp_receive+0x5ec>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f9a:	4b24      	ldr	r3, [pc, #144]	; (800902c <tcp_receive+0x5e8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008fa2:	4b23      	ldr	r3, [pc, #140]	; (8009030 <tcp_receive+0x5ec>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <tcp_receive+0x574>
 8008faa:	4b22      	ldr	r3, [pc, #136]	; (8009034 <tcp_receive+0x5f0>)
 8008fac:	f240 5294 	movw	r2, #1428	; 0x594
 8008fb0:	4921      	ldr	r1, [pc, #132]	; (8009038 <tcp_receive+0x5f4>)
 8008fb2:	4822      	ldr	r0, [pc, #136]	; (800903c <tcp_receive+0x5f8>)
 8008fb4:	f005 fad4 	bl	800e560 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d906      	bls.n	8008fd0 <tcp_receive+0x58c>
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <tcp_receive+0x5f0>)
 8008fc4:	f240 5295 	movw	r2, #1429	; 0x595
 8008fc8:	491d      	ldr	r1, [pc, #116]	; (8009040 <tcp_receive+0x5fc>)
 8008fca:	481c      	ldr	r0, [pc, #112]	; (800903c <tcp_receive+0x5f8>)
 8008fcc:	f005 fac8 	bl	800e560 <iprintf>
      off = (u16_t)off32;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008fd6:	4b16      	ldr	r3, [pc, #88]	; (8009030 <tcp_receive+0x5ec>)
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	891b      	ldrh	r3, [r3, #8]
 8008fdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d906      	bls.n	8008ff2 <tcp_receive+0x5ae>
 8008fe4:	4b13      	ldr	r3, [pc, #76]	; (8009034 <tcp_receive+0x5f0>)
 8008fe6:	f240 5297 	movw	r2, #1431	; 0x597
 8008fea:	4916      	ldr	r1, [pc, #88]	; (8009044 <tcp_receive+0x600>)
 8008fec:	4813      	ldr	r0, [pc, #76]	; (800903c <tcp_receive+0x5f8>)
 8008fee:	f005 fab7 	bl	800e560 <iprintf>
      inseg.len -= off;
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <tcp_receive+0x5ec>)
 8008ff4:	891a      	ldrh	r2, [r3, #8]
 8008ff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <tcp_receive+0x5ec>)
 8009000:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009002:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <tcp_receive+0x5ec>)
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	891a      	ldrh	r2, [r3, #8]
 8009008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009010:	e02a      	b.n	8009068 <tcp_receive+0x624>
 8009012:	bf00      	nop
 8009014:	0801095c 	.word	0x0801095c
 8009018:	08010964 	.word	0x08010964
 800901c:	200082cc 	.word	0x200082cc
 8009020:	200082c8 	.word	0x200082c8
 8009024:	2000828c 	.word	0x2000828c
 8009028:	200082ce 	.word	0x200082ce
 800902c:	200082c4 	.word	0x200082c4
 8009030:	200082a4 	.word	0x200082a4
 8009034:	080105f4 	.word	0x080105f4
 8009038:	0801096c 	.word	0x0801096c
 800903c:	08010640 	.word	0x08010640
 8009040:	0801097c 	.word	0x0801097c
 8009044:	0801098c 	.word	0x0801098c
        off -= p->len;
 8009048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904a:	895b      	ldrh	r3, [r3, #10]
 800904c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009058:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800905a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800905c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905e:	2200      	movs	r2, #0
 8009060:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800906a:	895b      	ldrh	r3, [r3, #10]
 800906c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009070:	429a      	cmp	r2, r3
 8009072:	d8e9      	bhi.n	8009048 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009074:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009078:	4619      	mov	r1, r3
 800907a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800907c:	f7fc fb6c 	bl	8005758 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	4a91      	ldr	r2, [pc, #580]	; (80092cc <tcp_receive+0x888>)
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	4b91      	ldr	r3, [pc, #580]	; (80092d0 <tcp_receive+0x88c>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	4a8f      	ldr	r2, [pc, #572]	; (80092cc <tcp_receive+0x888>)
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009092:	e00d      	b.n	80090b0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009094:	4b8d      	ldr	r3, [pc, #564]	; (80092cc <tcp_receive+0x888>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	da06      	bge.n	80090b0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	8b5b      	ldrh	r3, [r3, #26]
 80090a6:	f043 0302 	orr.w	r3, r3, #2
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090b0:	4b86      	ldr	r3, [pc, #536]	; (80092cc <tcp_receive+0x888>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f2c0 842a 	blt.w	8009914 <tcp_receive+0xed0>
 80090c0:	4b82      	ldr	r3, [pc, #520]	; (80092cc <tcp_receive+0x888>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80090cc:	440b      	add	r3, r1
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	3301      	adds	r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f300 841e 	bgt.w	8009914 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090dc:	4b7b      	ldr	r3, [pc, #492]	; (80092cc <tcp_receive+0x888>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	f040 829a 	bne.w	800961a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80090e6:	4b7a      	ldr	r3, [pc, #488]	; (80092d0 <tcp_receive+0x88c>)
 80090e8:	891c      	ldrh	r4, [r3, #8]
 80090ea:	4b79      	ldr	r3, [pc, #484]	; (80092d0 <tcp_receive+0x88c>)
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	899b      	ldrh	r3, [r3, #12]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fb f858 	bl	80041a8 <lwip_htons>
 80090f8:	4603      	mov	r3, r0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <tcp_receive+0x6c4>
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <tcp_receive+0x6c6>
 8009108:	2300      	movs	r3, #0
 800910a:	4423      	add	r3, r4
 800910c:	b29a      	uxth	r2, r3
 800910e:	4b71      	ldr	r3, [pc, #452]	; (80092d4 <tcp_receive+0x890>)
 8009110:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009116:	4b6f      	ldr	r3, [pc, #444]	; (80092d4 <tcp_receive+0x890>)
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d275      	bcs.n	800920a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800911e:	4b6c      	ldr	r3, [pc, #432]	; (80092d0 <tcp_receive+0x88c>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	899b      	ldrh	r3, [r3, #12]
 8009124:	b29b      	uxth	r3, r3
 8009126:	4618      	mov	r0, r3
 8009128:	f7fb f83e 	bl	80041a8 <lwip_htons>
 800912c:	4603      	mov	r3, r0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01f      	beq.n	8009178 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009138:	4b65      	ldr	r3, [pc, #404]	; (80092d0 <tcp_receive+0x88c>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	b29b      	uxth	r3, r3
 8009140:	b21b      	sxth	r3, r3
 8009142:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009146:	b21c      	sxth	r4, r3
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <tcp_receive+0x88c>)
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	899b      	ldrh	r3, [r3, #12]
 800914e:	b29b      	uxth	r3, r3
 8009150:	4618      	mov	r0, r3
 8009152:	f7fb f829 	bl	80041a8 <lwip_htons>
 8009156:	4603      	mov	r3, r0
 8009158:	b2db      	uxtb	r3, r3
 800915a:	b29b      	uxth	r3, r3
 800915c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009160:	b29b      	uxth	r3, r3
 8009162:	4618      	mov	r0, r3
 8009164:	f7fb f820 	bl	80041a8 <lwip_htons>
 8009168:	4603      	mov	r3, r0
 800916a:	b21b      	sxth	r3, r3
 800916c:	4323      	orrs	r3, r4
 800916e:	b21a      	sxth	r2, r3
 8009170:	4b57      	ldr	r3, [pc, #348]	; (80092d0 <tcp_receive+0x88c>)
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	b292      	uxth	r2, r2
 8009176:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800917c:	4b54      	ldr	r3, [pc, #336]	; (80092d0 <tcp_receive+0x88c>)
 800917e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009180:	4b53      	ldr	r3, [pc, #332]	; (80092d0 <tcp_receive+0x88c>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	899b      	ldrh	r3, [r3, #12]
 8009186:	b29b      	uxth	r3, r3
 8009188:	4618      	mov	r0, r3
 800918a:	f7fb f80d 	bl	80041a8 <lwip_htons>
 800918e:	4603      	mov	r3, r0
 8009190:	b2db      	uxtb	r3, r3
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d005      	beq.n	80091a6 <tcp_receive+0x762>
            inseg.len -= 1;
 800919a:	4b4d      	ldr	r3, [pc, #308]	; (80092d0 <tcp_receive+0x88c>)
 800919c:	891b      	ldrh	r3, [r3, #8]
 800919e:	3b01      	subs	r3, #1
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	4b4b      	ldr	r3, [pc, #300]	; (80092d0 <tcp_receive+0x88c>)
 80091a4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80091a6:	4b4a      	ldr	r3, [pc, #296]	; (80092d0 <tcp_receive+0x88c>)
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	4a49      	ldr	r2, [pc, #292]	; (80092d0 <tcp_receive+0x88c>)
 80091ac:	8912      	ldrh	r2, [r2, #8]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fc f9d1 	bl	8005558 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80091b6:	4b46      	ldr	r3, [pc, #280]	; (80092d0 <tcp_receive+0x88c>)
 80091b8:	891c      	ldrh	r4, [r3, #8]
 80091ba:	4b45      	ldr	r3, [pc, #276]	; (80092d0 <tcp_receive+0x88c>)
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	899b      	ldrh	r3, [r3, #12]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fa fff0 	bl	80041a8 <lwip_htons>
 80091c8:	4603      	mov	r3, r0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 0303 	and.w	r3, r3, #3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <tcp_receive+0x794>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <tcp_receive+0x796>
 80091d8:	2300      	movs	r3, #0
 80091da:	4423      	add	r3, r4
 80091dc:	b29a      	uxth	r2, r3
 80091de:	4b3d      	ldr	r3, [pc, #244]	; (80092d4 <tcp_receive+0x890>)
 80091e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80091e2:	4b3c      	ldr	r3, [pc, #240]	; (80092d4 <tcp_receive+0x890>)
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b38      	ldr	r3, [pc, #224]	; (80092cc <tcp_receive+0x888>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	441a      	add	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80091f6:	440b      	add	r3, r1
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d006      	beq.n	800920a <tcp_receive+0x7c6>
 80091fc:	4b36      	ldr	r3, [pc, #216]	; (80092d8 <tcp_receive+0x894>)
 80091fe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009202:	4936      	ldr	r1, [pc, #216]	; (80092dc <tcp_receive+0x898>)
 8009204:	4836      	ldr	r0, [pc, #216]	; (80092e0 <tcp_receive+0x89c>)
 8009206:	f005 f9ab 	bl	800e560 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80e7 	beq.w	80093e2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009214:	4b2e      	ldr	r3, [pc, #184]	; (80092d0 <tcp_receive+0x88c>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	899b      	ldrh	r3, [r3, #12]
 800921a:	b29b      	uxth	r3, r3
 800921c:	4618      	mov	r0, r3
 800921e:	f7fa ffc3 	bl	80041a8 <lwip_htons>
 8009222:	4603      	mov	r3, r0
 8009224:	b2db      	uxtb	r3, r3
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d010      	beq.n	8009250 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800922e:	e00a      	b.n	8009246 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009234:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f7fd fd92 	bl	8006d6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f0      	bne.n	8009230 <tcp_receive+0x7ec>
 800924e:	e0c8      	b.n	80093e2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009256:	e052      	b.n	80092fe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	899b      	ldrh	r3, [r3, #12]
 800925e:	b29b      	uxth	r3, r3
 8009260:	4618      	mov	r0, r3
 8009262:	f7fa ffa1 	bl	80041a8 <lwip_htons>
 8009266:	4603      	mov	r3, r0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d03d      	beq.n	80092ee <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009272:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <tcp_receive+0x88c>)
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	899b      	ldrh	r3, [r3, #12]
 8009278:	b29b      	uxth	r3, r3
 800927a:	4618      	mov	r0, r3
 800927c:	f7fa ff94 	bl	80041a8 <lwip_htons>
 8009280:	4603      	mov	r3, r0
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009288:	2b00      	cmp	r3, #0
 800928a:	d130      	bne.n	80092ee <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800928c:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <tcp_receive+0x88c>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	899b      	ldrh	r3, [r3, #12]
 8009292:	b29c      	uxth	r4, r3
 8009294:	2001      	movs	r0, #1
 8009296:	f7fa ff87 	bl	80041a8 <lwip_htons>
 800929a:	4603      	mov	r3, r0
 800929c:	461a      	mov	r2, r3
 800929e:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <tcp_receive+0x88c>)
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	4322      	orrs	r2, r4
 80092a4:	b292      	uxth	r2, r2
 80092a6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80092a8:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <tcp_receive+0x88c>)
 80092aa:	891c      	ldrh	r4, [r3, #8]
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <tcp_receive+0x88c>)
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	899b      	ldrh	r3, [r3, #12]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fa ff77 	bl	80041a8 <lwip_htons>
 80092ba:	4603      	mov	r3, r0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00e      	beq.n	80092e4 <tcp_receive+0x8a0>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e00d      	b.n	80092e6 <tcp_receive+0x8a2>
 80092ca:	bf00      	nop
 80092cc:	200082c4 	.word	0x200082c4
 80092d0:	200082a4 	.word	0x200082a4
 80092d4:	200082ce 	.word	0x200082ce
 80092d8:	080105f4 	.word	0x080105f4
 80092dc:	0801099c 	.word	0x0801099c
 80092e0:	08010640 	.word	0x08010640
 80092e4:	2300      	movs	r3, #0
 80092e6:	4423      	add	r3, r4
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	4b98      	ldr	r3, [pc, #608]	; (800954c <tcp_receive+0xb08>)
 80092ec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80092ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80092f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80092f8:	6938      	ldr	r0, [r7, #16]
 80092fa:	f7fd fd36 	bl	8006d6a <tcp_seg_free>
            while (next &&
 80092fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00e      	beq.n	8009322 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009304:	4b91      	ldr	r3, [pc, #580]	; (800954c <tcp_receive+0xb08>)
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	4b91      	ldr	r3, [pc, #580]	; (8009550 <tcp_receive+0xb0c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	441a      	add	r2, r3
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009318:	8909      	ldrh	r1, [r1, #8]
 800931a:	440b      	add	r3, r1
 800931c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800931e:	2b00      	cmp	r3, #0
 8009320:	da9a      	bge.n	8009258 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d059      	beq.n	80093dc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009328:	4b88      	ldr	r3, [pc, #544]	; (800954c <tcp_receive+0xb08>)
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	4b88      	ldr	r3, [pc, #544]	; (8009550 <tcp_receive+0xb0c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	441a      	add	r2, r3
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd4d      	ble.n	80093dc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	b29a      	uxth	r2, r3
 8009348:	4b81      	ldr	r3, [pc, #516]	; (8009550 <tcp_receive+0xb0c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	b29b      	uxth	r3, r3
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	b29a      	uxth	r2, r3
 8009352:	4b80      	ldr	r3, [pc, #512]	; (8009554 <tcp_receive+0xb10>)
 8009354:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009356:	4b7f      	ldr	r3, [pc, #508]	; (8009554 <tcp_receive+0xb10>)
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	899b      	ldrh	r3, [r3, #12]
 800935c:	b29b      	uxth	r3, r3
 800935e:	4618      	mov	r0, r3
 8009360:	f7fa ff22 	bl	80041a8 <lwip_htons>
 8009364:	4603      	mov	r3, r0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <tcp_receive+0x938>
                inseg.len -= 1;
 8009370:	4b78      	ldr	r3, [pc, #480]	; (8009554 <tcp_receive+0xb10>)
 8009372:	891b      	ldrh	r3, [r3, #8]
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	4b76      	ldr	r3, [pc, #472]	; (8009554 <tcp_receive+0xb10>)
 800937a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800937c:	4b75      	ldr	r3, [pc, #468]	; (8009554 <tcp_receive+0xb10>)
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	4a74      	ldr	r2, [pc, #464]	; (8009554 <tcp_receive+0xb10>)
 8009382:	8912      	ldrh	r2, [r2, #8]
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7fc f8e6 	bl	8005558 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800938c:	4b71      	ldr	r3, [pc, #452]	; (8009554 <tcp_receive+0xb10>)
 800938e:	891c      	ldrh	r4, [r3, #8]
 8009390:	4b70      	ldr	r3, [pc, #448]	; (8009554 <tcp_receive+0xb10>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	b29b      	uxth	r3, r3
 8009398:	4618      	mov	r0, r3
 800939a:	f7fa ff05 	bl	80041a8 <lwip_htons>
 800939e:	4603      	mov	r3, r0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <tcp_receive+0x96a>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <tcp_receive+0x96c>
 80093ae:	2300      	movs	r3, #0
 80093b0:	4423      	add	r3, r4
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	4b65      	ldr	r3, [pc, #404]	; (800954c <tcp_receive+0xb08>)
 80093b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80093b8:	4b64      	ldr	r3, [pc, #400]	; (800954c <tcp_receive+0xb08>)
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	4b64      	ldr	r3, [pc, #400]	; (8009550 <tcp_receive+0xb0c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	441a      	add	r2, r3
 80093c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d006      	beq.n	80093dc <tcp_receive+0x998>
 80093ce:	4b62      	ldr	r3, [pc, #392]	; (8009558 <tcp_receive+0xb14>)
 80093d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80093d4:	4961      	ldr	r1, [pc, #388]	; (800955c <tcp_receive+0xb18>)
 80093d6:	4862      	ldr	r0, [pc, #392]	; (8009560 <tcp_receive+0xb1c>)
 80093d8:	f005 f8c2 	bl	800e560 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80093e2:	4b5a      	ldr	r3, [pc, #360]	; (800954c <tcp_receive+0xb08>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	4b59      	ldr	r3, [pc, #356]	; (8009550 <tcp_receive+0xb0c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	441a      	add	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093f6:	4b55      	ldr	r3, [pc, #340]	; (800954c <tcp_receive+0xb08>)
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d206      	bcs.n	800940c <tcp_receive+0x9c8>
 80093fe:	4b56      	ldr	r3, [pc, #344]	; (8009558 <tcp_receive+0xb14>)
 8009400:	f240 6207 	movw	r2, #1543	; 0x607
 8009404:	4957      	ldr	r1, [pc, #348]	; (8009564 <tcp_receive+0xb20>)
 8009406:	4856      	ldr	r0, [pc, #344]	; (8009560 <tcp_receive+0xb1c>)
 8009408:	f005 f8aa 	bl	800e560 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009410:	4b4e      	ldr	r3, [pc, #312]	; (800954c <tcp_receive+0xb08>)
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7fc ffc5 	bl	80063ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009422:	4b4c      	ldr	r3, [pc, #304]	; (8009554 <tcp_receive+0xb10>)
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	891b      	ldrh	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d006      	beq.n	800943a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800942c:	4b49      	ldr	r3, [pc, #292]	; (8009554 <tcp_receive+0xb10>)
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	4a4d      	ldr	r2, [pc, #308]	; (8009568 <tcp_receive+0xb24>)
 8009432:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009434:	4b47      	ldr	r3, [pc, #284]	; (8009554 <tcp_receive+0xb10>)
 8009436:	2200      	movs	r2, #0
 8009438:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800943a:	4b46      	ldr	r3, [pc, #280]	; (8009554 <tcp_receive+0xb10>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	899b      	ldrh	r3, [r3, #12]
 8009440:	b29b      	uxth	r3, r3
 8009442:	4618      	mov	r0, r3
 8009444:	f7fa feb0 	bl	80041a8 <lwip_htons>
 8009448:	4603      	mov	r3, r0
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 80b8 	beq.w	80095c6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009456:	4b45      	ldr	r3, [pc, #276]	; (800956c <tcp_receive+0xb28>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	f043 0320 	orr.w	r3, r3, #32
 800945e:	b2da      	uxtb	r2, r3
 8009460:	4b42      	ldr	r3, [pc, #264]	; (800956c <tcp_receive+0xb28>)
 8009462:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009464:	e0af      	b.n	80095c6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4a36      	ldr	r2, [pc, #216]	; (8009550 <tcp_receive+0xb0c>)
 8009476:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	891b      	ldrh	r3, [r3, #8]
 800947c:	461c      	mov	r4, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	899b      	ldrh	r3, [r3, #12]
 8009484:	b29b      	uxth	r3, r3
 8009486:	4618      	mov	r0, r3
 8009488:	f7fa fe8e 	bl	80041a8 <lwip_htons>
 800948c:	4603      	mov	r3, r0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <tcp_receive+0xa58>
 8009498:	2301      	movs	r3, #1
 800949a:	e000      	b.n	800949e <tcp_receive+0xa5a>
 800949c:	2300      	movs	r3, #0
 800949e:	191a      	adds	r2, r3, r4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	441a      	add	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ae:	461c      	mov	r4, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	891b      	ldrh	r3, [r3, #8]
 80094b4:	461d      	mov	r5, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	899b      	ldrh	r3, [r3, #12]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fa fe72 	bl	80041a8 <lwip_htons>
 80094c4:	4603      	mov	r3, r0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <tcp_receive+0xa90>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <tcp_receive+0xa92>
 80094d4:	2300      	movs	r3, #0
 80094d6:	442b      	add	r3, r5
 80094d8:	429c      	cmp	r4, r3
 80094da:	d206      	bcs.n	80094ea <tcp_receive+0xaa6>
 80094dc:	4b1e      	ldr	r3, [pc, #120]	; (8009558 <tcp_receive+0xb14>)
 80094de:	f240 622b 	movw	r2, #1579	; 0x62b
 80094e2:	4923      	ldr	r1, [pc, #140]	; (8009570 <tcp_receive+0xb2c>)
 80094e4:	481e      	ldr	r0, [pc, #120]	; (8009560 <tcp_receive+0xb1c>)
 80094e6:	f005 f83b 	bl	800e560 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	891b      	ldrh	r3, [r3, #8]
 80094ee:	461c      	mov	r4, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	899b      	ldrh	r3, [r3, #12]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fa fe55 	bl	80041a8 <lwip_htons>
 80094fe:	4603      	mov	r3, r0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <tcp_receive+0xaca>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <tcp_receive+0xacc>
 800950e:	2300      	movs	r3, #0
 8009510:	1919      	adds	r1, r3, r4
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009516:	b28b      	uxth	r3, r1
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	b29a      	uxth	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7fc ff43 	bl	80063ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	891b      	ldrh	r3, [r3, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d028      	beq.n	8009582 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009530:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <tcp_receive+0xb24>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01d      	beq.n	8009574 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009538:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <tcp_receive+0xb24>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fc fa50 	bl	80059e8 <pbuf_cat>
 8009548:	e018      	b.n	800957c <tcp_receive+0xb38>
 800954a:	bf00      	nop
 800954c:	200082ce 	.word	0x200082ce
 8009550:	200082c4 	.word	0x200082c4
 8009554:	200082a4 	.word	0x200082a4
 8009558:	080105f4 	.word	0x080105f4
 800955c:	080109d4 	.word	0x080109d4
 8009560:	08010640 	.word	0x08010640
 8009564:	08010a10 	.word	0x08010a10
 8009568:	200082d4 	.word	0x200082d4
 800956c:	200082d1 	.word	0x200082d1
 8009570:	08010a30 	.word	0x08010a30
            } else {
              recv_data = cseg->p;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a70      	ldr	r2, [pc, #448]	; (800973c <tcp_receive+0xcf8>)
 800957a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2200      	movs	r2, #0
 8009580:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	899b      	ldrh	r3, [r3, #12]
 8009588:	b29b      	uxth	r3, r3
 800958a:	4618      	mov	r0, r3
 800958c:	f7fa fe0c 	bl	80041a8 <lwip_htons>
 8009590:	4603      	mov	r3, r0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00d      	beq.n	80095b8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800959c:	4b68      	ldr	r3, [pc, #416]	; (8009740 <tcp_receive+0xcfc>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	f043 0320 	orr.w	r3, r3, #32
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	4b66      	ldr	r3, [pc, #408]	; (8009740 <tcp_receive+0xcfc>)
 80095a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	7d1b      	ldrb	r3, [r3, #20]
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d102      	bne.n	80095b8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2207      	movs	r2, #7
 80095b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80095c0:	68b8      	ldr	r0, [r7, #8]
 80095c2:	f7fd fbd2 	bl	8006d6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d008      	beq.n	80095e0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80095da:	429a      	cmp	r2, r3
 80095dc:	f43f af43 	beq.w	8009466 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	8b5b      	ldrh	r3, [r3, #26]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00e      	beq.n	800960a <tcp_receive+0xbc6>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8b5b      	ldrh	r3, [r3, #26]
 80095f0:	f023 0301 	bic.w	r3, r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	835a      	strh	r2, [r3, #26]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8b5b      	ldrh	r3, [r3, #26]
 80095fe:	f043 0302 	orr.w	r3, r3, #2
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009608:	e188      	b.n	800991c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	8b5b      	ldrh	r3, [r3, #26]
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009618:	e180      	b.n	800991c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009622:	4848      	ldr	r0, [pc, #288]	; (8009744 <tcp_receive+0xd00>)
 8009624:	f7fd fbba 	bl	8006d9c <tcp_seg_copy>
 8009628:	4602      	mov	r2, r0
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	675a      	str	r2, [r3, #116]	; 0x74
 800962e:	e16d      	b.n	800990c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009638:	63bb      	str	r3, [r7, #56]	; 0x38
 800963a:	e157      	b.n	80098ec <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	4b41      	ldr	r3, [pc, #260]	; (8009748 <tcp_receive+0xd04>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d11d      	bne.n	8009686 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800964a:	4b3e      	ldr	r3, [pc, #248]	; (8009744 <tcp_receive+0xd00>)
 800964c:	891a      	ldrh	r2, [r3, #8]
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	891b      	ldrh	r3, [r3, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	f240 814f 	bls.w	80098f6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009658:	483a      	ldr	r0, [pc, #232]	; (8009744 <tcp_receive+0xd00>)
 800965a:	f7fd fb9f 	bl	8006d9c <tcp_seg_copy>
 800965e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 8149 	beq.w	80098fa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <tcp_receive+0xc32>
                    prev->next = cseg;
 800966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e002      	b.n	800967c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800967c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800967e:	6978      	ldr	r0, [r7, #20]
 8009680:	f7ff f8dc 	bl	800883c <tcp_oos_insert_segment>
                }
                break;
 8009684:	e139      	b.n	80098fa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009688:	2b00      	cmp	r3, #0
 800968a:	d117      	bne.n	80096bc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800968c:	4b2e      	ldr	r3, [pc, #184]	; (8009748 <tcp_receive+0xd04>)
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	da57      	bge.n	800974c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800969c:	4829      	ldr	r0, [pc, #164]	; (8009744 <tcp_receive+0xd00>)
 800969e:	f7fd fb7d 	bl	8006d9c <tcp_seg_copy>
 80096a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8129 	beq.w	80098fe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80096b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096b4:	69b8      	ldr	r0, [r7, #24]
 80096b6:	f7ff f8c1 	bl	800883c <tcp_oos_insert_segment>
                  }
                  break;
 80096ba:	e120      	b.n	80098fe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096bc:	4b22      	ldr	r3, [pc, #136]	; (8009748 <tcp_receive+0xd04>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db3e      	blt.n	800974c <tcp_receive+0xd08>
 80096ce:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <tcp_receive+0xd04>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	3301      	adds	r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dc35      	bgt.n	800974c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80096e0:	4818      	ldr	r0, [pc, #96]	; (8009744 <tcp_receive+0xd00>)
 80096e2:	f7fd fb5b 	bl	8006d9c <tcp_seg_copy>
 80096e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8109 	beq.w	8009902 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80096f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096f8:	8912      	ldrh	r2, [r2, #8]
 80096fa:	441a      	add	r2, r3
 80096fc:	4b12      	ldr	r3, [pc, #72]	; (8009748 <tcp_receive+0xd04>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	dd12      	ble.n	800972c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009706:	4b10      	ldr	r3, [pc, #64]	; (8009748 <tcp_receive+0xd04>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	b29a      	uxth	r2, r3
 800970c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	b29b      	uxth	r3, r3
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	b29a      	uxth	r2, r3
 8009718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009722:	891b      	ldrh	r3, [r3, #8]
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f7fb ff16 	bl	8005558 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009732:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009734:	69f8      	ldr	r0, [r7, #28]
 8009736:	f7ff f881 	bl	800883c <tcp_oos_insert_segment>
                  }
                  break;
 800973a:	e0e2      	b.n	8009902 <tcp_receive+0xebe>
 800973c:	200082d4 	.word	0x200082d4
 8009740:	200082d1 	.word	0x200082d1
 8009744:	200082a4 	.word	0x200082a4
 8009748:	200082c4 	.word	0x200082c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f040 80c6 	bne.w	80098e6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800975a:	4b80      	ldr	r3, [pc, #512]	; (800995c <tcp_receive+0xf18>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009766:	2b00      	cmp	r3, #0
 8009768:	f340 80bd 	ble.w	80098e6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	899b      	ldrh	r3, [r3, #12]
 8009772:	b29b      	uxth	r3, r3
 8009774:	4618      	mov	r0, r3
 8009776:	f7fa fd17 	bl	80041a8 <lwip_htons>
 800977a:	4603      	mov	r3, r0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	f040 80bf 	bne.w	8009906 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009788:	4875      	ldr	r0, [pc, #468]	; (8009960 <tcp_receive+0xf1c>)
 800978a:	f7fd fb07 	bl	8006d9c <tcp_seg_copy>
 800978e:	4602      	mov	r2, r0
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80b6 	beq.w	800990a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a6:	8912      	ldrh	r2, [r2, #8]
 80097a8:	441a      	add	r2, r3
 80097aa:	4b6c      	ldr	r3, [pc, #432]	; (800995c <tcp_receive+0xf18>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd12      	ble.n	80097da <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80097b4:	4b69      	ldr	r3, [pc, #420]	; (800995c <tcp_receive+0xf18>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	891b      	ldrh	r3, [r3, #8]
 80097d2:	4619      	mov	r1, r3
 80097d4:	4610      	mov	r0, r2
 80097d6:	f7fb febf 	bl	8005558 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80097da:	4b62      	ldr	r3, [pc, #392]	; (8009964 <tcp_receive+0xf20>)
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	4b5e      	ldr	r3, [pc, #376]	; (800995c <tcp_receive+0xf18>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	441a      	add	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80097ee:	440b      	add	r3, r1
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f340 8089 	ble.w	800990a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	899b      	ldrh	r3, [r3, #12]
 8009800:	b29b      	uxth	r3, r3
 8009802:	4618      	mov	r0, r3
 8009804:	f7fa fcd0 	bl	80041a8 <lwip_htons>
 8009808:	4603      	mov	r3, r0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d022      	beq.n	800985a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	899b      	ldrh	r3, [r3, #12]
 800981c:	b29b      	uxth	r3, r3
 800981e:	b21b      	sxth	r3, r3
 8009820:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009824:	b21c      	sxth	r4, r3
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	899b      	ldrh	r3, [r3, #12]
 800982e:	b29b      	uxth	r3, r3
 8009830:	4618      	mov	r0, r3
 8009832:	f7fa fcb9 	bl	80041a8 <lwip_htons>
 8009836:	4603      	mov	r3, r0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	b29b      	uxth	r3, r3
 800983c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009840:	b29b      	uxth	r3, r3
 8009842:	4618      	mov	r0, r3
 8009844:	f7fa fcb0 	bl	80041a8 <lwip_htons>
 8009848:	4603      	mov	r3, r0
 800984a:	b21b      	sxth	r3, r3
 800984c:	4323      	orrs	r3, r4
 800984e:	b21a      	sxth	r2, r3
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	b292      	uxth	r2, r2
 8009858:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009864:	4413      	add	r3, r2
 8009866:	b299      	uxth	r1, r3
 8009868:	4b3c      	ldr	r3, [pc, #240]	; (800995c <tcp_receive+0xf18>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	b29a      	uxth	r2, r3
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	1a8a      	subs	r2, r1, r2
 8009874:	b292      	uxth	r2, r2
 8009876:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	891b      	ldrh	r3, [r3, #8]
 8009884:	4619      	mov	r1, r3
 8009886:	4610      	mov	r0, r2
 8009888:	f7fb fe66 	bl	8005558 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	891c      	ldrh	r4, [r3, #8]
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	899b      	ldrh	r3, [r3, #12]
 800989a:	b29b      	uxth	r3, r3
 800989c:	4618      	mov	r0, r3
 800989e:	f7fa fc83 	bl	80041a8 <lwip_htons>
 80098a2:	4603      	mov	r3, r0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <tcp_receive+0xe6e>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <tcp_receive+0xe70>
 80098b2:	2300      	movs	r3, #0
 80098b4:	4423      	add	r3, r4
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	4b2a      	ldr	r3, [pc, #168]	; (8009964 <tcp_receive+0xf20>)
 80098ba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098bc:	4b29      	ldr	r3, [pc, #164]	; (8009964 <tcp_receive+0xf20>)
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b26      	ldr	r3, [pc, #152]	; (800995c <tcp_receive+0xf18>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	441a      	add	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80098d0:	440b      	add	r3, r1
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d019      	beq.n	800990a <tcp_receive+0xec6>
 80098d6:	4b24      	ldr	r3, [pc, #144]	; (8009968 <tcp_receive+0xf24>)
 80098d8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80098dc:	4923      	ldr	r1, [pc, #140]	; (800996c <tcp_receive+0xf28>)
 80098de:	4824      	ldr	r0, [pc, #144]	; (8009970 <tcp_receive+0xf2c>)
 80098e0:	f004 fe3e 	bl	800e560 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80098e4:	e011      	b.n	800990a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f47f aea4 	bne.w	800963c <tcp_receive+0xbf8>
 80098f4:	e00a      	b.n	800990c <tcp_receive+0xec8>
                break;
 80098f6:	bf00      	nop
 80098f8:	e008      	b.n	800990c <tcp_receive+0xec8>
                break;
 80098fa:	bf00      	nop
 80098fc:	e006      	b.n	800990c <tcp_receive+0xec8>
                  break;
 80098fe:	bf00      	nop
 8009900:	e004      	b.n	800990c <tcp_receive+0xec8>
                  break;
 8009902:	bf00      	nop
 8009904:	e002      	b.n	800990c <tcp_receive+0xec8>
                  break;
 8009906:	bf00      	nop
 8009908:	e000      	b.n	800990c <tcp_receive+0xec8>
                break;
 800990a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 fa33 	bl	800ad78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009912:	e003      	b.n	800991c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fa2f 	bl	800ad78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800991a:	e01a      	b.n	8009952 <tcp_receive+0xf0e>
 800991c:	e019      	b.n	8009952 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <tcp_receive+0xf18>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	db0a      	blt.n	8009942 <tcp_receive+0xefe>
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <tcp_receive+0xf18>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009938:	440b      	add	r3, r1
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	3301      	adds	r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	dd07      	ble.n	8009952 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8b5b      	ldrh	r3, [r3, #26]
 8009946:	f043 0302 	orr.w	r3, r3, #2
 800994a:	b29a      	uxth	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009950:	e7ff      	b.n	8009952 <tcp_receive+0xf0e>
 8009952:	bf00      	nop
 8009954:	3750      	adds	r7, #80	; 0x50
 8009956:	46bd      	mov	sp, r7
 8009958:	bdb0      	pop	{r4, r5, r7, pc}
 800995a:	bf00      	nop
 800995c:	200082c4 	.word	0x200082c4
 8009960:	200082a4 	.word	0x200082a4
 8009964:	200082ce 	.word	0x200082ce
 8009968:	080105f4 	.word	0x080105f4
 800996c:	0801099c 	.word	0x0801099c
 8009970:	08010640 	.word	0x08010640

08009974 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800997a:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <tcp_get_next_optbyte+0x5c>)
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	b291      	uxth	r1, r2
 8009982:	4a13      	ldr	r2, [pc, #76]	; (80099d0 <tcp_get_next_optbyte+0x5c>)
 8009984:	8011      	strh	r1, [r2, #0]
 8009986:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009988:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <tcp_get_next_optbyte+0x60>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <tcp_get_next_optbyte+0x26>
 8009990:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <tcp_get_next_optbyte+0x64>)
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	88fa      	ldrh	r2, [r7, #6]
 8009996:	429a      	cmp	r2, r3
 8009998:	d208      	bcs.n	80099ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800999a:	4b10      	ldr	r3, [pc, #64]	; (80099dc <tcp_get_next_optbyte+0x68>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3314      	adds	r3, #20
 80099a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80099a2:	88fb      	ldrh	r3, [r7, #6]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	4413      	add	r3, r2
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	e00b      	b.n	80099c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80099ac:	88fb      	ldrh	r3, [r7, #6]
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <tcp_get_next_optbyte+0x64>)
 80099b2:	881b      	ldrh	r3, [r3, #0]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80099ba:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <tcp_get_next_optbyte+0x60>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	797b      	ldrb	r3, [r7, #5]
 80099c0:	4413      	add	r3, r2
 80099c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	200082c0 	.word	0x200082c0
 80099d4:	200082bc 	.word	0x200082bc
 80099d8:	200082ba 	.word	0x200082ba
 80099dc:	200082b4 	.word	0x200082b4

080099e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <tcp_parseopt+0x1c>
 80099ee:	4b32      	ldr	r3, [pc, #200]	; (8009ab8 <tcp_parseopt+0xd8>)
 80099f0:	f240 727d 	movw	r2, #1917	; 0x77d
 80099f4:	4931      	ldr	r1, [pc, #196]	; (8009abc <tcp_parseopt+0xdc>)
 80099f6:	4832      	ldr	r0, [pc, #200]	; (8009ac0 <tcp_parseopt+0xe0>)
 80099f8:	f004 fdb2 	bl	800e560 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80099fc:	4b31      	ldr	r3, [pc, #196]	; (8009ac4 <tcp_parseopt+0xe4>)
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d055      	beq.n	8009ab0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009a04:	4b30      	ldr	r3, [pc, #192]	; (8009ac8 <tcp_parseopt+0xe8>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	801a      	strh	r2, [r3, #0]
 8009a0a:	e045      	b.n	8009a98 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009a0c:	f7ff ffb2 	bl	8009974 <tcp_get_next_optbyte>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d006      	beq.n	8009a28 <tcp_parseopt+0x48>
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	dc2b      	bgt.n	8009a76 <tcp_parseopt+0x96>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d041      	beq.n	8009aa6 <tcp_parseopt+0xc6>
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d127      	bne.n	8009a76 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009a26:	e037      	b.n	8009a98 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009a28:	f7ff ffa4 	bl	8009974 <tcp_get_next_optbyte>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d13b      	bne.n	8009aaa <tcp_parseopt+0xca>
 8009a32:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <tcp_parseopt+0xe8>)
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	3301      	adds	r3, #1
 8009a38:	4a22      	ldr	r2, [pc, #136]	; (8009ac4 <tcp_parseopt+0xe4>)
 8009a3a:	8812      	ldrh	r2, [r2, #0]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	da34      	bge.n	8009aaa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009a40:	f7ff ff98 	bl	8009974 <tcp_get_next_optbyte>
 8009a44:	4603      	mov	r3, r0
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009a4c:	f7ff ff92 	bl	8009974 <tcp_get_next_optbyte>
 8009a50:	4603      	mov	r3, r0
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	89bb      	ldrh	r3, [r7, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009a5a:	89bb      	ldrh	r3, [r7, #12]
 8009a5c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009a60:	d804      	bhi.n	8009a6c <tcp_parseopt+0x8c>
 8009a62:	89bb      	ldrh	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <tcp_parseopt+0x8c>
 8009a68:	89ba      	ldrh	r2, [r7, #12]
 8009a6a:	e001      	b.n	8009a70 <tcp_parseopt+0x90>
 8009a6c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009a74:	e010      	b.n	8009a98 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009a76:	f7ff ff7d 	bl	8009974 <tcp_get_next_optbyte>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d914      	bls.n	8009aae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <tcp_parseopt+0xe8>)
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	3b02      	subs	r3, #2
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <tcp_parseopt+0xe8>)
 8009a96:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009a98:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <tcp_parseopt+0xe8>)
 8009a9a:	881a      	ldrh	r2, [r3, #0]
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <tcp_parseopt+0xe4>)
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d3b3      	bcc.n	8009a0c <tcp_parseopt+0x2c>
 8009aa4:	e004      	b.n	8009ab0 <tcp_parseopt+0xd0>
          return;
 8009aa6:	bf00      	nop
 8009aa8:	e002      	b.n	8009ab0 <tcp_parseopt+0xd0>
            return;
 8009aaa:	bf00      	nop
 8009aac:	e000      	b.n	8009ab0 <tcp_parseopt+0xd0>
            return;
 8009aae:	bf00      	nop
      }
    }
  }
}
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	080105f4 	.word	0x080105f4
 8009abc:	08010a58 	.word	0x08010a58
 8009ac0:	08010640 	.word	0x08010640
 8009ac4:	200082b8 	.word	0x200082b8
 8009ac8:	200082c0 	.word	0x200082c0

08009acc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <tcp_trigger_input_pcb_close+0x1c>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	f043 0310 	orr.w	r3, r3, #16
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	4b03      	ldr	r3, [pc, #12]	; (8009ae8 <tcp_trigger_input_pcb_close+0x1c>)
 8009adc:	701a      	strb	r2, [r3, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	200082d1 	.word	0x200082d1

08009aec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <tcp_route+0x28>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	7a1b      	ldrb	r3, [r3, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d006      	beq.n	8009b14 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	7a1b      	ldrb	r3, [r3, #8]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fb fb4a 	bl	80051a4 <netif_get_by_index>
 8009b10:	4603      	mov	r3, r0
 8009b12:	e003      	b.n	8009b1c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f003 fa37 	bl	800cf88 <ip4_route>
 8009b1a:	4603      	mov	r3, r0
  }
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d105      	bne.n	8009b46 <tcp_create_segment+0x22>
 8009b3a:	4b44      	ldr	r3, [pc, #272]	; (8009c4c <tcp_create_segment+0x128>)
 8009b3c:	22a3      	movs	r2, #163	; 0xa3
 8009b3e:	4944      	ldr	r1, [pc, #272]	; (8009c50 <tcp_create_segment+0x12c>)
 8009b40:	4844      	ldr	r0, [pc, #272]	; (8009c54 <tcp_create_segment+0x130>)
 8009b42:	f004 fd0d 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d105      	bne.n	8009b58 <tcp_create_segment+0x34>
 8009b4c:	4b3f      	ldr	r3, [pc, #252]	; (8009c4c <tcp_create_segment+0x128>)
 8009b4e:	22a4      	movs	r2, #164	; 0xa4
 8009b50:	4941      	ldr	r1, [pc, #260]	; (8009c58 <tcp_create_segment+0x134>)
 8009b52:	4840      	ldr	r0, [pc, #256]	; (8009c54 <tcp_create_segment+0x130>)
 8009b54:	f004 fd04 	bl	800e560 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009b58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009b66:	2003      	movs	r0, #3
 8009b68:	f7fa ff96 	bl	8004a98 <memp_malloc>
 8009b6c:	6138      	str	r0, [r7, #16]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009b74:	68b8      	ldr	r0, [r7, #8]
 8009b76:	f7fb fe75 	bl	8005864 <pbuf_free>
    return NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e061      	b.n	8009c42 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009b84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	891a      	ldrh	r2, [r3, #8]
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d205      	bcs.n	8009baa <tcp_create_segment+0x86>
 8009b9e:	4b2b      	ldr	r3, [pc, #172]	; (8009c4c <tcp_create_segment+0x128>)
 8009ba0:	22b0      	movs	r2, #176	; 0xb0
 8009ba2:	492e      	ldr	r1, [pc, #184]	; (8009c5c <tcp_create_segment+0x138>)
 8009ba4:	482b      	ldr	r0, [pc, #172]	; (8009c54 <tcp_create_segment+0x130>)
 8009ba6:	f004 fcdb 	bl	800e560 <iprintf>
  seg->len = p->tot_len - optlen;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	891a      	ldrh	r2, [r3, #8]
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009bba:	2114      	movs	r1, #20
 8009bbc:	68b8      	ldr	r0, [r7, #8]
 8009bbe:	f7fb fdbb 	bl	8005738 <pbuf_add_header>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009bc8:	6938      	ldr	r0, [r7, #16]
 8009bca:	f7fd f8ce 	bl	8006d6a <tcp_seg_free>
    return NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e037      	b.n	8009c42 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8ada      	ldrh	r2, [r3, #22]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	68dc      	ldr	r4, [r3, #12]
 8009be4:	4610      	mov	r0, r2
 8009be6:	f7fa fadf 	bl	80041a8 <lwip_htons>
 8009bea:	4603      	mov	r3, r0
 8009bec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8b1a      	ldrh	r2, [r3, #24]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	68dc      	ldr	r4, [r3, #12]
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7fa fad6 	bl	80041a8 <lwip_htons>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	68dc      	ldr	r4, [r3, #12]
 8009c04:	6838      	ldr	r0, [r7, #0]
 8009c06:	f7fa fae4 	bl	80041d2 <lwip_htonl>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	089b      	lsrs	r3, r3, #2
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	3305      	adds	r3, #5
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	031b      	lsls	r3, r3, #12
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4313      	orrs	r3, r2
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	68dc      	ldr	r4, [r3, #12]
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fa fabc 	bl	80041a8 <lwip_htons>
 8009c30:	4603      	mov	r3, r0
 8009c32:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	749a      	strb	r2, [r3, #18]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	74da      	strb	r2, [r3, #19]
  return seg;
 8009c40:	693b      	ldr	r3, [r7, #16]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd90      	pop	{r4, r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	08010a74 	.word	0x08010a74
 8009c50:	08010aa8 	.word	0x08010aa8
 8009c54:	08010ac8 	.word	0x08010ac8
 8009c58:	08010af0 	.word	0x08010af0
 8009c5c:	08010b14 	.word	0x08010b14

08009c60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b08b      	sub	sp, #44	; 0x2c
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <tcp_split_unsent_seg+0x2c>
 8009c7e:	4b95      	ldr	r3, [pc, #596]	; (8009ed4 <tcp_split_unsent_seg+0x274>)
 8009c80:	f240 324b 	movw	r2, #843	; 0x34b
 8009c84:	4994      	ldr	r1, [pc, #592]	; (8009ed8 <tcp_split_unsent_seg+0x278>)
 8009c86:	4895      	ldr	r0, [pc, #596]	; (8009edc <tcp_split_unsent_seg+0x27c>)
 8009c88:	f004 fc6a 	bl	800e560 <iprintf>

  useg = pcb->unsent;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	e116      	b.n	8009ecc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009ca4:	4b8b      	ldr	r3, [pc, #556]	; (8009ed4 <tcp_split_unsent_seg+0x274>)
 8009ca6:	f240 3253 	movw	r2, #851	; 0x353
 8009caa:	498d      	ldr	r1, [pc, #564]	; (8009ee0 <tcp_split_unsent_seg+0x280>)
 8009cac:	488b      	ldr	r0, [pc, #556]	; (8009edc <tcp_split_unsent_seg+0x27c>)
 8009cae:	f004 fc57 	bl	800e560 <iprintf>
    return ERR_VAL;
 8009cb2:	f06f 0305 	mvn.w	r3, #5
 8009cb6:	e109      	b.n	8009ecc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	891b      	ldrh	r3, [r3, #8]
 8009cbc:	887a      	ldrh	r2, [r7, #2]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d301      	bcc.n	8009cc6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e102      	b.n	8009ecc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cca:	887a      	ldrh	r2, [r7, #2]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d906      	bls.n	8009cde <tcp_split_unsent_seg+0x7e>
 8009cd0:	4b80      	ldr	r3, [pc, #512]	; (8009ed4 <tcp_split_unsent_seg+0x274>)
 8009cd2:	f240 325b 	movw	r2, #859	; 0x35b
 8009cd6:	4983      	ldr	r1, [pc, #524]	; (8009ee4 <tcp_split_unsent_seg+0x284>)
 8009cd8:	4880      	ldr	r0, [pc, #512]	; (8009edc <tcp_split_unsent_seg+0x27c>)
 8009cda:	f004 fc41 	bl	800e560 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	891b      	ldrh	r3, [r3, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <tcp_split_unsent_seg+0x94>
 8009ce6:	4b7b      	ldr	r3, [pc, #492]	; (8009ed4 <tcp_split_unsent_seg+0x274>)
 8009ce8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009cec:	497e      	ldr	r1, [pc, #504]	; (8009ee8 <tcp_split_unsent_seg+0x288>)
 8009cee:	487b      	ldr	r0, [pc, #492]	; (8009edc <tcp_split_unsent_seg+0x27c>)
 8009cf0:	f004 fc36 	bl	800e560 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	7a9b      	ldrb	r3, [r3, #10]
 8009cf8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	891a      	ldrh	r2, [r3, #8]
 8009d0a:	887b      	ldrh	r3, [r7, #2]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	89bb      	ldrh	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d1e:	4619      	mov	r1, r3
 8009d20:	2036      	movs	r0, #54	; 0x36
 8009d22:	f7fb fabb 	bl	800529c <pbuf_alloc>
 8009d26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80b7 	beq.w	8009e9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	891a      	ldrh	r2, [r3, #8]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	891b      	ldrh	r3, [r3, #8]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	887b      	ldrh	r3, [r7, #2]
 8009d40:	4413      	add	r3, r2
 8009d42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	6858      	ldr	r0, [r3, #4]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	18d1      	adds	r1, r2, r3
 8009d50:	897b      	ldrh	r3, [r7, #10]
 8009d52:	89ba      	ldrh	r2, [r7, #12]
 8009d54:	f7fb ff80 	bl	8005c58 <pbuf_copy_partial>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	89bb      	ldrh	r3, [r7, #12]
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	f040 809f 	bne.w	8009ea2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	899b      	ldrh	r3, [r3, #12]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fa fa1b 	bl	80041a8 <lwip_htons>
 8009d72:	4603      	mov	r3, r0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009d80:	7efb      	ldrb	r3, [r7, #27]
 8009d82:	f003 0308 	and.w	r3, r3, #8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009d8a:	7efb      	ldrb	r3, [r7, #27]
 8009d8c:	f023 0308 	bic.w	r3, r3, #8
 8009d90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009d92:	7ebb      	ldrb	r3, [r7, #26]
 8009d94:	f043 0308 	orr.w	r3, r3, #8
 8009d98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009d9a:	7efb      	ldrb	r3, [r7, #27]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009da4:	7efb      	ldrb	r3, [r7, #27]
 8009da6:	f023 0301 	bic.w	r3, r3, #1
 8009daa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009dac:	7ebb      	ldrb	r3, [r7, #26]
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fa fa09 	bl	80041d2 <lwip_htonl>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	887b      	ldrh	r3, [r7, #2]
 8009dc4:	18d1      	adds	r1, r2, r3
 8009dc6:	7eba      	ldrb	r2, [r7, #26]
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	6939      	ldr	r1, [r7, #16]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fea7 	bl	8009b24 <tcp_create_segment>
 8009dd6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d063      	beq.n	8009ea6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fb fdc6 	bl	8005974 <pbuf_clen>
 8009de8:	4603      	mov	r3, r0
 8009dea:	461a      	mov	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009df2:	1a9b      	subs	r3, r3, r2
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	6858      	ldr	r0, [r3, #4]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	891a      	ldrh	r2, [r3, #8]
 8009e06:	89bb      	ldrh	r3, [r7, #12]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f7fb fba3 	bl	8005558 <pbuf_realloc>
  useg->len -= remainder;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	891a      	ldrh	r2, [r3, #8]
 8009e16:	89bb      	ldrh	r3, [r7, #12]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	899b      	ldrh	r3, [r3, #12]
 8009e26:	b29c      	uxth	r4, r3
 8009e28:	7efb      	ldrb	r3, [r7, #27]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fa f9bb 	bl	80041a8 <lwip_htons>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	4322      	orrs	r2, r4
 8009e3c:	b292      	uxth	r2, r2
 8009e3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fb fd95 	bl	8005974 <pbuf_clen>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e54:	4413      	add	r3, r2
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fb fd86 	bl	8005974 <pbuf_clen>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e72:	4413      	add	r3, r2
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d103      	bne.n	8009e9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e016      	b.n	8009ecc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009e9e:	bf00      	nop
 8009ea0:	e002      	b.n	8009ea8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ea2:	bf00      	nop
 8009ea4:	e000      	b.n	8009ea8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ea6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d006      	beq.n	8009ebc <tcp_split_unsent_seg+0x25c>
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <tcp_split_unsent_seg+0x274>)
 8009eb0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009eb4:	490d      	ldr	r1, [pc, #52]	; (8009eec <tcp_split_unsent_seg+0x28c>)
 8009eb6:	4809      	ldr	r0, [pc, #36]	; (8009edc <tcp_split_unsent_seg+0x27c>)
 8009eb8:	f004 fb52 	bl	800e560 <iprintf>
  if (p != NULL) {
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009ec2:	6938      	ldr	r0, [r7, #16]
 8009ec4:	f7fb fcce 	bl	8005864 <pbuf_free>
  }

  return ERR_MEM;
 8009ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3724      	adds	r7, #36	; 0x24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd90      	pop	{r4, r7, pc}
 8009ed4:	08010a74 	.word	0x08010a74
 8009ed8:	08010e08 	.word	0x08010e08
 8009edc:	08010ac8 	.word	0x08010ac8
 8009ee0:	08010e2c 	.word	0x08010e2c
 8009ee4:	08010e50 	.word	0x08010e50
 8009ee8:	08010e60 	.word	0x08010e60
 8009eec:	08010e70 	.word	0x08010e70

08009ef0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <tcp_send_fin+0x1c>
 8009efe:	4b21      	ldr	r3, [pc, #132]	; (8009f84 <tcp_send_fin+0x94>)
 8009f00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009f04:	4920      	ldr	r1, [pc, #128]	; (8009f88 <tcp_send_fin+0x98>)
 8009f06:	4821      	ldr	r0, [pc, #132]	; (8009f8c <tcp_send_fin+0x9c>)
 8009f08:	f004 fb2a 	bl	800e560 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d02e      	beq.n	8009f72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	e002      	b.n	8009f22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f8      	bne.n	8009f1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	899b      	ldrh	r3, [r3, #12]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fa f938 	bl	80041a8 <lwip_htons>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 0307 	and.w	r3, r3, #7
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d116      	bne.n	8009f72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	899b      	ldrh	r3, [r3, #12]
 8009f4a:	b29c      	uxth	r4, r3
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7fa f92b 	bl	80041a8 <lwip_htons>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	4322      	orrs	r2, r4
 8009f5c:	b292      	uxth	r2, r2
 8009f5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	8b5b      	ldrh	r3, [r3, #26]
 8009f64:	f043 0320 	orr.w	r3, r3, #32
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e004      	b.n	8009f7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009f72:	2101      	movs	r1, #1
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f80b 	bl	8009f90 <tcp_enqueue_flags>
 8009f7a:	4603      	mov	r3, r0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}
 8009f84:	08010a74 	.word	0x08010a74
 8009f88:	08010e7c 	.word	0x08010e7c
 8009f8c:	08010ac8 	.word	0x08010ac8

08009f90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	; 0x28
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <tcp_enqueue_flags+0x2c>
 8009fae:	4b67      	ldr	r3, [pc, #412]	; (800a14c <tcp_enqueue_flags+0x1bc>)
 8009fb0:	f240 4211 	movw	r2, #1041	; 0x411
 8009fb4:	4966      	ldr	r1, [pc, #408]	; (800a150 <tcp_enqueue_flags+0x1c0>)
 8009fb6:	4867      	ldr	r0, [pc, #412]	; (800a154 <tcp_enqueue_flags+0x1c4>)
 8009fb8:	f004 fad2 	bl	800e560 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d106      	bne.n	8009fd0 <tcp_enqueue_flags+0x40>
 8009fc2:	4b62      	ldr	r3, [pc, #392]	; (800a14c <tcp_enqueue_flags+0x1bc>)
 8009fc4:	f240 4213 	movw	r2, #1043	; 0x413
 8009fc8:	4963      	ldr	r1, [pc, #396]	; (800a158 <tcp_enqueue_flags+0x1c8>)
 8009fca:	4862      	ldr	r0, [pc, #392]	; (800a154 <tcp_enqueue_flags+0x1c4>)
 8009fcc:	f004 fac8 	bl	800e560 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	f003 0302 	and.w	r3, r3, #2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009fde:	7ffb      	ldrb	r3, [r7, #31]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	2036      	movs	r0, #54	; 0x36
 8009ff6:	f7fb f951 	bl	800529c <pbuf_alloc>
 8009ffa:	6138      	str	r0, [r7, #16]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d109      	bne.n	800a016 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	8b5b      	ldrh	r3, [r3, #26]
 800a006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a010:	f04f 33ff 	mov.w	r3, #4294967295
 800a014:	e095      	b.n	800a142 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	895a      	ldrh	r2, [r3, #10]
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	429a      	cmp	r2, r3
 800a020:	d206      	bcs.n	800a030 <tcp_enqueue_flags+0xa0>
 800a022:	4b4a      	ldr	r3, [pc, #296]	; (800a14c <tcp_enqueue_flags+0x1bc>)
 800a024:	f240 4239 	movw	r2, #1081	; 0x439
 800a028:	494c      	ldr	r1, [pc, #304]	; (800a15c <tcp_enqueue_flags+0x1cc>)
 800a02a:	484a      	ldr	r0, [pc, #296]	; (800a154 <tcp_enqueue_flags+0x1c4>)
 800a02c:	f004 fa98 	bl	800e560 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a034:	78fa      	ldrb	r2, [r7, #3]
 800a036:	7ffb      	ldrb	r3, [r7, #31]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	460b      	mov	r3, r1
 800a03c:	6939      	ldr	r1, [r7, #16]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff fd70 	bl	8009b24 <tcp_create_segment>
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d109      	bne.n	800a060 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8b5b      	ldrh	r3, [r3, #26]
 800a050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a054:	b29a      	uxth	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a05a:	f04f 33ff 	mov.w	r3, #4294967295
 800a05e:	e070      	b.n	800a142 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <tcp_enqueue_flags+0xea>
 800a06c:	4b37      	ldr	r3, [pc, #220]	; (800a14c <tcp_enqueue_flags+0x1bc>)
 800a06e:	f240 4242 	movw	r2, #1090	; 0x442
 800a072:	493b      	ldr	r1, [pc, #236]	; (800a160 <tcp_enqueue_flags+0x1d0>)
 800a074:	4837      	ldr	r0, [pc, #220]	; (800a154 <tcp_enqueue_flags+0x1c4>)
 800a076:	f004 fa73 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	891b      	ldrh	r3, [r3, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d006      	beq.n	800a090 <tcp_enqueue_flags+0x100>
 800a082:	4b32      	ldr	r3, [pc, #200]	; (800a14c <tcp_enqueue_flags+0x1bc>)
 800a084:	f240 4243 	movw	r2, #1091	; 0x443
 800a088:	4936      	ldr	r1, [pc, #216]	; (800a164 <tcp_enqueue_flags+0x1d4>)
 800a08a:	4832      	ldr	r0, [pc, #200]	; (800a154 <tcp_enqueue_flags+0x1c4>)
 800a08c:	f004 fa68 	bl	800e560 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	66da      	str	r2, [r3, #108]	; 0x6c
 800a09e:	e00d      	b.n	800a0bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0a4:	61bb      	str	r3, [r7, #24]
 800a0a6:	e002      	b.n	800a0ae <tcp_enqueue_flags+0x11e>
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1f8      	bne.n	800a0a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d104      	bne.n	800a0d8 <tcp_enqueue_flags+0x148>
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d006      	beq.n	800a0fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	8b5b      	ldrh	r3, [r3, #26]
 800a0f0:	f043 0320 	orr.w	r3, r3, #32
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fb fc38 	bl	8005974 <pbuf_clen>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a10e:	4413      	add	r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00e      	beq.n	800a140 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <tcp_enqueue_flags+0x1b0>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <tcp_enqueue_flags+0x1b0>
 800a132:	4b06      	ldr	r3, [pc, #24]	; (800a14c <tcp_enqueue_flags+0x1bc>)
 800a134:	f240 4265 	movw	r2, #1125	; 0x465
 800a138:	490b      	ldr	r1, [pc, #44]	; (800a168 <tcp_enqueue_flags+0x1d8>)
 800a13a:	4806      	ldr	r0, [pc, #24]	; (800a154 <tcp_enqueue_flags+0x1c4>)
 800a13c:	f004 fa10 	bl	800e560 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	08010a74 	.word	0x08010a74
 800a150:	08010e98 	.word	0x08010e98
 800a154:	08010ac8 	.word	0x08010ac8
 800a158:	08010ef0 	.word	0x08010ef0
 800a15c:	08010f10 	.word	0x08010f10
 800a160:	08010f4c 	.word	0x08010f4c
 800a164:	08010f64 	.word	0x08010f64
 800a168:	08010f90 	.word	0x08010f90

0800a16c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a16c:	b5b0      	push	{r4, r5, r7, lr}
 800a16e:	b08a      	sub	sp, #40	; 0x28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <tcp_output+0x1c>
 800a17a:	4b8a      	ldr	r3, [pc, #552]	; (800a3a4 <tcp_output+0x238>)
 800a17c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a180:	4989      	ldr	r1, [pc, #548]	; (800a3a8 <tcp_output+0x23c>)
 800a182:	488a      	ldr	r0, [pc, #552]	; (800a3ac <tcp_output+0x240>)
 800a184:	f004 f9ec 	bl	800e560 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	7d1b      	ldrb	r3, [r3, #20]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d106      	bne.n	800a19e <tcp_output+0x32>
 800a190:	4b84      	ldr	r3, [pc, #528]	; (800a3a4 <tcp_output+0x238>)
 800a192:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a196:	4986      	ldr	r1, [pc, #536]	; (800a3b0 <tcp_output+0x244>)
 800a198:	4884      	ldr	r0, [pc, #528]	; (800a3ac <tcp_output+0x240>)
 800a19a:	f004 f9e1 	bl	800e560 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a19e:	4b85      	ldr	r3, [pc, #532]	; (800a3b4 <tcp_output+0x248>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d101      	bne.n	800a1ac <tcp_output+0x40>
    return ERR_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e1ce      	b.n	800a54a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	bf28      	it	cs
 800a1bc:	4613      	movcs	r3, r2
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	8b5b      	ldrh	r3, [r3, #26]
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 81aa 	beq.w	800a530 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fdcb 	bl	800ad78 <tcp_send_empty_ack>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	e1b1      	b.n	800a54a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fc7c 	bl	8009aec <tcp_route>
 800a1f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <tcp_output+0x96>
    return ERR_RTE;
 800a1fc:	f06f 0303 	mvn.w	r3, #3
 800a200:	e1a3      	b.n	800a54a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <tcp_output+0xa4>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d111      	bne.n	800a234 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <tcp_output+0xb0>
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	3304      	adds	r3, #4
 800a21a:	e000      	b.n	800a21e <tcp_output+0xb2>
 800a21c:	2300      	movs	r3, #0
 800a21e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <tcp_output+0xc0>
      return ERR_RTE;
 800a226:	f06f 0303 	mvn.w	r3, #3
 800a22a:	e18e      	b.n	800a54a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f9 ffc9 	bl	80041d2 <lwip_htonl>
 800a240:	4602      	mov	r2, r0
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	8912      	ldrh	r2, [r2, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	429a      	cmp	r2, r3
 800a252:	d227      	bcs.n	800a2a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a25a:	461a      	mov	r2, r3
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	4293      	cmp	r3, r2
 800a260:	d114      	bne.n	800a28c <tcp_output+0x120>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a266:	2b00      	cmp	r3, #0
 800a268:	d110      	bne.n	800a28c <tcp_output+0x120>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10b      	bne.n	800a28c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	8b5b      	ldrh	r3, [r3, #26]
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 814d 	beq.w	800a534 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fd6c 	bl	800ad78 <tcp_send_empty_ack>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	e152      	b.n	800a54a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 811c 	beq.w	800a4f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a2ba:	e002      	b.n	800a2c2 <tcp_output+0x156>
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	623b      	str	r3, [r7, #32]
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f8      	bne.n	800a2bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a2ca:	e112      	b.n	800a4f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	899b      	ldrh	r3, [r3, #12]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7f9 ff67 	bl	80041a8 <lwip_htons>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <tcp_output+0x188>
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <tcp_output+0x238>)
 800a2e8:	f240 5236 	movw	r2, #1334	; 0x536
 800a2ec:	4932      	ldr	r1, [pc, #200]	; (800a3b8 <tcp_output+0x24c>)
 800a2ee:	482f      	ldr	r0, [pc, #188]	; (800a3ac <tcp_output+0x240>)
 800a2f0:	f004 f936 	bl	800e560 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01f      	beq.n	800a33c <tcp_output+0x1d0>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8b5b      	ldrh	r3, [r3, #26]
 800a300:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a304:	2b00      	cmp	r3, #0
 800a306:	d119      	bne.n	800a33c <tcp_output+0x1d0>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <tcp_output+0x1bc>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d110      	bne.n	800a33c <tcp_output+0x1d0>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a31e:	891a      	ldrh	r2, [r3, #8]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a324:	429a      	cmp	r2, r3
 800a326:	d209      	bcs.n	800a33c <tcp_output+0x1d0>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <tcp_output+0x1d0>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d901      	bls.n	800a340 <tcp_output+0x1d4>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <tcp_output+0x1d6>
 800a340:	2300      	movs	r3, #0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d106      	bne.n	800a354 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	8b5b      	ldrh	r3, [r3, #26]
 800a34a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 80e4 	beq.w	800a51c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7d1b      	ldrb	r3, [r3, #20]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d00d      	beq.n	800a378 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	899b      	ldrh	r3, [r3, #12]
 800a362:	b29c      	uxth	r4, r3
 800a364:	2010      	movs	r0, #16
 800a366:	f7f9 ff1f 	bl	80041a8 <lwip_htons>
 800a36a:	4603      	mov	r3, r0
 800a36c:	461a      	mov	r2, r3
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	4322      	orrs	r2, r4
 800a374:	b292      	uxth	r2, r2
 800a376:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a37e:	f000 f909 	bl	800a594 <tcp_output_segment>
 800a382:	4603      	mov	r3, r0
 800a384:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d016      	beq.n	800a3bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8b5b      	ldrh	r3, [r3, #26]
 800a392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a396:	b29a      	uxth	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	835a      	strh	r2, [r3, #26]
      return err;
 800a39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3a0:	e0d3      	b.n	800a54a <tcp_output+0x3de>
 800a3a2:	bf00      	nop
 800a3a4:	08010a74 	.word	0x08010a74
 800a3a8:	08010fb8 	.word	0x08010fb8
 800a3ac:	08010ac8 	.word	0x08010ac8
 800a3b0:	08010fd0 	.word	0x08010fd0
 800a3b4:	200082d8 	.word	0x200082d8
 800a3b8:	08010ff8 	.word	0x08010ff8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7d1b      	ldrb	r3, [r3, #20]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d006      	beq.n	800a3da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8b5b      	ldrh	r3, [r3, #26]
 800a3d0:	f023 0303 	bic.w	r3, r3, #3
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7f9 fef6 	bl	80041d2 <lwip_htonl>
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	891b      	ldrh	r3, [r3, #8]
 800a3ec:	461d      	mov	r5, r3
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	899b      	ldrh	r3, [r3, #12]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f9 fed6 	bl	80041a8 <lwip_htons>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	f003 0303 	and.w	r3, r3, #3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <tcp_output+0x2a0>
 800a408:	2301      	movs	r3, #1
 800a40a:	e000      	b.n	800a40e <tcp_output+0x2a2>
 800a40c:	2300      	movs	r3, #0
 800a40e:	442b      	add	r3, r5
 800a410:	4423      	add	r3, r4
 800a412:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	da02      	bge.n	800a426 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	891b      	ldrh	r3, [r3, #8]
 800a42a:	461c      	mov	r4, r3
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	899b      	ldrh	r3, [r3, #12]
 800a432:	b29b      	uxth	r3, r3
 800a434:	4618      	mov	r0, r3
 800a436:	f7f9 feb7 	bl	80041a8 <lwip_htons>
 800a43a:	4603      	mov	r3, r0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <tcp_output+0x2de>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <tcp_output+0x2e0>
 800a44a:	2300      	movs	r3, #0
 800a44c:	4423      	add	r3, r4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d049      	beq.n	800a4e6 <tcp_output+0x37a>
      seg->next = NULL;
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	2200      	movs	r2, #0
 800a456:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <tcp_output+0x300>
        pcb->unacked = seg;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a464:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	623b      	str	r3, [r7, #32]
 800a46a:	e03f      	b.n	800a4ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	4618      	mov	r0, r3
 800a474:	f7f9 fead 	bl	80041d2 <lwip_htonl>
 800a478:	4604      	mov	r4, r0
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	4618      	mov	r0, r3
 800a482:	f7f9 fea6 	bl	80041d2 <lwip_htonl>
 800a486:	4603      	mov	r3, r0
 800a488:	1ae3      	subs	r3, r4, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da24      	bge.n	800a4d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3370      	adds	r3, #112	; 0x70
 800a492:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a494:	e002      	b.n	800a49c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d011      	beq.n	800a4c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7f9 fe90 	bl	80041d2 <lwip_htonl>
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7f9 fe89 	bl	80041d2 <lwip_htonl>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dbe6      	blt.n	800a496 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	e009      	b.n	800a4ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	623b      	str	r3, [r7, #32]
 800a4e4:	e002      	b.n	800a4ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a4e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4e8:	f7fc fc3f 	bl	8006d6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d012      	beq.n	800a51e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f9 fe67 	bl	80041d2 <lwip_htonl>
 800a504:	4602      	mov	r2, r0
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50e:	8912      	ldrh	r2, [r2, #8]
 800a510:	4413      	add	r3, r2
  while (seg != NULL &&
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	429a      	cmp	r2, r3
 800a516:	f4bf aed9 	bcs.w	800a2cc <tcp_output+0x160>
 800a51a:	e000      	b.n	800a51e <tcp_output+0x3b2>
      break;
 800a51c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d108      	bne.n	800a538 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a52e:	e004      	b.n	800a53a <tcp_output+0x3ce>
    goto output_done;
 800a530:	bf00      	nop
 800a532:	e002      	b.n	800a53a <tcp_output+0x3ce>
    goto output_done;
 800a534:	bf00      	nop
 800a536:	e000      	b.n	800a53a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a538:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8b5b      	ldrh	r3, [r3, #26]
 800a53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a542:	b29a      	uxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3728      	adds	r7, #40	; 0x28
 800a54e:	46bd      	mov	sp, r7
 800a550:	bdb0      	pop	{r4, r5, r7, pc}
 800a552:	bf00      	nop

0800a554 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <tcp_output_segment_busy+0x1c>
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <tcp_output_segment_busy+0x34>)
 800a564:	f240 529a 	movw	r2, #1434	; 0x59a
 800a568:	4908      	ldr	r1, [pc, #32]	; (800a58c <tcp_output_segment_busy+0x38>)
 800a56a:	4809      	ldr	r0, [pc, #36]	; (800a590 <tcp_output_segment_busy+0x3c>)
 800a56c:	f003 fff8 	bl	800e560 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	7b9b      	ldrb	r3, [r3, #14]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d001      	beq.n	800a57e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	08010a74 	.word	0x08010a74
 800a58c:	08011010 	.word	0x08011010
 800a590:	08010ac8 	.word	0x08010ac8

0800a594 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a594:	b5b0      	push	{r4, r5, r7, lr}
 800a596:	b08c      	sub	sp, #48	; 0x30
 800a598:	af04      	add	r7, sp, #16
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <tcp_output_segment+0x20>
 800a5a6:	4b64      	ldr	r3, [pc, #400]	; (800a738 <tcp_output_segment+0x1a4>)
 800a5a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a5ac:	4963      	ldr	r1, [pc, #396]	; (800a73c <tcp_output_segment+0x1a8>)
 800a5ae:	4864      	ldr	r0, [pc, #400]	; (800a740 <tcp_output_segment+0x1ac>)
 800a5b0:	f003 ffd6 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <tcp_output_segment+0x34>
 800a5ba:	4b5f      	ldr	r3, [pc, #380]	; (800a738 <tcp_output_segment+0x1a4>)
 800a5bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a5c0:	4960      	ldr	r1, [pc, #384]	; (800a744 <tcp_output_segment+0x1b0>)
 800a5c2:	485f      	ldr	r0, [pc, #380]	; (800a740 <tcp_output_segment+0x1ac>)
 800a5c4:	f003 ffcc 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <tcp_output_segment+0x48>
 800a5ce:	4b5a      	ldr	r3, [pc, #360]	; (800a738 <tcp_output_segment+0x1a4>)
 800a5d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a5d4:	495c      	ldr	r1, [pc, #368]	; (800a748 <tcp_output_segment+0x1b4>)
 800a5d6:	485a      	ldr	r0, [pc, #360]	; (800a740 <tcp_output_segment+0x1ac>)
 800a5d8:	f003 ffc2 	bl	800e560 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7ff ffb9 	bl	800a554 <tcp_output_segment_busy>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e0a1      	b.n	800a730 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68dc      	ldr	r4, [r3, #12]
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7f9 fdec 	bl	80041d2 <lwip_htonl>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68dc      	ldr	r4, [r3, #12]
 800a606:	4610      	mov	r0, r2
 800a608:	f7f9 fdce 	bl	80041a8 <lwip_htons>
 800a60c:	4603      	mov	r3, r0
 800a60e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a618:	441a      	add	r2, r3
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	3314      	adds	r3, #20
 800a624:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	7a9b      	ldrb	r3, [r3, #10]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d015      	beq.n	800a65e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	3304      	adds	r3, #4
 800a636:	461a      	mov	r2, r3
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a63e:	f7fc fe8b 	bl	8007358 <tcp_eff_send_mss_netif>
 800a642:	4603      	mov	r3, r0
 800a644:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a646:	8b7b      	ldrh	r3, [r7, #26]
 800a648:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7f9 fdc0 	bl	80041d2 <lwip_htonl>
 800a652:	4602      	mov	r2, r0
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	3304      	adds	r3, #4
 800a65c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a664:	2b00      	cmp	r3, #0
 800a666:	da02      	bge.n	800a66e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2200      	movs	r2, #0
 800a66c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10c      	bne.n	800a690 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a676:	4b35      	ldr	r3, [pc, #212]	; (800a74c <tcp_output_segment+0x1b8>)
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	4618      	mov	r0, r3
 800a686:	f7f9 fda4 	bl	80041d2 <lwip_htonl>
 800a68a:	4602      	mov	r2, r0
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	8959      	ldrh	r1, [r3, #10]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	8b3a      	ldrh	r2, [r7, #24]
 800a6aa:	1a8a      	subs	r2, r1, r2
 800a6ac:	b292      	uxth	r2, r2
 800a6ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	8919      	ldrh	r1, [r3, #8]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	8b3a      	ldrh	r2, [r7, #24]
 800a6bc:	1a8a      	subs	r2, r1, r2
 800a6be:	b292      	uxth	r2, r2
 800a6c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	68d2      	ldr	r2, [r2, #12]
 800a6ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	741a      	strb	r2, [r3, #16]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	68da      	ldr	r2, [r3, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	7a9b      	ldrb	r3, [r3, #10]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <tcp_output_segment+0x158>
 800a6e8:	2318      	movs	r3, #24
 800a6ea:	e000      	b.n	800a6ee <tcp_output_segment+0x15a>
 800a6ec:	2314      	movs	r3, #20
 800a6ee:	4413      	add	r3, r2
 800a6f0:	69fa      	ldr	r2, [r7, #28]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d006      	beq.n	800a704 <tcp_output_segment+0x170>
 800a6f6:	4b10      	ldr	r3, [pc, #64]	; (800a738 <tcp_output_segment+0x1a4>)
 800a6f8:	f240 621c 	movw	r2, #1564	; 0x61c
 800a6fc:	4914      	ldr	r1, [pc, #80]	; (800a750 <tcp_output_segment+0x1bc>)
 800a6fe:	4810      	ldr	r0, [pc, #64]	; (800a740 <tcp_output_segment+0x1ac>)
 800a700:	f003 ff2e 	bl	800e560 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6858      	ldr	r0, [r3, #4]
 800a708:	68b9      	ldr	r1, [r7, #8]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	1d1c      	adds	r4, r3, #4
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	7add      	ldrb	r5, [r3, #11]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	7a9b      	ldrb	r3, [r3, #10]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	9202      	str	r2, [sp, #8]
 800a71a:	2206      	movs	r2, #6
 800a71c:	9201      	str	r2, [sp, #4]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	462b      	mov	r3, r5
 800a722:	4622      	mov	r2, r4
 800a724:	f002 fdee 	bl	800d304 <ip4_output_if>
 800a728:	4603      	mov	r3, r0
 800a72a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3720      	adds	r7, #32
 800a734:	46bd      	mov	sp, r7
 800a736:	bdb0      	pop	{r4, r5, r7, pc}
 800a738:	08010a74 	.word	0x08010a74
 800a73c:	08011038 	.word	0x08011038
 800a740:	08010ac8 	.word	0x08010ac8
 800a744:	08011058 	.word	0x08011058
 800a748:	08011078 	.word	0x08011078
 800a74c:	2000828c 	.word	0x2000828c
 800a750:	0801109c 	.word	0x0801109c

0800a754 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a754:	b5b0      	push	{r4, r5, r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <tcp_rexmit_rto_prepare+0x1c>
 800a762:	4b31      	ldr	r3, [pc, #196]	; (800a828 <tcp_rexmit_rto_prepare+0xd4>)
 800a764:	f240 6263 	movw	r2, #1635	; 0x663
 800a768:	4930      	ldr	r1, [pc, #192]	; (800a82c <tcp_rexmit_rto_prepare+0xd8>)
 800a76a:	4831      	ldr	r0, [pc, #196]	; (800a830 <tcp_rexmit_rto_prepare+0xdc>)
 800a76c:	f003 fef8 	bl	800e560 <iprintf>

  if (pcb->unacked == NULL) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a774:	2b00      	cmp	r3, #0
 800a776:	d102      	bne.n	800a77e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a778:	f06f 0305 	mvn.w	r3, #5
 800a77c:	e050      	b.n	800a820 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e00b      	b.n	800a79e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff fee4 	bl	800a554 <tcp_output_segment_busy>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a792:	f06f 0305 	mvn.w	r3, #5
 800a796:	e043      	b.n	800a820 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1ef      	bne.n	800a786 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fed4 	bl	800a554 <tcp_output_segment_busy>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a7b2:	f06f 0305 	mvn.w	r3, #5
 800a7b6:	e033      	b.n	800a820 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8b5b      	ldrh	r3, [r3, #26]
 800a7d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7f9 fcf5 	bl	80041d2 <lwip_htonl>
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	891b      	ldrh	r3, [r3, #8]
 800a7ee:	461d      	mov	r5, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	899b      	ldrh	r3, [r3, #12]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7f9 fcd5 	bl	80041a8 <lwip_htons>
 800a7fe:	4603      	mov	r3, r0
 800a800:	b2db      	uxtb	r3, r3
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <tcp_rexmit_rto_prepare+0xba>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <tcp_rexmit_rto_prepare+0xbc>
 800a80e:	2300      	movs	r3, #0
 800a810:	442b      	add	r3, r5
 800a812:	18e2      	adds	r2, r4, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bdb0      	pop	{r4, r5, r7, pc}
 800a828:	08010a74 	.word	0x08010a74
 800a82c:	080110b0 	.word	0x080110b0
 800a830:	08010ac8 	.word	0x08010ac8

0800a834 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <tcp_rexmit_rto_commit+0x1c>
 800a842:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <tcp_rexmit_rto_commit+0x44>)
 800a844:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a848:	490c      	ldr	r1, [pc, #48]	; (800a87c <tcp_rexmit_rto_commit+0x48>)
 800a84a:	480d      	ldr	r0, [pc, #52]	; (800a880 <tcp_rexmit_rto_commit+0x4c>)
 800a84c:	f003 fe88 	bl	800e560 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a856:	2bff      	cmp	r3, #255	; 0xff
 800a858:	d007      	beq.n	800a86a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a860:	3301      	adds	r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fc7e 	bl	800a16c <tcp_output>
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	08010a74 	.word	0x08010a74
 800a87c:	080110d4 	.word	0x080110d4
 800a880:	08010ac8 	.word	0x08010ac8

0800a884 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <tcp_rexmit_rto+0x1c>
 800a892:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <tcp_rexmit_rto+0x38>)
 800a894:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a898:	4909      	ldr	r1, [pc, #36]	; (800a8c0 <tcp_rexmit_rto+0x3c>)
 800a89a:	480a      	ldr	r0, [pc, #40]	; (800a8c4 <tcp_rexmit_rto+0x40>)
 800a89c:	f003 fe60 	bl	800e560 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff ff57 	bl	800a754 <tcp_rexmit_rto_prepare>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d102      	bne.n	800a8b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7ff ffc1 	bl	800a834 <tcp_rexmit_rto_commit>
  }
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	08010a74 	.word	0x08010a74
 800a8c0:	080110f8 	.word	0x080110f8
 800a8c4:	08010ac8 	.word	0x08010ac8

0800a8c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a8c8:	b590      	push	{r4, r7, lr}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <tcp_rexmit+0x1c>
 800a8d6:	4b2f      	ldr	r3, [pc, #188]	; (800a994 <tcp_rexmit+0xcc>)
 800a8d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a8dc:	492e      	ldr	r1, [pc, #184]	; (800a998 <tcp_rexmit+0xd0>)
 800a8de:	482f      	ldr	r0, [pc, #188]	; (800a99c <tcp_rexmit+0xd4>)
 800a8e0:	f003 fe3e 	bl	800e560 <iprintf>

  if (pcb->unacked == NULL) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a8ec:	f06f 0305 	mvn.w	r3, #5
 800a8f0:	e04c      	b.n	800a98c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a8f8:	68b8      	ldr	r0, [r7, #8]
 800a8fa:	f7ff fe2b 	bl	800a554 <tcp_output_segment_busy>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a904:	f06f 0305 	mvn.w	r3, #5
 800a908:	e040      	b.n	800a98c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	336c      	adds	r3, #108	; 0x6c
 800a916:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a918:	e002      	b.n	800a920 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d011      	beq.n	800a94c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	4618      	mov	r0, r3
 800a932:	f7f9 fc4e 	bl	80041d2 <lwip_htonl>
 800a936:	4604      	mov	r4, r0
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	4618      	mov	r0, r3
 800a940:	f7f9 fc47 	bl	80041d2 <lwip_htonl>
 800a944:	4603      	mov	r3, r0
 800a946:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dbe6      	blt.n	800a91a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a970:	2bff      	cmp	r3, #255	; 0xff
 800a972:	d007      	beq.n	800a984 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a97a:	3301      	adds	r3, #1
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	bd90      	pop	{r4, r7, pc}
 800a994:	08010a74 	.word	0x08010a74
 800a998:	08011114 	.word	0x08011114
 800a99c:	08010ac8 	.word	0x08010ac8

0800a9a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <tcp_rexmit_fast+0x1c>
 800a9ae:	4b2a      	ldr	r3, [pc, #168]	; (800aa58 <tcp_rexmit_fast+0xb8>)
 800a9b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a9b4:	4929      	ldr	r1, [pc, #164]	; (800aa5c <tcp_rexmit_fast+0xbc>)
 800a9b6:	482a      	ldr	r0, [pc, #168]	; (800aa60 <tcp_rexmit_fast+0xc0>)
 800a9b8:	f003 fdd2 	bl	800e560 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d044      	beq.n	800aa4e <tcp_rexmit_fast+0xae>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	8b5b      	ldrh	r3, [r3, #26]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d13e      	bne.n	800aa4e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ff79 	bl	800a8c8 <tcp_rexmit>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d138      	bne.n	800aa4e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	bf28      	it	cs
 800a9ec:	4613      	movcs	r3, r2
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	0fda      	lsrs	r2, r3, #31
 800a9f2:	4413      	add	r3, r2
 800a9f4:	105b      	asrs	r3, r3, #1
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800aa04:	461a      	mov	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d206      	bcs.n	800aa1e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa28:	4619      	mov	r1, r3
 800aa2a:	0049      	lsls	r1, r1, #1
 800aa2c:	440b      	add	r3, r1
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	4413      	add	r3, r2
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	8b5b      	ldrh	r3, [r3, #26]
 800aa3e:	f043 0304 	orr.w	r3, r3, #4
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	08010a74 	.word	0x08010a74
 800aa5c:	0801112c 	.word	0x0801112c
 800aa60:	08010ac8 	.word	0x08010ac8

0800aa64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	607b      	str	r3, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	817b      	strh	r3, [r7, #10]
 800aa72:	4613      	mov	r3, r2
 800aa74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800aa76:	897a      	ldrh	r2, [r7, #10]
 800aa78:	893b      	ldrh	r3, [r7, #8]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3314      	adds	r3, #20
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa86:	4619      	mov	r1, r3
 800aa88:	2022      	movs	r0, #34	; 0x22
 800aa8a:	f7fa fc07 	bl	800529c <pbuf_alloc>
 800aa8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d04d      	beq.n	800ab32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800aa96:	897b      	ldrh	r3, [r7, #10]
 800aa98:	3313      	adds	r3, #19
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	8952      	ldrh	r2, [r2, #10]
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	db06      	blt.n	800aab0 <tcp_output_alloc_header_common+0x4c>
 800aaa2:	4b26      	ldr	r3, [pc, #152]	; (800ab3c <tcp_output_alloc_header_common+0xd8>)
 800aaa4:	f240 7223 	movw	r2, #1827	; 0x723
 800aaa8:	4925      	ldr	r1, [pc, #148]	; (800ab40 <tcp_output_alloc_header_common+0xdc>)
 800aaaa:	4826      	ldr	r0, [pc, #152]	; (800ab44 <tcp_output_alloc_header_common+0xe0>)
 800aaac:	f003 fd58 	bl	800e560 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800aab6:	8c3b      	ldrh	r3, [r7, #32]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f9 fb75 	bl	80041a8 <lwip_htons>
 800aabe:	4603      	mov	r3, r0
 800aac0:	461a      	mov	r2, r3
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800aac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7f9 fb6d 	bl	80041a8 <lwip_htons>
 800aace:	4603      	mov	r3, r0
 800aad0:	461a      	mov	r2, r3
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7f9 fb78 	bl	80041d2 <lwip_htonl>
 800aae2:	4602      	mov	r2, r0
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800aae8:	897b      	ldrh	r3, [r7, #10]
 800aaea:	089b      	lsrs	r3, r3, #2
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	3305      	adds	r3, #5
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	031b      	lsls	r3, r3, #12
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4313      	orrs	r3, r2
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7f9 fb51 	bl	80041a8 <lwip_htons>
 800ab06:	4603      	mov	r3, r0
 800ab08:	461a      	mov	r2, r3
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ab0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7f9 fb49 	bl	80041a8 <lwip_htons>
 800ab16:	4603      	mov	r3, r0
 800ab18:	461a      	mov	r2, r3
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2200      	movs	r2, #0
 800ab22:	741a      	strb	r2, [r3, #16]
 800ab24:	2200      	movs	r2, #0
 800ab26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	749a      	strb	r2, [r3, #18]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ab32:	697b      	ldr	r3, [r7, #20]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	08010a74 	.word	0x08010a74
 800ab40:	0801114c 	.word	0x0801114c
 800ab44:	08010ac8 	.word	0x08010ac8

0800ab48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ab48:	b5b0      	push	{r4, r5, r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af04      	add	r7, sp, #16
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	607b      	str	r3, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	817b      	strh	r3, [r7, #10]
 800ab56:	4613      	mov	r3, r2
 800ab58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <tcp_output_alloc_header+0x26>
 800ab60:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <tcp_output_alloc_header+0x70>)
 800ab62:	f240 7242 	movw	r2, #1858	; 0x742
 800ab66:	4915      	ldr	r1, [pc, #84]	; (800abbc <tcp_output_alloc_header+0x74>)
 800ab68:	4815      	ldr	r0, [pc, #84]	; (800abc0 <tcp_output_alloc_header+0x78>)
 800ab6a:	f003 fcf9 	bl	800e560 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8adb      	ldrh	r3, [r3, #22]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	8b12      	ldrh	r2, [r2, #24]
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ab7e:	893d      	ldrh	r5, [r7, #8]
 800ab80:	897c      	ldrh	r4, [r7, #10]
 800ab82:	9103      	str	r1, [sp, #12]
 800ab84:	2110      	movs	r1, #16
 800ab86:	9102      	str	r1, [sp, #8]
 800ab88:	9201      	str	r2, [sp, #4]
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4621      	mov	r1, r4
 800ab92:	f7ff ff67 	bl	800aa64 <tcp_output_alloc_header_common>
 800ab96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d006      	beq.n	800abac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aba6:	441a      	add	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800abac:	697b      	ldr	r3, [r7, #20]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bdb0      	pop	{r4, r5, r7, pc}
 800abb6:	bf00      	nop
 800abb8:	08010a74 	.word	0x08010a74
 800abbc:	0801117c 	.word	0x0801117c
 800abc0:	08010ac8 	.word	0x08010ac8

0800abc4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	4611      	mov	r1, r2
 800abd0:	461a      	mov	r2, r3
 800abd2:	460b      	mov	r3, r1
 800abd4:	71fb      	strb	r3, [r7, #7]
 800abd6:	4613      	mov	r3, r2
 800abd8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <tcp_output_fill_options+0x2e>
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <tcp_output_fill_options+0x6c>)
 800abe6:	f240 7256 	movw	r2, #1878	; 0x756
 800abea:	4912      	ldr	r1, [pc, #72]	; (800ac34 <tcp_output_fill_options+0x70>)
 800abec:	4812      	ldr	r0, [pc, #72]	; (800ac38 <tcp_output_fill_options+0x74>)
 800abee:	f003 fcb7 	bl	800e560 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	3314      	adds	r3, #20
 800abfc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800abfe:	8bfb      	ldrh	r3, [r7, #30]
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	461a      	mov	r2, r3
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	3314      	adds	r3, #20
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	4413      	add	r3, r2
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d006      	beq.n	800ac28 <tcp_output_fill_options+0x64>
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <tcp_output_fill_options+0x6c>)
 800ac1c:	f240 7275 	movw	r2, #1909	; 0x775
 800ac20:	4906      	ldr	r1, [pc, #24]	; (800ac3c <tcp_output_fill_options+0x78>)
 800ac22:	4805      	ldr	r0, [pc, #20]	; (800ac38 <tcp_output_fill_options+0x74>)
 800ac24:	f003 fc9c 	bl	800e560 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ac28:	bf00      	nop
 800ac2a:	3720      	adds	r7, #32
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	08010a74 	.word	0x08010a74
 800ac34:	080111a4 	.word	0x080111a4
 800ac38:	08010ac8 	.word	0x08010ac8
 800ac3c:	0801109c 	.word	0x0801109c

0800ac40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08a      	sub	sp, #40	; 0x28
 800ac44:	af04      	add	r7, sp, #16
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <tcp_output_control_segment+0x22>
 800ac54:	4b1c      	ldr	r3, [pc, #112]	; (800acc8 <tcp_output_control_segment+0x88>)
 800ac56:	f240 7287 	movw	r2, #1927	; 0x787
 800ac5a:	491c      	ldr	r1, [pc, #112]	; (800accc <tcp_output_control_segment+0x8c>)
 800ac5c:	481c      	ldr	r0, [pc, #112]	; (800acd0 <tcp_output_control_segment+0x90>)
 800ac5e:	f003 fc7f 	bl	800e560 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7fe ff40 	bl	8009aec <tcp_route>
 800ac6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ac74:	23fc      	movs	r3, #252	; 0xfc
 800ac76:	75fb      	strb	r3, [r7, #23]
 800ac78:	e01c      	b.n	800acb4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d006      	beq.n	800ac8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	7adb      	ldrb	r3, [r3, #11]
 800ac84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	7a9b      	ldrb	r3, [r3, #10]
 800ac8a:	757b      	strb	r3, [r7, #21]
 800ac8c:	e003      	b.n	800ac96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ac8e:	23ff      	movs	r3, #255	; 0xff
 800ac90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ac96:	7dba      	ldrb	r2, [r7, #22]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	9302      	str	r3, [sp, #8]
 800ac9c:	2306      	movs	r3, #6
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	7d7b      	ldrb	r3, [r7, #21]
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	4613      	mov	r3, r2
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	68b8      	ldr	r0, [r7, #8]
 800acac:	f002 fb2a 	bl	800d304 <ip4_output_if>
 800acb0:	4603      	mov	r3, r0
 800acb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800acb4:	68b8      	ldr	r0, [r7, #8]
 800acb6:	f7fa fdd5 	bl	8005864 <pbuf_free>
  return err;
 800acba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	08010a74 	.word	0x08010a74
 800accc:	080111cc 	.word	0x080111cc
 800acd0:	08010ac8 	.word	0x08010ac8

0800acd4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800acd4:	b590      	push	{r4, r7, lr}
 800acd6:	b08b      	sub	sp, #44	; 0x2c
 800acd8:	af04      	add	r7, sp, #16
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d106      	bne.n	800acf6 <tcp_rst+0x22>
 800ace8:	4b1f      	ldr	r3, [pc, #124]	; (800ad68 <tcp_rst+0x94>)
 800acea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800acee:	491f      	ldr	r1, [pc, #124]	; (800ad6c <tcp_rst+0x98>)
 800acf0:	481f      	ldr	r0, [pc, #124]	; (800ad70 <tcp_rst+0x9c>)
 800acf2:	f003 fc35 	bl	800e560 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d106      	bne.n	800ad0a <tcp_rst+0x36>
 800acfc:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <tcp_rst+0x94>)
 800acfe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ad02:	491c      	ldr	r1, [pc, #112]	; (800ad74 <tcp_rst+0xa0>)
 800ad04:	481a      	ldr	r0, [pc, #104]	; (800ad70 <tcp_rst+0x9c>)
 800ad06:	f003 fc2b 	bl	800e560 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ad0e:	f246 0308 	movw	r3, #24584	; 0x6008
 800ad12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	b29c      	uxth	r4, r3
 800ad18:	68b8      	ldr	r0, [r7, #8]
 800ad1a:	f7f9 fa5a 	bl	80041d2 <lwip_htonl>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	8abb      	ldrh	r3, [r7, #20]
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	2314      	movs	r3, #20
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	4613      	mov	r3, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	4621      	mov	r1, r4
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff fe94 	bl	800aa64 <tcp_output_alloc_header_common>
 800ad3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00c      	beq.n	800ad5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	2200      	movs	r2, #0
 800ad48:	6939      	ldr	r1, [r7, #16]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7ff ff3a 	bl	800abc4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	6939      	ldr	r1, [r7, #16]
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7ff ff72 	bl	800ac40 <tcp_output_control_segment>
 800ad5c:	e000      	b.n	800ad60 <tcp_rst+0x8c>
    return;
 800ad5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd90      	pop	{r4, r7, pc}
 800ad66:	bf00      	nop
 800ad68:	08010a74 	.word	0x08010a74
 800ad6c:	080111f8 	.word	0x080111f8
 800ad70:	08010ac8 	.word	0x08010ac8
 800ad74:	08011214 	.word	0x08011214

0800ad78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d106      	bne.n	800ad9c <tcp_send_empty_ack+0x24>
 800ad8e:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <tcp_send_empty_ack+0xb8>)
 800ad90:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ad94:	4927      	ldr	r1, [pc, #156]	; (800ae34 <tcp_send_empty_ack+0xbc>)
 800ad96:	4828      	ldr	r0, [pc, #160]	; (800ae38 <tcp_send_empty_ack+0xc0>)
 800ad98:	f003 fbe2 	bl	800e560 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ad9c:	7dfb      	ldrb	r3, [r7, #23]
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 0304 	and.w	r3, r3, #4
 800ada6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ada8:	7d7b      	ldrb	r3, [r7, #21]
 800adaa:	b29c      	uxth	r4, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f9 fa0e 	bl	80041d2 <lwip_htonl>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2200      	movs	r2, #0
 800adba:	4621      	mov	r1, r4
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff fec3 	bl	800ab48 <tcp_output_alloc_header>
 800adc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	8b5b      	ldrh	r3, [r3, #26]
 800adce:	f043 0303 	orr.w	r3, r3, #3
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800add8:	f06f 0301 	mvn.w	r3, #1
 800addc:	e023      	b.n	800ae26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800adde:	7dbb      	ldrb	r3, [r7, #22]
 800ade0:	7dfa      	ldrb	r2, [r7, #23]
 800ade2:	6939      	ldr	r1, [r7, #16]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff feed 	bl	800abc4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3304      	adds	r3, #4
 800adf0:	6939      	ldr	r1, [r7, #16]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff ff24 	bl	800ac40 <tcp_output_control_segment>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800adfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d007      	beq.n	800ae14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	8b5b      	ldrh	r3, [r3, #26]
 800ae08:	f043 0303 	orr.w	r3, r3, #3
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	835a      	strh	r2, [r3, #26]
 800ae12:	e006      	b.n	800ae22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	8b5b      	ldrh	r3, [r3, #26]
 800ae18:	f023 0303 	bic.w	r3, r3, #3
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ae22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd90      	pop	{r4, r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	08010a74 	.word	0x08010a74
 800ae34:	08011230 	.word	0x08011230
 800ae38:	08010ac8 	.word	0x08010ac8

0800ae3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ae3c:	b590      	push	{r4, r7, lr}
 800ae3e:	b087      	sub	sp, #28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ae44:	2300      	movs	r3, #0
 800ae46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <tcp_keepalive+0x20>
 800ae4e:	4b18      	ldr	r3, [pc, #96]	; (800aeb0 <tcp_keepalive+0x74>)
 800ae50:	f640 0224 	movw	r2, #2084	; 0x824
 800ae54:	4917      	ldr	r1, [pc, #92]	; (800aeb4 <tcp_keepalive+0x78>)
 800ae56:	4818      	ldr	r0, [pc, #96]	; (800aeb8 <tcp_keepalive+0x7c>)
 800ae58:	f003 fb82 	bl	800e560 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	b29c      	uxth	r4, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae64:	3b01      	subs	r3, #1
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f9 f9b3 	bl	80041d2 <lwip_htonl>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4621      	mov	r1, r4
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fe68 	bl	800ab48 <tcp_output_alloc_header>
 800ae78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d102      	bne.n	800ae86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	e010      	b.n	800aea8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	6939      	ldr	r1, [r7, #16]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff fe99 	bl	800abc4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3304      	adds	r3, #4
 800ae98:	6939      	ldr	r1, [r7, #16]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f7ff fed0 	bl	800ac40 <tcp_output_control_segment>
 800aea0:	4603      	mov	r3, r0
 800aea2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	371c      	adds	r7, #28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}
 800aeb0:	08010a74 	.word	0x08010a74
 800aeb4:	08011250 	.word	0x08011250
 800aeb8:	08010ac8 	.word	0x08010ac8

0800aebc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b08b      	sub	sp, #44	; 0x2c
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aec4:	2300      	movs	r3, #0
 800aec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <tcp_zero_window_probe+0x22>
 800aed0:	4b4c      	ldr	r3, [pc, #304]	; (800b004 <tcp_zero_window_probe+0x148>)
 800aed2:	f640 024f 	movw	r2, #2127	; 0x84f
 800aed6:	494c      	ldr	r1, [pc, #304]	; (800b008 <tcp_zero_window_probe+0x14c>)
 800aed8:	484c      	ldr	r0, [pc, #304]	; (800b00c <tcp_zero_window_probe+0x150>)
 800aeda:	f003 fb41 	bl	800e560 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	e086      	b.n	800affc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aef4:	2bff      	cmp	r3, #255	; 0xff
 800aef6:	d007      	beq.n	800af08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aefe:	3301      	adds	r3, #1
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4618      	mov	r0, r3
 800af12:	f7f9 f949 	bl	80041a8 <lwip_htons>
 800af16:	4603      	mov	r3, r0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <tcp_zero_window_probe+0x72>
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	891b      	ldrh	r3, [r3, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <tcp_zero_window_probe+0x72>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <tcp_zero_window_probe+0x74>
 800af2e:	2300      	movs	r3, #0
 800af30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800af32:	7ffb      	ldrb	r3, [r7, #31]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf0c      	ite	eq
 800af38:	2301      	moveq	r3, #1
 800af3a:	2300      	movne	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800af40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af44:	b299      	uxth	r1, r3
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	8bba      	ldrh	r2, [r7, #28]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fdfa 	bl	800ab48 <tcp_output_alloc_header>
 800af54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	e04c      	b.n	800affc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800af68:	7ffb      	ldrb	r3, [r7, #31]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d011      	beq.n	800af92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	899b      	ldrh	r3, [r3, #12]
 800af72:	b29b      	uxth	r3, r3
 800af74:	b21b      	sxth	r3, r3
 800af76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af7a:	b21c      	sxth	r4, r3
 800af7c:	2011      	movs	r0, #17
 800af7e:	f7f9 f913 	bl	80041a8 <lwip_htons>
 800af82:	4603      	mov	r3, r0
 800af84:	b21b      	sxth	r3, r3
 800af86:	4323      	orrs	r3, r4
 800af88:	b21b      	sxth	r3, r3
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	819a      	strh	r2, [r3, #12]
 800af90:	e010      	b.n	800afb4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	3314      	adds	r3, #20
 800af98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	6858      	ldr	r0, [r3, #4]
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	891a      	ldrh	r2, [r3, #8]
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	891b      	ldrh	r3, [r3, #8]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	b29b      	uxth	r3, r3
 800afac:	2201      	movs	r2, #1
 800afae:	6939      	ldr	r1, [r7, #16]
 800afb0:	f7fa fe52 	bl	8005c58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7f9 f909 	bl	80041d2 <lwip_htonl>
 800afc0:	4603      	mov	r3, r0
 800afc2:	3301      	adds	r3, #1
 800afc4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da02      	bge.n	800afd8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800afd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afdc:	2200      	movs	r2, #0
 800afde:	69b9      	ldr	r1, [r7, #24]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff fdef 	bl	800abc4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3304      	adds	r3, #4
 800afec:	69b9      	ldr	r1, [r7, #24]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fe26 	bl	800ac40 <tcp_output_control_segment>
 800aff4:	4603      	mov	r3, r0
 800aff6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aff8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800affc:	4618      	mov	r0, r3
 800affe:	372c      	adds	r7, #44	; 0x2c
 800b000:	46bd      	mov	sp, r7
 800b002:	bd90      	pop	{r4, r7, pc}
 800b004:	08010a74 	.word	0x08010a74
 800b008:	0801126c 	.word	0x0801126c
 800b00c:	08010ac8 	.word	0x08010ac8

0800b010 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b018:	f7fa ff0c 	bl	8005e34 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b01c:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <tcpip_tcp_timer+0x38>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d103      	bne.n	800b02c <tcpip_tcp_timer+0x1c>
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <tcpip_tcp_timer+0x3c>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d005      	beq.n	800b038 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b02c:	2200      	movs	r2, #0
 800b02e:	4908      	ldr	r1, [pc, #32]	; (800b050 <tcpip_tcp_timer+0x40>)
 800b030:	20fa      	movs	r0, #250	; 0xfa
 800b032:	f000 f8f3 	bl	800b21c <sys_timeout>
 800b036:	e003      	b.n	800b040 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b038:	4b06      	ldr	r3, [pc, #24]	; (800b054 <tcpip_tcp_timer+0x44>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
  }
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20008298 	.word	0x20008298
 800b04c:	2000829c 	.word	0x2000829c
 800b050:	0800b011 	.word	0x0800b011
 800b054:	200082e4 	.word	0x200082e4

0800b058 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b05c:	4b0a      	ldr	r3, [pc, #40]	; (800b088 <tcp_timer_needed+0x30>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10f      	bne.n	800b084 <tcp_timer_needed+0x2c>
 800b064:	4b09      	ldr	r3, [pc, #36]	; (800b08c <tcp_timer_needed+0x34>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d103      	bne.n	800b074 <tcp_timer_needed+0x1c>
 800b06c:	4b08      	ldr	r3, [pc, #32]	; (800b090 <tcp_timer_needed+0x38>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d007      	beq.n	800b084 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <tcp_timer_needed+0x30>)
 800b076:	2201      	movs	r2, #1
 800b078:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b07a:	2200      	movs	r2, #0
 800b07c:	4905      	ldr	r1, [pc, #20]	; (800b094 <tcp_timer_needed+0x3c>)
 800b07e:	20fa      	movs	r0, #250	; 0xfa
 800b080:	f000 f8cc 	bl	800b21c <sys_timeout>
  }
}
 800b084:	bf00      	nop
 800b086:	bd80      	pop	{r7, pc}
 800b088:	200082e4 	.word	0x200082e4
 800b08c:	20008298 	.word	0x20008298
 800b090:	2000829c 	.word	0x2000829c
 800b094:	0800b011 	.word	0x0800b011

0800b098 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b0a4:	2006      	movs	r0, #6
 800b0a6:	f7f9 fcf7 	bl	8004a98 <memp_malloc>
 800b0aa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d109      	bne.n	800b0c6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d151      	bne.n	800b15c <sys_timeout_abs+0xc4>
 800b0b8:	4b2a      	ldr	r3, [pc, #168]	; (800b164 <sys_timeout_abs+0xcc>)
 800b0ba:	22be      	movs	r2, #190	; 0xbe
 800b0bc:	492a      	ldr	r1, [pc, #168]	; (800b168 <sys_timeout_abs+0xd0>)
 800b0be:	482b      	ldr	r0, [pc, #172]	; (800b16c <sys_timeout_abs+0xd4>)
 800b0c0:	f003 fa4e 	bl	800e560 <iprintf>
    return;
 800b0c4:	e04a      	b.n	800b15c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b0de:	4b24      	ldr	r3, [pc, #144]	; (800b170 <sys_timeout_abs+0xd8>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b0e6:	4a22      	ldr	r2, [pc, #136]	; (800b170 <sys_timeout_abs+0xd8>)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	6013      	str	r3, [r2, #0]
    return;
 800b0ec:	e037      	b.n	800b15e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	4b1f      	ldr	r3, [pc, #124]	; (800b170 <sys_timeout_abs+0xd8>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	0fdb      	lsrs	r3, r3, #31
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b106:	4b1a      	ldr	r3, [pc, #104]	; (800b170 <sys_timeout_abs+0xd8>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b10e:	4a18      	ldr	r2, [pc, #96]	; (800b170 <sys_timeout_abs+0xd8>)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	e023      	b.n	800b15e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b116:	4b16      	ldr	r3, [pc, #88]	; (800b170 <sys_timeout_abs+0xd8>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e01a      	b.n	800b154 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00b      	beq.n	800b13e <sys_timeout_abs+0xa6>
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	0fdb      	lsrs	r3, r3, #31
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d007      	beq.n	800b14e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	601a      	str	r2, [r3, #0]
        break;
 800b14c:	e007      	b.n	800b15e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e1      	bne.n	800b11e <sys_timeout_abs+0x86>
 800b15a:	e000      	b.n	800b15e <sys_timeout_abs+0xc6>
    return;
 800b15c:	bf00      	nop
      }
    }
  }
}
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	08011290 	.word	0x08011290
 800b168:	080112c4 	.word	0x080112c4
 800b16c:	08011304 	.word	0x08011304
 800b170:	200082dc 	.word	0x200082dc

0800b174 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	4798      	blx	r3

  now = sys_now();
 800b186:	f7f8 fe17 	bl	8003db8 <sys_now>
 800b18a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <lwip_cyclic_timer+0x5c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4413      	add	r3, r2
 800b196:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	0fdb      	lsrs	r3, r3, #31
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d009      	beq.n	800b1be <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4907      	ldr	r1, [pc, #28]	; (800b1d4 <lwip_cyclic_timer+0x60>)
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff ff6e 	bl	800b098 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b1bc:	e004      	b.n	800b1c8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	4904      	ldr	r1, [pc, #16]	; (800b1d4 <lwip_cyclic_timer+0x60>)
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff ff68 	bl	800b098 <sys_timeout_abs>
}
 800b1c8:	bf00      	nop
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	200082e0 	.word	0x200082e0
 800b1d4:	0800b175 	.word	0x0800b175

0800b1d8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b1de:	2301      	movs	r3, #1
 800b1e0:	607b      	str	r3, [r7, #4]
 800b1e2:	e00e      	b.n	800b202 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b1e4:	4a0b      	ldr	r2, [pc, #44]	; (800b214 <sys_timeouts_init+0x3c>)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	4a08      	ldr	r2, [pc, #32]	; (800b214 <sys_timeouts_init+0x3c>)
 800b1f2:	4413      	add	r3, r2
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4908      	ldr	r1, [pc, #32]	; (800b218 <sys_timeouts_init+0x40>)
 800b1f8:	f000 f810 	bl	800b21c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3301      	adds	r3, #1
 800b200:	607b      	str	r3, [r7, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d9ed      	bls.n	800b1e4 <sys_timeouts_init+0xc>
  }
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	08011e7c 	.word	0x08011e7c
 800b218:	0800b175 	.word	0x0800b175

0800b21c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b22e:	d306      	bcc.n	800b23e <sys_timeout+0x22>
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <sys_timeout+0x40>)
 800b232:	f240 1229 	movw	r2, #297	; 0x129
 800b236:	490a      	ldr	r1, [pc, #40]	; (800b260 <sys_timeout+0x44>)
 800b238:	480a      	ldr	r0, [pc, #40]	; (800b264 <sys_timeout+0x48>)
 800b23a:	f003 f991 	bl	800e560 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b23e:	f7f8 fdbb 	bl	8003db8 <sys_now>
 800b242:	4602      	mov	r2, r0
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4413      	add	r3, r2
 800b248:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	6978      	ldr	r0, [r7, #20]
 800b250:	f7ff ff22 	bl	800b098 <sys_timeout_abs>
#endif
}
 800b254:	bf00      	nop
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	08011290 	.word	0x08011290
 800b260:	0801132c 	.word	0x0801132c
 800b264:	08011304 	.word	0x08011304

0800b268 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b26e:	f7f8 fda3 	bl	8003db8 <sys_now>
 800b272:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b274:	4b1a      	ldr	r3, [pc, #104]	; (800b2e0 <sys_check_timeouts+0x78>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <sys_check_timeouts+0x1a>
 800b27e:	f7f9 ffb7 	bl	80051f0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b282:	4b18      	ldr	r3, [pc, #96]	; (800b2e4 <sys_check_timeouts+0x7c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d022      	beq.n	800b2d4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	0fdb      	lsrs	r3, r3, #31
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d11a      	bne.n	800b2d8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a0f      	ldr	r2, [pc, #60]	; (800b2e4 <sys_check_timeouts+0x7c>)
 800b2a8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	4a0b      	ldr	r2, [pc, #44]	; (800b2e8 <sys_check_timeouts+0x80>)
 800b2bc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	2006      	movs	r0, #6
 800b2c2:	f7f9 fc59 	bl	8004b78 <memp_free>
    if (handler != NULL) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0d3      	beq.n	800b274 <sys_check_timeouts+0xc>
      handler(arg);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6838      	ldr	r0, [r7, #0]
 800b2d0:	4798      	blx	r3
  do {
 800b2d2:	e7cf      	b.n	800b274 <sys_check_timeouts+0xc>
      return;
 800b2d4:	bf00      	nop
 800b2d6:	e000      	b.n	800b2da <sys_check_timeouts+0x72>
      return;
 800b2d8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20008289 	.word	0x20008289
 800b2e4:	200082dc 	.word	0x200082dc
 800b2e8:	200082e0 	.word	0x200082e0

0800b2ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b2f0:	f003 f836 	bl	800e360 <rand>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b302:	b29a      	uxth	r2, r3
 800b304:	4b01      	ldr	r3, [pc, #4]	; (800b30c <udp_init+0x20>)
 800b306:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b308:	bf00      	nop
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20000028 	.word	0x20000028

0800b310 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b31a:	4b17      	ldr	r3, [pc, #92]	; (800b378 <udp_new_port+0x68>)
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	b291      	uxth	r1, r2
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <udp_new_port+0x68>)
 800b324:	8011      	strh	r1, [r2, #0]
 800b326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d103      	bne.n	800b336 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <udp_new_port+0x68>)
 800b330:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b334:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b336:	4b11      	ldr	r3, [pc, #68]	; (800b37c <udp_new_port+0x6c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	603b      	str	r3, [r7, #0]
 800b33c:	e011      	b.n	800b362 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	8a5a      	ldrh	r2, [r3, #18]
 800b342:	4b0d      	ldr	r3, [pc, #52]	; (800b378 <udp_new_port+0x68>)
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d108      	bne.n	800b35c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b34a:	88fb      	ldrh	r3, [r7, #6]
 800b34c:	3301      	adds	r3, #1
 800b34e:	80fb      	strh	r3, [r7, #6]
 800b350:	88fb      	ldrh	r3, [r7, #6]
 800b352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b356:	d3e0      	bcc.n	800b31a <udp_new_port+0xa>
        return 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	e007      	b.n	800b36c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	603b      	str	r3, [r7, #0]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1ea      	bne.n	800b33e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b368:	4b03      	ldr	r3, [pc, #12]	; (800b378 <udp_new_port+0x68>)
 800b36a:	881b      	ldrh	r3, [r3, #0]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	20000028 	.word	0x20000028
 800b37c:	200082e8 	.word	0x200082e8

0800b380 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	4613      	mov	r3, r2
 800b38c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d105      	bne.n	800b3a0 <udp_input_local_match+0x20>
 800b394:	4b27      	ldr	r3, [pc, #156]	; (800b434 <udp_input_local_match+0xb4>)
 800b396:	2287      	movs	r2, #135	; 0x87
 800b398:	4927      	ldr	r1, [pc, #156]	; (800b438 <udp_input_local_match+0xb8>)
 800b39a:	4828      	ldr	r0, [pc, #160]	; (800b43c <udp_input_local_match+0xbc>)
 800b39c:	f003 f8e0 	bl	800e560 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <udp_input_local_match+0x32>
 800b3a6:	4b23      	ldr	r3, [pc, #140]	; (800b434 <udp_input_local_match+0xb4>)
 800b3a8:	2288      	movs	r2, #136	; 0x88
 800b3aa:	4925      	ldr	r1, [pc, #148]	; (800b440 <udp_input_local_match+0xc0>)
 800b3ac:	4823      	ldr	r0, [pc, #140]	; (800b43c <udp_input_local_match+0xbc>)
 800b3ae:	f003 f8d7 	bl	800e560 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	7a1b      	ldrb	r3, [r3, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	7a1a      	ldrb	r2, [r3, #8]
 800b3be:	4b21      	ldr	r3, [pc, #132]	; (800b444 <udp_input_local_match+0xc4>)
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d001      	beq.n	800b3d2 <udp_input_local_match+0x52>
    return 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e02b      	b.n	800b42a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d018      	beq.n	800b40a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d013      	beq.n	800b406 <udp_input_local_match+0x86>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00f      	beq.n	800b406 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b3e6:	4b17      	ldr	r3, [pc, #92]	; (800b444 <udp_input_local_match+0xc4>)
 800b3e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ee:	d00a      	beq.n	800b406 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	4b13      	ldr	r3, [pc, #76]	; (800b444 <udp_input_local_match+0xc4>)
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	405a      	eors	r2, r3
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b402:	2b00      	cmp	r3, #0
 800b404:	d110      	bne.n	800b428 <udp_input_local_match+0xa8>
          return 1;
 800b406:	2301      	movs	r3, #1
 800b408:	e00f      	b.n	800b42a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d009      	beq.n	800b424 <udp_input_local_match+0xa4>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d005      	beq.n	800b424 <udp_input_local_match+0xa4>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	4b09      	ldr	r3, [pc, #36]	; (800b444 <udp_input_local_match+0xc4>)
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	429a      	cmp	r2, r3
 800b422:	d101      	bne.n	800b428 <udp_input_local_match+0xa8>
        return 1;
 800b424:	2301      	movs	r3, #1
 800b426:	e000      	b.n	800b42a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	08011378 	.word	0x08011378
 800b438:	080113a8 	.word	0x080113a8
 800b43c:	080113cc 	.word	0x080113cc
 800b440:	080113f4 	.word	0x080113f4
 800b444:	20004d1c 	.word	0x20004d1c

0800b448 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b448:	b590      	push	{r4, r7, lr}
 800b44a:	b08d      	sub	sp, #52	; 0x34
 800b44c:	af02      	add	r7, sp, #8
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d105      	bne.n	800b468 <udp_input+0x20>
 800b45c:	4b7c      	ldr	r3, [pc, #496]	; (800b650 <udp_input+0x208>)
 800b45e:	22cf      	movs	r2, #207	; 0xcf
 800b460:	497c      	ldr	r1, [pc, #496]	; (800b654 <udp_input+0x20c>)
 800b462:	487d      	ldr	r0, [pc, #500]	; (800b658 <udp_input+0x210>)
 800b464:	f003 f87c 	bl	800e560 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d105      	bne.n	800b47a <udp_input+0x32>
 800b46e:	4b78      	ldr	r3, [pc, #480]	; (800b650 <udp_input+0x208>)
 800b470:	22d0      	movs	r2, #208	; 0xd0
 800b472:	497a      	ldr	r1, [pc, #488]	; (800b65c <udp_input+0x214>)
 800b474:	4878      	ldr	r0, [pc, #480]	; (800b658 <udp_input+0x210>)
 800b476:	f003 f873 	bl	800e560 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	895b      	ldrh	r3, [r3, #10]
 800b47e:	2b07      	cmp	r3, #7
 800b480:	d803      	bhi.n	800b48a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7fa f9ee 	bl	8005864 <pbuf_free>
    goto end;
 800b488:	e0de      	b.n	800b648 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b490:	4b73      	ldr	r3, [pc, #460]	; (800b660 <udp_input+0x218>)
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	4a72      	ldr	r2, [pc, #456]	; (800b660 <udp_input+0x218>)
 800b496:	6812      	ldr	r2, [r2, #0]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f002 f80a 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f8 fe7c 	bl	80041a8 <lwip_htons>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	885b      	ldrh	r3, [r3, #2]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f8 fe74 	bl	80041a8 <lwip_htons>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4d0:	4b64      	ldr	r3, [pc, #400]	; (800b664 <udp_input+0x21c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d6:	e054      	b.n	800b582 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	8a5b      	ldrh	r3, [r3, #18]
 800b4dc:	89fa      	ldrh	r2, [r7, #14]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d14a      	bne.n	800b578 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b4e2:	7cfb      	ldrb	r3, [r7, #19]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4ea:	f7ff ff49 	bl	800b380 <udp_input_local_match>
 800b4ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d041      	beq.n	800b578 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	7c1b      	ldrb	r3, [r3, #16]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d11d      	bne.n	800b53c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d102      	bne.n	800b50c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	61fb      	str	r3, [r7, #28]
 800b50a:	e017      	b.n	800b53c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b50c:	7cfb      	ldrb	r3, [r7, #19]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d014      	beq.n	800b53c <udp_input+0xf4>
 800b512:	4b53      	ldr	r3, [pc, #332]	; (800b660 <udp_input+0x218>)
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51a:	d10f      	bne.n	800b53c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	3304      	adds	r3, #4
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d008      	beq.n	800b53c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	3304      	adds	r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d101      	bne.n	800b53c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	8a9b      	ldrh	r3, [r3, #20]
 800b540:	8a3a      	ldrh	r2, [r7, #16]
 800b542:	429a      	cmp	r2, r3
 800b544:	d118      	bne.n	800b578 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d005      	beq.n	800b55a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	4b43      	ldr	r3, [pc, #268]	; (800b660 <udp_input+0x218>)
 800b554:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b556:	429a      	cmp	r2, r3
 800b558:	d10e      	bne.n	800b578 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d014      	beq.n	800b58a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	68da      	ldr	r2, [r3, #12]
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b568:	4b3e      	ldr	r3, [pc, #248]	; (800b664 <udp_input+0x21c>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b570:	4a3c      	ldr	r2, [pc, #240]	; (800b664 <udp_input+0x21c>)
 800b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b574:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b576:	e008      	b.n	800b58a <udp_input+0x142>
      }
    }

    prev = pcb;
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1a7      	bne.n	800b4d8 <udp_input+0x90>
 800b588:	e000      	b.n	800b58c <udp_input+0x144>
        break;
 800b58a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <udp_input+0x15a>
    for_us = 1;
 800b59c:	2301      	movs	r3, #1
 800b59e:	76fb      	strb	r3, [r7, #27]
 800b5a0:	e00a      	b.n	800b5b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	4b2d      	ldr	r3, [pc, #180]	; (800b660 <udp_input+0x218>)
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	bf0c      	ite	eq
 800b5b0:	2301      	moveq	r3, #1
 800b5b2:	2300      	movne	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b5b8:	7efb      	ldrb	r3, [r7, #27]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d041      	beq.n	800b642 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b5be:	2108      	movs	r1, #8
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7fa f8c9 	bl	8005758 <pbuf_remove_header>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00a      	beq.n	800b5e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b5cc:	4b20      	ldr	r3, [pc, #128]	; (800b650 <udp_input+0x208>)
 800b5ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b5d2:	4925      	ldr	r1, [pc, #148]	; (800b668 <udp_input+0x220>)
 800b5d4:	4820      	ldr	r0, [pc, #128]	; (800b658 <udp_input+0x210>)
 800b5d6:	f002 ffc3 	bl	800e560 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fa f942 	bl	8005864 <pbuf_free>
      goto end;
 800b5e0:	e032      	b.n	800b648 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d012      	beq.n	800b60e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	699c      	ldr	r4, [r3, #24]
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	69d8      	ldr	r0, [r3, #28]
 800b5f8:	8a3b      	ldrh	r3, [r7, #16]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	4b1b      	ldr	r3, [pc, #108]	; (800b66c <udp_input+0x224>)
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b602:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b604:	e021      	b.n	800b64a <udp_input+0x202>
        pbuf_free(p);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7fa f92c 	bl	8005864 <pbuf_free>
        goto end;
 800b60c:	e01c      	b.n	800b648 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b60e:	7cfb      	ldrb	r3, [r7, #19]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d112      	bne.n	800b63a <udp_input+0x1f2>
 800b614:	4b12      	ldr	r3, [pc, #72]	; (800b660 <udp_input+0x218>)
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b61c:	2be0      	cmp	r3, #224	; 0xe0
 800b61e:	d00c      	beq.n	800b63a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b620:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <udp_input+0x218>)
 800b622:	899b      	ldrh	r3, [r3, #12]
 800b624:	3308      	adds	r3, #8
 800b626:	b29b      	uxth	r3, r3
 800b628:	b21b      	sxth	r3, r3
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7fa f906 	bl	800583e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b632:	2103      	movs	r1, #3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fc1d 	bl	800ce74 <icmp_dest_unreach>
      pbuf_free(p);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7fa f912 	bl	8005864 <pbuf_free>
  return;
 800b640:	e003      	b.n	800b64a <udp_input+0x202>
    pbuf_free(p);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7fa f90e 	bl	8005864 <pbuf_free>
  return;
 800b648:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b64a:	372c      	adds	r7, #44	; 0x2c
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd90      	pop	{r4, r7, pc}
 800b650:	08011378 	.word	0x08011378
 800b654:	0801141c 	.word	0x0801141c
 800b658:	080113cc 	.word	0x080113cc
 800b65c:	08011434 	.word	0x08011434
 800b660:	20004d1c 	.word	0x20004d1c
 800b664:	200082e8 	.word	0x200082e8
 800b668:	08011450 	.word	0x08011450
 800b66c:	20004d2c 	.word	0x20004d2c

0800b670 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d109      	bne.n	800b694 <udp_send+0x24>
 800b680:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <udp_send+0x58>)
 800b682:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b686:	4911      	ldr	r1, [pc, #68]	; (800b6cc <udp_send+0x5c>)
 800b688:	4811      	ldr	r0, [pc, #68]	; (800b6d0 <udp_send+0x60>)
 800b68a:	f002 ff69 	bl	800e560 <iprintf>
 800b68e:	f06f 030f 	mvn.w	r3, #15
 800b692:	e015      	b.n	800b6c0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d109      	bne.n	800b6ae <udp_send+0x3e>
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <udp_send+0x58>)
 800b69c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b6a0:	490c      	ldr	r1, [pc, #48]	; (800b6d4 <udp_send+0x64>)
 800b6a2:	480b      	ldr	r0, [pc, #44]	; (800b6d0 <udp_send+0x60>)
 800b6a4:	f002 ff5c 	bl	800e560 <iprintf>
 800b6a8:	f06f 030f 	mvn.w	r3, #15
 800b6ac:	e008      	b.n	800b6c0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	8a9b      	ldrh	r3, [r3, #20]
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f80d 	bl	800b6d8 <udp_sendto>
 800b6be:	4603      	mov	r3, r0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	08011378 	.word	0x08011378
 800b6cc:	0801146c 	.word	0x0801146c
 800b6d0:	080113cc 	.word	0x080113cc
 800b6d4:	08011484 	.word	0x08011484

0800b6d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d109      	bne.n	800b700 <udp_sendto+0x28>
 800b6ec:	4b23      	ldr	r3, [pc, #140]	; (800b77c <udp_sendto+0xa4>)
 800b6ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b6f2:	4923      	ldr	r1, [pc, #140]	; (800b780 <udp_sendto+0xa8>)
 800b6f4:	4823      	ldr	r0, [pc, #140]	; (800b784 <udp_sendto+0xac>)
 800b6f6:	f002 ff33 	bl	800e560 <iprintf>
 800b6fa:	f06f 030f 	mvn.w	r3, #15
 800b6fe:	e038      	b.n	800b772 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d109      	bne.n	800b71a <udp_sendto+0x42>
 800b706:	4b1d      	ldr	r3, [pc, #116]	; (800b77c <udp_sendto+0xa4>)
 800b708:	f240 2219 	movw	r2, #537	; 0x219
 800b70c:	491e      	ldr	r1, [pc, #120]	; (800b788 <udp_sendto+0xb0>)
 800b70e:	481d      	ldr	r0, [pc, #116]	; (800b784 <udp_sendto+0xac>)
 800b710:	f002 ff26 	bl	800e560 <iprintf>
 800b714:	f06f 030f 	mvn.w	r3, #15
 800b718:	e02b      	b.n	800b772 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <udp_sendto+0x5c>
 800b720:	4b16      	ldr	r3, [pc, #88]	; (800b77c <udp_sendto+0xa4>)
 800b722:	f240 221a 	movw	r2, #538	; 0x21a
 800b726:	4919      	ldr	r1, [pc, #100]	; (800b78c <udp_sendto+0xb4>)
 800b728:	4816      	ldr	r0, [pc, #88]	; (800b784 <udp_sendto+0xac>)
 800b72a:	f002 ff19 	bl	800e560 <iprintf>
 800b72e:	f06f 030f 	mvn.w	r3, #15
 800b732:	e01e      	b.n	800b772 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	7a1b      	ldrb	r3, [r3, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d006      	beq.n	800b74a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	7a1b      	ldrb	r3, [r3, #8]
 800b740:	4618      	mov	r0, r3
 800b742:	f7f9 fd2f 	bl	80051a4 <netif_get_by_index>
 800b746:	6178      	str	r0, [r7, #20]
 800b748:	e003      	b.n	800b752 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f001 fc1c 	bl	800cf88 <ip4_route>
 800b750:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b758:	f06f 0303 	mvn.w	r3, #3
 800b75c:	e009      	b.n	800b772 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b75e:	887a      	ldrh	r2, [r7, #2]
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4613      	mov	r3, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 f810 	bl	800b790 <udp_sendto_if>
 800b770:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	08011378 	.word	0x08011378
 800b780:	0801149c 	.word	0x0801149c
 800b784:	080113cc 	.word	0x080113cc
 800b788:	080114b4 	.word	0x080114b4
 800b78c:	080114d0 	.word	0x080114d0

0800b790 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af02      	add	r7, sp, #8
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d109      	bne.n	800b7b8 <udp_sendto_if+0x28>
 800b7a4:	4b2e      	ldr	r3, [pc, #184]	; (800b860 <udp_sendto_if+0xd0>)
 800b7a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b7aa:	492e      	ldr	r1, [pc, #184]	; (800b864 <udp_sendto_if+0xd4>)
 800b7ac:	482e      	ldr	r0, [pc, #184]	; (800b868 <udp_sendto_if+0xd8>)
 800b7ae:	f002 fed7 	bl	800e560 <iprintf>
 800b7b2:	f06f 030f 	mvn.w	r3, #15
 800b7b6:	e04f      	b.n	800b858 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <udp_sendto_if+0x42>
 800b7be:	4b28      	ldr	r3, [pc, #160]	; (800b860 <udp_sendto_if+0xd0>)
 800b7c0:	f240 2281 	movw	r2, #641	; 0x281
 800b7c4:	4929      	ldr	r1, [pc, #164]	; (800b86c <udp_sendto_if+0xdc>)
 800b7c6:	4828      	ldr	r0, [pc, #160]	; (800b868 <udp_sendto_if+0xd8>)
 800b7c8:	f002 feca 	bl	800e560 <iprintf>
 800b7cc:	f06f 030f 	mvn.w	r3, #15
 800b7d0:	e042      	b.n	800b858 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d109      	bne.n	800b7ec <udp_sendto_if+0x5c>
 800b7d8:	4b21      	ldr	r3, [pc, #132]	; (800b860 <udp_sendto_if+0xd0>)
 800b7da:	f240 2282 	movw	r2, #642	; 0x282
 800b7de:	4924      	ldr	r1, [pc, #144]	; (800b870 <udp_sendto_if+0xe0>)
 800b7e0:	4821      	ldr	r0, [pc, #132]	; (800b868 <udp_sendto_if+0xd8>)
 800b7e2:	f002 febd 	bl	800e560 <iprintf>
 800b7e6:	f06f 030f 	mvn.w	r3, #15
 800b7ea:	e035      	b.n	800b858 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <udp_sendto_if+0x76>
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	; (800b860 <udp_sendto_if+0xd0>)
 800b7f4:	f240 2283 	movw	r2, #643	; 0x283
 800b7f8:	491e      	ldr	r1, [pc, #120]	; (800b874 <udp_sendto_if+0xe4>)
 800b7fa:	481b      	ldr	r0, [pc, #108]	; (800b868 <udp_sendto_if+0xd8>)
 800b7fc:	f002 feb0 	bl	800e560 <iprintf>
 800b800:	f06f 030f 	mvn.w	r3, #15
 800b804:	e028      	b.n	800b858 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d009      	beq.n	800b820 <udp_sendto_if+0x90>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d005      	beq.n	800b820 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b81c:	2be0      	cmp	r3, #224	; 0xe0
 800b81e:	d103      	bne.n	800b828 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	3304      	adds	r3, #4
 800b824:	617b      	str	r3, [r7, #20]
 800b826:	e00b      	b.n	800b840 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	3304      	adds	r3, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d002      	beq.n	800b83c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b836:	f06f 0303 	mvn.w	r3, #3
 800b83a:	e00d      	b.n	800b858 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b840:	887a      	ldrh	r2, [r7, #2]
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	4613      	mov	r3, r2
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f811 	bl	800b878 <udp_sendto_if_src>
 800b856:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	08011378 	.word	0x08011378
 800b864:	080114ec 	.word	0x080114ec
 800b868:	080113cc 	.word	0x080113cc
 800b86c:	08011508 	.word	0x08011508
 800b870:	08011524 	.word	0x08011524
 800b874:	08011544 	.word	0x08011544

0800b878 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08c      	sub	sp, #48	; 0x30
 800b87c:	af04      	add	r7, sp, #16
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d109      	bne.n	800b8a0 <udp_sendto_if_src+0x28>
 800b88c:	4b65      	ldr	r3, [pc, #404]	; (800ba24 <udp_sendto_if_src+0x1ac>)
 800b88e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b892:	4965      	ldr	r1, [pc, #404]	; (800ba28 <udp_sendto_if_src+0x1b0>)
 800b894:	4865      	ldr	r0, [pc, #404]	; (800ba2c <udp_sendto_if_src+0x1b4>)
 800b896:	f002 fe63 	bl	800e560 <iprintf>
 800b89a:	f06f 030f 	mvn.w	r3, #15
 800b89e:	e0bc      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <udp_sendto_if_src+0x42>
 800b8a6:	4b5f      	ldr	r3, [pc, #380]	; (800ba24 <udp_sendto_if_src+0x1ac>)
 800b8a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b8ac:	4960      	ldr	r1, [pc, #384]	; (800ba30 <udp_sendto_if_src+0x1b8>)
 800b8ae:	485f      	ldr	r0, [pc, #380]	; (800ba2c <udp_sendto_if_src+0x1b4>)
 800b8b0:	f002 fe56 	bl	800e560 <iprintf>
 800b8b4:	f06f 030f 	mvn.w	r3, #15
 800b8b8:	e0af      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d109      	bne.n	800b8d4 <udp_sendto_if_src+0x5c>
 800b8c0:	4b58      	ldr	r3, [pc, #352]	; (800ba24 <udp_sendto_if_src+0x1ac>)
 800b8c2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b8c6:	495b      	ldr	r1, [pc, #364]	; (800ba34 <udp_sendto_if_src+0x1bc>)
 800b8c8:	4858      	ldr	r0, [pc, #352]	; (800ba2c <udp_sendto_if_src+0x1b4>)
 800b8ca:	f002 fe49 	bl	800e560 <iprintf>
 800b8ce:	f06f 030f 	mvn.w	r3, #15
 800b8d2:	e0a2      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d109      	bne.n	800b8ee <udp_sendto_if_src+0x76>
 800b8da:	4b52      	ldr	r3, [pc, #328]	; (800ba24 <udp_sendto_if_src+0x1ac>)
 800b8dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b8e0:	4955      	ldr	r1, [pc, #340]	; (800ba38 <udp_sendto_if_src+0x1c0>)
 800b8e2:	4852      	ldr	r0, [pc, #328]	; (800ba2c <udp_sendto_if_src+0x1b4>)
 800b8e4:	f002 fe3c 	bl	800e560 <iprintf>
 800b8e8:	f06f 030f 	mvn.w	r3, #15
 800b8ec:	e095      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d109      	bne.n	800b908 <udp_sendto_if_src+0x90>
 800b8f4:	4b4b      	ldr	r3, [pc, #300]	; (800ba24 <udp_sendto_if_src+0x1ac>)
 800b8f6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b8fa:	4950      	ldr	r1, [pc, #320]	; (800ba3c <udp_sendto_if_src+0x1c4>)
 800b8fc:	484b      	ldr	r0, [pc, #300]	; (800ba2c <udp_sendto_if_src+0x1b4>)
 800b8fe:	f002 fe2f 	bl	800e560 <iprintf>
 800b902:	f06f 030f 	mvn.w	r3, #15
 800b906:	e088      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8a5b      	ldrh	r3, [r3, #18]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10f      	bne.n	800b930 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b910:	68f9      	ldr	r1, [r7, #12]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8a5b      	ldrh	r3, [r3, #18]
 800b916:	461a      	mov	r2, r3
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 f893 	bl	800ba44 <udp_bind>
 800b91e:	4603      	mov	r3, r0
 800b920:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b922:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b92a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b92e:	e074      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	891b      	ldrh	r3, [r3, #8]
 800b934:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b938:	4293      	cmp	r3, r2
 800b93a:	d902      	bls.n	800b942 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	e06b      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b942:	2108      	movs	r1, #8
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f7f9 fef7 	bl	8005738 <pbuf_add_header>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d015      	beq.n	800b97c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b950:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b954:	2108      	movs	r1, #8
 800b956:	2022      	movs	r0, #34	; 0x22
 800b958:	f7f9 fca0 	bl	800529c <pbuf_alloc>
 800b95c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b964:	f04f 33ff 	mov.w	r3, #4294967295
 800b968:	e057      	b.n	800ba1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	891b      	ldrh	r3, [r3, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d006      	beq.n	800b980 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	69f8      	ldr	r0, [r7, #28]
 800b976:	f7fa f88d 	bl	8005a94 <pbuf_chain>
 800b97a:	e001      	b.n	800b980 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	895b      	ldrh	r3, [r3, #10]
 800b984:	2b07      	cmp	r3, #7
 800b986:	d806      	bhi.n	800b996 <udp_sendto_if_src+0x11e>
 800b988:	4b26      	ldr	r3, [pc, #152]	; (800ba24 <udp_sendto_if_src+0x1ac>)
 800b98a:	f240 320d 	movw	r2, #781	; 0x30d
 800b98e:	492c      	ldr	r1, [pc, #176]	; (800ba40 <udp_sendto_if_src+0x1c8>)
 800b990:	4826      	ldr	r0, [pc, #152]	; (800ba2c <udp_sendto_if_src+0x1b4>)
 800b992:	f002 fde5 	bl	800e560 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8a5b      	ldrh	r3, [r3, #18]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f8 fc01 	bl	80041a8 <lwip_htons>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b9ae:	887b      	ldrh	r3, [r7, #2]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f8 fbf9 	bl	80041a8 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	719a      	strb	r2, [r3, #6]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	891b      	ldrh	r3, [r3, #8]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f8 fbeb 	bl	80041a8 <lwip_htons>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b9da:	2311      	movs	r3, #17
 800b9dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	7adb      	ldrb	r3, [r3, #11]
 800b9e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	7a9b      	ldrb	r3, [r3, #10]
 800b9e8:	7cb9      	ldrb	r1, [r7, #18]
 800b9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9ec:	9202      	str	r2, [sp, #8]
 800b9ee:	7cfa      	ldrb	r2, [r7, #19]
 800b9f0:	9201      	str	r2, [sp, #4]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9fa:	69f8      	ldr	r0, [r7, #28]
 800b9fc:	f001 fcac 	bl	800d358 <ip4_output_if_src>
 800ba00:	4603      	mov	r3, r0
 800ba02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d004      	beq.n	800ba16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ba0c:	69f8      	ldr	r0, [r7, #28]
 800ba0e:	f7f9 ff29 	bl	8005864 <pbuf_free>
    q = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ba16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3720      	adds	r7, #32
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	08011378 	.word	0x08011378
 800ba28:	08011564 	.word	0x08011564
 800ba2c:	080113cc 	.word	0x080113cc
 800ba30:	08011584 	.word	0x08011584
 800ba34:	080115a4 	.word	0x080115a4
 800ba38:	080115c8 	.word	0x080115c8
 800ba3c:	080115ec 	.word	0x080115ec
 800ba40:	08011610 	.word	0x08011610

0800ba44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ba58:	4b39      	ldr	r3, [pc, #228]	; (800bb40 <udp_bind+0xfc>)
 800ba5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d109      	bne.n	800ba76 <udp_bind+0x32>
 800ba62:	4b38      	ldr	r3, [pc, #224]	; (800bb44 <udp_bind+0x100>)
 800ba64:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ba68:	4937      	ldr	r1, [pc, #220]	; (800bb48 <udp_bind+0x104>)
 800ba6a:	4838      	ldr	r0, [pc, #224]	; (800bb4c <udp_bind+0x108>)
 800ba6c:	f002 fd78 	bl	800e560 <iprintf>
 800ba70:	f06f 030f 	mvn.w	r3, #15
 800ba74:	e060      	b.n	800bb38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba7a:	4b35      	ldr	r3, [pc, #212]	; (800bb50 <udp_bind+0x10c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	e009      	b.n	800ba96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d102      	bne.n	800ba90 <udp_bind+0x4c>
      rebind = 1;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	74fb      	strb	r3, [r7, #19]
      break;
 800ba8e:	e005      	b.n	800ba9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1f2      	bne.n	800ba82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d109      	bne.n	800bab6 <udp_bind+0x72>
    port = udp_new_port();
 800baa2:	f7ff fc35 	bl	800b310 <udp_new_port>
 800baa6:	4603      	mov	r3, r0
 800baa8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800baaa:	88fb      	ldrh	r3, [r7, #6]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d12c      	bne.n	800bb0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800bab0:	f06f 0307 	mvn.w	r3, #7
 800bab4:	e040      	b.n	800bb38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bab6:	4b26      	ldr	r3, [pc, #152]	; (800bb50 <udp_bind+0x10c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e022      	b.n	800bb04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d01b      	beq.n	800bafe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	8a5b      	ldrh	r3, [r3, #18]
 800baca:	88fa      	ldrh	r2, [r7, #6]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d116      	bne.n	800bafe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bad8:	429a      	cmp	r2, r3
 800bada:	d00d      	beq.n	800baf8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <udp_bind+0xb4>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d006      	beq.n	800baf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800baea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800baf8:	f06f 0307 	mvn.w	r3, #7
 800bafc:	e01c      	b.n	800bb38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1d9      	bne.n	800babe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <udp_bind+0xd2>
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	e000      	b.n	800bb18 <udp_bind+0xd4>
 800bb16:	2300      	movs	r3, #0
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	88fa      	ldrh	r2, [r7, #6]
 800bb20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bb22:	7cfb      	ldrb	r3, [r7, #19]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <udp_bind+0x10c>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bb30:	4a07      	ldr	r2, [pc, #28]	; (800bb50 <udp_bind+0x10c>)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	08011e94 	.word	0x08011e94
 800bb44:	08011378 	.word	0x08011378
 800bb48:	08011640 	.word	0x08011640
 800bb4c:	080113cc 	.word	0x080113cc
 800bb50:	200082e8 	.word	0x200082e8

0800bb54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d109      	bne.n	800bb7c <udp_connect+0x28>
 800bb68:	4b2c      	ldr	r3, [pc, #176]	; (800bc1c <udp_connect+0xc8>)
 800bb6a:	f240 4235 	movw	r2, #1077	; 0x435
 800bb6e:	492c      	ldr	r1, [pc, #176]	; (800bc20 <udp_connect+0xcc>)
 800bb70:	482c      	ldr	r0, [pc, #176]	; (800bc24 <udp_connect+0xd0>)
 800bb72:	f002 fcf5 	bl	800e560 <iprintf>
 800bb76:	f06f 030f 	mvn.w	r3, #15
 800bb7a:	e04b      	b.n	800bc14 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d109      	bne.n	800bb96 <udp_connect+0x42>
 800bb82:	4b26      	ldr	r3, [pc, #152]	; (800bc1c <udp_connect+0xc8>)
 800bb84:	f240 4236 	movw	r2, #1078	; 0x436
 800bb88:	4927      	ldr	r1, [pc, #156]	; (800bc28 <udp_connect+0xd4>)
 800bb8a:	4826      	ldr	r0, [pc, #152]	; (800bc24 <udp_connect+0xd0>)
 800bb8c:	f002 fce8 	bl	800e560 <iprintf>
 800bb90:	f06f 030f 	mvn.w	r3, #15
 800bb94:	e03e      	b.n	800bc14 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8a5b      	ldrh	r3, [r3, #18]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10f      	bne.n	800bbbe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bb9e:	68f9      	ldr	r1, [r7, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	8a5b      	ldrh	r3, [r3, #18]
 800bba4:	461a      	mov	r2, r3
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff ff4c 	bl	800ba44 <udp_bind>
 800bbac:	4603      	mov	r3, r0
 800bbae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bbb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <udp_connect+0x6a>
      return err;
 800bbb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbbc:	e02a      	b.n	800bc14 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <udp_connect+0x76>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	e000      	b.n	800bbcc <udp_connect+0x78>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	88fa      	ldrh	r2, [r7, #6]
 800bbd4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	7c1b      	ldrb	r3, [r3, #16]
 800bbda:	f043 0304 	orr.w	r3, r3, #4
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bbe4:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <udp_connect+0xd8>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e008      	b.n	800bbfe <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d101      	bne.n	800bbf8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e00d      	b.n	800bc14 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	617b      	str	r3, [r7, #20]
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1f3      	bne.n	800bbec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bc04:	4b09      	ldr	r3, [pc, #36]	; (800bc2c <udp_connect+0xd8>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bc0c:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <udp_connect+0xd8>)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	08011378 	.word	0x08011378
 800bc20:	08011658 	.word	0x08011658
 800bc24:	080113cc 	.word	0x080113cc
 800bc28:	08011674 	.word	0x08011674
 800bc2c:	200082e8 	.word	0x200082e8

0800bc30 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d107      	bne.n	800bc4e <udp_disconnect+0x1e>
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <udp_disconnect+0x44>)
 800bc40:	f240 426a 	movw	r2, #1130	; 0x46a
 800bc44:	490c      	ldr	r1, [pc, #48]	; (800bc78 <udp_disconnect+0x48>)
 800bc46:	480d      	ldr	r0, [pc, #52]	; (800bc7c <udp_disconnect+0x4c>)
 800bc48:	f002 fc8a 	bl	800e560 <iprintf>
 800bc4c:	e00f      	b.n	800bc6e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	7c1b      	ldrb	r3, [r3, #16]
 800bc64:	f023 0304 	bic.w	r3, r3, #4
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	741a      	strb	r2, [r3, #16]
}
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	08011378 	.word	0x08011378
 800bc78:	08011690 	.word	0x08011690
 800bc7c:	080113cc 	.word	0x080113cc

0800bc80 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <udp_recv+0x22>
 800bc92:	4b08      	ldr	r3, [pc, #32]	; (800bcb4 <udp_recv+0x34>)
 800bc94:	f240 428a 	movw	r2, #1162	; 0x48a
 800bc98:	4907      	ldr	r1, [pc, #28]	; (800bcb8 <udp_recv+0x38>)
 800bc9a:	4808      	ldr	r0, [pc, #32]	; (800bcbc <udp_recv+0x3c>)
 800bc9c:	f002 fc60 	bl	800e560 <iprintf>
 800bca0:	e005      	b.n	800bcae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	61da      	str	r2, [r3, #28]
}
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	08011378 	.word	0x08011378
 800bcb8:	080116ac 	.word	0x080116ac
 800bcbc:	080113cc 	.word	0x080113cc

0800bcc0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d107      	bne.n	800bcde <udp_remove+0x1e>
 800bcce:	4b19      	ldr	r3, [pc, #100]	; (800bd34 <udp_remove+0x74>)
 800bcd0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800bcd4:	4918      	ldr	r1, [pc, #96]	; (800bd38 <udp_remove+0x78>)
 800bcd6:	4819      	ldr	r0, [pc, #100]	; (800bd3c <udp_remove+0x7c>)
 800bcd8:	f002 fc42 	bl	800e560 <iprintf>
 800bcdc:	e026      	b.n	800bd2c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bcde:	4b18      	ldr	r3, [pc, #96]	; (800bd40 <udp_remove+0x80>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d105      	bne.n	800bcf4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <udp_remove+0x80>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	4a14      	ldr	r2, [pc, #80]	; (800bd40 <udp_remove+0x80>)
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	e017      	b.n	800bd24 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bcf4:	4b12      	ldr	r3, [pc, #72]	; (800bd40 <udp_remove+0x80>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	e010      	b.n	800bd1e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d009      	beq.n	800bd18 <udp_remove+0x58>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d104      	bne.n	800bd18 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	60da      	str	r2, [r3, #12]
        break;
 800bd16:	e005      	b.n	800bd24 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1eb      	bne.n	800bcfc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	2000      	movs	r0, #0
 800bd28:	f7f8 ff26 	bl	8004b78 <memp_free>
}
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	08011378 	.word	0x08011378
 800bd38:	080116c4 	.word	0x080116c4
 800bd3c:	080113cc 	.word	0x080113cc
 800bd40:	200082e8 	.word	0x200082e8

0800bd44 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	f7f8 fea4 	bl	8004a98 <memp_malloc>
 800bd50:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d007      	beq.n	800bd68 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bd58:	2220      	movs	r2, #32
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f002 fc64 	bl	800e62a <memset>
    pcb->ttl = UDP_TTL;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	22ff      	movs	r2, #255	; 0xff
 800bd66:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bd68:	687b      	ldr	r3, [r7, #4]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01e      	beq.n	800bdc2 <udp_netif_ip_addr_changed+0x4e>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01a      	beq.n	800bdc2 <udp_netif_ip_addr_changed+0x4e>
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d017      	beq.n	800bdc2 <udp_netif_ip_addr_changed+0x4e>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bd9a:	4b0d      	ldr	r3, [pc, #52]	; (800bdd0 <udp_netif_ip_addr_changed+0x5c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	e00c      	b.n	800bdbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d103      	bne.n	800bdb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1ef      	bne.n	800bda2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bdc2:	bf00      	nop
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	200082e8 	.word	0x200082e8

0800bdd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bddc:	4915      	ldr	r1, [pc, #84]	; (800be34 <etharp_free_entry+0x60>)
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4613      	mov	r3, r2
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	4413      	add	r3, r2
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	440b      	add	r3, r1
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d013      	beq.n	800be18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bdf0:	4910      	ldr	r1, [pc, #64]	; (800be34 <etharp_free_entry+0x60>)
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	4413      	add	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	440b      	add	r3, r1
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4618      	mov	r0, r3
 800be02:	f7f9 fd2f 	bl	8005864 <pbuf_free>
    arp_table[i].q = NULL;
 800be06:	490b      	ldr	r1, [pc, #44]	; (800be34 <etharp_free_entry+0x60>)
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	4613      	mov	r3, r2
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	4413      	add	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	440b      	add	r3, r1
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800be18:	4906      	ldr	r1, [pc, #24]	; (800be34 <etharp_free_entry+0x60>)
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4613      	mov	r3, r2
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4413      	add	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	440b      	add	r3, r1
 800be26:	3314      	adds	r3, #20
 800be28:	2200      	movs	r2, #0
 800be2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	200082ec 	.word	0x200082ec

0800be38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be3e:	2300      	movs	r3, #0
 800be40:	607b      	str	r3, [r7, #4]
 800be42:	e096      	b.n	800bf72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800be44:	494f      	ldr	r1, [pc, #316]	; (800bf84 <etharp_tmr+0x14c>)
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	3314      	adds	r3, #20
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 8086 	beq.w	800bf6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800be60:	4948      	ldr	r1, [pc, #288]	; (800bf84 <etharp_tmr+0x14c>)
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	4413      	add	r3, r2
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	440b      	add	r3, r1
 800be6e:	3312      	adds	r3, #18
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	b298      	uxth	r0, r3
 800be76:	4943      	ldr	r1, [pc, #268]	; (800bf84 <etharp_tmr+0x14c>)
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	440b      	add	r3, r1
 800be84:	3312      	adds	r3, #18
 800be86:	4602      	mov	r2, r0
 800be88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800be8a:	493e      	ldr	r1, [pc, #248]	; (800bf84 <etharp_tmr+0x14c>)
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	4413      	add	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	440b      	add	r3, r1
 800be98:	3312      	adds	r3, #18
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bea0:	d215      	bcs.n	800bece <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bea2:	4938      	ldr	r1, [pc, #224]	; (800bf84 <etharp_tmr+0x14c>)
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	4413      	add	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	440b      	add	r3, r1
 800beb0:	3314      	adds	r3, #20
 800beb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d10e      	bne.n	800bed6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800beb8:	4932      	ldr	r1, [pc, #200]	; (800bf84 <etharp_tmr+0x14c>)
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	4613      	mov	r3, r2
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	4413      	add	r3, r2
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	440b      	add	r3, r1
 800bec6:	3312      	adds	r3, #18
 800bec8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800beca:	2b04      	cmp	r3, #4
 800becc:	d903      	bls.n	800bed6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff ff80 	bl	800bdd4 <etharp_free_entry>
 800bed4:	e04a      	b.n	800bf6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bed6:	492b      	ldr	r1, [pc, #172]	; (800bf84 <etharp_tmr+0x14c>)
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	4613      	mov	r3, r2
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4413      	add	r3, r2
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	440b      	add	r3, r1
 800bee4:	3314      	adds	r3, #20
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	2b03      	cmp	r3, #3
 800beea:	d10a      	bne.n	800bf02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800beec:	4925      	ldr	r1, [pc, #148]	; (800bf84 <etharp_tmr+0x14c>)
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	4613      	mov	r3, r2
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	4413      	add	r3, r2
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	440b      	add	r3, r1
 800befa:	3314      	adds	r3, #20
 800befc:	2204      	movs	r2, #4
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	e034      	b.n	800bf6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bf02:	4920      	ldr	r1, [pc, #128]	; (800bf84 <etharp_tmr+0x14c>)
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	440b      	add	r3, r1
 800bf10:	3314      	adds	r3, #20
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b04      	cmp	r3, #4
 800bf16:	d10a      	bne.n	800bf2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bf18:	491a      	ldr	r1, [pc, #104]	; (800bf84 <etharp_tmr+0x14c>)
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	4413      	add	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	440b      	add	r3, r1
 800bf26:	3314      	adds	r3, #20
 800bf28:	2202      	movs	r2, #2
 800bf2a:	701a      	strb	r2, [r3, #0]
 800bf2c:	e01e      	b.n	800bf6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bf2e:	4915      	ldr	r1, [pc, #84]	; (800bf84 <etharp_tmr+0x14c>)
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	4613      	mov	r3, r2
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	4413      	add	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	440b      	add	r3, r1
 800bf3c:	3314      	adds	r3, #20
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d113      	bne.n	800bf6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bf44:	490f      	ldr	r1, [pc, #60]	; (800bf84 <etharp_tmr+0x14c>)
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	440b      	add	r3, r1
 800bf52:	3308      	adds	r3, #8
 800bf54:	6818      	ldr	r0, [r3, #0]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	4a08      	ldr	r2, [pc, #32]	; (800bf84 <etharp_tmr+0x14c>)
 800bf62:	4413      	add	r3, r2
 800bf64:	3304      	adds	r3, #4
 800bf66:	4619      	mov	r1, r3
 800bf68:	f000 fe6e 	bl	800cc48 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b09      	cmp	r3, #9
 800bf76:	f77f af65 	ble.w	800be44 <etharp_tmr+0xc>
      }
    }
  }
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	200082ec 	.word	0x200082ec

0800bf88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08a      	sub	sp, #40	; 0x28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	460b      	mov	r3, r1
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bf96:	230a      	movs	r3, #10
 800bf98:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf9a:	230a      	movs	r3, #10
 800bf9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bf9e:	230a      	movs	r3, #10
 800bfa0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bfa6:	230a      	movs	r3, #10
 800bfa8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	83bb      	strh	r3, [r7, #28]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	837b      	strh	r3, [r7, #26]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	843b      	strh	r3, [r7, #32]
 800bfba:	e0ae      	b.n	800c11a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bfbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfc0:	49a6      	ldr	r1, [pc, #664]	; (800c25c <etharp_find_entry+0x2d4>)
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4413      	add	r3, r2
 800bfc8:	00db      	lsls	r3, r3, #3
 800bfca:	440b      	add	r3, r1
 800bfcc:	3314      	adds	r3, #20
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bfd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bfd6:	2b0a      	cmp	r3, #10
 800bfd8:	d105      	bne.n	800bfe6 <etharp_find_entry+0x5e>
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d102      	bne.n	800bfe6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bfe0:	8c3b      	ldrh	r3, [r7, #32]
 800bfe2:	847b      	strh	r3, [r7, #34]	; 0x22
 800bfe4:	e095      	b.n	800c112 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 8092 	beq.w	800c112 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d009      	beq.n	800c008 <etharp_find_entry+0x80>
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d806      	bhi.n	800c008 <etharp_find_entry+0x80>
 800bffa:	4b99      	ldr	r3, [pc, #612]	; (800c260 <etharp_find_entry+0x2d8>)
 800bffc:	f240 1223 	movw	r2, #291	; 0x123
 800c000:	4998      	ldr	r1, [pc, #608]	; (800c264 <etharp_find_entry+0x2dc>)
 800c002:	4899      	ldr	r0, [pc, #612]	; (800c268 <etharp_find_entry+0x2e0>)
 800c004:	f002 faac 	bl	800e560 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d020      	beq.n	800c050 <etharp_find_entry+0xc8>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6819      	ldr	r1, [r3, #0]
 800c012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c016:	4891      	ldr	r0, [pc, #580]	; (800c25c <etharp_find_entry+0x2d4>)
 800c018:	4613      	mov	r3, r2
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	4403      	add	r3, r0
 800c022:	3304      	adds	r3, #4
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4299      	cmp	r1, r3
 800c028:	d112      	bne.n	800c050 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00c      	beq.n	800c04a <etharp_find_entry+0xc2>
 800c030:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c034:	4989      	ldr	r1, [pc, #548]	; (800c25c <etharp_find_entry+0x2d4>)
 800c036:	4613      	mov	r3, r2
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	4413      	add	r3, r2
 800c03c:	00db      	lsls	r3, r3, #3
 800c03e:	440b      	add	r3, r1
 800c040:	3308      	adds	r3, #8
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	429a      	cmp	r2, r3
 800c048:	d102      	bne.n	800c050 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c04a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c04e:	e100      	b.n	800c252 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d140      	bne.n	800c0d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c05a:	4980      	ldr	r1, [pc, #512]	; (800c25c <etharp_find_entry+0x2d4>)
 800c05c:	4613      	mov	r3, r2
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	4413      	add	r3, r2
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	440b      	add	r3, r1
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d01a      	beq.n	800c0a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c06c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c070:	497a      	ldr	r1, [pc, #488]	; (800c25c <etharp_find_entry+0x2d4>)
 800c072:	4613      	mov	r3, r2
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	4413      	add	r3, r2
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	440b      	add	r3, r1
 800c07c:	3312      	adds	r3, #18
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	8bba      	ldrh	r2, [r7, #28]
 800c082:	429a      	cmp	r2, r3
 800c084:	d845      	bhi.n	800c112 <etharp_find_entry+0x18a>
            old_queue = i;
 800c086:	8c3b      	ldrh	r3, [r7, #32]
 800c088:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c08a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c08e:	4973      	ldr	r1, [pc, #460]	; (800c25c <etharp_find_entry+0x2d4>)
 800c090:	4613      	mov	r3, r2
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	4413      	add	r3, r2
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	440b      	add	r3, r1
 800c09a:	3312      	adds	r3, #18
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	83bb      	strh	r3, [r7, #28]
 800c0a0:	e037      	b.n	800c112 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c0a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0a6:	496d      	ldr	r1, [pc, #436]	; (800c25c <etharp_find_entry+0x2d4>)
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	4413      	add	r3, r2
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	440b      	add	r3, r1
 800c0b2:	3312      	adds	r3, #18
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	8b7a      	ldrh	r2, [r7, #26]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d82a      	bhi.n	800c112 <etharp_find_entry+0x18a>
            old_pending = i;
 800c0bc:	8c3b      	ldrh	r3, [r7, #32]
 800c0be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c0c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0c4:	4965      	ldr	r1, [pc, #404]	; (800c25c <etharp_find_entry+0x2d4>)
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	4413      	add	r3, r2
 800c0cc:	00db      	lsls	r3, r3, #3
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3312      	adds	r3, #18
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	837b      	strh	r3, [r7, #26]
 800c0d6:	e01c      	b.n	800c112 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d919      	bls.n	800c112 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c0de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0e2:	495e      	ldr	r1, [pc, #376]	; (800c25c <etharp_find_entry+0x2d4>)
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	4413      	add	r3, r2
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	440b      	add	r3, r1
 800c0ee:	3312      	adds	r3, #18
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	8b3a      	ldrh	r2, [r7, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d80c      	bhi.n	800c112 <etharp_find_entry+0x18a>
            old_stable = i;
 800c0f8:	8c3b      	ldrh	r3, [r7, #32]
 800c0fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c0fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c100:	4956      	ldr	r1, [pc, #344]	; (800c25c <etharp_find_entry+0x2d4>)
 800c102:	4613      	mov	r3, r2
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	4413      	add	r3, r2
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	440b      	add	r3, r1
 800c10c:	3312      	adds	r3, #18
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c112:	8c3b      	ldrh	r3, [r7, #32]
 800c114:	3301      	adds	r3, #1
 800c116:	b29b      	uxth	r3, r3
 800c118:	843b      	strh	r3, [r7, #32]
 800c11a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c11e:	2b09      	cmp	r3, #9
 800c120:	f77f af4c 	ble.w	800bfbc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	f003 0302 	and.w	r3, r3, #2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d108      	bne.n	800c140 <etharp_find_entry+0x1b8>
 800c12e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c132:	2b0a      	cmp	r3, #10
 800c134:	d107      	bne.n	800c146 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d102      	bne.n	800c146 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c140:	f04f 33ff 	mov.w	r3, #4294967295
 800c144:	e085      	b.n	800c252 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c146:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c14a:	2b09      	cmp	r3, #9
 800c14c:	dc02      	bgt.n	800c154 <etharp_find_entry+0x1cc>
    i = empty;
 800c14e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c150:	843b      	strh	r3, [r7, #32]
 800c152:	e039      	b.n	800c1c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c154:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c158:	2b09      	cmp	r3, #9
 800c15a:	dc14      	bgt.n	800c186 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c15e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c160:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c164:	493d      	ldr	r1, [pc, #244]	; (800c25c <etharp_find_entry+0x2d4>)
 800c166:	4613      	mov	r3, r2
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	4413      	add	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	440b      	add	r3, r1
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d018      	beq.n	800c1a8 <etharp_find_entry+0x220>
 800c176:	4b3a      	ldr	r3, [pc, #232]	; (800c260 <etharp_find_entry+0x2d8>)
 800c178:	f240 126d 	movw	r2, #365	; 0x16d
 800c17c:	493b      	ldr	r1, [pc, #236]	; (800c26c <etharp_find_entry+0x2e4>)
 800c17e:	483a      	ldr	r0, [pc, #232]	; (800c268 <etharp_find_entry+0x2e0>)
 800c180:	f002 f9ee 	bl	800e560 <iprintf>
 800c184:	e010      	b.n	800c1a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c186:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	dc02      	bgt.n	800c194 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c18e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c190:	843b      	strh	r3, [r7, #32]
 800c192:	e009      	b.n	800c1a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c194:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c198:	2b09      	cmp	r3, #9
 800c19a:	dc02      	bgt.n	800c1a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c19c:	8bfb      	ldrh	r3, [r7, #30]
 800c19e:	843b      	strh	r3, [r7, #32]
 800c1a0:	e002      	b.n	800c1a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a6:	e054      	b.n	800c252 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c1a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1ac:	2b09      	cmp	r3, #9
 800c1ae:	dd06      	ble.n	800c1be <etharp_find_entry+0x236>
 800c1b0:	4b2b      	ldr	r3, [pc, #172]	; (800c260 <etharp_find_entry+0x2d8>)
 800c1b2:	f240 127f 	movw	r2, #383	; 0x17f
 800c1b6:	492e      	ldr	r1, [pc, #184]	; (800c270 <etharp_find_entry+0x2e8>)
 800c1b8:	482b      	ldr	r0, [pc, #172]	; (800c268 <etharp_find_entry+0x2e0>)
 800c1ba:	f002 f9d1 	bl	800e560 <iprintf>
    etharp_free_entry(i);
 800c1be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff fe06 	bl	800bdd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c1c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1cc:	2b09      	cmp	r3, #9
 800c1ce:	dd06      	ble.n	800c1de <etharp_find_entry+0x256>
 800c1d0:	4b23      	ldr	r3, [pc, #140]	; (800c260 <etharp_find_entry+0x2d8>)
 800c1d2:	f240 1283 	movw	r2, #387	; 0x183
 800c1d6:	4926      	ldr	r1, [pc, #152]	; (800c270 <etharp_find_entry+0x2e8>)
 800c1d8:	4823      	ldr	r0, [pc, #140]	; (800c268 <etharp_find_entry+0x2e0>)
 800c1da:	f002 f9c1 	bl	800e560 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c1de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1e2:	491e      	ldr	r1, [pc, #120]	; (800c25c <etharp_find_entry+0x2d4>)
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	005b      	lsls	r3, r3, #1
 800c1e8:	4413      	add	r3, r2
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	440b      	add	r3, r1
 800c1ee:	3314      	adds	r3, #20
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d006      	beq.n	800c204 <etharp_find_entry+0x27c>
 800c1f6:	4b1a      	ldr	r3, [pc, #104]	; (800c260 <etharp_find_entry+0x2d8>)
 800c1f8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c1fc:	491d      	ldr	r1, [pc, #116]	; (800c274 <etharp_find_entry+0x2ec>)
 800c1fe:	481a      	ldr	r0, [pc, #104]	; (800c268 <etharp_find_entry+0x2e0>)
 800c200:	f002 f9ae 	bl	800e560 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00b      	beq.n	800c222 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c20a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6819      	ldr	r1, [r3, #0]
 800c212:	4812      	ldr	r0, [pc, #72]	; (800c25c <etharp_find_entry+0x2d4>)
 800c214:	4613      	mov	r3, r2
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	4413      	add	r3, r2
 800c21a:	00db      	lsls	r3, r3, #3
 800c21c:	4403      	add	r3, r0
 800c21e:	3304      	adds	r3, #4
 800c220:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c226:	490d      	ldr	r1, [pc, #52]	; (800c25c <etharp_find_entry+0x2d4>)
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	00db      	lsls	r3, r3, #3
 800c230:	440b      	add	r3, r1
 800c232:	3312      	adds	r3, #18
 800c234:	2200      	movs	r2, #0
 800c236:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c23c:	4907      	ldr	r1, [pc, #28]	; (800c25c <etharp_find_entry+0x2d4>)
 800c23e:	4613      	mov	r3, r2
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	4413      	add	r3, r2
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	440b      	add	r3, r1
 800c248:	3308      	adds	r3, #8
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c24e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3728      	adds	r7, #40	; 0x28
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	200082ec 	.word	0x200082ec
 800c260:	080116dc 	.word	0x080116dc
 800c264:	08011714 	.word	0x08011714
 800c268:	08011754 	.word	0x08011754
 800c26c:	0801177c 	.word	0x0801177c
 800c270:	08011794 	.word	0x08011794
 800c274:	080117a8 	.word	0x080117a8

0800c278 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c28c:	2b06      	cmp	r3, #6
 800c28e:	d006      	beq.n	800c29e <etharp_update_arp_entry+0x26>
 800c290:	4b48      	ldr	r3, [pc, #288]	; (800c3b4 <etharp_update_arp_entry+0x13c>)
 800c292:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c296:	4948      	ldr	r1, [pc, #288]	; (800c3b8 <etharp_update_arp_entry+0x140>)
 800c298:	4848      	ldr	r0, [pc, #288]	; (800c3bc <etharp_update_arp_entry+0x144>)
 800c29a:	f002 f961 	bl	800e560 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d012      	beq.n	800c2ca <etharp_update_arp_entry+0x52>
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00e      	beq.n	800c2ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68f9      	ldr	r1, [r7, #12]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f001 f8fe 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800c2b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d105      	bne.n	800c2ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2c6:	2be0      	cmp	r3, #224	; 0xe0
 800c2c8:	d102      	bne.n	800c2d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c2ca:	f06f 030f 	mvn.w	r3, #15
 800c2ce:	e06c      	b.n	800c3aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	68b8      	ldr	r0, [r7, #8]
 800c2d8:	f7ff fe56 	bl	800bf88 <etharp_find_entry>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c2e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	da02      	bge.n	800c2ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c2e8:	8afb      	ldrh	r3, [r7, #22]
 800c2ea:	b25b      	sxtb	r3, r3
 800c2ec:	e05d      	b.n	800c3aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c2ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2f2:	4933      	ldr	r1, [pc, #204]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	4413      	add	r3, r2
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	440b      	add	r3, r1
 800c2fe:	3314      	adds	r3, #20
 800c300:	2202      	movs	r2, #2
 800c302:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c304:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c308:	492d      	ldr	r1, [pc, #180]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c30a:	4613      	mov	r3, r2
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	4413      	add	r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	440b      	add	r3, r1
 800c314:	3308      	adds	r3, #8
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c31a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	3308      	adds	r3, #8
 800c328:	4a25      	ldr	r2, [pc, #148]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c32a:	4413      	add	r3, r2
 800c32c:	3304      	adds	r3, #4
 800c32e:	2206      	movs	r2, #6
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	f002 f9ef 	bl	800e716 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c33c:	4920      	ldr	r1, [pc, #128]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c33e:	4613      	mov	r3, r2
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	440b      	add	r3, r1
 800c348:	3312      	adds	r3, #18
 800c34a:	2200      	movs	r2, #0
 800c34c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c34e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c352:	491b      	ldr	r1, [pc, #108]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c354:	4613      	mov	r3, r2
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	4413      	add	r3, r2
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	440b      	add	r3, r1
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d021      	beq.n	800c3a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c364:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c368:	4915      	ldr	r1, [pc, #84]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	440b      	add	r3, r1
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c378:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c37c:	4910      	ldr	r1, [pc, #64]	; (800c3c0 <etharp_update_arp_entry+0x148>)
 800c37e:	4613      	mov	r3, r2
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	4413      	add	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	440b      	add	r3, r1
 800c388:	2200      	movs	r2, #0
 800c38a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6939      	ldr	r1, [r7, #16]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f001 ff97 	bl	800e2d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c3a2:	6938      	ldr	r0, [r7, #16]
 800c3a4:	f7f9 fa5e 	bl	8005864 <pbuf_free>
  }
  return ERR_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	080116dc 	.word	0x080116dc
 800c3b8:	080117d4 	.word	0x080117d4
 800c3bc:	08011754 	.word	0x08011754
 800c3c0:	200082ec 	.word	0x200082ec

0800c3c4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	e01e      	b.n	800c410 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c3d2:	4913      	ldr	r1, [pc, #76]	; (800c420 <etharp_cleanup_netif+0x5c>)
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	440b      	add	r3, r1
 800c3e0:	3314      	adds	r3, #20
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c3e6:	7afb      	ldrb	r3, [r7, #11]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <etharp_cleanup_netif+0x46>
 800c3ec:	490c      	ldr	r1, [pc, #48]	; (800c420 <etharp_cleanup_netif+0x5c>)
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	4413      	add	r3, r2
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	440b      	add	r3, r1
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d102      	bne.n	800c40a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f7ff fce5 	bl	800bdd4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3301      	adds	r3, #1
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b09      	cmp	r3, #9
 800c414:	dddd      	ble.n	800c3d2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	200082ec 	.word	0x200082ec

0800c424 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c424:	b5b0      	push	{r4, r5, r7, lr}
 800c426:	b08a      	sub	sp, #40	; 0x28
 800c428:	af04      	add	r7, sp, #16
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d107      	bne.n	800c444 <etharp_input+0x20>
 800c434:	4b3d      	ldr	r3, [pc, #244]	; (800c52c <etharp_input+0x108>)
 800c436:	f240 228a 	movw	r2, #650	; 0x28a
 800c43a:	493d      	ldr	r1, [pc, #244]	; (800c530 <etharp_input+0x10c>)
 800c43c:	483d      	ldr	r0, [pc, #244]	; (800c534 <etharp_input+0x110>)
 800c43e:	f002 f88f 	bl	800e560 <iprintf>
 800c442:	e06f      	b.n	800c524 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c454:	d10c      	bne.n	800c470 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c45a:	2b06      	cmp	r3, #6
 800c45c:	d108      	bne.n	800c470 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c462:	2b04      	cmp	r3, #4
 800c464:	d104      	bne.n	800c470 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	885b      	ldrh	r3, [r3, #2]
 800c46a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c46c:	2b08      	cmp	r3, #8
 800c46e:	d003      	beq.n	800c478 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7f9 f9f7 	bl	8005864 <pbuf_free>
    return;
 800c476:	e055      	b.n	800c524 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	330e      	adds	r3, #14
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	3318      	adds	r3, #24
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	3304      	adds	r3, #4
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <etharp_input+0x74>
    for_us = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	75fb      	strb	r3, [r7, #23]
 800c496:	e009      	b.n	800c4ac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	3304      	adds	r3, #4
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	bf0c      	ite	eq
 800c4a4:	2301      	moveq	r3, #1
 800c4a6:	2300      	movne	r3, #0
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f103 0208 	add.w	r2, r3, #8
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <etharp_input+0x98>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e000      	b.n	800c4be <etharp_input+0x9a>
 800c4bc:	2302      	movs	r3, #2
 800c4be:	f107 010c 	add.w	r1, r7, #12
 800c4c2:	6838      	ldr	r0, [r7, #0]
 800c4c4:	f7ff fed8 	bl	800c278 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	88db      	ldrh	r3, [r3, #6]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d2:	d003      	beq.n	800c4dc <etharp_input+0xb8>
 800c4d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4d8:	d01e      	beq.n	800c518 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c4da:	e020      	b.n	800c51e <etharp_input+0xfa>
      if (for_us) {
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d01c      	beq.n	800c51c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c4fc:	2102      	movs	r1, #2
 800c4fe:	9103      	str	r1, [sp, #12]
 800c500:	f107 010c 	add.w	r1, r7, #12
 800c504:	9102      	str	r1, [sp, #8]
 800c506:	9201      	str	r2, [sp, #4]
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	462b      	mov	r3, r5
 800c50c:	4622      	mov	r2, r4
 800c50e:	4601      	mov	r1, r0
 800c510:	6838      	ldr	r0, [r7, #0]
 800c512:	f000 faeb 	bl	800caec <etharp_raw>
      break;
 800c516:	e001      	b.n	800c51c <etharp_input+0xf8>
      break;
 800c518:	bf00      	nop
 800c51a:	e000      	b.n	800c51e <etharp_input+0xfa>
      break;
 800c51c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7f9 f9a0 	bl	8005864 <pbuf_free>
}
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bdb0      	pop	{r4, r5, r7, pc}
 800c52a:	bf00      	nop
 800c52c:	080116dc 	.word	0x080116dc
 800c530:	0801182c 	.word	0x0801182c
 800c534:	08011754 	.word	0x08011754

0800c538 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	4613      	mov	r3, r2
 800c544:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c546:	79fa      	ldrb	r2, [r7, #7]
 800c548:	4944      	ldr	r1, [pc, #272]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c54a:	4613      	mov	r3, r2
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	4413      	add	r3, r2
 800c550:	00db      	lsls	r3, r3, #3
 800c552:	440b      	add	r3, r1
 800c554:	3314      	adds	r3, #20
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d806      	bhi.n	800c56a <etharp_output_to_arp_index+0x32>
 800c55c:	4b40      	ldr	r3, [pc, #256]	; (800c660 <etharp_output_to_arp_index+0x128>)
 800c55e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c562:	4940      	ldr	r1, [pc, #256]	; (800c664 <etharp_output_to_arp_index+0x12c>)
 800c564:	4840      	ldr	r0, [pc, #256]	; (800c668 <etharp_output_to_arp_index+0x130>)
 800c566:	f001 fffb 	bl	800e560 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c56a:	79fa      	ldrb	r2, [r7, #7]
 800c56c:	493b      	ldr	r1, [pc, #236]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c56e:	4613      	mov	r3, r2
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	4413      	add	r3, r2
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	440b      	add	r3, r1
 800c578:	3314      	adds	r3, #20
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d153      	bne.n	800c628 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c580:	79fa      	ldrb	r2, [r7, #7]
 800c582:	4936      	ldr	r1, [pc, #216]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c584:	4613      	mov	r3, r2
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	4413      	add	r3, r2
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	440b      	add	r3, r1
 800c58e:	3312      	adds	r3, #18
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c596:	d919      	bls.n	800c5cc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c598:	79fa      	ldrb	r2, [r7, #7]
 800c59a:	4613      	mov	r3, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	4a2e      	ldr	r2, [pc, #184]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c5a4:	4413      	add	r3, r2
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f000 fb4c 	bl	800cc48 <etharp_request>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d138      	bne.n	800c628 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c5b6:	79fa      	ldrb	r2, [r7, #7]
 800c5b8:	4928      	ldr	r1, [pc, #160]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	00db      	lsls	r3, r3, #3
 800c5c2:	440b      	add	r3, r1
 800c5c4:	3314      	adds	r3, #20
 800c5c6:	2203      	movs	r2, #3
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	e02d      	b.n	800c628 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c5cc:	79fa      	ldrb	r2, [r7, #7]
 800c5ce:	4923      	ldr	r1, [pc, #140]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	4413      	add	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	440b      	add	r3, r1
 800c5da:	3312      	adds	r3, #18
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c5e2:	d321      	bcc.n	800c628 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c5e4:	79fa      	ldrb	r2, [r7, #7]
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	4a1b      	ldr	r2, [pc, #108]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c5f0:	4413      	add	r3, r2
 800c5f2:	1d19      	adds	r1, r3, #4
 800c5f4:	79fa      	ldrb	r2, [r7, #7]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	4413      	add	r3, r2
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	3308      	adds	r3, #8
 800c600:	4a16      	ldr	r2, [pc, #88]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c602:	4413      	add	r3, r2
 800c604:	3304      	adds	r3, #4
 800c606:	461a      	mov	r2, r3
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 fafb 	bl	800cc04 <etharp_request_dst>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d109      	bne.n	800c628 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c614:	79fa      	ldrb	r2, [r7, #7]
 800c616:	4911      	ldr	r1, [pc, #68]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c618:	4613      	mov	r3, r2
 800c61a:	005b      	lsls	r3, r3, #1
 800c61c:	4413      	add	r3, r2
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	440b      	add	r3, r1
 800c622:	3314      	adds	r3, #20
 800c624:	2203      	movs	r2, #3
 800c626:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c62e:	79fa      	ldrb	r2, [r7, #7]
 800c630:	4613      	mov	r3, r2
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	4413      	add	r3, r2
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	3308      	adds	r3, #8
 800c63a:	4a08      	ldr	r2, [pc, #32]	; (800c65c <etharp_output_to_arp_index+0x124>)
 800c63c:	4413      	add	r3, r2
 800c63e:	3304      	adds	r3, #4
 800c640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c644:	9200      	str	r2, [sp, #0]
 800c646:	460a      	mov	r2, r1
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f001 fe40 	bl	800e2d0 <ethernet_output>
 800c650:	4603      	mov	r3, r0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	200082ec 	.word	0x200082ec
 800c660:	080116dc 	.word	0x080116dc
 800c664:	0801184c 	.word	0x0801184c
 800c668:	08011754 	.word	0x08011754

0800c66c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08a      	sub	sp, #40	; 0x28
 800c670:	af02      	add	r7, sp, #8
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <etharp_output+0x24>
 800c682:	4b73      	ldr	r3, [pc, #460]	; (800c850 <etharp_output+0x1e4>)
 800c684:	f240 321e 	movw	r2, #798	; 0x31e
 800c688:	4972      	ldr	r1, [pc, #456]	; (800c854 <etharp_output+0x1e8>)
 800c68a:	4873      	ldr	r0, [pc, #460]	; (800c858 <etharp_output+0x1ec>)
 800c68c:	f001 ff68 	bl	800e560 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <etharp_output+0x38>
 800c696:	4b6e      	ldr	r3, [pc, #440]	; (800c850 <etharp_output+0x1e4>)
 800c698:	f240 321f 	movw	r2, #799	; 0x31f
 800c69c:	496f      	ldr	r1, [pc, #444]	; (800c85c <etharp_output+0x1f0>)
 800c69e:	486e      	ldr	r0, [pc, #440]	; (800c858 <etharp_output+0x1ec>)
 800c6a0:	f001 ff5e 	bl	800e560 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <etharp_output+0x4c>
 800c6aa:	4b69      	ldr	r3, [pc, #420]	; (800c850 <etharp_output+0x1e4>)
 800c6ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c6b0:	496b      	ldr	r1, [pc, #428]	; (800c860 <etharp_output+0x1f4>)
 800c6b2:	4869      	ldr	r0, [pc, #420]	; (800c858 <etharp_output+0x1ec>)
 800c6b4:	f001 ff54 	bl	800e560 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68f9      	ldr	r1, [r7, #12]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fef8 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d002      	beq.n	800c6d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c6ca:	4b66      	ldr	r3, [pc, #408]	; (800c864 <etharp_output+0x1f8>)
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	e0af      	b.n	800c830 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6d8:	2be0      	cmp	r3, #224	; 0xe0
 800c6da:	d118      	bne.n	800c70e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c6e4:	235e      	movs	r3, #94	; 0x5e
 800c6e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	3303      	adds	r3, #3
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c706:	f107 0310 	add.w	r3, r7, #16
 800c70a:	61fb      	str	r3, [r7, #28]
 800c70c:	e090      	b.n	800c830 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3304      	adds	r3, #4
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	405a      	eors	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3308      	adds	r3, #8
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4013      	ands	r3, r2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d012      	beq.n	800c74c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c72c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c730:	4293      	cmp	r3, r2
 800c732:	d00b      	beq.n	800c74c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	330c      	adds	r3, #12
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	330c      	adds	r3, #12
 800c742:	61bb      	str	r3, [r7, #24]
 800c744:	e002      	b.n	800c74c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c746:	f06f 0303 	mvn.w	r3, #3
 800c74a:	e07d      	b.n	800c848 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c74c:	4b46      	ldr	r3, [pc, #280]	; (800c868 <etharp_output+0x1fc>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	4619      	mov	r1, r3
 800c752:	4a46      	ldr	r2, [pc, #280]	; (800c86c <etharp_output+0x200>)
 800c754:	460b      	mov	r3, r1
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	440b      	add	r3, r1
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	4413      	add	r3, r2
 800c75e:	3314      	adds	r3, #20
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d925      	bls.n	800c7b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c766:	4b40      	ldr	r3, [pc, #256]	; (800c868 <etharp_output+0x1fc>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	4619      	mov	r1, r3
 800c76c:	4a3f      	ldr	r2, [pc, #252]	; (800c86c <etharp_output+0x200>)
 800c76e:	460b      	mov	r3, r1
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	440b      	add	r3, r1
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	4413      	add	r3, r2
 800c778:	3308      	adds	r3, #8
 800c77a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d117      	bne.n	800c7b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	4b38      	ldr	r3, [pc, #224]	; (800c868 <etharp_output+0x1fc>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	4618      	mov	r0, r3
 800c78c:	4937      	ldr	r1, [pc, #220]	; (800c86c <etharp_output+0x200>)
 800c78e:	4603      	mov	r3, r0
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	4403      	add	r3, r0
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	440b      	add	r3, r1
 800c798:	3304      	adds	r3, #4
 800c79a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d108      	bne.n	800c7b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c7a0:	4b31      	ldr	r3, [pc, #196]	; (800c868 <etharp_output+0x1fc>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	68b9      	ldr	r1, [r7, #8]
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f7ff fec5 	bl	800c538 <etharp_output_to_arp_index>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	e04a      	b.n	800c848 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	75fb      	strb	r3, [r7, #23]
 800c7b6:	e031      	b.n	800c81c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c7b8:	7dfa      	ldrb	r2, [r7, #23]
 800c7ba:	492c      	ldr	r1, [pc, #176]	; (800c86c <etharp_output+0x200>)
 800c7bc:	4613      	mov	r3, r2
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	4413      	add	r3, r2
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	440b      	add	r3, r1
 800c7c6:	3314      	adds	r3, #20
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d923      	bls.n	800c816 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c7ce:	7dfa      	ldrb	r2, [r7, #23]
 800c7d0:	4926      	ldr	r1, [pc, #152]	; (800c86c <etharp_output+0x200>)
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	4413      	add	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	440b      	add	r3, r1
 800c7dc:	3308      	adds	r3, #8
 800c7de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d117      	bne.n	800c816 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	6819      	ldr	r1, [r3, #0]
 800c7ea:	7dfa      	ldrb	r2, [r7, #23]
 800c7ec:	481f      	ldr	r0, [pc, #124]	; (800c86c <etharp_output+0x200>)
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4413      	add	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	4403      	add	r3, r0
 800c7f8:	3304      	adds	r3, #4
 800c7fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	d10a      	bne.n	800c816 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c800:	4a19      	ldr	r2, [pc, #100]	; (800c868 <etharp_output+0x1fc>)
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	461a      	mov	r2, r3
 800c80a:	68b9      	ldr	r1, [r7, #8]
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff fe93 	bl	800c538 <etharp_output_to_arp_index>
 800c812:	4603      	mov	r3, r0
 800c814:	e018      	b.n	800c848 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	3301      	adds	r3, #1
 800c81a:	75fb      	strb	r3, [r7, #23]
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	2b09      	cmp	r3, #9
 800c820:	d9ca      	bls.n	800c7b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	69b9      	ldr	r1, [r7, #24]
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f000 f822 	bl	800c870 <etharp_query>
 800c82c:	4603      	mov	r3, r0
 800c82e:	e00b      	b.n	800c848 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	68b9      	ldr	r1, [r7, #8]
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f001 fd45 	bl	800e2d0 <ethernet_output>
 800c846:	4603      	mov	r3, r0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3720      	adds	r7, #32
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	080116dc 	.word	0x080116dc
 800c854:	0801182c 	.word	0x0801182c
 800c858:	08011754 	.word	0x08011754
 800c85c:	0801187c 	.word	0x0801187c
 800c860:	0801181c 	.word	0x0801181c
 800c864:	08011e98 	.word	0x08011e98
 800c868:	200083dc 	.word	0x200083dc
 800c86c:	200082ec 	.word	0x200082ec

0800c870 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08c      	sub	sp, #48	; 0x30
 800c874:	af02      	add	r7, sp, #8
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3326      	adds	r3, #38	; 0x26
 800c880:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c882:	23ff      	movs	r3, #255	; 0xff
 800c884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68f9      	ldr	r1, [r7, #12]
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fe0e 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10c      	bne.n	800c8b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c8a6:	2be0      	cmp	r3, #224	; 0xe0
 800c8a8:	d006      	beq.n	800c8b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c8b8:	f06f 030f 	mvn.w	r3, #15
 800c8bc:	e101      	b.n	800cac2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	68b8      	ldr	r0, [r7, #8]
 800c8c4:	f7ff fb60 	bl	800bf88 <etharp_find_entry>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c8cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	da02      	bge.n	800c8da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c8d4:	8a7b      	ldrh	r3, [r7, #18]
 800c8d6:	b25b      	sxtb	r3, r3
 800c8d8:	e0f3      	b.n	800cac2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c8da:	8a7b      	ldrh	r3, [r7, #18]
 800c8dc:	2b7e      	cmp	r3, #126	; 0x7e
 800c8de:	d906      	bls.n	800c8ee <etharp_query+0x7e>
 800c8e0:	4b7a      	ldr	r3, [pc, #488]	; (800cacc <etharp_query+0x25c>)
 800c8e2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c8e6:	497a      	ldr	r1, [pc, #488]	; (800cad0 <etharp_query+0x260>)
 800c8e8:	487a      	ldr	r0, [pc, #488]	; (800cad4 <etharp_query+0x264>)
 800c8ea:	f001 fe39 	bl	800e560 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c8ee:	8a7b      	ldrh	r3, [r7, #18]
 800c8f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c8f2:	7c7a      	ldrb	r2, [r7, #17]
 800c8f4:	4978      	ldr	r1, [pc, #480]	; (800cad8 <etharp_query+0x268>)
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	00db      	lsls	r3, r3, #3
 800c8fe:	440b      	add	r3, r1
 800c900:	3314      	adds	r3, #20
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d115      	bne.n	800c934 <etharp_query+0xc4>
    is_new_entry = 1;
 800c908:	2301      	movs	r3, #1
 800c90a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c90c:	7c7a      	ldrb	r2, [r7, #17]
 800c90e:	4972      	ldr	r1, [pc, #456]	; (800cad8 <etharp_query+0x268>)
 800c910:	4613      	mov	r3, r2
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	4413      	add	r3, r2
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	440b      	add	r3, r1
 800c91a:	3314      	adds	r3, #20
 800c91c:	2201      	movs	r2, #1
 800c91e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c920:	7c7a      	ldrb	r2, [r7, #17]
 800c922:	496d      	ldr	r1, [pc, #436]	; (800cad8 <etharp_query+0x268>)
 800c924:	4613      	mov	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	4413      	add	r3, r2
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	440b      	add	r3, r1
 800c92e:	3308      	adds	r3, #8
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c934:	7c7a      	ldrb	r2, [r7, #17]
 800c936:	4968      	ldr	r1, [pc, #416]	; (800cad8 <etharp_query+0x268>)
 800c938:	4613      	mov	r3, r2
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	4413      	add	r3, r2
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	440b      	add	r3, r1
 800c942:	3314      	adds	r3, #20
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d011      	beq.n	800c96e <etharp_query+0xfe>
 800c94a:	7c7a      	ldrb	r2, [r7, #17]
 800c94c:	4962      	ldr	r1, [pc, #392]	; (800cad8 <etharp_query+0x268>)
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	440b      	add	r3, r1
 800c958:	3314      	adds	r3, #20
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d806      	bhi.n	800c96e <etharp_query+0xfe>
 800c960:	4b5a      	ldr	r3, [pc, #360]	; (800cacc <etharp_query+0x25c>)
 800c962:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c966:	495d      	ldr	r1, [pc, #372]	; (800cadc <etharp_query+0x26c>)
 800c968:	485a      	ldr	r0, [pc, #360]	; (800cad4 <etharp_query+0x264>)
 800c96a:	f001 fdf9 	bl	800e560 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d102      	bne.n	800c97a <etharp_query+0x10a>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10c      	bne.n	800c994 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c97a:	68b9      	ldr	r1, [r7, #8]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f963 	bl	800cc48 <etharp_request>
 800c982:	4603      	mov	r3, r0
 800c984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d102      	bne.n	800c994 <etharp_query+0x124>
      return result;
 800c98e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c992:	e096      	b.n	800cac2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <etharp_query+0x138>
 800c99a:	4b4c      	ldr	r3, [pc, #304]	; (800cacc <etharp_query+0x25c>)
 800c99c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c9a0:	494f      	ldr	r1, [pc, #316]	; (800cae0 <etharp_query+0x270>)
 800c9a2:	484c      	ldr	r0, [pc, #304]	; (800cad4 <etharp_query+0x264>)
 800c9a4:	f001 fddc 	bl	800e560 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c9a8:	7c7a      	ldrb	r2, [r7, #17]
 800c9aa:	494b      	ldr	r1, [pc, #300]	; (800cad8 <etharp_query+0x268>)
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	4413      	add	r3, r2
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	440b      	add	r3, r1
 800c9b6:	3314      	adds	r3, #20
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d917      	bls.n	800c9ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c9be:	4a49      	ldr	r2, [pc, #292]	; (800cae4 <etharp_query+0x274>)
 800c9c0:	7c7b      	ldrb	r3, [r7, #17]
 800c9c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c9c4:	7c7a      	ldrb	r2, [r7, #17]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	4413      	add	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	4a41      	ldr	r2, [pc, #260]	; (800cad8 <etharp_query+0x268>)
 800c9d2:	4413      	add	r3, r2
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9da:	9200      	str	r2, [sp, #0]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f001 fc75 	bl	800e2d0 <ethernet_output>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9ec:	e067      	b.n	800cabe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c9ee:	7c7a      	ldrb	r2, [r7, #17]
 800c9f0:	4939      	ldr	r1, [pc, #228]	; (800cad8 <etharp_query+0x268>)
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	4413      	add	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	440b      	add	r3, r1
 800c9fc:	3314      	adds	r3, #20
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d15c      	bne.n	800cabe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca0c:	e01c      	b.n	800ca48 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	895a      	ldrh	r2, [r3, #10]
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	891b      	ldrh	r3, [r3, #8]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d10a      	bne.n	800ca30 <etharp_query+0x1c0>
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d006      	beq.n	800ca30 <etharp_query+0x1c0>
 800ca22:	4b2a      	ldr	r3, [pc, #168]	; (800cacc <etharp_query+0x25c>)
 800ca24:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ca28:	492f      	ldr	r1, [pc, #188]	; (800cae8 <etharp_query+0x278>)
 800ca2a:	482a      	ldr	r0, [pc, #168]	; (800cad4 <etharp_query+0x264>)
 800ca2c:	f001 fd98 	bl	800e560 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	7b1b      	ldrb	r3, [r3, #12]
 800ca34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <etharp_query+0x1d2>
        copy_needed = 1;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	61bb      	str	r3, [r7, #24]
        break;
 800ca40:	e005      	b.n	800ca4e <etharp_query+0x1de>
      }
      p = p->next;
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1df      	bne.n	800ca0e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d007      	beq.n	800ca64 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ca5a:	200e      	movs	r0, #14
 800ca5c:	f7f9 f96e 	bl	8005d3c <pbuf_clone>
 800ca60:	61f8      	str	r0, [r7, #28]
 800ca62:	e004      	b.n	800ca6e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ca68:	69f8      	ldr	r0, [r7, #28]
 800ca6a:	f7f8 ff9b 	bl	80059a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d021      	beq.n	800cab8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ca74:	7c7a      	ldrb	r2, [r7, #17]
 800ca76:	4918      	ldr	r1, [pc, #96]	; (800cad8 <etharp_query+0x268>)
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ca88:	7c7a      	ldrb	r2, [r7, #17]
 800ca8a:	4913      	ldr	r1, [pc, #76]	; (800cad8 <etharp_query+0x268>)
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	005b      	lsls	r3, r3, #1
 800ca90:	4413      	add	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	440b      	add	r3, r1
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f8 fee3 	bl	8005864 <pbuf_free>
      }
      arp_table[i].q = p;
 800ca9e:	7c7a      	ldrb	r2, [r7, #17]
 800caa0:	490d      	ldr	r1, [pc, #52]	; (800cad8 <etharp_query+0x268>)
 800caa2:	4613      	mov	r3, r2
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	4413      	add	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	440b      	add	r3, r1
 800caac:	69fa      	ldr	r2, [r7, #28]
 800caae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cab6:	e002      	b.n	800cabe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cab8:	23ff      	movs	r3, #255	; 0xff
 800caba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cabe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3728      	adds	r7, #40	; 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	080116dc 	.word	0x080116dc
 800cad0:	08011888 	.word	0x08011888
 800cad4:	08011754 	.word	0x08011754
 800cad8:	200082ec 	.word	0x200082ec
 800cadc:	08011898 	.word	0x08011898
 800cae0:	0801187c 	.word	0x0801187c
 800cae4:	200083dc 	.word	0x200083dc
 800cae8:	080118c0 	.word	0x080118c0

0800caec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	; 0x28
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <etharp_raw+0x26>
 800cb04:	4b3a      	ldr	r3, [pc, #232]	; (800cbf0 <etharp_raw+0x104>)
 800cb06:	f240 4257 	movw	r2, #1111	; 0x457
 800cb0a:	493a      	ldr	r1, [pc, #232]	; (800cbf4 <etharp_raw+0x108>)
 800cb0c:	483a      	ldr	r0, [pc, #232]	; (800cbf8 <etharp_raw+0x10c>)
 800cb0e:	f001 fd27 	bl	800e560 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cb12:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb16:	211c      	movs	r1, #28
 800cb18:	200e      	movs	r0, #14
 800cb1a:	f7f8 fbbf 	bl	800529c <pbuf_alloc>
 800cb1e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d102      	bne.n	800cb2c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	e05d      	b.n	800cbe8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	895b      	ldrh	r3, [r3, #10]
 800cb30:	2b1b      	cmp	r3, #27
 800cb32:	d806      	bhi.n	800cb42 <etharp_raw+0x56>
 800cb34:	4b2e      	ldr	r3, [pc, #184]	; (800cbf0 <etharp_raw+0x104>)
 800cb36:	f240 4262 	movw	r2, #1122	; 0x462
 800cb3a:	4930      	ldr	r1, [pc, #192]	; (800cbfc <etharp_raw+0x110>)
 800cb3c:	482e      	ldr	r0, [pc, #184]	; (800cbf8 <etharp_raw+0x10c>)
 800cb3e:	f001 fd0f 	bl	800e560 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cb48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7f7 fb2c 	bl	80041a8 <lwip_htons>
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb5e:	2b06      	cmp	r3, #6
 800cb60:	d006      	beq.n	800cb70 <etharp_raw+0x84>
 800cb62:	4b23      	ldr	r3, [pc, #140]	; (800cbf0 <etharp_raw+0x104>)
 800cb64:	f240 4269 	movw	r2, #1129	; 0x469
 800cb68:	4925      	ldr	r1, [pc, #148]	; (800cc00 <etharp_raw+0x114>)
 800cb6a:	4823      	ldr	r0, [pc, #140]	; (800cbf8 <etharp_raw+0x10c>)
 800cb6c:	f001 fcf8 	bl	800e560 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	3308      	adds	r3, #8
 800cb74:	2206      	movs	r2, #6
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f001 fdcc 	bl	800e716 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	3312      	adds	r3, #18
 800cb82:	2206      	movs	r2, #6
 800cb84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb86:	4618      	mov	r0, r3
 800cb88:	f001 fdc5 	bl	800e716 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	330e      	adds	r3, #14
 800cb90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb92:	6812      	ldr	r2, [r2, #0]
 800cb94:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	3318      	adds	r3, #24
 800cb9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb9c:	6812      	ldr	r2, [r2, #0]
 800cb9e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f042 0201 	orr.w	r2, r2, #1
 800cbac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f042 0208 	orr.w	r2, r2, #8
 800cbb6:	709a      	strb	r2, [r3, #2]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2206      	movs	r2, #6
 800cbc0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2204      	movs	r2, #4
 800cbc6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cbc8:	f640 0306 	movw	r3, #2054	; 0x806
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	69b9      	ldr	r1, [r7, #24]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f001 fb7b 	bl	800e2d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cbda:	69b8      	ldr	r0, [r7, #24]
 800cbdc:	f7f8 fe42 	bl	8005864 <pbuf_free>
  p = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cbe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3720      	adds	r7, #32
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	080116dc 	.word	0x080116dc
 800cbf4:	0801182c 	.word	0x0801182c
 800cbf8:	08011754 	.word	0x08011754
 800cbfc:	080118dc 	.word	0x080118dc
 800cc00:	08011910 	.word	0x08011910

0800cc04 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af04      	add	r7, sp, #16
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc20:	2201      	movs	r2, #1
 800cc22:	9203      	str	r2, [sp, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	9202      	str	r2, [sp, #8]
 800cc28:	4a06      	ldr	r2, [pc, #24]	; (800cc44 <etharp_request_dst+0x40>)
 800cc2a:	9201      	str	r2, [sp, #4]
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	4603      	mov	r3, r0
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f7ff ff5a 	bl	800caec <etharp_raw>
 800cc38:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	08011ea0 	.word	0x08011ea0

0800cc48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cc52:	4a05      	ldr	r2, [pc, #20]	; (800cc68 <etharp_request+0x20>)
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff ffd4 	bl	800cc04 <etharp_request_dst>
 800cc5c:	4603      	mov	r3, r0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	08011e98 	.word	0x08011e98

0800cc6c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08e      	sub	sp, #56	; 0x38
 800cc70:	af04      	add	r7, sp, #16
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cc76:	4b79      	ldr	r3, [pc, #484]	; (800ce5c <icmp_input+0x1f0>)
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f003 030f 	and.w	r3, r3, #15
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cc8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc8e:	2b13      	cmp	r3, #19
 800cc90:	f240 80cd 	bls.w	800ce2e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	895b      	ldrh	r3, [r3, #10]
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	f240 80ca 	bls.w	800ce32 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cca8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 80b7 	beq.w	800ce20 <icmp_input+0x1b4>
 800ccb2:	2b08      	cmp	r3, #8
 800ccb4:	f040 80b7 	bne.w	800ce26 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ccb8:	4b69      	ldr	r3, [pc, #420]	; (800ce60 <icmp_input+0x1f4>)
 800ccba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ccbc:	4b67      	ldr	r3, [pc, #412]	; (800ce5c <icmp_input+0x1f0>)
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccc4:	2be0      	cmp	r3, #224	; 0xe0
 800ccc6:	f000 80bb 	beq.w	800ce40 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ccca:	4b64      	ldr	r3, [pc, #400]	; (800ce5c <icmp_input+0x1f0>)
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	4a63      	ldr	r2, [pc, #396]	; (800ce5c <icmp_input+0x1f0>)
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fbed 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f040 80b1 	bne.w	800ce44 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	891b      	ldrh	r3, [r3, #8]
 800cce6:	2b07      	cmp	r3, #7
 800cce8:	f240 80a5 	bls.w	800ce36 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ccec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccee:	330e      	adds	r3, #14
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7f8 fd20 	bl	8005738 <pbuf_add_header>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d04b      	beq.n	800cd96 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	891a      	ldrh	r2, [r3, #8]
 800cd02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd04:	4413      	add	r3, r2
 800cd06:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	891b      	ldrh	r3, [r3, #8]
 800cd0c:	8b7a      	ldrh	r2, [r7, #26]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	f0c0 809a 	bcc.w	800ce48 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cd14:	8b7b      	ldrh	r3, [r7, #26]
 800cd16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	200e      	movs	r0, #14
 800cd1e:	f7f8 fabd 	bl	800529c <pbuf_alloc>
 800cd22:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 8090 	beq.w	800ce4c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	895b      	ldrh	r3, [r3, #10]
 800cd30:	461a      	mov	r2, r3
 800cd32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd34:	3308      	adds	r3, #8
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d203      	bcs.n	800cd42 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cd3a:	6978      	ldr	r0, [r7, #20]
 800cd3c:	f7f8 fd92 	bl	8005864 <pbuf_free>
          goto icmperr;
 800cd40:	e085      	b.n	800ce4e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 fce3 	bl	800e716 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cd50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd52:	4619      	mov	r1, r3
 800cd54:	6978      	ldr	r0, [r7, #20]
 800cd56:	f7f8 fcff 	bl	8005758 <pbuf_remove_header>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d009      	beq.n	800cd74 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cd60:	4b40      	ldr	r3, [pc, #256]	; (800ce64 <icmp_input+0x1f8>)
 800cd62:	22b6      	movs	r2, #182	; 0xb6
 800cd64:	4940      	ldr	r1, [pc, #256]	; (800ce68 <icmp_input+0x1fc>)
 800cd66:	4841      	ldr	r0, [pc, #260]	; (800ce6c <icmp_input+0x200>)
 800cd68:	f001 fbfa 	bl	800e560 <iprintf>
          pbuf_free(r);
 800cd6c:	6978      	ldr	r0, [r7, #20]
 800cd6e:	f7f8 fd79 	bl	8005864 <pbuf_free>
          goto icmperr;
 800cd72:	e06c      	b.n	800ce4e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	6978      	ldr	r0, [r7, #20]
 800cd78:	f7f8 fe9c 	bl	8005ab4 <pbuf_copy>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cd82:	6978      	ldr	r0, [r7, #20]
 800cd84:	f7f8 fd6e 	bl	8005864 <pbuf_free>
          goto icmperr;
 800cd88:	e061      	b.n	800ce4e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7f8 fd6a 	bl	8005864 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	e00f      	b.n	800cdb6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd98:	330e      	adds	r3, #14
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7f8 fcdb 	bl	8005758 <pbuf_remove_header>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d006      	beq.n	800cdb6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cda8:	4b2e      	ldr	r3, [pc, #184]	; (800ce64 <icmp_input+0x1f8>)
 800cdaa:	22c7      	movs	r2, #199	; 0xc7
 800cdac:	4930      	ldr	r1, [pc, #192]	; (800ce70 <icmp_input+0x204>)
 800cdae:	482f      	ldr	r0, [pc, #188]	; (800ce6c <icmp_input+0x200>)
 800cdb0:	f001 fbd6 	bl	800e560 <iprintf>
          goto icmperr;
 800cdb4:	e04b      	b.n	800ce4e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cdbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7f8 fcb9 	bl	8005738 <pbuf_add_header>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d12b      	bne.n	800ce24 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cdda:	4b20      	ldr	r3, [pc, #128]	; (800ce5c <icmp_input+0x1f0>)
 800cddc:	691a      	ldr	r2, [r3, #16]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	2200      	movs	r2, #0
 800cde6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	2200      	movs	r2, #0
 800cdec:	709a      	strb	r2, [r3, #2]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	22ff      	movs	r2, #255	; 0xff
 800cdf6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	729a      	strb	r2, [r3, #10]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	9302      	str	r3, [sp, #8]
 800ce06:	2301      	movs	r3, #1
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	23ff      	movs	r3, #255	; 0xff
 800ce10:	2200      	movs	r2, #0
 800ce12:	69f9      	ldr	r1, [r7, #28]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fa75 	bl	800d304 <ip4_output_if>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ce1e:	e001      	b.n	800ce24 <icmp_input+0x1b8>
      break;
 800ce20:	bf00      	nop
 800ce22:	e000      	b.n	800ce26 <icmp_input+0x1ba>
      break;
 800ce24:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7f8 fd1c 	bl	8005864 <pbuf_free>
  return;
 800ce2c:	e013      	b.n	800ce56 <icmp_input+0x1ea>
    goto lenerr;
 800ce2e:	bf00      	nop
 800ce30:	e002      	b.n	800ce38 <icmp_input+0x1cc>
    goto lenerr;
 800ce32:	bf00      	nop
 800ce34:	e000      	b.n	800ce38 <icmp_input+0x1cc>
        goto lenerr;
 800ce36:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7f8 fd13 	bl	8005864 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce3e:	e00a      	b.n	800ce56 <icmp_input+0x1ea>
        goto icmperr;
 800ce40:	bf00      	nop
 800ce42:	e004      	b.n	800ce4e <icmp_input+0x1e2>
        goto icmperr;
 800ce44:	bf00      	nop
 800ce46:	e002      	b.n	800ce4e <icmp_input+0x1e2>
          goto icmperr;
 800ce48:	bf00      	nop
 800ce4a:	e000      	b.n	800ce4e <icmp_input+0x1e2>
          goto icmperr;
 800ce4c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7f8 fd08 	bl	8005864 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce54:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ce56:	3728      	adds	r7, #40	; 0x28
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20004d1c 	.word	0x20004d1c
 800ce60:	20004d30 	.word	0x20004d30
 800ce64:	08011954 	.word	0x08011954
 800ce68:	0801198c 	.word	0x0801198c
 800ce6c:	080119c4 	.word	0x080119c4
 800ce70:	080119ec 	.word	0x080119ec

0800ce74 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ce80:	78fb      	ldrb	r3, [r7, #3]
 800ce82:	461a      	mov	r2, r3
 800ce84:	2103      	movs	r1, #3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f814 	bl	800ceb4 <icmp_send_response>
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	461a      	mov	r2, r3
 800cea4:	210b      	movs	r1, #11
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f804 	bl	800ceb4 <icmp_send_response>
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08c      	sub	sp, #48	; 0x30
 800ceb8:	af04      	add	r7, sp, #16
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	460b      	mov	r3, r1
 800cebe:	70fb      	strb	r3, [r7, #3]
 800cec0:	4613      	mov	r3, r2
 800cec2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cec4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cec8:	2124      	movs	r1, #36	; 0x24
 800ceca:	2022      	movs	r0, #34	; 0x22
 800cecc:	f7f8 f9e6 	bl	800529c <pbuf_alloc>
 800ced0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d04c      	beq.n	800cf72 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	895b      	ldrh	r3, [r3, #10]
 800cedc:	2b23      	cmp	r3, #35	; 0x23
 800cede:	d806      	bhi.n	800ceee <icmp_send_response+0x3a>
 800cee0:	4b26      	ldr	r3, [pc, #152]	; (800cf7c <icmp_send_response+0xc8>)
 800cee2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cee6:	4926      	ldr	r1, [pc, #152]	; (800cf80 <icmp_send_response+0xcc>)
 800cee8:	4826      	ldr	r0, [pc, #152]	; (800cf84 <icmp_send_response+0xd0>)
 800ceea:	f001 fb39 	bl	800e560 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	78fa      	ldrb	r2, [r7, #3]
 800cefe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	78ba      	ldrb	r2, [r7, #2]
 800cf04:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	711a      	strb	r2, [r3, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	2200      	movs	r2, #0
 800cf14:	719a      	strb	r2, [r3, #6]
 800cf16:	2200      	movs	r2, #0
 800cf18:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f103 0008 	add.w	r0, r3, #8
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	221c      	movs	r2, #28
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f001 fbf4 	bl	800e716 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 f825 	bl	800cf88 <ip4_route>
 800cf3e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d011      	beq.n	800cf6a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	709a      	strb	r2, [r3, #2]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cf50:	f107 020c 	add.w	r2, r7, #12
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	9302      	str	r3, [sp, #8]
 800cf58:	2301      	movs	r3, #1
 800cf5a:	9301      	str	r3, [sp, #4]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	23ff      	movs	r3, #255	; 0xff
 800cf62:	2100      	movs	r1, #0
 800cf64:	69f8      	ldr	r0, [r7, #28]
 800cf66:	f000 f9cd 	bl	800d304 <ip4_output_if>
  }
  pbuf_free(q);
 800cf6a:	69f8      	ldr	r0, [r7, #28]
 800cf6c:	f7f8 fc7a 	bl	8005864 <pbuf_free>
 800cf70:	e000      	b.n	800cf74 <icmp_send_response+0xc0>
    return;
 800cf72:	bf00      	nop
}
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	08011954 	.word	0x08011954
 800cf80:	08011a20 	.word	0x08011a20
 800cf84:	080119c4 	.word	0x080119c4

0800cf88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cf90:	4b33      	ldr	r3, [pc, #204]	; (800d060 <ip4_route+0xd8>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	60fb      	str	r3, [r7, #12]
 800cf96:	e036      	b.n	800d006 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d02b      	beq.n	800d000 <ip4_route+0x78>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfae:	089b      	lsrs	r3, r3, #2
 800cfb0:	f003 0301 	and.w	r3, r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d022      	beq.n	800d000 <ip4_route+0x78>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01d      	beq.n	800d000 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	405a      	eors	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d101      	bne.n	800cfe0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	e038      	b.n	800d052 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfe6:	f003 0302 	and.w	r3, r3, #2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d108      	bne.n	800d000 <ip4_route+0x78>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	330c      	adds	r3, #12
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d101      	bne.n	800d000 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	e028      	b.n	800d052 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	60fb      	str	r3, [r7, #12]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1c5      	bne.n	800cf98 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d00c:	4b15      	ldr	r3, [pc, #84]	; (800d064 <ip4_route+0xdc>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d01a      	beq.n	800d04a <ip4_route+0xc2>
 800d014:	4b13      	ldr	r3, [pc, #76]	; (800d064 <ip4_route+0xdc>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	2b00      	cmp	r3, #0
 800d022:	d012      	beq.n	800d04a <ip4_route+0xc2>
 800d024:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <ip4_route+0xdc>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d02c:	f003 0304 	and.w	r3, r3, #4
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00a      	beq.n	800d04a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d034:	4b0b      	ldr	r3, [pc, #44]	; (800d064 <ip4_route+0xdc>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3304      	adds	r3, #4
 800d03a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d004      	beq.n	800d04a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b7f      	cmp	r3, #127	; 0x7f
 800d048:	d101      	bne.n	800d04e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	e001      	b.n	800d052 <ip4_route+0xca>
  }

  return netif_default;
 800d04e:	4b05      	ldr	r3, [pc, #20]	; (800d064 <ip4_route+0xdc>)
 800d050:	681b      	ldr	r3, [r3, #0]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3714      	adds	r7, #20
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	20008280 	.word	0x20008280
 800d064:	20008284 	.word	0x20008284

0800d068 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d016      	beq.n	800d0ae <ip4_input_accept+0x46>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3304      	adds	r3, #4
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d011      	beq.n	800d0ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d08a:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <ip4_input_accept+0x50>)
 800d08c:	695a      	ldr	r2, [r3, #20]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3304      	adds	r3, #4
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	429a      	cmp	r2, r3
 800d096:	d008      	beq.n	800d0aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d098:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <ip4_input_accept+0x50>)
 800d09a:	695b      	ldr	r3, [r3, #20]
 800d09c:	6879      	ldr	r1, [r7, #4]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fa08 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800d0a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	20004d1c 	.word	0x20004d1c

0800d0bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	091b      	lsrs	r3, r3, #4
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	d004      	beq.n	800d0e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7f8 fbc3 	bl	8005864 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	e107      	b.n	800d2f2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	f003 030f 	and.w	r3, r3, #15
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	885b      	ldrh	r3, [r3, #2]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f7 f855 	bl	80041a8 <lwip_htons>
 800d0fe:	4603      	mov	r3, r0
 800d100:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	891b      	ldrh	r3, [r3, #8]
 800d106:	89ba      	ldrh	r2, [r7, #12]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d204      	bcs.n	800d116 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d10c:	89bb      	ldrh	r3, [r7, #12]
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7f8 fa21 	bl	8005558 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	895b      	ldrh	r3, [r3, #10]
 800d11a:	89fa      	ldrh	r2, [r7, #14]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d807      	bhi.n	800d130 <ip4_input+0x74>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	891b      	ldrh	r3, [r3, #8]
 800d124:	89ba      	ldrh	r2, [r7, #12]
 800d126:	429a      	cmp	r2, r3
 800d128:	d802      	bhi.n	800d130 <ip4_input+0x74>
 800d12a:	89fb      	ldrh	r3, [r7, #14]
 800d12c:	2b13      	cmp	r3, #19
 800d12e:	d804      	bhi.n	800d13a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7f8 fb97 	bl	8005864 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d136:	2300      	movs	r3, #0
 800d138:	e0db      	b.n	800d2f2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	4a6f      	ldr	r2, [pc, #444]	; (800d2fc <ip4_input+0x240>)
 800d140:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	4a6d      	ldr	r2, [pc, #436]	; (800d2fc <ip4_input+0x240>)
 800d148:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d14a:	4b6c      	ldr	r3, [pc, #432]	; (800d2fc <ip4_input+0x240>)
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d152:	2be0      	cmp	r3, #224	; 0xe0
 800d154:	d112      	bne.n	800d17c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d15c:	f003 0301 	and.w	r3, r3, #1
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d007      	beq.n	800d176 <ip4_input+0xba>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	3304      	adds	r3, #4
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <ip4_input+0xba>
      netif = inp;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	613b      	str	r3, [r7, #16]
 800d174:	e02a      	b.n	800d1cc <ip4_input+0x110>
    } else {
      netif = NULL;
 800d176:	2300      	movs	r3, #0
 800d178:	613b      	str	r3, [r7, #16]
 800d17a:	e027      	b.n	800d1cc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d17c:	6838      	ldr	r0, [r7, #0]
 800d17e:	f7ff ff73 	bl	800d068 <ip4_input_accept>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <ip4_input+0xd2>
      netif = inp;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	e01e      	b.n	800d1cc <ip4_input+0x110>
    } else {
      netif = NULL;
 800d18e:	2300      	movs	r3, #0
 800d190:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d192:	4b5a      	ldr	r3, [pc, #360]	; (800d2fc <ip4_input+0x240>)
 800d194:	695b      	ldr	r3, [r3, #20]
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b7f      	cmp	r3, #127	; 0x7f
 800d19a:	d017      	beq.n	800d1cc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d19c:	4b58      	ldr	r3, [pc, #352]	; (800d300 <ip4_input+0x244>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	613b      	str	r3, [r7, #16]
 800d1a2:	e00e      	b.n	800d1c2 <ip4_input+0x106>
          if (netif == inp) {
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d006      	beq.n	800d1ba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d1ac:	6938      	ldr	r0, [r7, #16]
 800d1ae:	f7ff ff5b 	bl	800d068 <ip4_input_accept>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d108      	bne.n	800d1ca <ip4_input+0x10e>
 800d1b8:	e000      	b.n	800d1bc <ip4_input+0x100>
            continue;
 800d1ba:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	613b      	str	r3, [r7, #16]
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1ed      	bne.n	800d1a4 <ip4_input+0xe8>
 800d1c8:	e000      	b.n	800d1cc <ip4_input+0x110>
            break;
 800d1ca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1cc:	4b4b      	ldr	r3, [pc, #300]	; (800d2fc <ip4_input+0x240>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 f96e 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d105      	bne.n	800d1ea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d1de:	4b47      	ldr	r3, [pc, #284]	; (800d2fc <ip4_input+0x240>)
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1e6:	2be0      	cmp	r3, #224	; 0xe0
 800d1e8:	d104      	bne.n	800d1f4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f8 fb3a 	bl	8005864 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e07e      	b.n	800d2f2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d104      	bne.n	800d204 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7f8 fb32 	bl	8005864 <pbuf_free>
    return ERR_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	e076      	b.n	800d2f2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	88db      	ldrh	r3, [r3, #6]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	461a      	mov	r2, r3
 800d20c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d210:	4013      	ands	r3, r2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00b      	beq.n	800d22e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fc92 	bl	800db40 <ip4_reass>
 800d21c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <ip4_input+0x16c>
      return ERR_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	e064      	b.n	800d2f2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d22e:	4a33      	ldr	r2, [pc, #204]	; (800d2fc <ip4_input+0x240>)
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d234:	4a31      	ldr	r2, [pc, #196]	; (800d2fc <ip4_input+0x240>)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d23a:	4a30      	ldr	r2, [pc, #192]	; (800d2fc <ip4_input+0x240>)
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	f003 030f 	and.w	r3, r3, #15
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	b29a      	uxth	r2, r3
 800d250:	4b2a      	ldr	r3, [pc, #168]	; (800d2fc <ip4_input+0x240>)
 800d252:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d254:	89fb      	ldrh	r3, [r7, #14]
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7f8 fa7d 	bl	8005758 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	7a5b      	ldrb	r3, [r3, #9]
 800d262:	2b11      	cmp	r3, #17
 800d264:	d006      	beq.n	800d274 <ip4_input+0x1b8>
 800d266:	2b11      	cmp	r3, #17
 800d268:	dc13      	bgt.n	800d292 <ip4_input+0x1d6>
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d00c      	beq.n	800d288 <ip4_input+0x1cc>
 800d26e:	2b06      	cmp	r3, #6
 800d270:	d005      	beq.n	800d27e <ip4_input+0x1c2>
 800d272:	e00e      	b.n	800d292 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7fe f8e6 	bl	800b448 <udp_input>
        break;
 800d27c:	e026      	b.n	800d2cc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7fa f927 	bl	80074d4 <tcp_input>
        break;
 800d286:	e021      	b.n	800d2cc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff fcee 	bl	800cc6c <icmp_input>
        break;
 800d290:	e01c      	b.n	800d2cc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d292:	4b1a      	ldr	r3, [pc, #104]	; (800d2fc <ip4_input+0x240>)
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	6939      	ldr	r1, [r7, #16]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f90b 	bl	800d4b4 <ip4_addr_isbroadcast_u32>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10f      	bne.n	800d2c4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d2a4:	4b15      	ldr	r3, [pc, #84]	; (800d2fc <ip4_input+0x240>)
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d2ac:	2be0      	cmp	r3, #224	; 0xe0
 800d2ae:	d009      	beq.n	800d2c4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d2b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7f8 fac1 	bl	800583e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d2bc:	2102      	movs	r1, #2
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7ff fdd8 	bl	800ce74 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7f8 facd 	bl	8005864 <pbuf_free>
        break;
 800d2ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d2cc:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <ip4_input+0x240>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d2d2:	4b0a      	ldr	r3, [pc, #40]	; (800d2fc <ip4_input+0x240>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d2d8:	4b08      	ldr	r3, [pc, #32]	; (800d2fc <ip4_input+0x240>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d2de:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <ip4_input+0x240>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <ip4_input+0x240>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d2ea:	4b04      	ldr	r3, [pc, #16]	; (800d2fc <ip4_input+0x240>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20004d1c 	.word	0x20004d1c
 800d300:	20008280 	.word	0x20008280

0800d304 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	; 0x28
 800d308:	af04      	add	r7, sp, #16
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d009      	beq.n	800d330 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d003      	beq.n	800d32a <ip4_output_if+0x26>
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d102      	bne.n	800d330 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	3304      	adds	r3, #4
 800d32e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d330:	78fa      	ldrb	r2, [r7, #3]
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	9302      	str	r3, [sp, #8]
 800d336:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	4613      	mov	r3, r2
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	6979      	ldr	r1, [r7, #20]
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f805 	bl	800d358 <ip4_output_if_src>
 800d34e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	7b9b      	ldrb	r3, [r3, #14]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d006      	beq.n	800d37c <ip4_output_if_src+0x24>
 800d36e:	4b4b      	ldr	r3, [pc, #300]	; (800d49c <ip4_output_if_src+0x144>)
 800d370:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d374:	494a      	ldr	r1, [pc, #296]	; (800d4a0 <ip4_output_if_src+0x148>)
 800d376:	484b      	ldr	r0, [pc, #300]	; (800d4a4 <ip4_output_if_src+0x14c>)
 800d378:	f001 f8f2 	bl	800e560 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d060      	beq.n	800d444 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d382:	2314      	movs	r3, #20
 800d384:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d386:	2114      	movs	r1, #20
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f7f8 f9d5 	bl	8005738 <pbuf_add_header>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d394:	f06f 0301 	mvn.w	r3, #1
 800d398:	e07c      	b.n	800d494 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	895b      	ldrh	r3, [r3, #10]
 800d3a4:	2b13      	cmp	r3, #19
 800d3a6:	d806      	bhi.n	800d3b6 <ip4_output_if_src+0x5e>
 800d3a8:	4b3c      	ldr	r3, [pc, #240]	; (800d49c <ip4_output_if_src+0x144>)
 800d3aa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d3ae:	493e      	ldr	r1, [pc, #248]	; (800d4a8 <ip4_output_if_src+0x150>)
 800d3b0:	483c      	ldr	r0, [pc, #240]	; (800d4a4 <ip4_output_if_src+0x14c>)
 800d3b2:	f001 f8d5 	bl	800e560 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	78fa      	ldrb	r2, [r7, #3]
 800d3ba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d3c2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d3cc:	8b7b      	ldrh	r3, [r7, #26]
 800d3ce:	089b      	lsrs	r3, r3, #2
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d3e4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	891b      	ldrh	r3, [r3, #8]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f6 fedc 	bl	80041a8 <lwip_htons>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	719a      	strb	r2, [r3, #6]
 800d3fe:	2200      	movs	r2, #0
 800d400:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d402:	4b2a      	ldr	r3, [pc, #168]	; (800d4ac <ip4_output_if_src+0x154>)
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f7f6 fece 	bl	80041a8 <lwip_htons>
 800d40c:	4603      	mov	r3, r0
 800d40e:	461a      	mov	r2, r3
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d414:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <ip4_output_if_src+0x154>)
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	3301      	adds	r3, #1
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	4b23      	ldr	r3, [pc, #140]	; (800d4ac <ip4_output_if_src+0x154>)
 800d41e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d104      	bne.n	800d430 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d426:	4b22      	ldr	r3, [pc, #136]	; (800d4b0 <ip4_output_if_src+0x158>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	60da      	str	r2, [r3, #12]
 800d42e:	e003      	b.n	800d438 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	2200      	movs	r2, #0
 800d43c:	729a      	strb	r2, [r3, #10]
 800d43e:	2200      	movs	r2, #0
 800d440:	72da      	strb	r2, [r3, #11]
 800d442:	e00f      	b.n	800d464 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	895b      	ldrh	r3, [r3, #10]
 800d448:	2b13      	cmp	r3, #19
 800d44a:	d802      	bhi.n	800d452 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d44c:	f06f 0301 	mvn.w	r3, #1
 800d450:	e020      	b.n	800d494 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	691b      	ldr	r3, [r3, #16]
 800d45c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d45e:	f107 0314 	add.w	r3, r7, #20
 800d462:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d466:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00c      	beq.n	800d486 <ip4_output_if_src+0x12e>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	891a      	ldrh	r2, [r3, #8]
 800d470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d474:	429a      	cmp	r2, r3
 800d476:	d906      	bls.n	800d486 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f000 fd53 	bl	800df28 <ip4_frag>
 800d482:	4603      	mov	r3, r0
 800d484:	e006      	b.n	800d494 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	68f9      	ldr	r1, [r7, #12]
 800d48e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d490:	4798      	blx	r3
 800d492:	4603      	mov	r3, r0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3720      	adds	r7, #32
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	08011a4c 	.word	0x08011a4c
 800d4a0:	08011a80 	.word	0x08011a80
 800d4a4:	08011a8c 	.word	0x08011a8c
 800d4a8:	08011ab4 	.word	0x08011ab4
 800d4ac:	200083de 	.word	0x200083de
 800d4b0:	08011e94 	.word	0x08011e94

0800d4b4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c8:	d002      	beq.n	800d4d0 <ip4_addr_isbroadcast_u32+0x1c>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e02a      	b.n	800d52a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e021      	b.n	800d52a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d101      	bne.n	800d4f6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e019      	b.n	800d52a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	405a      	eors	r2, r3
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	3308      	adds	r3, #8
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4013      	ands	r3, r2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10d      	bne.n	800d528 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	3308      	adds	r3, #8
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	43da      	mvns	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	3308      	adds	r3, #8
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d520:	429a      	cmp	r2, r3
 800d522:	d101      	bne.n	800d528 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d524:	2301      	movs	r3, #1
 800d526:	e000      	b.n	800d52a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d528:	2300      	movs	r3, #0
  }
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3714      	adds	r7, #20
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
	...

0800d538 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d542:	4b12      	ldr	r3, [pc, #72]	; (800d58c <ip_reass_tmr+0x54>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d548:	e018      	b.n	800d57c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	7fdb      	ldrb	r3, [r3, #31]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <ip_reass_tmr+0x32>
      r->timer--;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7fdb      	ldrb	r3, [r3, #31]
 800d556:	3b01      	subs	r3, #1
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	e008      	b.n	800d57c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f80a 	bl	800d590 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1e3      	bne.n	800d54a <ip_reass_tmr+0x12>
    }
  }
}
 800d582:	bf00      	nop
 800d584:	bf00      	nop
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	200083e0 	.word	0x200083e0

0800d590 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d105      	bne.n	800d5b2 <ip_reass_free_complete_datagram+0x22>
 800d5a6:	4b45      	ldr	r3, [pc, #276]	; (800d6bc <ip_reass_free_complete_datagram+0x12c>)
 800d5a8:	22ab      	movs	r2, #171	; 0xab
 800d5aa:	4945      	ldr	r1, [pc, #276]	; (800d6c0 <ip_reass_free_complete_datagram+0x130>)
 800d5ac:	4845      	ldr	r0, [pc, #276]	; (800d6c4 <ip_reass_free_complete_datagram+0x134>)
 800d5ae:	f000 ffd7 	bl	800e560 <iprintf>
  if (prev != NULL) {
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d005      	beq.n	800d5ce <ip_reass_free_complete_datagram+0x3e>
 800d5c2:	4b3e      	ldr	r3, [pc, #248]	; (800d6bc <ip_reass_free_complete_datagram+0x12c>)
 800d5c4:	22ad      	movs	r2, #173	; 0xad
 800d5c6:	4940      	ldr	r1, [pc, #256]	; (800d6c8 <ip_reass_free_complete_datagram+0x138>)
 800d5c8:	483e      	ldr	r0, [pc, #248]	; (800d6c4 <ip_reass_free_complete_datagram+0x134>)
 800d5ca:	f000 ffc9 	bl	800e560 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	889b      	ldrh	r3, [r3, #4]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d12a      	bne.n	800d636 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	6858      	ldr	r0, [r3, #4]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	2214      	movs	r2, #20
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	f001 f88c 	bl	800e716 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d5fe:	2101      	movs	r1, #1
 800d600:	69b8      	ldr	r0, [r7, #24]
 800d602:	f7ff fc47 	bl	800ce94 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d606:	69b8      	ldr	r0, [r7, #24]
 800d608:	f7f8 f9b4 	bl	8005974 <pbuf_clen>
 800d60c:	4603      	mov	r3, r0
 800d60e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d610:	8bfa      	ldrh	r2, [r7, #30]
 800d612:	8a7b      	ldrh	r3, [r7, #18]
 800d614:	4413      	add	r3, r2
 800d616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d61a:	db05      	blt.n	800d628 <ip_reass_free_complete_datagram+0x98>
 800d61c:	4b27      	ldr	r3, [pc, #156]	; (800d6bc <ip_reass_free_complete_datagram+0x12c>)
 800d61e:	22bc      	movs	r2, #188	; 0xbc
 800d620:	492a      	ldr	r1, [pc, #168]	; (800d6cc <ip_reass_free_complete_datagram+0x13c>)
 800d622:	4828      	ldr	r0, [pc, #160]	; (800d6c4 <ip_reass_free_complete_datagram+0x134>)
 800d624:	f000 ff9c 	bl	800e560 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d628:	8bfa      	ldrh	r2, [r7, #30]
 800d62a:	8a7b      	ldrh	r3, [r7, #18]
 800d62c:	4413      	add	r3, r2
 800d62e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d630:	69b8      	ldr	r0, [r7, #24]
 800d632:	f7f8 f917 	bl	8005864 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d63c:	e01f      	b.n	800d67e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f7f8 f990 	bl	8005974 <pbuf_clen>
 800d654:	4603      	mov	r3, r0
 800d656:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d658:	8bfa      	ldrh	r2, [r7, #30]
 800d65a:	8a7b      	ldrh	r3, [r7, #18]
 800d65c:	4413      	add	r3, r2
 800d65e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d662:	db05      	blt.n	800d670 <ip_reass_free_complete_datagram+0xe0>
 800d664:	4b15      	ldr	r3, [pc, #84]	; (800d6bc <ip_reass_free_complete_datagram+0x12c>)
 800d666:	22cc      	movs	r2, #204	; 0xcc
 800d668:	4918      	ldr	r1, [pc, #96]	; (800d6cc <ip_reass_free_complete_datagram+0x13c>)
 800d66a:	4816      	ldr	r0, [pc, #88]	; (800d6c4 <ip_reass_free_complete_datagram+0x134>)
 800d66c:	f000 ff78 	bl	800e560 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d670:	8bfa      	ldrh	r2, [r7, #30]
 800d672:	8a7b      	ldrh	r3, [r7, #18]
 800d674:	4413      	add	r3, r2
 800d676:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f7f8 f8f3 	bl	8005864 <pbuf_free>
  while (p != NULL) {
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1dc      	bne.n	800d63e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f8c2 	bl	800d810 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d68c:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <ip_reass_free_complete_datagram+0x140>)
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	8bfa      	ldrh	r2, [r7, #30]
 800d692:	429a      	cmp	r2, r3
 800d694:	d905      	bls.n	800d6a2 <ip_reass_free_complete_datagram+0x112>
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <ip_reass_free_complete_datagram+0x12c>)
 800d698:	22d2      	movs	r2, #210	; 0xd2
 800d69a:	490e      	ldr	r1, [pc, #56]	; (800d6d4 <ip_reass_free_complete_datagram+0x144>)
 800d69c:	4809      	ldr	r0, [pc, #36]	; (800d6c4 <ip_reass_free_complete_datagram+0x134>)
 800d69e:	f000 ff5f 	bl	800e560 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d6a2:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <ip_reass_free_complete_datagram+0x140>)
 800d6a4:	881a      	ldrh	r2, [r3, #0]
 800d6a6:	8bfb      	ldrh	r3, [r7, #30]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	4b08      	ldr	r3, [pc, #32]	; (800d6d0 <ip_reass_free_complete_datagram+0x140>)
 800d6ae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d6b0:	8bfb      	ldrh	r3, [r7, #30]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3720      	adds	r7, #32
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	08011ae4 	.word	0x08011ae4
 800d6c0:	08011b20 	.word	0x08011b20
 800d6c4:	08011b2c 	.word	0x08011b2c
 800d6c8:	08011b54 	.word	0x08011b54
 800d6cc:	08011b68 	.word	0x08011b68
 800d6d0:	200083e4 	.word	0x200083e4
 800d6d4:	08011b88 	.word	0x08011b88

0800d6d8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	; 0x28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d6f6:	4b28      	ldr	r3, [pc, #160]	; (800d798 <ip_reass_remove_oldest_datagram+0xc0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d6fc:	e030      	b.n	800d760 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d700:	695a      	ldr	r2, [r3, #20]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	429a      	cmp	r2, r3
 800d708:	d10c      	bne.n	800d724 <ip_reass_remove_oldest_datagram+0x4c>
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	699a      	ldr	r2, [r3, #24]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	429a      	cmp	r2, r3
 800d714:	d106      	bne.n	800d724 <ip_reass_remove_oldest_datagram+0x4c>
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	899a      	ldrh	r2, [r3, #12]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	889b      	ldrh	r3, [r3, #4]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	429a      	cmp	r2, r3
 800d722:	d014      	beq.n	800d74e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	3301      	adds	r3, #1
 800d728:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d104      	bne.n	800d73a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	61bb      	str	r3, [r7, #24]
 800d738:	e009      	b.n	800d74e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	7fda      	ldrb	r2, [r3, #31]
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	7fdb      	ldrb	r3, [r3, #31]
 800d742:	429a      	cmp	r2, r3
 800d744:	d803      	bhi.n	800d74e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1cb      	bne.n	800d6fe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d008      	beq.n	800d77e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d76c:	69b9      	ldr	r1, [r7, #24]
 800d76e:	6a38      	ldr	r0, [r7, #32]
 800d770:	f7ff ff0e 	bl	800d590 <ip_reass_free_complete_datagram>
 800d774:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d776:	697a      	ldr	r2, [r7, #20]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	4413      	add	r3, r2
 800d77c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	da02      	bge.n	800d78c <ip_reass_remove_oldest_datagram+0xb4>
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	dcac      	bgt.n	800d6e6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d78c:	697b      	ldr	r3, [r7, #20]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3728      	adds	r7, #40	; 0x28
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	200083e0 	.word	0x200083e0

0800d79c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7a6:	2004      	movs	r0, #4
 800d7a8:	f7f7 f976 	bl	8004a98 <memp_malloc>
 800d7ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d110      	bne.n	800d7d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff ff8e 	bl	800d6d8 <ip_reass_remove_oldest_datagram>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	dc03      	bgt.n	800d7cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7c4:	2004      	movs	r0, #4
 800d7c6:	f7f7 f967 	bl	8004a98 <memp_malloc>
 800d7ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e016      	b.n	800d804 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d7d6:	2220      	movs	r2, #32
 800d7d8:	2100      	movs	r1, #0
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f000 ff25 	bl	800e62a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	220f      	movs	r2, #15
 800d7e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d7e6:	4b09      	ldr	r3, [pc, #36]	; (800d80c <ip_reass_enqueue_new_datagram+0x70>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d7ee:	4a07      	ldr	r2, [pc, #28]	; (800d80c <ip_reass_enqueue_new_datagram+0x70>)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	2214      	movs	r2, #20
 800d7fa:	6879      	ldr	r1, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 ff8a 	bl	800e716 <memcpy>
  return ipr;
 800d802:	68fb      	ldr	r3, [r7, #12]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	200083e0 	.word	0x200083e0

0800d810 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d81a:	4b10      	ldr	r3, [pc, #64]	; (800d85c <ip_reass_dequeue_datagram+0x4c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d104      	bne.n	800d82e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a0c      	ldr	r2, [pc, #48]	; (800d85c <ip_reass_dequeue_datagram+0x4c>)
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	e00d      	b.n	800d84a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d106      	bne.n	800d842 <ip_reass_dequeue_datagram+0x32>
 800d834:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <ip_reass_dequeue_datagram+0x50>)
 800d836:	f240 1245 	movw	r2, #325	; 0x145
 800d83a:	490a      	ldr	r1, [pc, #40]	; (800d864 <ip_reass_dequeue_datagram+0x54>)
 800d83c:	480a      	ldr	r0, [pc, #40]	; (800d868 <ip_reass_dequeue_datagram+0x58>)
 800d83e:	f000 fe8f 	bl	800e560 <iprintf>
    prev->next = ipr->next;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	2004      	movs	r0, #4
 800d84e:	f7f7 f993 	bl	8004b78 <memp_free>
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	200083e0 	.word	0x200083e0
 800d860:	08011ae4 	.word	0x08011ae4
 800d864:	08011bac 	.word	0x08011bac
 800d868:	08011b2c 	.word	0x08011b2c

0800d86c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08c      	sub	sp, #48	; 0x30
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d878:	2300      	movs	r3, #0
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d87c:	2301      	movs	r3, #1
 800d87e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	885b      	ldrh	r3, [r3, #2]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f6 fc8b 	bl	80041a8 <lwip_htons>
 800d892:	4603      	mov	r3, r0
 800d894:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	f003 030f 	and.w	r3, r3, #15
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d8a4:	7e7b      	ldrb	r3, [r7, #25]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	8b7a      	ldrh	r2, [r7, #26]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d202      	bcs.n	800d8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	e135      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d8b4:	7e7b      	ldrb	r3, [r7, #25]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	8b7a      	ldrh	r2, [r7, #26]
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	88db      	ldrh	r3, [r3, #6]
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7f6 fc6f 	bl	80041a8 <lwip_htons>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8de:	2200      	movs	r2, #0
 800d8e0:	701a      	strb	r2, [r3, #0]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	705a      	strb	r2, [r3, #1]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	709a      	strb	r2, [r3, #2]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	8afa      	ldrh	r2, [r7, #22]
 800d8f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d8f4:	8afa      	ldrh	r2, [r7, #22]
 800d8f6:	8b7b      	ldrh	r3, [r7, #26]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	88db      	ldrh	r3, [r3, #6]
 800d904:	b29b      	uxth	r3, r3
 800d906:	8afa      	ldrh	r2, [r7, #22]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d902      	bls.n	800d912 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d90c:	f04f 33ff 	mov.w	r3, #4294967295
 800d910:	e106      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	627b      	str	r3, [r7, #36]	; 0x24
 800d918:	e068      	b.n	800d9ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	889b      	ldrh	r3, [r3, #4]
 800d924:	b29a      	uxth	r2, r3
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	889b      	ldrh	r3, [r3, #4]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d235      	bcs.n	800d99c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d934:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d020      	beq.n	800d97e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	889b      	ldrh	r3, [r3, #4]
 800d940:	b29a      	uxth	r2, r3
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	88db      	ldrh	r3, [r3, #6]
 800d946:	b29b      	uxth	r3, r3
 800d948:	429a      	cmp	r2, r3
 800d94a:	d307      	bcc.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	88db      	ldrh	r3, [r3, #6]
 800d950:	b29a      	uxth	r2, r3
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	889b      	ldrh	r3, [r3, #4]
 800d956:	b29b      	uxth	r3, r3
 800d958:	429a      	cmp	r2, r3
 800d95a:	d902      	bls.n	800d962 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d95c:	f04f 33ff 	mov.w	r3, #4294967295
 800d960:	e0de      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96a:	88db      	ldrh	r3, [r3, #6]
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	889b      	ldrh	r3, [r3, #4]
 800d972:	b29b      	uxth	r3, r3
 800d974:	429a      	cmp	r2, r3
 800d976:	d03d      	beq.n	800d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d97c:	e03a      	b.n	800d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	88db      	ldrh	r3, [r3, #6]
 800d982:	b29a      	uxth	r2, r3
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	889b      	ldrh	r3, [r3, #4]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d902      	bls.n	800d994 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d98e:	f04f 33ff 	mov.w	r3, #4294967295
 800d992:	e0c5      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	605a      	str	r2, [r3, #4]
      break;
 800d99a:	e02b      	b.n	800d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99e:	889b      	ldrh	r3, [r3, #4]
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	889b      	ldrh	r3, [r3, #4]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d102      	bne.n	800d9b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b0:	e0b6      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	889b      	ldrh	r3, [r3, #4]
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	88db      	ldrh	r3, [r3, #6]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d202      	bcs.n	800d9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c6:	e0ab      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d009      	beq.n	800d9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	88db      	ldrh	r3, [r3, #6]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	889b      	ldrh	r3, [r3, #4]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d001      	beq.n	800d9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d193      	bne.n	800d91a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d9f2:	e000      	b.n	800d9f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d9f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d12d      	bne.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d01c      	beq.n	800da3c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da04:	88db      	ldrh	r3, [r3, #6]
 800da06:	b29a      	uxth	r2, r3
 800da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0a:	889b      	ldrh	r3, [r3, #4]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	429a      	cmp	r2, r3
 800da10:	d906      	bls.n	800da20 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800da12:	4b45      	ldr	r3, [pc, #276]	; (800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da14:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800da18:	4944      	ldr	r1, [pc, #272]	; (800db2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800da1a:	4845      	ldr	r0, [pc, #276]	; (800db30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da1c:	f000 fda0 	bl	800e560 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da28:	88db      	ldrh	r3, [r3, #6]
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2e:	889b      	ldrh	r3, [r3, #4]
 800da30:	b29b      	uxth	r3, r3
 800da32:	429a      	cmp	r2, r3
 800da34:	d010      	beq.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	623b      	str	r3, [r7, #32]
 800da3a:	e00d      	b.n	800da58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d006      	beq.n	800da52 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800da44:	4b38      	ldr	r3, [pc, #224]	; (800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da46:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800da4a:	493a      	ldr	r1, [pc, #232]	; (800db34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800da4c:	4838      	ldr	r0, [pc, #224]	; (800db30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da4e:	f000 fd87 	bl	800e560 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d105      	bne.n	800da6a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	7f9b      	ldrb	r3, [r3, #30]
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d059      	beq.n	800db1e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d04f      	beq.n	800db10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d006      	beq.n	800da86 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	889b      	ldrh	r3, [r3, #4]
 800da80:	b29b      	uxth	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	d002      	beq.n	800da8c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	623b      	str	r3, [r7, #32]
 800da8a:	e041      	b.n	800db10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800da8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da96:	e012      	b.n	800dabe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	88db      	ldrh	r3, [r3, #6]
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	889b      	ldrh	r3, [r3, #4]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	429a      	cmp	r2, r3
 800daac:	d002      	beq.n	800dab4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	623b      	str	r3, [r7, #32]
            break;
 800dab2:	e007      	b.n	800dac4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1e9      	bne.n	800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d022      	beq.n	800db10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dad2:	4b15      	ldr	r3, [pc, #84]	; (800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dad4:	f240 12df 	movw	r2, #479	; 0x1df
 800dad8:	4917      	ldr	r1, [pc, #92]	; (800db38 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dada:	4815      	ldr	r0, [pc, #84]	; (800db30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dadc:	f000 fd40 	bl	800e560 <iprintf>
          LWIP_ASSERT("sanity check",
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dae8:	429a      	cmp	r2, r3
 800daea:	d106      	bne.n	800dafa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800daec:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800daee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800daf2:	4911      	ldr	r1, [pc, #68]	; (800db38 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800daf4:	480e      	ldr	r0, [pc, #56]	; (800db30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800daf6:	f000 fd33 	bl	800e560 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d006      	beq.n	800db10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800db02:	4b09      	ldr	r3, [pc, #36]	; (800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db04:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800db08:	490c      	ldr	r1, [pc, #48]	; (800db3c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800db0a:	4809      	ldr	r0, [pc, #36]	; (800db30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db0c:	f000 fd28 	bl	800e560 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	2b00      	cmp	r3, #0
 800db14:	bf14      	ite	ne
 800db16:	2301      	movne	r3, #1
 800db18:	2300      	moveq	r3, #0
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	e000      	b.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3730      	adds	r7, #48	; 0x30
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	08011ae4 	.word	0x08011ae4
 800db2c:	08011bc8 	.word	0x08011bc8
 800db30:	08011b2c 	.word	0x08011b2c
 800db34:	08011be8 	.word	0x08011be8
 800db38:	08011c20 	.word	0x08011c20
 800db3c:	08011c30 	.word	0x08011c30

0800db40 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08e      	sub	sp, #56	; 0x38
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	f003 030f 	and.w	r3, r3, #15
 800db56:	b2db      	uxtb	r3, r3
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b14      	cmp	r3, #20
 800db5e:	f040 8171 	bne.w	800de44 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800db62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db64:	88db      	ldrh	r3, [r3, #6]
 800db66:	b29b      	uxth	r3, r3
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f6 fb1d 	bl	80041a8 <lwip_htons>
 800db6e:	4603      	mov	r3, r0
 800db70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db74:	b29b      	uxth	r3, r3
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	885b      	ldrh	r3, [r3, #2]
 800db7e:	b29b      	uxth	r3, r3
 800db80:	4618      	mov	r0, r3
 800db82:	f7f6 fb11 	bl	80041a8 <lwip_htons>
 800db86:	4603      	mov	r3, r0
 800db88:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800db8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	f003 030f 	and.w	r3, r3, #15
 800db92:	b2db      	uxtb	r3, r3
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800db9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dba2:	429a      	cmp	r2, r3
 800dba4:	f0c0 8150 	bcc.w	800de48 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7f7 fedd 	bl	8005974 <pbuf_clen>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dbbe:	4b8c      	ldr	r3, [pc, #560]	; (800ddf0 <ip4_reass+0x2b0>)
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	8c3b      	ldrh	r3, [r7, #32]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	2b0a      	cmp	r3, #10
 800dbca:	dd10      	ble.n	800dbee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dbcc:	8c3b      	ldrh	r3, [r7, #32]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd2:	f7ff fd81 	bl	800d6d8 <ip_reass_remove_oldest_datagram>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f000 8137 	beq.w	800de4c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dbde:	4b84      	ldr	r3, [pc, #528]	; (800ddf0 <ip4_reass+0x2b0>)
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	8c3b      	ldrh	r3, [r7, #32]
 800dbe6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dbe8:	2b0a      	cmp	r3, #10
 800dbea:	f300 812f 	bgt.w	800de4c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dbee:	4b81      	ldr	r3, [pc, #516]	; (800ddf4 <ip4_reass+0x2b4>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	633b      	str	r3, [r7, #48]	; 0x30
 800dbf4:	e015      	b.n	800dc22 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	695a      	ldr	r2, [r3, #20]
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d10c      	bne.n	800dc1c <ip4_reass+0xdc>
 800dc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc04:	699a      	ldr	r2, [r3, #24]
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d106      	bne.n	800dc1c <ip4_reass+0xdc>
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	899a      	ldrh	r2, [r3, #12]
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	889b      	ldrh	r3, [r3, #4]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d006      	beq.n	800dc2a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	633b      	str	r3, [r7, #48]	; 0x30
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1e6      	bne.n	800dbf6 <ip4_reass+0xb6>
 800dc28:	e000      	b.n	800dc2c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dc2a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d109      	bne.n	800dc46 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dc32:	8c3b      	ldrh	r3, [r7, #32]
 800dc34:	4619      	mov	r1, r3
 800dc36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc38:	f7ff fdb0 	bl	800d79c <ip_reass_enqueue_new_datagram>
 800dc3c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d11c      	bne.n	800dc7e <ip4_reass+0x13e>
      goto nullreturn;
 800dc44:	e105      	b.n	800de52 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	88db      	ldrh	r3, [r3, #6]
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7f6 faab 	bl	80041a8 <lwip_htons>
 800dc52:	4603      	mov	r3, r0
 800dc54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d110      	bne.n	800dc7e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	89db      	ldrh	r3, [r3, #14]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7f6 faa1 	bl	80041a8 <lwip_htons>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d006      	beq.n	800dc7e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	3308      	adds	r3, #8
 800dc74:	2214      	movs	r2, #20
 800dc76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 fd4c 	bl	800e716 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc80:	88db      	ldrh	r3, [r3, #6]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	f003 0320 	and.w	r3, r3, #32
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	bf0c      	ite	eq
 800dc8c:	2301      	moveq	r3, #1
 800dc8e:	2300      	movne	r3, #0
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00e      	beq.n	800dcb8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc9e:	4413      	add	r3, r2
 800dca0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dca2:	8b7a      	ldrh	r2, [r7, #26]
 800dca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dca6:	429a      	cmp	r2, r3
 800dca8:	f0c0 80a0 	bcc.w	800ddec <ip4_reass+0x2ac>
 800dcac:	8b7b      	ldrh	r3, [r7, #26]
 800dcae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	f200 809a 	bhi.w	800ddec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dcb8:	69fa      	ldr	r2, [r7, #28]
 800dcba:	6879      	ldr	r1, [r7, #4]
 800dcbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcbe:	f7ff fdd5 	bl	800d86c <ip_reass_chain_frag_into_datagram_and_validate>
 800dcc2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcca:	f000 809b 	beq.w	800de04 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dcce:	4b48      	ldr	r3, [pc, #288]	; (800ddf0 <ip4_reass+0x2b0>)
 800dcd0:	881a      	ldrh	r2, [r3, #0]
 800dcd2:	8c3b      	ldrh	r3, [r7, #32]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	4b45      	ldr	r3, [pc, #276]	; (800ddf0 <ip4_reass+0x2b0>)
 800dcda:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00d      	beq.n	800dcfe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dce2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce6:	4413      	add	r3, r2
 800dce8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	8a7a      	ldrh	r2, [r7, #18]
 800dcee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	7f9b      	ldrb	r3, [r3, #30]
 800dcf4:	f043 0301 	orr.w	r3, r3, #1
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d171      	bne.n	800dde8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	8b9b      	ldrh	r3, [r3, #28]
 800dd08:	3314      	adds	r3, #20
 800dd0a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	3308      	adds	r3, #8
 800dd22:	2214      	movs	r2, #20
 800dd24:	4619      	mov	r1, r3
 800dd26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd28:	f000 fcf5 	bl	800e716 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dd2c:	8a3b      	ldrh	r3, [r7, #16]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7f6 fa3a 	bl	80041a8 <lwip_htons>
 800dd34:	4603      	mov	r3, r0
 800dd36:	461a      	mov	r2, r3
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	2200      	movs	r2, #0
 800dd40:	719a      	strb	r2, [r3, #6]
 800dd42:	2200      	movs	r2, #0
 800dd44:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	2200      	movs	r2, #0
 800dd4a:	729a      	strb	r2, [r3, #10]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dd56:	e00d      	b.n	800dd74 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dd5e:	2114      	movs	r1, #20
 800dd60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd62:	f7f7 fcf9 	bl	8005758 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dd66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7f7 fe3d 	bl	80059e8 <pbuf_cat>
      r = iprh->next_pbuf;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1ee      	bne.n	800dd58 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dd7a:	4b1e      	ldr	r3, [pc, #120]	; (800ddf4 <ip4_reass+0x2b4>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d102      	bne.n	800dd8a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd88:	e010      	b.n	800ddac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd8a:	4b1a      	ldr	r3, [pc, #104]	; (800ddf4 <ip4_reass+0x2b4>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd90:	e007      	b.n	800dda2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d006      	beq.n	800ddaa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1f4      	bne.n	800dd92 <ip4_reass+0x252>
 800dda8:	e000      	b.n	800ddac <ip4_reass+0x26c>
          break;
 800ddaa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ddac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddb0:	f7ff fd2e 	bl	800d810 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7f7 fddd 	bl	8005974 <pbuf_clen>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <ip4_reass+0x2b0>)
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	8c3a      	ldrh	r2, [r7, #32]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d906      	bls.n	800ddd6 <ip4_reass+0x296>
 800ddc8:	4b0b      	ldr	r3, [pc, #44]	; (800ddf8 <ip4_reass+0x2b8>)
 800ddca:	f240 229b 	movw	r2, #667	; 0x29b
 800ddce:	490b      	ldr	r1, [pc, #44]	; (800ddfc <ip4_reass+0x2bc>)
 800ddd0:	480b      	ldr	r0, [pc, #44]	; (800de00 <ip4_reass+0x2c0>)
 800ddd2:	f000 fbc5 	bl	800e560 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ddd6:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <ip4_reass+0x2b0>)
 800ddd8:	881a      	ldrh	r2, [r3, #0]
 800ddda:	8c3b      	ldrh	r3, [r7, #32]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	4b03      	ldr	r3, [pc, #12]	; (800ddf0 <ip4_reass+0x2b0>)
 800dde2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	e038      	b.n	800de5a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	e036      	b.n	800de5a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ddec:	bf00      	nop
 800ddee:	e00a      	b.n	800de06 <ip4_reass+0x2c6>
 800ddf0:	200083e4 	.word	0x200083e4
 800ddf4:	200083e0 	.word	0x200083e0
 800ddf8:	08011ae4 	.word	0x08011ae4
 800ddfc:	08011c54 	.word	0x08011c54
 800de00:	08011b2c 	.word	0x08011b2c
    goto nullreturn_ipr;
 800de04:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <ip4_reass+0x2da>
 800de0c:	4b15      	ldr	r3, [pc, #84]	; (800de64 <ip4_reass+0x324>)
 800de0e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800de12:	4915      	ldr	r1, [pc, #84]	; (800de68 <ip4_reass+0x328>)
 800de14:	4815      	ldr	r0, [pc, #84]	; (800de6c <ip4_reass+0x32c>)
 800de16:	f000 fba3 	bl	800e560 <iprintf>
  if (ipr->p == NULL) {
 800de1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d116      	bne.n	800de50 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800de22:	4b13      	ldr	r3, [pc, #76]	; (800de70 <ip4_reass+0x330>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de28:	429a      	cmp	r2, r3
 800de2a:	d006      	beq.n	800de3a <ip4_reass+0x2fa>
 800de2c:	4b0d      	ldr	r3, [pc, #52]	; (800de64 <ip4_reass+0x324>)
 800de2e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800de32:	4910      	ldr	r1, [pc, #64]	; (800de74 <ip4_reass+0x334>)
 800de34:	480d      	ldr	r0, [pc, #52]	; (800de6c <ip4_reass+0x32c>)
 800de36:	f000 fb93 	bl	800e560 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800de3a:	2100      	movs	r1, #0
 800de3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de3e:	f7ff fce7 	bl	800d810 <ip_reass_dequeue_datagram>
 800de42:	e006      	b.n	800de52 <ip4_reass+0x312>
    goto nullreturn;
 800de44:	bf00      	nop
 800de46:	e004      	b.n	800de52 <ip4_reass+0x312>
    goto nullreturn;
 800de48:	bf00      	nop
 800de4a:	e002      	b.n	800de52 <ip4_reass+0x312>
      goto nullreturn;
 800de4c:	bf00      	nop
 800de4e:	e000      	b.n	800de52 <ip4_reass+0x312>
  }

nullreturn:
 800de50:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7f7 fd06 	bl	8005864 <pbuf_free>
  return NULL;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3738      	adds	r7, #56	; 0x38
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	08011ae4 	.word	0x08011ae4
 800de68:	08011c70 	.word	0x08011c70
 800de6c:	08011b2c 	.word	0x08011b2c
 800de70:	200083e0 	.word	0x200083e0
 800de74:	08011c7c 	.word	0x08011c7c

0800de78 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800de7c:	2005      	movs	r0, #5
 800de7e:	f7f6 fe0b 	bl	8004a98 <memp_malloc>
 800de82:	4603      	mov	r3, r0
}
 800de84:	4618      	mov	r0, r3
 800de86:	bd80      	pop	{r7, pc}

0800de88 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800de96:	4b07      	ldr	r3, [pc, #28]	; (800deb4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800de98:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800de9c:	4906      	ldr	r1, [pc, #24]	; (800deb8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800de9e:	4807      	ldr	r0, [pc, #28]	; (800debc <ip_frag_free_pbuf_custom_ref+0x34>)
 800dea0:	f000 fb5e 	bl	800e560 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	2005      	movs	r0, #5
 800dea8:	f7f6 fe66 	bl	8004b78 <memp_free>
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	08011ae4 	.word	0x08011ae4
 800deb8:	08011c9c 	.word	0x08011c9c
 800debc:	08011b2c 	.word	0x08011b2c

0800dec0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d106      	bne.n	800dee0 <ipfrag_free_pbuf_custom+0x20>
 800ded2:	4b11      	ldr	r3, [pc, #68]	; (800df18 <ipfrag_free_pbuf_custom+0x58>)
 800ded4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ded8:	4910      	ldr	r1, [pc, #64]	; (800df1c <ipfrag_free_pbuf_custom+0x5c>)
 800deda:	4811      	ldr	r0, [pc, #68]	; (800df20 <ipfrag_free_pbuf_custom+0x60>)
 800dedc:	f000 fb40 	bl	800e560 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d006      	beq.n	800def6 <ipfrag_free_pbuf_custom+0x36>
 800dee8:	4b0b      	ldr	r3, [pc, #44]	; (800df18 <ipfrag_free_pbuf_custom+0x58>)
 800deea:	f240 22cf 	movw	r2, #719	; 0x2cf
 800deee:	490d      	ldr	r1, [pc, #52]	; (800df24 <ipfrag_free_pbuf_custom+0x64>)
 800def0:	480b      	ldr	r0, [pc, #44]	; (800df20 <ipfrag_free_pbuf_custom+0x60>)
 800def2:	f000 fb35 	bl	800e560 <iprintf>
  if (pcr->original != NULL) {
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d004      	beq.n	800df08 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	4618      	mov	r0, r3
 800df04:	f7f7 fcae 	bl	8005864 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f7ff ffbd 	bl	800de88 <ip_frag_free_pbuf_custom_ref>
}
 800df0e:	bf00      	nop
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	08011ae4 	.word	0x08011ae4
 800df1c:	08011ca8 	.word	0x08011ca8
 800df20:	08011b2c 	.word	0x08011b2c
 800df24:	08011cb4 	.word	0x08011cb4

0800df28 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b094      	sub	sp, #80	; 0x50
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df3e:	3b14      	subs	r3, #20
 800df40:	2b00      	cmp	r3, #0
 800df42:	da00      	bge.n	800df46 <ip4_frag+0x1e>
 800df44:	3307      	adds	r3, #7
 800df46:	10db      	asrs	r3, r3, #3
 800df48:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800df4a:	2314      	movs	r3, #20
 800df4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800df54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df56:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800df58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	f003 030f 	and.w	r3, r3, #15
 800df60:	b2db      	uxtb	r3, r3
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b14      	cmp	r3, #20
 800df68:	d002      	beq.n	800df70 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800df6a:	f06f 0305 	mvn.w	r3, #5
 800df6e:	e110      	b.n	800e192 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	895b      	ldrh	r3, [r3, #10]
 800df74:	2b13      	cmp	r3, #19
 800df76:	d809      	bhi.n	800df8c <ip4_frag+0x64>
 800df78:	4b88      	ldr	r3, [pc, #544]	; (800e19c <ip4_frag+0x274>)
 800df7a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800df7e:	4988      	ldr	r1, [pc, #544]	; (800e1a0 <ip4_frag+0x278>)
 800df80:	4888      	ldr	r0, [pc, #544]	; (800e1a4 <ip4_frag+0x27c>)
 800df82:	f000 faed 	bl	800e560 <iprintf>
 800df86:	f06f 0305 	mvn.w	r3, #5
 800df8a:	e102      	b.n	800e192 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800df8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8e:	88db      	ldrh	r3, [r3, #6]
 800df90:	b29b      	uxth	r3, r3
 800df92:	4618      	mov	r0, r3
 800df94:	f7f6 f908 	bl	80041a8 <lwip_htons>
 800df98:	4603      	mov	r3, r0
 800df9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800df9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dfa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dfa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	891b      	ldrh	r3, [r3, #8]
 800dfb2:	3b14      	subs	r3, #20
 800dfb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dfb8:	e0e1      	b.n	800e17e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dfba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	bf28      	it	cs
 800dfc8:	4613      	movcs	r3, r2
 800dfca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dfcc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfd0:	2114      	movs	r1, #20
 800dfd2:	200e      	movs	r0, #14
 800dfd4:	f7f7 f962 	bl	800529c <pbuf_alloc>
 800dfd8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f000 80d5 	beq.w	800e18c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	895b      	ldrh	r3, [r3, #10]
 800dfe6:	2b13      	cmp	r3, #19
 800dfe8:	d806      	bhi.n	800dff8 <ip4_frag+0xd0>
 800dfea:	4b6c      	ldr	r3, [pc, #432]	; (800e19c <ip4_frag+0x274>)
 800dfec:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dff0:	496d      	ldr	r1, [pc, #436]	; (800e1a8 <ip4_frag+0x280>)
 800dff2:	486c      	ldr	r0, [pc, #432]	; (800e1a4 <ip4_frag+0x27c>)
 800dff4:	f000 fab4 	bl	800e560 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	2214      	movs	r2, #20
 800dffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e000:	4618      	mov	r0, r3
 800e002:	f000 fb88 	bl	800e716 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e00c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e00e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e012:	e064      	b.n	800e0de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	895a      	ldrh	r2, [r3, #10]
 800e018:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	895b      	ldrh	r3, [r3, #10]
 800e022:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e024:	429a      	cmp	r2, r3
 800e026:	d906      	bls.n	800e036 <ip4_frag+0x10e>
 800e028:	4b5c      	ldr	r3, [pc, #368]	; (800e19c <ip4_frag+0x274>)
 800e02a:	f240 322d 	movw	r2, #813	; 0x32d
 800e02e:	495f      	ldr	r1, [pc, #380]	; (800e1ac <ip4_frag+0x284>)
 800e030:	485c      	ldr	r0, [pc, #368]	; (800e1a4 <ip4_frag+0x27c>)
 800e032:	f000 fa95 	bl	800e560 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e036:	8bfa      	ldrh	r2, [r7, #30]
 800e038:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e03c:	4293      	cmp	r3, r2
 800e03e:	bf28      	it	cs
 800e040:	4613      	movcs	r3, r2
 800e042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e046:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d105      	bne.n	800e05a <ip4_frag+0x132>
        poff = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	60fb      	str	r3, [r7, #12]
        continue;
 800e058:	e041      	b.n	800e0de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e05a:	f7ff ff0d 	bl	800de78 <ip_frag_alloc_pbuf_custom_ref>
 800e05e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d103      	bne.n	800e06e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e066:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e068:	f7f7 fbfc 	bl	8005864 <pbuf_free>
        goto memerr;
 800e06c:	e08f      	b.n	800e18e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e06e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e076:	4413      	add	r3, r2
 800e078:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e07c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e080:	9201      	str	r2, [sp, #4]
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	4603      	mov	r3, r0
 800e086:	2241      	movs	r2, #65	; 0x41
 800e088:	2000      	movs	r0, #0
 800e08a:	f7f7 fa31 	bl	80054f0 <pbuf_alloced_custom>
 800e08e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e096:	69b8      	ldr	r0, [r7, #24]
 800e098:	f7ff fef6 	bl	800de88 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e09e:	f7f7 fbe1 	bl	8005864 <pbuf_free>
        goto memerr;
 800e0a2:	e074      	b.n	800e18e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7f7 fc7d 	bl	80059a4 <pbuf_ref>
      pcr->original = p;
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	4a3f      	ldr	r2, [pc, #252]	; (800e1b0 <ip4_frag+0x288>)
 800e0b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e0b6:	6979      	ldr	r1, [r7, #20]
 800e0b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0ba:	f7f7 fc95 	bl	80059e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e0be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e0c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e0cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <ip4_frag+0x1b6>
        poff = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e0de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d196      	bne.n	800e014 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e0e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e0e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0ec:	4413      	add	r3, r2
 800e0ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0f4:	f1a3 0213 	sub.w	r2, r3, #19
 800e0f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	bfcc      	ite	gt
 800e100:	2301      	movgt	r3, #1
 800e102:	2300      	movle	r3, #0
 800e104:	b2db      	uxtb	r3, r3
 800e106:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e10c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e110:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <ip4_frag+0x1f6>
 800e118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e11e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e120:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e124:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e126:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f6 f83d 	bl	80041a8 <lwip_htons>
 800e12e:	4603      	mov	r3, r0
 800e130:	461a      	mov	r2, r3
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e136:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e138:	3314      	adds	r3, #20
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f6 f833 	bl	80041a8 <lwip_htons>
 800e142:	4603      	mov	r3, r0
 800e144:	461a      	mov	r2, r3
 800e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e148:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14c:	2200      	movs	r2, #0
 800e14e:	729a      	strb	r2, [r3, #10]
 800e150:	2200      	movs	r2, #0
 800e152:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e15c:	68b8      	ldr	r0, [r7, #8]
 800e15e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e162:	f7f7 fb7f 	bl	8005864 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e166:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e16a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e172:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e176:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e178:	4413      	add	r3, r2
 800e17a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e17e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e182:	2b00      	cmp	r3, #0
 800e184:	f47f af19 	bne.w	800dfba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e188:	2300      	movs	r3, #0
 800e18a:	e002      	b.n	800e192 <ip4_frag+0x26a>
      goto memerr;
 800e18c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e18e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e192:	4618      	mov	r0, r3
 800e194:	3748      	adds	r7, #72	; 0x48
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	08011ae4 	.word	0x08011ae4
 800e1a0:	08011cc0 	.word	0x08011cc0
 800e1a4:	08011b2c 	.word	0x08011b2c
 800e1a8:	08011cdc 	.word	0x08011cdc
 800e1ac:	08011cfc 	.word	0x08011cfc
 800e1b0:	0800dec1 	.word	0x0800dec1

0800e1b4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e1be:	230e      	movs	r3, #14
 800e1c0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	895b      	ldrh	r3, [r3, #10]
 800e1c6:	2b0e      	cmp	r3, #14
 800e1c8:	d96e      	bls.n	800e2a8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	7bdb      	ldrb	r3, [r3, #15]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d106      	bne.n	800e1e0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1d8:	3301      	adds	r3, #1
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	7b1a      	ldrb	r2, [r3, #12]
 800e1ea:	7b5b      	ldrb	r3, [r3, #13]
 800e1ec:	021b      	lsls	r3, r3, #8
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	f003 0301 	and.w	r3, r3, #1
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d023      	beq.n	800e246 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d10f      	bne.n	800e226 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	785b      	ldrb	r3, [r3, #1]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d11b      	bne.n	800e246 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e212:	2b5e      	cmp	r3, #94	; 0x5e
 800e214:	d117      	bne.n	800e246 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	7b5b      	ldrb	r3, [r3, #13]
 800e21a:	f043 0310 	orr.w	r3, r3, #16
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	735a      	strb	r2, [r3, #13]
 800e224:	e00f      	b.n	800e246 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	2206      	movs	r2, #6
 800e22a:	4928      	ldr	r1, [pc, #160]	; (800e2cc <ethernet_input+0x118>)
 800e22c:	4618      	mov	r0, r3
 800e22e:	f000 f9ec 	bl	800e60a <memcmp>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d106      	bne.n	800e246 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	7b5b      	ldrb	r3, [r3, #13]
 800e23c:	f043 0308 	orr.w	r3, r3, #8
 800e240:	b2da      	uxtb	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e246:	89fb      	ldrh	r3, [r7, #14]
 800e248:	2b08      	cmp	r3, #8
 800e24a:	d003      	beq.n	800e254 <ethernet_input+0xa0>
 800e24c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e250:	d014      	beq.n	800e27c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e252:	e032      	b.n	800e2ba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e25a:	f003 0308 	and.w	r3, r3, #8
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d024      	beq.n	800e2ac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e262:	8afb      	ldrh	r3, [r7, #22]
 800e264:	4619      	mov	r1, r3
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7f7 fa76 	bl	8005758 <pbuf_remove_header>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d11e      	bne.n	800e2b0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7fe ff21 	bl	800d0bc <ip4_input>
      break;
 800e27a:	e013      	b.n	800e2a4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e282:	f003 0308 	and.w	r3, r3, #8
 800e286:	2b00      	cmp	r3, #0
 800e288:	d014      	beq.n	800e2b4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e28a:	8afb      	ldrh	r3, [r7, #22]
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7f7 fa62 	bl	8005758 <pbuf_remove_header>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10e      	bne.n	800e2b8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7fe f8c1 	bl	800c424 <etharp_input>
      break;
 800e2a2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	e00c      	b.n	800e2c2 <ethernet_input+0x10e>
    goto free_and_return;
 800e2a8:	bf00      	nop
 800e2aa:	e006      	b.n	800e2ba <ethernet_input+0x106>
        goto free_and_return;
 800e2ac:	bf00      	nop
 800e2ae:	e004      	b.n	800e2ba <ethernet_input+0x106>
        goto free_and_return;
 800e2b0:	bf00      	nop
 800e2b2:	e002      	b.n	800e2ba <ethernet_input+0x106>
        goto free_and_return;
 800e2b4:	bf00      	nop
 800e2b6:	e000      	b.n	800e2ba <ethernet_input+0x106>
        goto free_and_return;
 800e2b8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7f7 fad2 	bl	8005864 <pbuf_free>
  return ERR_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	08011e98 	.word	0x08011e98

0800e2d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e2de:	8c3b      	ldrh	r3, [r7, #32]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f5 ff61 	bl	80041a8 <lwip_htons>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e2ea:	210e      	movs	r1, #14
 800e2ec:	68b8      	ldr	r0, [r7, #8]
 800e2ee:	f7f7 fa23 	bl	8005738 <pbuf_add_header>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d125      	bne.n	800e344 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	8afa      	ldrh	r2, [r7, #22]
 800e302:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	2206      	movs	r2, #6
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 fa03 	bl	800e716 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	3306      	adds	r3, #6
 800e314:	2206      	movs	r2, #6
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 f9fc 	bl	800e716 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e324:	2b06      	cmp	r3, #6
 800e326:	d006      	beq.n	800e336 <ethernet_output+0x66>
 800e328:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <ethernet_output+0x84>)
 800e32a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e32e:	490a      	ldr	r1, [pc, #40]	; (800e358 <ethernet_output+0x88>)
 800e330:	480a      	ldr	r0, [pc, #40]	; (800e35c <ethernet_output+0x8c>)
 800e332:	f000 f915 	bl	800e560 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	68b9      	ldr	r1, [r7, #8]
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	4798      	blx	r3
 800e340:	4603      	mov	r3, r0
 800e342:	e002      	b.n	800e34a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e344:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e346:	f06f 0301 	mvn.w	r3, #1
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3718      	adds	r7, #24
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	08011d0c 	.word	0x08011d0c
 800e358:	08011d44 	.word	0x08011d44
 800e35c:	08011d78 	.word	0x08011d78

0800e360 <rand>:
 800e360:	4b16      	ldr	r3, [pc, #88]	; (800e3bc <rand+0x5c>)
 800e362:	b510      	push	{r4, lr}
 800e364:	681c      	ldr	r4, [r3, #0]
 800e366:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e368:	b9b3      	cbnz	r3, 800e398 <rand+0x38>
 800e36a:	2018      	movs	r0, #24
 800e36c:	f000 fa4c 	bl	800e808 <malloc>
 800e370:	4602      	mov	r2, r0
 800e372:	6320      	str	r0, [r4, #48]	; 0x30
 800e374:	b920      	cbnz	r0, 800e380 <rand+0x20>
 800e376:	4b12      	ldr	r3, [pc, #72]	; (800e3c0 <rand+0x60>)
 800e378:	4812      	ldr	r0, [pc, #72]	; (800e3c4 <rand+0x64>)
 800e37a:	2152      	movs	r1, #82	; 0x52
 800e37c:	f000 f9da 	bl	800e734 <__assert_func>
 800e380:	4911      	ldr	r1, [pc, #68]	; (800e3c8 <rand+0x68>)
 800e382:	4b12      	ldr	r3, [pc, #72]	; (800e3cc <rand+0x6c>)
 800e384:	e9c0 1300 	strd	r1, r3, [r0]
 800e388:	4b11      	ldr	r3, [pc, #68]	; (800e3d0 <rand+0x70>)
 800e38a:	6083      	str	r3, [r0, #8]
 800e38c:	230b      	movs	r3, #11
 800e38e:	8183      	strh	r3, [r0, #12]
 800e390:	2100      	movs	r1, #0
 800e392:	2001      	movs	r0, #1
 800e394:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e398:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e39a:	480e      	ldr	r0, [pc, #56]	; (800e3d4 <rand+0x74>)
 800e39c:	690b      	ldr	r3, [r1, #16]
 800e39e:	694c      	ldr	r4, [r1, #20]
 800e3a0:	4a0d      	ldr	r2, [pc, #52]	; (800e3d8 <rand+0x78>)
 800e3a2:	4358      	muls	r0, r3
 800e3a4:	fb02 0004 	mla	r0, r2, r4, r0
 800e3a8:	fba3 3202 	umull	r3, r2, r3, r2
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	eb40 0002 	adc.w	r0, r0, r2
 800e3b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e3b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e3ba:	bd10      	pop	{r4, pc}
 800e3bc:	20000084 	.word	0x20000084
 800e3c0:	08011ea6 	.word	0x08011ea6
 800e3c4:	08011ebd 	.word	0x08011ebd
 800e3c8:	abcd330e 	.word	0xabcd330e
 800e3cc:	e66d1234 	.word	0xe66d1234
 800e3d0:	0005deec 	.word	0x0005deec
 800e3d4:	5851f42d 	.word	0x5851f42d
 800e3d8:	4c957f2d 	.word	0x4c957f2d

0800e3dc <std>:
 800e3dc:	2300      	movs	r3, #0
 800e3de:	b510      	push	{r4, lr}
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3ea:	6083      	str	r3, [r0, #8]
 800e3ec:	8181      	strh	r1, [r0, #12]
 800e3ee:	6643      	str	r3, [r0, #100]	; 0x64
 800e3f0:	81c2      	strh	r2, [r0, #14]
 800e3f2:	6183      	str	r3, [r0, #24]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	305c      	adds	r0, #92	; 0x5c
 800e3fa:	f000 f916 	bl	800e62a <memset>
 800e3fe:	4b0d      	ldr	r3, [pc, #52]	; (800e434 <std+0x58>)
 800e400:	6263      	str	r3, [r4, #36]	; 0x24
 800e402:	4b0d      	ldr	r3, [pc, #52]	; (800e438 <std+0x5c>)
 800e404:	62a3      	str	r3, [r4, #40]	; 0x28
 800e406:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <std+0x60>)
 800e408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e40a:	4b0d      	ldr	r3, [pc, #52]	; (800e440 <std+0x64>)
 800e40c:	6323      	str	r3, [r4, #48]	; 0x30
 800e40e:	4b0d      	ldr	r3, [pc, #52]	; (800e444 <std+0x68>)
 800e410:	6224      	str	r4, [r4, #32]
 800e412:	429c      	cmp	r4, r3
 800e414:	d006      	beq.n	800e424 <std+0x48>
 800e416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e41a:	4294      	cmp	r4, r2
 800e41c:	d002      	beq.n	800e424 <std+0x48>
 800e41e:	33d0      	adds	r3, #208	; 0xd0
 800e420:	429c      	cmp	r4, r3
 800e422:	d105      	bne.n	800e430 <std+0x54>
 800e424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e42c:	f000 b970 	b.w	800e710 <__retarget_lock_init_recursive>
 800e430:	bd10      	pop	{r4, pc}
 800e432:	bf00      	nop
 800e434:	0800e585 	.word	0x0800e585
 800e438:	0800e5a7 	.word	0x0800e5a7
 800e43c:	0800e5df 	.word	0x0800e5df
 800e440:	0800e603 	.word	0x0800e603
 800e444:	200083e8 	.word	0x200083e8

0800e448 <stdio_exit_handler>:
 800e448:	4a02      	ldr	r2, [pc, #8]	; (800e454 <stdio_exit_handler+0xc>)
 800e44a:	4903      	ldr	r1, [pc, #12]	; (800e458 <stdio_exit_handler+0x10>)
 800e44c:	4803      	ldr	r0, [pc, #12]	; (800e45c <stdio_exit_handler+0x14>)
 800e44e:	f000 b869 	b.w	800e524 <_fwalk_sglue>
 800e452:	bf00      	nop
 800e454:	2000002c 	.word	0x2000002c
 800e458:	0800f025 	.word	0x0800f025
 800e45c:	20000038 	.word	0x20000038

0800e460 <cleanup_stdio>:
 800e460:	6841      	ldr	r1, [r0, #4]
 800e462:	4b0c      	ldr	r3, [pc, #48]	; (800e494 <cleanup_stdio+0x34>)
 800e464:	4299      	cmp	r1, r3
 800e466:	b510      	push	{r4, lr}
 800e468:	4604      	mov	r4, r0
 800e46a:	d001      	beq.n	800e470 <cleanup_stdio+0x10>
 800e46c:	f000 fdda 	bl	800f024 <_fflush_r>
 800e470:	68a1      	ldr	r1, [r4, #8]
 800e472:	4b09      	ldr	r3, [pc, #36]	; (800e498 <cleanup_stdio+0x38>)
 800e474:	4299      	cmp	r1, r3
 800e476:	d002      	beq.n	800e47e <cleanup_stdio+0x1e>
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 fdd3 	bl	800f024 <_fflush_r>
 800e47e:	68e1      	ldr	r1, [r4, #12]
 800e480:	4b06      	ldr	r3, [pc, #24]	; (800e49c <cleanup_stdio+0x3c>)
 800e482:	4299      	cmp	r1, r3
 800e484:	d004      	beq.n	800e490 <cleanup_stdio+0x30>
 800e486:	4620      	mov	r0, r4
 800e488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e48c:	f000 bdca 	b.w	800f024 <_fflush_r>
 800e490:	bd10      	pop	{r4, pc}
 800e492:	bf00      	nop
 800e494:	200083e8 	.word	0x200083e8
 800e498:	20008450 	.word	0x20008450
 800e49c:	200084b8 	.word	0x200084b8

0800e4a0 <global_stdio_init.part.0>:
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <global_stdio_init.part.0+0x30>)
 800e4a4:	4c0b      	ldr	r4, [pc, #44]	; (800e4d4 <global_stdio_init.part.0+0x34>)
 800e4a6:	4a0c      	ldr	r2, [pc, #48]	; (800e4d8 <global_stdio_init.part.0+0x38>)
 800e4a8:	601a      	str	r2, [r3, #0]
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	2104      	movs	r1, #4
 800e4b0:	f7ff ff94 	bl	800e3dc <std>
 800e4b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	2109      	movs	r1, #9
 800e4bc:	f7ff ff8e 	bl	800e3dc <std>
 800e4c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ca:	2112      	movs	r1, #18
 800e4cc:	f7ff bf86 	b.w	800e3dc <std>
 800e4d0:	20008520 	.word	0x20008520
 800e4d4:	200083e8 	.word	0x200083e8
 800e4d8:	0800e449 	.word	0x0800e449

0800e4dc <__sfp_lock_acquire>:
 800e4dc:	4801      	ldr	r0, [pc, #4]	; (800e4e4 <__sfp_lock_acquire+0x8>)
 800e4de:	f000 b918 	b.w	800e712 <__retarget_lock_acquire_recursive>
 800e4e2:	bf00      	nop
 800e4e4:	20008529 	.word	0x20008529

0800e4e8 <__sfp_lock_release>:
 800e4e8:	4801      	ldr	r0, [pc, #4]	; (800e4f0 <__sfp_lock_release+0x8>)
 800e4ea:	f000 b913 	b.w	800e714 <__retarget_lock_release_recursive>
 800e4ee:	bf00      	nop
 800e4f0:	20008529 	.word	0x20008529

0800e4f4 <__sinit>:
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	f7ff fff0 	bl	800e4dc <__sfp_lock_acquire>
 800e4fc:	6a23      	ldr	r3, [r4, #32]
 800e4fe:	b11b      	cbz	r3, 800e508 <__sinit+0x14>
 800e500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e504:	f7ff bff0 	b.w	800e4e8 <__sfp_lock_release>
 800e508:	4b04      	ldr	r3, [pc, #16]	; (800e51c <__sinit+0x28>)
 800e50a:	6223      	str	r3, [r4, #32]
 800e50c:	4b04      	ldr	r3, [pc, #16]	; (800e520 <__sinit+0x2c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1f5      	bne.n	800e500 <__sinit+0xc>
 800e514:	f7ff ffc4 	bl	800e4a0 <global_stdio_init.part.0>
 800e518:	e7f2      	b.n	800e500 <__sinit+0xc>
 800e51a:	bf00      	nop
 800e51c:	0800e461 	.word	0x0800e461
 800e520:	20008520 	.word	0x20008520

0800e524 <_fwalk_sglue>:
 800e524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e528:	4607      	mov	r7, r0
 800e52a:	4688      	mov	r8, r1
 800e52c:	4614      	mov	r4, r2
 800e52e:	2600      	movs	r6, #0
 800e530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e534:	f1b9 0901 	subs.w	r9, r9, #1
 800e538:	d505      	bpl.n	800e546 <_fwalk_sglue+0x22>
 800e53a:	6824      	ldr	r4, [r4, #0]
 800e53c:	2c00      	cmp	r4, #0
 800e53e:	d1f7      	bne.n	800e530 <_fwalk_sglue+0xc>
 800e540:	4630      	mov	r0, r6
 800e542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e546:	89ab      	ldrh	r3, [r5, #12]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d907      	bls.n	800e55c <_fwalk_sglue+0x38>
 800e54c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e550:	3301      	adds	r3, #1
 800e552:	d003      	beq.n	800e55c <_fwalk_sglue+0x38>
 800e554:	4629      	mov	r1, r5
 800e556:	4638      	mov	r0, r7
 800e558:	47c0      	blx	r8
 800e55a:	4306      	orrs	r6, r0
 800e55c:	3568      	adds	r5, #104	; 0x68
 800e55e:	e7e9      	b.n	800e534 <_fwalk_sglue+0x10>

0800e560 <iprintf>:
 800e560:	b40f      	push	{r0, r1, r2, r3}
 800e562:	b507      	push	{r0, r1, r2, lr}
 800e564:	4906      	ldr	r1, [pc, #24]	; (800e580 <iprintf+0x20>)
 800e566:	ab04      	add	r3, sp, #16
 800e568:	6808      	ldr	r0, [r1, #0]
 800e56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e56e:	6881      	ldr	r1, [r0, #8]
 800e570:	9301      	str	r3, [sp, #4]
 800e572:	f000 fa27 	bl	800e9c4 <_vfiprintf_r>
 800e576:	b003      	add	sp, #12
 800e578:	f85d eb04 	ldr.w	lr, [sp], #4
 800e57c:	b004      	add	sp, #16
 800e57e:	4770      	bx	lr
 800e580:	20000084 	.word	0x20000084

0800e584 <__sread>:
 800e584:	b510      	push	{r4, lr}
 800e586:	460c      	mov	r4, r1
 800e588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e58c:	f000 f878 	bl	800e680 <_read_r>
 800e590:	2800      	cmp	r0, #0
 800e592:	bfab      	itete	ge
 800e594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e596:	89a3      	ldrhlt	r3, [r4, #12]
 800e598:	181b      	addge	r3, r3, r0
 800e59a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e59e:	bfac      	ite	ge
 800e5a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5a2:	81a3      	strhlt	r3, [r4, #12]
 800e5a4:	bd10      	pop	{r4, pc}

0800e5a6 <__swrite>:
 800e5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5aa:	461f      	mov	r7, r3
 800e5ac:	898b      	ldrh	r3, [r1, #12]
 800e5ae:	05db      	lsls	r3, r3, #23
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	4616      	mov	r6, r2
 800e5b6:	d505      	bpl.n	800e5c4 <__swrite+0x1e>
 800e5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5bc:	2302      	movs	r3, #2
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f000 f84c 	bl	800e65c <_lseek_r>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5ce:	81a3      	strh	r3, [r4, #12]
 800e5d0:	4632      	mov	r2, r6
 800e5d2:	463b      	mov	r3, r7
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5da:	f000 b863 	b.w	800e6a4 <_write_r>

0800e5de <__sseek>:
 800e5de:	b510      	push	{r4, lr}
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e6:	f000 f839 	bl	800e65c <_lseek_r>
 800e5ea:	1c43      	adds	r3, r0, #1
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	bf15      	itete	ne
 800e5f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5fa:	81a3      	strheq	r3, [r4, #12]
 800e5fc:	bf18      	it	ne
 800e5fe:	81a3      	strhne	r3, [r4, #12]
 800e600:	bd10      	pop	{r4, pc}

0800e602 <__sclose>:
 800e602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e606:	f000 b819 	b.w	800e63c <_close_r>

0800e60a <memcmp>:
 800e60a:	b510      	push	{r4, lr}
 800e60c:	3901      	subs	r1, #1
 800e60e:	4402      	add	r2, r0
 800e610:	4290      	cmp	r0, r2
 800e612:	d101      	bne.n	800e618 <memcmp+0xe>
 800e614:	2000      	movs	r0, #0
 800e616:	e005      	b.n	800e624 <memcmp+0x1a>
 800e618:	7803      	ldrb	r3, [r0, #0]
 800e61a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e61e:	42a3      	cmp	r3, r4
 800e620:	d001      	beq.n	800e626 <memcmp+0x1c>
 800e622:	1b18      	subs	r0, r3, r4
 800e624:	bd10      	pop	{r4, pc}
 800e626:	3001      	adds	r0, #1
 800e628:	e7f2      	b.n	800e610 <memcmp+0x6>

0800e62a <memset>:
 800e62a:	4402      	add	r2, r0
 800e62c:	4603      	mov	r3, r0
 800e62e:	4293      	cmp	r3, r2
 800e630:	d100      	bne.n	800e634 <memset+0xa>
 800e632:	4770      	bx	lr
 800e634:	f803 1b01 	strb.w	r1, [r3], #1
 800e638:	e7f9      	b.n	800e62e <memset+0x4>
	...

0800e63c <_close_r>:
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4d06      	ldr	r5, [pc, #24]	; (800e658 <_close_r+0x1c>)
 800e640:	2300      	movs	r3, #0
 800e642:	4604      	mov	r4, r0
 800e644:	4608      	mov	r0, r1
 800e646:	602b      	str	r3, [r5, #0]
 800e648:	f7f2 f975 	bl	8000936 <_close>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d102      	bne.n	800e656 <_close_r+0x1a>
 800e650:	682b      	ldr	r3, [r5, #0]
 800e652:	b103      	cbz	r3, 800e656 <_close_r+0x1a>
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	bd38      	pop	{r3, r4, r5, pc}
 800e658:	20008524 	.word	0x20008524

0800e65c <_lseek_r>:
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	4d07      	ldr	r5, [pc, #28]	; (800e67c <_lseek_r+0x20>)
 800e660:	4604      	mov	r4, r0
 800e662:	4608      	mov	r0, r1
 800e664:	4611      	mov	r1, r2
 800e666:	2200      	movs	r2, #0
 800e668:	602a      	str	r2, [r5, #0]
 800e66a:	461a      	mov	r2, r3
 800e66c:	f7f2 f98a 	bl	8000984 <_lseek>
 800e670:	1c43      	adds	r3, r0, #1
 800e672:	d102      	bne.n	800e67a <_lseek_r+0x1e>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	b103      	cbz	r3, 800e67a <_lseek_r+0x1e>
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	bd38      	pop	{r3, r4, r5, pc}
 800e67c:	20008524 	.word	0x20008524

0800e680 <_read_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4d07      	ldr	r5, [pc, #28]	; (800e6a0 <_read_r+0x20>)
 800e684:	4604      	mov	r4, r0
 800e686:	4608      	mov	r0, r1
 800e688:	4611      	mov	r1, r2
 800e68a:	2200      	movs	r2, #0
 800e68c:	602a      	str	r2, [r5, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	f7f2 f918 	bl	80008c4 <_read>
 800e694:	1c43      	adds	r3, r0, #1
 800e696:	d102      	bne.n	800e69e <_read_r+0x1e>
 800e698:	682b      	ldr	r3, [r5, #0]
 800e69a:	b103      	cbz	r3, 800e69e <_read_r+0x1e>
 800e69c:	6023      	str	r3, [r4, #0]
 800e69e:	bd38      	pop	{r3, r4, r5, pc}
 800e6a0:	20008524 	.word	0x20008524

0800e6a4 <_write_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4d07      	ldr	r5, [pc, #28]	; (800e6c4 <_write_r+0x20>)
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	4611      	mov	r1, r2
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	602a      	str	r2, [r5, #0]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	f7f2 f923 	bl	80008fe <_write>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	d102      	bne.n	800e6c2 <_write_r+0x1e>
 800e6bc:	682b      	ldr	r3, [r5, #0]
 800e6be:	b103      	cbz	r3, 800e6c2 <_write_r+0x1e>
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	bd38      	pop	{r3, r4, r5, pc}
 800e6c4:	20008524 	.word	0x20008524

0800e6c8 <__libc_init_array>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	4d0d      	ldr	r5, [pc, #52]	; (800e700 <__libc_init_array+0x38>)
 800e6cc:	4c0d      	ldr	r4, [pc, #52]	; (800e704 <__libc_init_array+0x3c>)
 800e6ce:	1b64      	subs	r4, r4, r5
 800e6d0:	10a4      	asrs	r4, r4, #2
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	42a6      	cmp	r6, r4
 800e6d6:	d109      	bne.n	800e6ec <__libc_init_array+0x24>
 800e6d8:	4d0b      	ldr	r5, [pc, #44]	; (800e708 <__libc_init_array+0x40>)
 800e6da:	4c0c      	ldr	r4, [pc, #48]	; (800e70c <__libc_init_array+0x44>)
 800e6dc:	f000 fe52 	bl	800f384 <_init>
 800e6e0:	1b64      	subs	r4, r4, r5
 800e6e2:	10a4      	asrs	r4, r4, #2
 800e6e4:	2600      	movs	r6, #0
 800e6e6:	42a6      	cmp	r6, r4
 800e6e8:	d105      	bne.n	800e6f6 <__libc_init_array+0x2e>
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f0:	4798      	blx	r3
 800e6f2:	3601      	adds	r6, #1
 800e6f4:	e7ee      	b.n	800e6d4 <__libc_init_array+0xc>
 800e6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6fa:	4798      	blx	r3
 800e6fc:	3601      	adds	r6, #1
 800e6fe:	e7f2      	b.n	800e6e6 <__libc_init_array+0x1e>
 800e700:	08011f8c 	.word	0x08011f8c
 800e704:	08011f8c 	.word	0x08011f8c
 800e708:	08011f8c 	.word	0x08011f8c
 800e70c:	08011f90 	.word	0x08011f90

0800e710 <__retarget_lock_init_recursive>:
 800e710:	4770      	bx	lr

0800e712 <__retarget_lock_acquire_recursive>:
 800e712:	4770      	bx	lr

0800e714 <__retarget_lock_release_recursive>:
 800e714:	4770      	bx	lr

0800e716 <memcpy>:
 800e716:	440a      	add	r2, r1
 800e718:	4291      	cmp	r1, r2
 800e71a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e71e:	d100      	bne.n	800e722 <memcpy+0xc>
 800e720:	4770      	bx	lr
 800e722:	b510      	push	{r4, lr}
 800e724:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e72c:	4291      	cmp	r1, r2
 800e72e:	d1f9      	bne.n	800e724 <memcpy+0xe>
 800e730:	bd10      	pop	{r4, pc}
	...

0800e734 <__assert_func>:
 800e734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e736:	4614      	mov	r4, r2
 800e738:	461a      	mov	r2, r3
 800e73a:	4b09      	ldr	r3, [pc, #36]	; (800e760 <__assert_func+0x2c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4605      	mov	r5, r0
 800e740:	68d8      	ldr	r0, [r3, #12]
 800e742:	b14c      	cbz	r4, 800e758 <__assert_func+0x24>
 800e744:	4b07      	ldr	r3, [pc, #28]	; (800e764 <__assert_func+0x30>)
 800e746:	9100      	str	r1, [sp, #0]
 800e748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e74c:	4906      	ldr	r1, [pc, #24]	; (800e768 <__assert_func+0x34>)
 800e74e:	462b      	mov	r3, r5
 800e750:	f000 fc90 	bl	800f074 <fiprintf>
 800e754:	f000 fd46 	bl	800f1e4 <abort>
 800e758:	4b04      	ldr	r3, [pc, #16]	; (800e76c <__assert_func+0x38>)
 800e75a:	461c      	mov	r4, r3
 800e75c:	e7f3      	b.n	800e746 <__assert_func+0x12>
 800e75e:	bf00      	nop
 800e760:	20000084 	.word	0x20000084
 800e764:	08011f15 	.word	0x08011f15
 800e768:	08011f22 	.word	0x08011f22
 800e76c:	08011f50 	.word	0x08011f50

0800e770 <_free_r>:
 800e770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e772:	2900      	cmp	r1, #0
 800e774:	d044      	beq.n	800e800 <_free_r+0x90>
 800e776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e77a:	9001      	str	r0, [sp, #4]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f1a1 0404 	sub.w	r4, r1, #4
 800e782:	bfb8      	it	lt
 800e784:	18e4      	addlt	r4, r4, r3
 800e786:	f000 f8e7 	bl	800e958 <__malloc_lock>
 800e78a:	4a1e      	ldr	r2, [pc, #120]	; (800e804 <_free_r+0x94>)
 800e78c:	9801      	ldr	r0, [sp, #4]
 800e78e:	6813      	ldr	r3, [r2, #0]
 800e790:	b933      	cbnz	r3, 800e7a0 <_free_r+0x30>
 800e792:	6063      	str	r3, [r4, #4]
 800e794:	6014      	str	r4, [r2, #0]
 800e796:	b003      	add	sp, #12
 800e798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e79c:	f000 b8e2 	b.w	800e964 <__malloc_unlock>
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	d908      	bls.n	800e7b6 <_free_r+0x46>
 800e7a4:	6825      	ldr	r5, [r4, #0]
 800e7a6:	1961      	adds	r1, r4, r5
 800e7a8:	428b      	cmp	r3, r1
 800e7aa:	bf01      	itttt	eq
 800e7ac:	6819      	ldreq	r1, [r3, #0]
 800e7ae:	685b      	ldreq	r3, [r3, #4]
 800e7b0:	1949      	addeq	r1, r1, r5
 800e7b2:	6021      	streq	r1, [r4, #0]
 800e7b4:	e7ed      	b.n	800e792 <_free_r+0x22>
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	b10b      	cbz	r3, 800e7c0 <_free_r+0x50>
 800e7bc:	42a3      	cmp	r3, r4
 800e7be:	d9fa      	bls.n	800e7b6 <_free_r+0x46>
 800e7c0:	6811      	ldr	r1, [r2, #0]
 800e7c2:	1855      	adds	r5, r2, r1
 800e7c4:	42a5      	cmp	r5, r4
 800e7c6:	d10b      	bne.n	800e7e0 <_free_r+0x70>
 800e7c8:	6824      	ldr	r4, [r4, #0]
 800e7ca:	4421      	add	r1, r4
 800e7cc:	1854      	adds	r4, r2, r1
 800e7ce:	42a3      	cmp	r3, r4
 800e7d0:	6011      	str	r1, [r2, #0]
 800e7d2:	d1e0      	bne.n	800e796 <_free_r+0x26>
 800e7d4:	681c      	ldr	r4, [r3, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	6053      	str	r3, [r2, #4]
 800e7da:	440c      	add	r4, r1
 800e7dc:	6014      	str	r4, [r2, #0]
 800e7de:	e7da      	b.n	800e796 <_free_r+0x26>
 800e7e0:	d902      	bls.n	800e7e8 <_free_r+0x78>
 800e7e2:	230c      	movs	r3, #12
 800e7e4:	6003      	str	r3, [r0, #0]
 800e7e6:	e7d6      	b.n	800e796 <_free_r+0x26>
 800e7e8:	6825      	ldr	r5, [r4, #0]
 800e7ea:	1961      	adds	r1, r4, r5
 800e7ec:	428b      	cmp	r3, r1
 800e7ee:	bf04      	itt	eq
 800e7f0:	6819      	ldreq	r1, [r3, #0]
 800e7f2:	685b      	ldreq	r3, [r3, #4]
 800e7f4:	6063      	str	r3, [r4, #4]
 800e7f6:	bf04      	itt	eq
 800e7f8:	1949      	addeq	r1, r1, r5
 800e7fa:	6021      	streq	r1, [r4, #0]
 800e7fc:	6054      	str	r4, [r2, #4]
 800e7fe:	e7ca      	b.n	800e796 <_free_r+0x26>
 800e800:	b003      	add	sp, #12
 800e802:	bd30      	pop	{r4, r5, pc}
 800e804:	2000852c 	.word	0x2000852c

0800e808 <malloc>:
 800e808:	4b02      	ldr	r3, [pc, #8]	; (800e814 <malloc+0xc>)
 800e80a:	4601      	mov	r1, r0
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f000 b823 	b.w	800e858 <_malloc_r>
 800e812:	bf00      	nop
 800e814:	20000084 	.word	0x20000084

0800e818 <sbrk_aligned>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	4e0e      	ldr	r6, [pc, #56]	; (800e854 <sbrk_aligned+0x3c>)
 800e81c:	460c      	mov	r4, r1
 800e81e:	6831      	ldr	r1, [r6, #0]
 800e820:	4605      	mov	r5, r0
 800e822:	b911      	cbnz	r1, 800e82a <sbrk_aligned+0x12>
 800e824:	f000 fcce 	bl	800f1c4 <_sbrk_r>
 800e828:	6030      	str	r0, [r6, #0]
 800e82a:	4621      	mov	r1, r4
 800e82c:	4628      	mov	r0, r5
 800e82e:	f000 fcc9 	bl	800f1c4 <_sbrk_r>
 800e832:	1c43      	adds	r3, r0, #1
 800e834:	d00a      	beq.n	800e84c <sbrk_aligned+0x34>
 800e836:	1cc4      	adds	r4, r0, #3
 800e838:	f024 0403 	bic.w	r4, r4, #3
 800e83c:	42a0      	cmp	r0, r4
 800e83e:	d007      	beq.n	800e850 <sbrk_aligned+0x38>
 800e840:	1a21      	subs	r1, r4, r0
 800e842:	4628      	mov	r0, r5
 800e844:	f000 fcbe 	bl	800f1c4 <_sbrk_r>
 800e848:	3001      	adds	r0, #1
 800e84a:	d101      	bne.n	800e850 <sbrk_aligned+0x38>
 800e84c:	f04f 34ff 	mov.w	r4, #4294967295
 800e850:	4620      	mov	r0, r4
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	20008530 	.word	0x20008530

0800e858 <_malloc_r>:
 800e858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e85c:	1ccd      	adds	r5, r1, #3
 800e85e:	f025 0503 	bic.w	r5, r5, #3
 800e862:	3508      	adds	r5, #8
 800e864:	2d0c      	cmp	r5, #12
 800e866:	bf38      	it	cc
 800e868:	250c      	movcc	r5, #12
 800e86a:	2d00      	cmp	r5, #0
 800e86c:	4607      	mov	r7, r0
 800e86e:	db01      	blt.n	800e874 <_malloc_r+0x1c>
 800e870:	42a9      	cmp	r1, r5
 800e872:	d905      	bls.n	800e880 <_malloc_r+0x28>
 800e874:	230c      	movs	r3, #12
 800e876:	603b      	str	r3, [r7, #0]
 800e878:	2600      	movs	r6, #0
 800e87a:	4630      	mov	r0, r6
 800e87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e880:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e954 <_malloc_r+0xfc>
 800e884:	f000 f868 	bl	800e958 <__malloc_lock>
 800e888:	f8d8 3000 	ldr.w	r3, [r8]
 800e88c:	461c      	mov	r4, r3
 800e88e:	bb5c      	cbnz	r4, 800e8e8 <_malloc_r+0x90>
 800e890:	4629      	mov	r1, r5
 800e892:	4638      	mov	r0, r7
 800e894:	f7ff ffc0 	bl	800e818 <sbrk_aligned>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	4604      	mov	r4, r0
 800e89c:	d155      	bne.n	800e94a <_malloc_r+0xf2>
 800e89e:	f8d8 4000 	ldr.w	r4, [r8]
 800e8a2:	4626      	mov	r6, r4
 800e8a4:	2e00      	cmp	r6, #0
 800e8a6:	d145      	bne.n	800e934 <_malloc_r+0xdc>
 800e8a8:	2c00      	cmp	r4, #0
 800e8aa:	d048      	beq.n	800e93e <_malloc_r+0xe6>
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	4631      	mov	r1, r6
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	eb04 0903 	add.w	r9, r4, r3
 800e8b6:	f000 fc85 	bl	800f1c4 <_sbrk_r>
 800e8ba:	4581      	cmp	r9, r0
 800e8bc:	d13f      	bne.n	800e93e <_malloc_r+0xe6>
 800e8be:	6821      	ldr	r1, [r4, #0]
 800e8c0:	1a6d      	subs	r5, r5, r1
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	4638      	mov	r0, r7
 800e8c6:	f7ff ffa7 	bl	800e818 <sbrk_aligned>
 800e8ca:	3001      	adds	r0, #1
 800e8cc:	d037      	beq.n	800e93e <_malloc_r+0xe6>
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	442b      	add	r3, r5
 800e8d2:	6023      	str	r3, [r4, #0]
 800e8d4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d038      	beq.n	800e94e <_malloc_r+0xf6>
 800e8dc:	685a      	ldr	r2, [r3, #4]
 800e8de:	42a2      	cmp	r2, r4
 800e8e0:	d12b      	bne.n	800e93a <_malloc_r+0xe2>
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	605a      	str	r2, [r3, #4]
 800e8e6:	e00f      	b.n	800e908 <_malloc_r+0xb0>
 800e8e8:	6822      	ldr	r2, [r4, #0]
 800e8ea:	1b52      	subs	r2, r2, r5
 800e8ec:	d41f      	bmi.n	800e92e <_malloc_r+0xd6>
 800e8ee:	2a0b      	cmp	r2, #11
 800e8f0:	d917      	bls.n	800e922 <_malloc_r+0xca>
 800e8f2:	1961      	adds	r1, r4, r5
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	6025      	str	r5, [r4, #0]
 800e8f8:	bf18      	it	ne
 800e8fa:	6059      	strne	r1, [r3, #4]
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	bf08      	it	eq
 800e900:	f8c8 1000 	streq.w	r1, [r8]
 800e904:	5162      	str	r2, [r4, r5]
 800e906:	604b      	str	r3, [r1, #4]
 800e908:	4638      	mov	r0, r7
 800e90a:	f104 060b 	add.w	r6, r4, #11
 800e90e:	f000 f829 	bl	800e964 <__malloc_unlock>
 800e912:	f026 0607 	bic.w	r6, r6, #7
 800e916:	1d23      	adds	r3, r4, #4
 800e918:	1af2      	subs	r2, r6, r3
 800e91a:	d0ae      	beq.n	800e87a <_malloc_r+0x22>
 800e91c:	1b9b      	subs	r3, r3, r6
 800e91e:	50a3      	str	r3, [r4, r2]
 800e920:	e7ab      	b.n	800e87a <_malloc_r+0x22>
 800e922:	42a3      	cmp	r3, r4
 800e924:	6862      	ldr	r2, [r4, #4]
 800e926:	d1dd      	bne.n	800e8e4 <_malloc_r+0x8c>
 800e928:	f8c8 2000 	str.w	r2, [r8]
 800e92c:	e7ec      	b.n	800e908 <_malloc_r+0xb0>
 800e92e:	4623      	mov	r3, r4
 800e930:	6864      	ldr	r4, [r4, #4]
 800e932:	e7ac      	b.n	800e88e <_malloc_r+0x36>
 800e934:	4634      	mov	r4, r6
 800e936:	6876      	ldr	r6, [r6, #4]
 800e938:	e7b4      	b.n	800e8a4 <_malloc_r+0x4c>
 800e93a:	4613      	mov	r3, r2
 800e93c:	e7cc      	b.n	800e8d8 <_malloc_r+0x80>
 800e93e:	230c      	movs	r3, #12
 800e940:	603b      	str	r3, [r7, #0]
 800e942:	4638      	mov	r0, r7
 800e944:	f000 f80e 	bl	800e964 <__malloc_unlock>
 800e948:	e797      	b.n	800e87a <_malloc_r+0x22>
 800e94a:	6025      	str	r5, [r4, #0]
 800e94c:	e7dc      	b.n	800e908 <_malloc_r+0xb0>
 800e94e:	605b      	str	r3, [r3, #4]
 800e950:	deff      	udf	#255	; 0xff
 800e952:	bf00      	nop
 800e954:	2000852c 	.word	0x2000852c

0800e958 <__malloc_lock>:
 800e958:	4801      	ldr	r0, [pc, #4]	; (800e960 <__malloc_lock+0x8>)
 800e95a:	f7ff beda 	b.w	800e712 <__retarget_lock_acquire_recursive>
 800e95e:	bf00      	nop
 800e960:	20008528 	.word	0x20008528

0800e964 <__malloc_unlock>:
 800e964:	4801      	ldr	r0, [pc, #4]	; (800e96c <__malloc_unlock+0x8>)
 800e966:	f7ff bed5 	b.w	800e714 <__retarget_lock_release_recursive>
 800e96a:	bf00      	nop
 800e96c:	20008528 	.word	0x20008528

0800e970 <__sfputc_r>:
 800e970:	6893      	ldr	r3, [r2, #8]
 800e972:	3b01      	subs	r3, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	b410      	push	{r4}
 800e978:	6093      	str	r3, [r2, #8]
 800e97a:	da08      	bge.n	800e98e <__sfputc_r+0x1e>
 800e97c:	6994      	ldr	r4, [r2, #24]
 800e97e:	42a3      	cmp	r3, r4
 800e980:	db01      	blt.n	800e986 <__sfputc_r+0x16>
 800e982:	290a      	cmp	r1, #10
 800e984:	d103      	bne.n	800e98e <__sfputc_r+0x1e>
 800e986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e98a:	f000 bb85 	b.w	800f098 <__swbuf_r>
 800e98e:	6813      	ldr	r3, [r2, #0]
 800e990:	1c58      	adds	r0, r3, #1
 800e992:	6010      	str	r0, [r2, #0]
 800e994:	7019      	strb	r1, [r3, #0]
 800e996:	4608      	mov	r0, r1
 800e998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <__sfputs_r>:
 800e99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	4614      	mov	r4, r2
 800e9a6:	18d5      	adds	r5, r2, r3
 800e9a8:	42ac      	cmp	r4, r5
 800e9aa:	d101      	bne.n	800e9b0 <__sfputs_r+0x12>
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	e007      	b.n	800e9c0 <__sfputs_r+0x22>
 800e9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b4:	463a      	mov	r2, r7
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f7ff ffda 	bl	800e970 <__sfputc_r>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d1f3      	bne.n	800e9a8 <__sfputs_r+0xa>
 800e9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9c4 <_vfiprintf_r>:
 800e9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	b09d      	sub	sp, #116	; 0x74
 800e9cc:	4614      	mov	r4, r2
 800e9ce:	4698      	mov	r8, r3
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	b118      	cbz	r0, 800e9dc <_vfiprintf_r+0x18>
 800e9d4:	6a03      	ldr	r3, [r0, #32]
 800e9d6:	b90b      	cbnz	r3, 800e9dc <_vfiprintf_r+0x18>
 800e9d8:	f7ff fd8c 	bl	800e4f4 <__sinit>
 800e9dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9de:	07d9      	lsls	r1, r3, #31
 800e9e0:	d405      	bmi.n	800e9ee <_vfiprintf_r+0x2a>
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	059a      	lsls	r2, r3, #22
 800e9e6:	d402      	bmi.n	800e9ee <_vfiprintf_r+0x2a>
 800e9e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ea:	f7ff fe92 	bl	800e712 <__retarget_lock_acquire_recursive>
 800e9ee:	89ab      	ldrh	r3, [r5, #12]
 800e9f0:	071b      	lsls	r3, r3, #28
 800e9f2:	d501      	bpl.n	800e9f8 <_vfiprintf_r+0x34>
 800e9f4:	692b      	ldr	r3, [r5, #16]
 800e9f6:	b99b      	cbnz	r3, 800ea20 <_vfiprintf_r+0x5c>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f000 fb8a 	bl	800f114 <__swsetup_r>
 800ea00:	b170      	cbz	r0, 800ea20 <_vfiprintf_r+0x5c>
 800ea02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea04:	07dc      	lsls	r4, r3, #31
 800ea06:	d504      	bpl.n	800ea12 <_vfiprintf_r+0x4e>
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0c:	b01d      	add	sp, #116	; 0x74
 800ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea12:	89ab      	ldrh	r3, [r5, #12]
 800ea14:	0598      	lsls	r0, r3, #22
 800ea16:	d4f7      	bmi.n	800ea08 <_vfiprintf_r+0x44>
 800ea18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea1a:	f7ff fe7b 	bl	800e714 <__retarget_lock_release_recursive>
 800ea1e:	e7f3      	b.n	800ea08 <_vfiprintf_r+0x44>
 800ea20:	2300      	movs	r3, #0
 800ea22:	9309      	str	r3, [sp, #36]	; 0x24
 800ea24:	2320      	movs	r3, #32
 800ea26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea2e:	2330      	movs	r3, #48	; 0x30
 800ea30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ebe4 <_vfiprintf_r+0x220>
 800ea34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea38:	f04f 0901 	mov.w	r9, #1
 800ea3c:	4623      	mov	r3, r4
 800ea3e:	469a      	mov	sl, r3
 800ea40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea44:	b10a      	cbz	r2, 800ea4a <_vfiprintf_r+0x86>
 800ea46:	2a25      	cmp	r2, #37	; 0x25
 800ea48:	d1f9      	bne.n	800ea3e <_vfiprintf_r+0x7a>
 800ea4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea4e:	d00b      	beq.n	800ea68 <_vfiprintf_r+0xa4>
 800ea50:	465b      	mov	r3, fp
 800ea52:	4622      	mov	r2, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7ff ffa1 	bl	800e99e <__sfputs_r>
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	f000 80a9 	beq.w	800ebb4 <_vfiprintf_r+0x1f0>
 800ea62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea64:	445a      	add	r2, fp
 800ea66:	9209      	str	r2, [sp, #36]	; 0x24
 800ea68:	f89a 3000 	ldrb.w	r3, [sl]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f000 80a1 	beq.w	800ebb4 <_vfiprintf_r+0x1f0>
 800ea72:	2300      	movs	r3, #0
 800ea74:	f04f 32ff 	mov.w	r2, #4294967295
 800ea78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea7c:	f10a 0a01 	add.w	sl, sl, #1
 800ea80:	9304      	str	r3, [sp, #16]
 800ea82:	9307      	str	r3, [sp, #28]
 800ea84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea88:	931a      	str	r3, [sp, #104]	; 0x68
 800ea8a:	4654      	mov	r4, sl
 800ea8c:	2205      	movs	r2, #5
 800ea8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea92:	4854      	ldr	r0, [pc, #336]	; (800ebe4 <_vfiprintf_r+0x220>)
 800ea94:	f7f1 fbac 	bl	80001f0 <memchr>
 800ea98:	9a04      	ldr	r2, [sp, #16]
 800ea9a:	b9d8      	cbnz	r0, 800ead4 <_vfiprintf_r+0x110>
 800ea9c:	06d1      	lsls	r1, r2, #27
 800ea9e:	bf44      	itt	mi
 800eaa0:	2320      	movmi	r3, #32
 800eaa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaa6:	0713      	lsls	r3, r2, #28
 800eaa8:	bf44      	itt	mi
 800eaaa:	232b      	movmi	r3, #43	; 0x2b
 800eaac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab0:	f89a 3000 	ldrb.w	r3, [sl]
 800eab4:	2b2a      	cmp	r3, #42	; 0x2a
 800eab6:	d015      	beq.n	800eae4 <_vfiprintf_r+0x120>
 800eab8:	9a07      	ldr	r2, [sp, #28]
 800eaba:	4654      	mov	r4, sl
 800eabc:	2000      	movs	r0, #0
 800eabe:	f04f 0c0a 	mov.w	ip, #10
 800eac2:	4621      	mov	r1, r4
 800eac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eac8:	3b30      	subs	r3, #48	; 0x30
 800eaca:	2b09      	cmp	r3, #9
 800eacc:	d94d      	bls.n	800eb6a <_vfiprintf_r+0x1a6>
 800eace:	b1b0      	cbz	r0, 800eafe <_vfiprintf_r+0x13a>
 800ead0:	9207      	str	r2, [sp, #28]
 800ead2:	e014      	b.n	800eafe <_vfiprintf_r+0x13a>
 800ead4:	eba0 0308 	sub.w	r3, r0, r8
 800ead8:	fa09 f303 	lsl.w	r3, r9, r3
 800eadc:	4313      	orrs	r3, r2
 800eade:	9304      	str	r3, [sp, #16]
 800eae0:	46a2      	mov	sl, r4
 800eae2:	e7d2      	b.n	800ea8a <_vfiprintf_r+0xc6>
 800eae4:	9b03      	ldr	r3, [sp, #12]
 800eae6:	1d19      	adds	r1, r3, #4
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	9103      	str	r1, [sp, #12]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bfbb      	ittet	lt
 800eaf0:	425b      	neglt	r3, r3
 800eaf2:	f042 0202 	orrlt.w	r2, r2, #2
 800eaf6:	9307      	strge	r3, [sp, #28]
 800eaf8:	9307      	strlt	r3, [sp, #28]
 800eafa:	bfb8      	it	lt
 800eafc:	9204      	strlt	r2, [sp, #16]
 800eafe:	7823      	ldrb	r3, [r4, #0]
 800eb00:	2b2e      	cmp	r3, #46	; 0x2e
 800eb02:	d10c      	bne.n	800eb1e <_vfiprintf_r+0x15a>
 800eb04:	7863      	ldrb	r3, [r4, #1]
 800eb06:	2b2a      	cmp	r3, #42	; 0x2a
 800eb08:	d134      	bne.n	800eb74 <_vfiprintf_r+0x1b0>
 800eb0a:	9b03      	ldr	r3, [sp, #12]
 800eb0c:	1d1a      	adds	r2, r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	9203      	str	r2, [sp, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	bfb8      	it	lt
 800eb16:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb1a:	3402      	adds	r4, #2
 800eb1c:	9305      	str	r3, [sp, #20]
 800eb1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ebf4 <_vfiprintf_r+0x230>
 800eb22:	7821      	ldrb	r1, [r4, #0]
 800eb24:	2203      	movs	r2, #3
 800eb26:	4650      	mov	r0, sl
 800eb28:	f7f1 fb62 	bl	80001f0 <memchr>
 800eb2c:	b138      	cbz	r0, 800eb3e <_vfiprintf_r+0x17a>
 800eb2e:	9b04      	ldr	r3, [sp, #16]
 800eb30:	eba0 000a 	sub.w	r0, r0, sl
 800eb34:	2240      	movs	r2, #64	; 0x40
 800eb36:	4082      	lsls	r2, r0
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	3401      	adds	r4, #1
 800eb3c:	9304      	str	r3, [sp, #16]
 800eb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb42:	4829      	ldr	r0, [pc, #164]	; (800ebe8 <_vfiprintf_r+0x224>)
 800eb44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb48:	2206      	movs	r2, #6
 800eb4a:	f7f1 fb51 	bl	80001f0 <memchr>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	d03f      	beq.n	800ebd2 <_vfiprintf_r+0x20e>
 800eb52:	4b26      	ldr	r3, [pc, #152]	; (800ebec <_vfiprintf_r+0x228>)
 800eb54:	bb1b      	cbnz	r3, 800eb9e <_vfiprintf_r+0x1da>
 800eb56:	9b03      	ldr	r3, [sp, #12]
 800eb58:	3307      	adds	r3, #7
 800eb5a:	f023 0307 	bic.w	r3, r3, #7
 800eb5e:	3308      	adds	r3, #8
 800eb60:	9303      	str	r3, [sp, #12]
 800eb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb64:	443b      	add	r3, r7
 800eb66:	9309      	str	r3, [sp, #36]	; 0x24
 800eb68:	e768      	b.n	800ea3c <_vfiprintf_r+0x78>
 800eb6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb6e:	460c      	mov	r4, r1
 800eb70:	2001      	movs	r0, #1
 800eb72:	e7a6      	b.n	800eac2 <_vfiprintf_r+0xfe>
 800eb74:	2300      	movs	r3, #0
 800eb76:	3401      	adds	r4, #1
 800eb78:	9305      	str	r3, [sp, #20]
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	f04f 0c0a 	mov.w	ip, #10
 800eb80:	4620      	mov	r0, r4
 800eb82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb86:	3a30      	subs	r2, #48	; 0x30
 800eb88:	2a09      	cmp	r2, #9
 800eb8a:	d903      	bls.n	800eb94 <_vfiprintf_r+0x1d0>
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d0c6      	beq.n	800eb1e <_vfiprintf_r+0x15a>
 800eb90:	9105      	str	r1, [sp, #20]
 800eb92:	e7c4      	b.n	800eb1e <_vfiprintf_r+0x15a>
 800eb94:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb98:	4604      	mov	r4, r0
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e7f0      	b.n	800eb80 <_vfiprintf_r+0x1bc>
 800eb9e:	ab03      	add	r3, sp, #12
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	462a      	mov	r2, r5
 800eba4:	4b12      	ldr	r3, [pc, #72]	; (800ebf0 <_vfiprintf_r+0x22c>)
 800eba6:	a904      	add	r1, sp, #16
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f3af 8000 	nop.w
 800ebae:	4607      	mov	r7, r0
 800ebb0:	1c78      	adds	r0, r7, #1
 800ebb2:	d1d6      	bne.n	800eb62 <_vfiprintf_r+0x19e>
 800ebb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebb6:	07d9      	lsls	r1, r3, #31
 800ebb8:	d405      	bmi.n	800ebc6 <_vfiprintf_r+0x202>
 800ebba:	89ab      	ldrh	r3, [r5, #12]
 800ebbc:	059a      	lsls	r2, r3, #22
 800ebbe:	d402      	bmi.n	800ebc6 <_vfiprintf_r+0x202>
 800ebc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebc2:	f7ff fda7 	bl	800e714 <__retarget_lock_release_recursive>
 800ebc6:	89ab      	ldrh	r3, [r5, #12]
 800ebc8:	065b      	lsls	r3, r3, #25
 800ebca:	f53f af1d 	bmi.w	800ea08 <_vfiprintf_r+0x44>
 800ebce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebd0:	e71c      	b.n	800ea0c <_vfiprintf_r+0x48>
 800ebd2:	ab03      	add	r3, sp, #12
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	462a      	mov	r2, r5
 800ebd8:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <_vfiprintf_r+0x22c>)
 800ebda:	a904      	add	r1, sp, #16
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f000 f879 	bl	800ecd4 <_printf_i>
 800ebe2:	e7e4      	b.n	800ebae <_vfiprintf_r+0x1ea>
 800ebe4:	08011f51 	.word	0x08011f51
 800ebe8:	08011f5b 	.word	0x08011f5b
 800ebec:	00000000 	.word	0x00000000
 800ebf0:	0800e99f 	.word	0x0800e99f
 800ebf4:	08011f57 	.word	0x08011f57

0800ebf8 <_printf_common>:
 800ebf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfc:	4616      	mov	r6, r2
 800ebfe:	4699      	mov	r9, r3
 800ec00:	688a      	ldr	r2, [r1, #8]
 800ec02:	690b      	ldr	r3, [r1, #16]
 800ec04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	bfb8      	it	lt
 800ec0c:	4613      	movlt	r3, r2
 800ec0e:	6033      	str	r3, [r6, #0]
 800ec10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec14:	4607      	mov	r7, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	b10a      	cbz	r2, 800ec1e <_printf_common+0x26>
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	6033      	str	r3, [r6, #0]
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	0699      	lsls	r1, r3, #26
 800ec22:	bf42      	ittt	mi
 800ec24:	6833      	ldrmi	r3, [r6, #0]
 800ec26:	3302      	addmi	r3, #2
 800ec28:	6033      	strmi	r3, [r6, #0]
 800ec2a:	6825      	ldr	r5, [r4, #0]
 800ec2c:	f015 0506 	ands.w	r5, r5, #6
 800ec30:	d106      	bne.n	800ec40 <_printf_common+0x48>
 800ec32:	f104 0a19 	add.w	sl, r4, #25
 800ec36:	68e3      	ldr	r3, [r4, #12]
 800ec38:	6832      	ldr	r2, [r6, #0]
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	42ab      	cmp	r3, r5
 800ec3e:	dc26      	bgt.n	800ec8e <_printf_common+0x96>
 800ec40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec44:	1e13      	subs	r3, r2, #0
 800ec46:	6822      	ldr	r2, [r4, #0]
 800ec48:	bf18      	it	ne
 800ec4a:	2301      	movne	r3, #1
 800ec4c:	0692      	lsls	r2, r2, #26
 800ec4e:	d42b      	bmi.n	800eca8 <_printf_common+0xb0>
 800ec50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec54:	4649      	mov	r1, r9
 800ec56:	4638      	mov	r0, r7
 800ec58:	47c0      	blx	r8
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	d01e      	beq.n	800ec9c <_printf_common+0xa4>
 800ec5e:	6823      	ldr	r3, [r4, #0]
 800ec60:	6922      	ldr	r2, [r4, #16]
 800ec62:	f003 0306 	and.w	r3, r3, #6
 800ec66:	2b04      	cmp	r3, #4
 800ec68:	bf02      	ittt	eq
 800ec6a:	68e5      	ldreq	r5, [r4, #12]
 800ec6c:	6833      	ldreq	r3, [r6, #0]
 800ec6e:	1aed      	subeq	r5, r5, r3
 800ec70:	68a3      	ldr	r3, [r4, #8]
 800ec72:	bf0c      	ite	eq
 800ec74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec78:	2500      	movne	r5, #0
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	bfc4      	itt	gt
 800ec7e:	1a9b      	subgt	r3, r3, r2
 800ec80:	18ed      	addgt	r5, r5, r3
 800ec82:	2600      	movs	r6, #0
 800ec84:	341a      	adds	r4, #26
 800ec86:	42b5      	cmp	r5, r6
 800ec88:	d11a      	bne.n	800ecc0 <_printf_common+0xc8>
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	e008      	b.n	800eca0 <_printf_common+0xa8>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	4652      	mov	r2, sl
 800ec92:	4649      	mov	r1, r9
 800ec94:	4638      	mov	r0, r7
 800ec96:	47c0      	blx	r8
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d103      	bne.n	800eca4 <_printf_common+0xac>
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca4:	3501      	adds	r5, #1
 800eca6:	e7c6      	b.n	800ec36 <_printf_common+0x3e>
 800eca8:	18e1      	adds	r1, r4, r3
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	2030      	movs	r0, #48	; 0x30
 800ecae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecb2:	4422      	add	r2, r4
 800ecb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecbc:	3302      	adds	r3, #2
 800ecbe:	e7c7      	b.n	800ec50 <_printf_common+0x58>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	4622      	mov	r2, r4
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	4638      	mov	r0, r7
 800ecc8:	47c0      	blx	r8
 800ecca:	3001      	adds	r0, #1
 800eccc:	d0e6      	beq.n	800ec9c <_printf_common+0xa4>
 800ecce:	3601      	adds	r6, #1
 800ecd0:	e7d9      	b.n	800ec86 <_printf_common+0x8e>
	...

0800ecd4 <_printf_i>:
 800ecd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd8:	7e0f      	ldrb	r7, [r1, #24]
 800ecda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecdc:	2f78      	cmp	r7, #120	; 0x78
 800ecde:	4691      	mov	r9, r2
 800ece0:	4680      	mov	r8, r0
 800ece2:	460c      	mov	r4, r1
 800ece4:	469a      	mov	sl, r3
 800ece6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecea:	d807      	bhi.n	800ecfc <_printf_i+0x28>
 800ecec:	2f62      	cmp	r7, #98	; 0x62
 800ecee:	d80a      	bhi.n	800ed06 <_printf_i+0x32>
 800ecf0:	2f00      	cmp	r7, #0
 800ecf2:	f000 80d4 	beq.w	800ee9e <_printf_i+0x1ca>
 800ecf6:	2f58      	cmp	r7, #88	; 0x58
 800ecf8:	f000 80c0 	beq.w	800ee7c <_printf_i+0x1a8>
 800ecfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed04:	e03a      	b.n	800ed7c <_printf_i+0xa8>
 800ed06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed0a:	2b15      	cmp	r3, #21
 800ed0c:	d8f6      	bhi.n	800ecfc <_printf_i+0x28>
 800ed0e:	a101      	add	r1, pc, #4	; (adr r1, 800ed14 <_printf_i+0x40>)
 800ed10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed14:	0800ed6d 	.word	0x0800ed6d
 800ed18:	0800ed81 	.word	0x0800ed81
 800ed1c:	0800ecfd 	.word	0x0800ecfd
 800ed20:	0800ecfd 	.word	0x0800ecfd
 800ed24:	0800ecfd 	.word	0x0800ecfd
 800ed28:	0800ecfd 	.word	0x0800ecfd
 800ed2c:	0800ed81 	.word	0x0800ed81
 800ed30:	0800ecfd 	.word	0x0800ecfd
 800ed34:	0800ecfd 	.word	0x0800ecfd
 800ed38:	0800ecfd 	.word	0x0800ecfd
 800ed3c:	0800ecfd 	.word	0x0800ecfd
 800ed40:	0800ee85 	.word	0x0800ee85
 800ed44:	0800edad 	.word	0x0800edad
 800ed48:	0800ee3f 	.word	0x0800ee3f
 800ed4c:	0800ecfd 	.word	0x0800ecfd
 800ed50:	0800ecfd 	.word	0x0800ecfd
 800ed54:	0800eea7 	.word	0x0800eea7
 800ed58:	0800ecfd 	.word	0x0800ecfd
 800ed5c:	0800edad 	.word	0x0800edad
 800ed60:	0800ecfd 	.word	0x0800ecfd
 800ed64:	0800ecfd 	.word	0x0800ecfd
 800ed68:	0800ee47 	.word	0x0800ee47
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	1d1a      	adds	r2, r3, #4
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	602a      	str	r2, [r5, #0]
 800ed74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e09f      	b.n	800eec0 <_printf_i+0x1ec>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	682b      	ldr	r3, [r5, #0]
 800ed84:	0607      	lsls	r7, r0, #24
 800ed86:	f103 0104 	add.w	r1, r3, #4
 800ed8a:	6029      	str	r1, [r5, #0]
 800ed8c:	d501      	bpl.n	800ed92 <_printf_i+0xbe>
 800ed8e:	681e      	ldr	r6, [r3, #0]
 800ed90:	e003      	b.n	800ed9a <_printf_i+0xc6>
 800ed92:	0646      	lsls	r6, r0, #25
 800ed94:	d5fb      	bpl.n	800ed8e <_printf_i+0xba>
 800ed96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed9a:	2e00      	cmp	r6, #0
 800ed9c:	da03      	bge.n	800eda6 <_printf_i+0xd2>
 800ed9e:	232d      	movs	r3, #45	; 0x2d
 800eda0:	4276      	negs	r6, r6
 800eda2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eda6:	485a      	ldr	r0, [pc, #360]	; (800ef10 <_printf_i+0x23c>)
 800eda8:	230a      	movs	r3, #10
 800edaa:	e012      	b.n	800edd2 <_printf_i+0xfe>
 800edac:	682b      	ldr	r3, [r5, #0]
 800edae:	6820      	ldr	r0, [r4, #0]
 800edb0:	1d19      	adds	r1, r3, #4
 800edb2:	6029      	str	r1, [r5, #0]
 800edb4:	0605      	lsls	r5, r0, #24
 800edb6:	d501      	bpl.n	800edbc <_printf_i+0xe8>
 800edb8:	681e      	ldr	r6, [r3, #0]
 800edba:	e002      	b.n	800edc2 <_printf_i+0xee>
 800edbc:	0641      	lsls	r1, r0, #25
 800edbe:	d5fb      	bpl.n	800edb8 <_printf_i+0xe4>
 800edc0:	881e      	ldrh	r6, [r3, #0]
 800edc2:	4853      	ldr	r0, [pc, #332]	; (800ef10 <_printf_i+0x23c>)
 800edc4:	2f6f      	cmp	r7, #111	; 0x6f
 800edc6:	bf0c      	ite	eq
 800edc8:	2308      	moveq	r3, #8
 800edca:	230a      	movne	r3, #10
 800edcc:	2100      	movs	r1, #0
 800edce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edd2:	6865      	ldr	r5, [r4, #4]
 800edd4:	60a5      	str	r5, [r4, #8]
 800edd6:	2d00      	cmp	r5, #0
 800edd8:	bfa2      	ittt	ge
 800edda:	6821      	ldrge	r1, [r4, #0]
 800eddc:	f021 0104 	bicge.w	r1, r1, #4
 800ede0:	6021      	strge	r1, [r4, #0]
 800ede2:	b90e      	cbnz	r6, 800ede8 <_printf_i+0x114>
 800ede4:	2d00      	cmp	r5, #0
 800ede6:	d04b      	beq.n	800ee80 <_printf_i+0x1ac>
 800ede8:	4615      	mov	r5, r2
 800edea:	fbb6 f1f3 	udiv	r1, r6, r3
 800edee:	fb03 6711 	mls	r7, r3, r1, r6
 800edf2:	5dc7      	ldrb	r7, [r0, r7]
 800edf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edf8:	4637      	mov	r7, r6
 800edfa:	42bb      	cmp	r3, r7
 800edfc:	460e      	mov	r6, r1
 800edfe:	d9f4      	bls.n	800edea <_printf_i+0x116>
 800ee00:	2b08      	cmp	r3, #8
 800ee02:	d10b      	bne.n	800ee1c <_printf_i+0x148>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	07de      	lsls	r6, r3, #31
 800ee08:	d508      	bpl.n	800ee1c <_printf_i+0x148>
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	6861      	ldr	r1, [r4, #4]
 800ee0e:	4299      	cmp	r1, r3
 800ee10:	bfde      	ittt	le
 800ee12:	2330      	movle	r3, #48	; 0x30
 800ee14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee1c:	1b52      	subs	r2, r2, r5
 800ee1e:	6122      	str	r2, [r4, #16]
 800ee20:	f8cd a000 	str.w	sl, [sp]
 800ee24:	464b      	mov	r3, r9
 800ee26:	aa03      	add	r2, sp, #12
 800ee28:	4621      	mov	r1, r4
 800ee2a:	4640      	mov	r0, r8
 800ee2c:	f7ff fee4 	bl	800ebf8 <_printf_common>
 800ee30:	3001      	adds	r0, #1
 800ee32:	d14a      	bne.n	800eeca <_printf_i+0x1f6>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	b004      	add	sp, #16
 800ee3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	f043 0320 	orr.w	r3, r3, #32
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	4833      	ldr	r0, [pc, #204]	; (800ef14 <_printf_i+0x240>)
 800ee48:	2778      	movs	r7, #120	; 0x78
 800ee4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	6829      	ldr	r1, [r5, #0]
 800ee52:	061f      	lsls	r7, r3, #24
 800ee54:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee58:	d402      	bmi.n	800ee60 <_printf_i+0x18c>
 800ee5a:	065f      	lsls	r7, r3, #25
 800ee5c:	bf48      	it	mi
 800ee5e:	b2b6      	uxthmi	r6, r6
 800ee60:	07df      	lsls	r7, r3, #31
 800ee62:	bf48      	it	mi
 800ee64:	f043 0320 	orrmi.w	r3, r3, #32
 800ee68:	6029      	str	r1, [r5, #0]
 800ee6a:	bf48      	it	mi
 800ee6c:	6023      	strmi	r3, [r4, #0]
 800ee6e:	b91e      	cbnz	r6, 800ee78 <_printf_i+0x1a4>
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	f023 0320 	bic.w	r3, r3, #32
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	2310      	movs	r3, #16
 800ee7a:	e7a7      	b.n	800edcc <_printf_i+0xf8>
 800ee7c:	4824      	ldr	r0, [pc, #144]	; (800ef10 <_printf_i+0x23c>)
 800ee7e:	e7e4      	b.n	800ee4a <_printf_i+0x176>
 800ee80:	4615      	mov	r5, r2
 800ee82:	e7bd      	b.n	800ee00 <_printf_i+0x12c>
 800ee84:	682b      	ldr	r3, [r5, #0]
 800ee86:	6826      	ldr	r6, [r4, #0]
 800ee88:	6961      	ldr	r1, [r4, #20]
 800ee8a:	1d18      	adds	r0, r3, #4
 800ee8c:	6028      	str	r0, [r5, #0]
 800ee8e:	0635      	lsls	r5, r6, #24
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	d501      	bpl.n	800ee98 <_printf_i+0x1c4>
 800ee94:	6019      	str	r1, [r3, #0]
 800ee96:	e002      	b.n	800ee9e <_printf_i+0x1ca>
 800ee98:	0670      	lsls	r0, r6, #25
 800ee9a:	d5fb      	bpl.n	800ee94 <_printf_i+0x1c0>
 800ee9c:	8019      	strh	r1, [r3, #0]
 800ee9e:	2300      	movs	r3, #0
 800eea0:	6123      	str	r3, [r4, #16]
 800eea2:	4615      	mov	r5, r2
 800eea4:	e7bc      	b.n	800ee20 <_printf_i+0x14c>
 800eea6:	682b      	ldr	r3, [r5, #0]
 800eea8:	1d1a      	adds	r2, r3, #4
 800eeaa:	602a      	str	r2, [r5, #0]
 800eeac:	681d      	ldr	r5, [r3, #0]
 800eeae:	6862      	ldr	r2, [r4, #4]
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f7f1 f99c 	bl	80001f0 <memchr>
 800eeb8:	b108      	cbz	r0, 800eebe <_printf_i+0x1ea>
 800eeba:	1b40      	subs	r0, r0, r5
 800eebc:	6060      	str	r0, [r4, #4]
 800eebe:	6863      	ldr	r3, [r4, #4]
 800eec0:	6123      	str	r3, [r4, #16]
 800eec2:	2300      	movs	r3, #0
 800eec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eec8:	e7aa      	b.n	800ee20 <_printf_i+0x14c>
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	462a      	mov	r2, r5
 800eece:	4649      	mov	r1, r9
 800eed0:	4640      	mov	r0, r8
 800eed2:	47d0      	blx	sl
 800eed4:	3001      	adds	r0, #1
 800eed6:	d0ad      	beq.n	800ee34 <_printf_i+0x160>
 800eed8:	6823      	ldr	r3, [r4, #0]
 800eeda:	079b      	lsls	r3, r3, #30
 800eedc:	d413      	bmi.n	800ef06 <_printf_i+0x232>
 800eede:	68e0      	ldr	r0, [r4, #12]
 800eee0:	9b03      	ldr	r3, [sp, #12]
 800eee2:	4298      	cmp	r0, r3
 800eee4:	bfb8      	it	lt
 800eee6:	4618      	movlt	r0, r3
 800eee8:	e7a6      	b.n	800ee38 <_printf_i+0x164>
 800eeea:	2301      	movs	r3, #1
 800eeec:	4632      	mov	r2, r6
 800eeee:	4649      	mov	r1, r9
 800eef0:	4640      	mov	r0, r8
 800eef2:	47d0      	blx	sl
 800eef4:	3001      	adds	r0, #1
 800eef6:	d09d      	beq.n	800ee34 <_printf_i+0x160>
 800eef8:	3501      	adds	r5, #1
 800eefa:	68e3      	ldr	r3, [r4, #12]
 800eefc:	9903      	ldr	r1, [sp, #12]
 800eefe:	1a5b      	subs	r3, r3, r1
 800ef00:	42ab      	cmp	r3, r5
 800ef02:	dcf2      	bgt.n	800eeea <_printf_i+0x216>
 800ef04:	e7eb      	b.n	800eede <_printf_i+0x20a>
 800ef06:	2500      	movs	r5, #0
 800ef08:	f104 0619 	add.w	r6, r4, #25
 800ef0c:	e7f5      	b.n	800eefa <_printf_i+0x226>
 800ef0e:	bf00      	nop
 800ef10:	08011f62 	.word	0x08011f62
 800ef14:	08011f73 	.word	0x08011f73

0800ef18 <__sflush_r>:
 800ef18:	898a      	ldrh	r2, [r1, #12]
 800ef1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1e:	4605      	mov	r5, r0
 800ef20:	0710      	lsls	r0, r2, #28
 800ef22:	460c      	mov	r4, r1
 800ef24:	d458      	bmi.n	800efd8 <__sflush_r+0xc0>
 800ef26:	684b      	ldr	r3, [r1, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	dc05      	bgt.n	800ef38 <__sflush_r+0x20>
 800ef2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	dc02      	bgt.n	800ef38 <__sflush_r+0x20>
 800ef32:	2000      	movs	r0, #0
 800ef34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef3a:	2e00      	cmp	r6, #0
 800ef3c:	d0f9      	beq.n	800ef32 <__sflush_r+0x1a>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef44:	682f      	ldr	r7, [r5, #0]
 800ef46:	6a21      	ldr	r1, [r4, #32]
 800ef48:	602b      	str	r3, [r5, #0]
 800ef4a:	d032      	beq.n	800efb2 <__sflush_r+0x9a>
 800ef4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef4e:	89a3      	ldrh	r3, [r4, #12]
 800ef50:	075a      	lsls	r2, r3, #29
 800ef52:	d505      	bpl.n	800ef60 <__sflush_r+0x48>
 800ef54:	6863      	ldr	r3, [r4, #4]
 800ef56:	1ac0      	subs	r0, r0, r3
 800ef58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef5a:	b10b      	cbz	r3, 800ef60 <__sflush_r+0x48>
 800ef5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef5e:	1ac0      	subs	r0, r0, r3
 800ef60:	2300      	movs	r3, #0
 800ef62:	4602      	mov	r2, r0
 800ef64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef66:	6a21      	ldr	r1, [r4, #32]
 800ef68:	4628      	mov	r0, r5
 800ef6a:	47b0      	blx	r6
 800ef6c:	1c43      	adds	r3, r0, #1
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	d106      	bne.n	800ef80 <__sflush_r+0x68>
 800ef72:	6829      	ldr	r1, [r5, #0]
 800ef74:	291d      	cmp	r1, #29
 800ef76:	d82b      	bhi.n	800efd0 <__sflush_r+0xb8>
 800ef78:	4a29      	ldr	r2, [pc, #164]	; (800f020 <__sflush_r+0x108>)
 800ef7a:	410a      	asrs	r2, r1
 800ef7c:	07d6      	lsls	r6, r2, #31
 800ef7e:	d427      	bmi.n	800efd0 <__sflush_r+0xb8>
 800ef80:	2200      	movs	r2, #0
 800ef82:	6062      	str	r2, [r4, #4]
 800ef84:	04d9      	lsls	r1, r3, #19
 800ef86:	6922      	ldr	r2, [r4, #16]
 800ef88:	6022      	str	r2, [r4, #0]
 800ef8a:	d504      	bpl.n	800ef96 <__sflush_r+0x7e>
 800ef8c:	1c42      	adds	r2, r0, #1
 800ef8e:	d101      	bne.n	800ef94 <__sflush_r+0x7c>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b903      	cbnz	r3, 800ef96 <__sflush_r+0x7e>
 800ef94:	6560      	str	r0, [r4, #84]	; 0x54
 800ef96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef98:	602f      	str	r7, [r5, #0]
 800ef9a:	2900      	cmp	r1, #0
 800ef9c:	d0c9      	beq.n	800ef32 <__sflush_r+0x1a>
 800ef9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efa2:	4299      	cmp	r1, r3
 800efa4:	d002      	beq.n	800efac <__sflush_r+0x94>
 800efa6:	4628      	mov	r0, r5
 800efa8:	f7ff fbe2 	bl	800e770 <_free_r>
 800efac:	2000      	movs	r0, #0
 800efae:	6360      	str	r0, [r4, #52]	; 0x34
 800efb0:	e7c0      	b.n	800ef34 <__sflush_r+0x1c>
 800efb2:	2301      	movs	r3, #1
 800efb4:	4628      	mov	r0, r5
 800efb6:	47b0      	blx	r6
 800efb8:	1c41      	adds	r1, r0, #1
 800efba:	d1c8      	bne.n	800ef4e <__sflush_r+0x36>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d0c5      	beq.n	800ef4e <__sflush_r+0x36>
 800efc2:	2b1d      	cmp	r3, #29
 800efc4:	d001      	beq.n	800efca <__sflush_r+0xb2>
 800efc6:	2b16      	cmp	r3, #22
 800efc8:	d101      	bne.n	800efce <__sflush_r+0xb6>
 800efca:	602f      	str	r7, [r5, #0]
 800efcc:	e7b1      	b.n	800ef32 <__sflush_r+0x1a>
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd4:	81a3      	strh	r3, [r4, #12]
 800efd6:	e7ad      	b.n	800ef34 <__sflush_r+0x1c>
 800efd8:	690f      	ldr	r7, [r1, #16]
 800efda:	2f00      	cmp	r7, #0
 800efdc:	d0a9      	beq.n	800ef32 <__sflush_r+0x1a>
 800efde:	0793      	lsls	r3, r2, #30
 800efe0:	680e      	ldr	r6, [r1, #0]
 800efe2:	bf08      	it	eq
 800efe4:	694b      	ldreq	r3, [r1, #20]
 800efe6:	600f      	str	r7, [r1, #0]
 800efe8:	bf18      	it	ne
 800efea:	2300      	movne	r3, #0
 800efec:	eba6 0807 	sub.w	r8, r6, r7
 800eff0:	608b      	str	r3, [r1, #8]
 800eff2:	f1b8 0f00 	cmp.w	r8, #0
 800eff6:	dd9c      	ble.n	800ef32 <__sflush_r+0x1a>
 800eff8:	6a21      	ldr	r1, [r4, #32]
 800effa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800effc:	4643      	mov	r3, r8
 800effe:	463a      	mov	r2, r7
 800f000:	4628      	mov	r0, r5
 800f002:	47b0      	blx	r6
 800f004:	2800      	cmp	r0, #0
 800f006:	dc06      	bgt.n	800f016 <__sflush_r+0xfe>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f00e:	81a3      	strh	r3, [r4, #12]
 800f010:	f04f 30ff 	mov.w	r0, #4294967295
 800f014:	e78e      	b.n	800ef34 <__sflush_r+0x1c>
 800f016:	4407      	add	r7, r0
 800f018:	eba8 0800 	sub.w	r8, r8, r0
 800f01c:	e7e9      	b.n	800eff2 <__sflush_r+0xda>
 800f01e:	bf00      	nop
 800f020:	dfbffffe 	.word	0xdfbffffe

0800f024 <_fflush_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	690b      	ldr	r3, [r1, #16]
 800f028:	4605      	mov	r5, r0
 800f02a:	460c      	mov	r4, r1
 800f02c:	b913      	cbnz	r3, 800f034 <_fflush_r+0x10>
 800f02e:	2500      	movs	r5, #0
 800f030:	4628      	mov	r0, r5
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	b118      	cbz	r0, 800f03e <_fflush_r+0x1a>
 800f036:	6a03      	ldr	r3, [r0, #32]
 800f038:	b90b      	cbnz	r3, 800f03e <_fflush_r+0x1a>
 800f03a:	f7ff fa5b 	bl	800e4f4 <__sinit>
 800f03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d0f3      	beq.n	800f02e <_fflush_r+0xa>
 800f046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f048:	07d0      	lsls	r0, r2, #31
 800f04a:	d404      	bmi.n	800f056 <_fflush_r+0x32>
 800f04c:	0599      	lsls	r1, r3, #22
 800f04e:	d402      	bmi.n	800f056 <_fflush_r+0x32>
 800f050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f052:	f7ff fb5e 	bl	800e712 <__retarget_lock_acquire_recursive>
 800f056:	4628      	mov	r0, r5
 800f058:	4621      	mov	r1, r4
 800f05a:	f7ff ff5d 	bl	800ef18 <__sflush_r>
 800f05e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f060:	07da      	lsls	r2, r3, #31
 800f062:	4605      	mov	r5, r0
 800f064:	d4e4      	bmi.n	800f030 <_fflush_r+0xc>
 800f066:	89a3      	ldrh	r3, [r4, #12]
 800f068:	059b      	lsls	r3, r3, #22
 800f06a:	d4e1      	bmi.n	800f030 <_fflush_r+0xc>
 800f06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f06e:	f7ff fb51 	bl	800e714 <__retarget_lock_release_recursive>
 800f072:	e7dd      	b.n	800f030 <_fflush_r+0xc>

0800f074 <fiprintf>:
 800f074:	b40e      	push	{r1, r2, r3}
 800f076:	b503      	push	{r0, r1, lr}
 800f078:	4601      	mov	r1, r0
 800f07a:	ab03      	add	r3, sp, #12
 800f07c:	4805      	ldr	r0, [pc, #20]	; (800f094 <fiprintf+0x20>)
 800f07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f082:	6800      	ldr	r0, [r0, #0]
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	f7ff fc9d 	bl	800e9c4 <_vfiprintf_r>
 800f08a:	b002      	add	sp, #8
 800f08c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f090:	b003      	add	sp, #12
 800f092:	4770      	bx	lr
 800f094:	20000084 	.word	0x20000084

0800f098 <__swbuf_r>:
 800f098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09a:	460e      	mov	r6, r1
 800f09c:	4614      	mov	r4, r2
 800f09e:	4605      	mov	r5, r0
 800f0a0:	b118      	cbz	r0, 800f0aa <__swbuf_r+0x12>
 800f0a2:	6a03      	ldr	r3, [r0, #32]
 800f0a4:	b90b      	cbnz	r3, 800f0aa <__swbuf_r+0x12>
 800f0a6:	f7ff fa25 	bl	800e4f4 <__sinit>
 800f0aa:	69a3      	ldr	r3, [r4, #24]
 800f0ac:	60a3      	str	r3, [r4, #8]
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	071a      	lsls	r2, r3, #28
 800f0b2:	d525      	bpl.n	800f100 <__swbuf_r+0x68>
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	b31b      	cbz	r3, 800f100 <__swbuf_r+0x68>
 800f0b8:	6823      	ldr	r3, [r4, #0]
 800f0ba:	6922      	ldr	r2, [r4, #16]
 800f0bc:	1a98      	subs	r0, r3, r2
 800f0be:	6963      	ldr	r3, [r4, #20]
 800f0c0:	b2f6      	uxtb	r6, r6
 800f0c2:	4283      	cmp	r3, r0
 800f0c4:	4637      	mov	r7, r6
 800f0c6:	dc04      	bgt.n	800f0d2 <__swbuf_r+0x3a>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	f7ff ffaa 	bl	800f024 <_fflush_r>
 800f0d0:	b9e0      	cbnz	r0, 800f10c <__swbuf_r+0x74>
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	60a3      	str	r3, [r4, #8]
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	6022      	str	r2, [r4, #0]
 800f0de:	701e      	strb	r6, [r3, #0]
 800f0e0:	6962      	ldr	r2, [r4, #20]
 800f0e2:	1c43      	adds	r3, r0, #1
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d004      	beq.n	800f0f2 <__swbuf_r+0x5a>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	07db      	lsls	r3, r3, #31
 800f0ec:	d506      	bpl.n	800f0fc <__swbuf_r+0x64>
 800f0ee:	2e0a      	cmp	r6, #10
 800f0f0:	d104      	bne.n	800f0fc <__swbuf_r+0x64>
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	f7ff ff95 	bl	800f024 <_fflush_r>
 800f0fa:	b938      	cbnz	r0, 800f10c <__swbuf_r+0x74>
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f100:	4621      	mov	r1, r4
 800f102:	4628      	mov	r0, r5
 800f104:	f000 f806 	bl	800f114 <__swsetup_r>
 800f108:	2800      	cmp	r0, #0
 800f10a:	d0d5      	beq.n	800f0b8 <__swbuf_r+0x20>
 800f10c:	f04f 37ff 	mov.w	r7, #4294967295
 800f110:	e7f4      	b.n	800f0fc <__swbuf_r+0x64>
	...

0800f114 <__swsetup_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4b2a      	ldr	r3, [pc, #168]	; (800f1c0 <__swsetup_r+0xac>)
 800f118:	4605      	mov	r5, r0
 800f11a:	6818      	ldr	r0, [r3, #0]
 800f11c:	460c      	mov	r4, r1
 800f11e:	b118      	cbz	r0, 800f128 <__swsetup_r+0x14>
 800f120:	6a03      	ldr	r3, [r0, #32]
 800f122:	b90b      	cbnz	r3, 800f128 <__swsetup_r+0x14>
 800f124:	f7ff f9e6 	bl	800e4f4 <__sinit>
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f12e:	0718      	lsls	r0, r3, #28
 800f130:	d422      	bmi.n	800f178 <__swsetup_r+0x64>
 800f132:	06d9      	lsls	r1, r3, #27
 800f134:	d407      	bmi.n	800f146 <__swsetup_r+0x32>
 800f136:	2309      	movs	r3, #9
 800f138:	602b      	str	r3, [r5, #0]
 800f13a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f13e:	81a3      	strh	r3, [r4, #12]
 800f140:	f04f 30ff 	mov.w	r0, #4294967295
 800f144:	e034      	b.n	800f1b0 <__swsetup_r+0x9c>
 800f146:	0758      	lsls	r0, r3, #29
 800f148:	d512      	bpl.n	800f170 <__swsetup_r+0x5c>
 800f14a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f14c:	b141      	cbz	r1, 800f160 <__swsetup_r+0x4c>
 800f14e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f152:	4299      	cmp	r1, r3
 800f154:	d002      	beq.n	800f15c <__swsetup_r+0x48>
 800f156:	4628      	mov	r0, r5
 800f158:	f7ff fb0a 	bl	800e770 <_free_r>
 800f15c:	2300      	movs	r3, #0
 800f15e:	6363      	str	r3, [r4, #52]	; 0x34
 800f160:	89a3      	ldrh	r3, [r4, #12]
 800f162:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	2300      	movs	r3, #0
 800f16a:	6063      	str	r3, [r4, #4]
 800f16c:	6923      	ldr	r3, [r4, #16]
 800f16e:	6023      	str	r3, [r4, #0]
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	f043 0308 	orr.w	r3, r3, #8
 800f176:	81a3      	strh	r3, [r4, #12]
 800f178:	6923      	ldr	r3, [r4, #16]
 800f17a:	b94b      	cbnz	r3, 800f190 <__swsetup_r+0x7c>
 800f17c:	89a3      	ldrh	r3, [r4, #12]
 800f17e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f186:	d003      	beq.n	800f190 <__swsetup_r+0x7c>
 800f188:	4621      	mov	r1, r4
 800f18a:	4628      	mov	r0, r5
 800f18c:	f000 f857 	bl	800f23e <__smakebuf_r>
 800f190:	89a0      	ldrh	r0, [r4, #12]
 800f192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f196:	f010 0301 	ands.w	r3, r0, #1
 800f19a:	d00a      	beq.n	800f1b2 <__swsetup_r+0x9e>
 800f19c:	2300      	movs	r3, #0
 800f19e:	60a3      	str	r3, [r4, #8]
 800f1a0:	6963      	ldr	r3, [r4, #20]
 800f1a2:	425b      	negs	r3, r3
 800f1a4:	61a3      	str	r3, [r4, #24]
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	b943      	cbnz	r3, 800f1bc <__swsetup_r+0xa8>
 800f1aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1ae:	d1c4      	bne.n	800f13a <__swsetup_r+0x26>
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	0781      	lsls	r1, r0, #30
 800f1b4:	bf58      	it	pl
 800f1b6:	6963      	ldrpl	r3, [r4, #20]
 800f1b8:	60a3      	str	r3, [r4, #8]
 800f1ba:	e7f4      	b.n	800f1a6 <__swsetup_r+0x92>
 800f1bc:	2000      	movs	r0, #0
 800f1be:	e7f7      	b.n	800f1b0 <__swsetup_r+0x9c>
 800f1c0:	20000084 	.word	0x20000084

0800f1c4 <_sbrk_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d06      	ldr	r5, [pc, #24]	; (800f1e0 <_sbrk_r+0x1c>)
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4608      	mov	r0, r1
 800f1ce:	602b      	str	r3, [r5, #0]
 800f1d0:	f7f1 fbe6 	bl	80009a0 <_sbrk>
 800f1d4:	1c43      	adds	r3, r0, #1
 800f1d6:	d102      	bne.n	800f1de <_sbrk_r+0x1a>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b103      	cbz	r3, 800f1de <_sbrk_r+0x1a>
 800f1dc:	6023      	str	r3, [r4, #0]
 800f1de:	bd38      	pop	{r3, r4, r5, pc}
 800f1e0:	20008524 	.word	0x20008524

0800f1e4 <abort>:
 800f1e4:	b508      	push	{r3, lr}
 800f1e6:	2006      	movs	r0, #6
 800f1e8:	f000 f88e 	bl	800f308 <raise>
 800f1ec:	2001      	movs	r0, #1
 800f1ee:	f7f1 fb5f 	bl	80008b0 <_exit>

0800f1f2 <__swhatbuf_r>:
 800f1f2:	b570      	push	{r4, r5, r6, lr}
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1fa:	2900      	cmp	r1, #0
 800f1fc:	b096      	sub	sp, #88	; 0x58
 800f1fe:	4615      	mov	r5, r2
 800f200:	461e      	mov	r6, r3
 800f202:	da0d      	bge.n	800f220 <__swhatbuf_r+0x2e>
 800f204:	89a3      	ldrh	r3, [r4, #12]
 800f206:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f20a:	f04f 0100 	mov.w	r1, #0
 800f20e:	bf0c      	ite	eq
 800f210:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f214:	2340      	movne	r3, #64	; 0x40
 800f216:	2000      	movs	r0, #0
 800f218:	6031      	str	r1, [r6, #0]
 800f21a:	602b      	str	r3, [r5, #0]
 800f21c:	b016      	add	sp, #88	; 0x58
 800f21e:	bd70      	pop	{r4, r5, r6, pc}
 800f220:	466a      	mov	r2, sp
 800f222:	f000 f879 	bl	800f318 <_fstat_r>
 800f226:	2800      	cmp	r0, #0
 800f228:	dbec      	blt.n	800f204 <__swhatbuf_r+0x12>
 800f22a:	9901      	ldr	r1, [sp, #4]
 800f22c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f230:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f234:	4259      	negs	r1, r3
 800f236:	4159      	adcs	r1, r3
 800f238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f23c:	e7eb      	b.n	800f216 <__swhatbuf_r+0x24>

0800f23e <__smakebuf_r>:
 800f23e:	898b      	ldrh	r3, [r1, #12]
 800f240:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f242:	079d      	lsls	r5, r3, #30
 800f244:	4606      	mov	r6, r0
 800f246:	460c      	mov	r4, r1
 800f248:	d507      	bpl.n	800f25a <__smakebuf_r+0x1c>
 800f24a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	6123      	str	r3, [r4, #16]
 800f252:	2301      	movs	r3, #1
 800f254:	6163      	str	r3, [r4, #20]
 800f256:	b002      	add	sp, #8
 800f258:	bd70      	pop	{r4, r5, r6, pc}
 800f25a:	ab01      	add	r3, sp, #4
 800f25c:	466a      	mov	r2, sp
 800f25e:	f7ff ffc8 	bl	800f1f2 <__swhatbuf_r>
 800f262:	9900      	ldr	r1, [sp, #0]
 800f264:	4605      	mov	r5, r0
 800f266:	4630      	mov	r0, r6
 800f268:	f7ff faf6 	bl	800e858 <_malloc_r>
 800f26c:	b948      	cbnz	r0, 800f282 <__smakebuf_r+0x44>
 800f26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f272:	059a      	lsls	r2, r3, #22
 800f274:	d4ef      	bmi.n	800f256 <__smakebuf_r+0x18>
 800f276:	f023 0303 	bic.w	r3, r3, #3
 800f27a:	f043 0302 	orr.w	r3, r3, #2
 800f27e:	81a3      	strh	r3, [r4, #12]
 800f280:	e7e3      	b.n	800f24a <__smakebuf_r+0xc>
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	6020      	str	r0, [r4, #0]
 800f286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	9b00      	ldr	r3, [sp, #0]
 800f28e:	6163      	str	r3, [r4, #20]
 800f290:	9b01      	ldr	r3, [sp, #4]
 800f292:	6120      	str	r0, [r4, #16]
 800f294:	b15b      	cbz	r3, 800f2ae <__smakebuf_r+0x70>
 800f296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f29a:	4630      	mov	r0, r6
 800f29c:	f000 f84e 	bl	800f33c <_isatty_r>
 800f2a0:	b128      	cbz	r0, 800f2ae <__smakebuf_r+0x70>
 800f2a2:	89a3      	ldrh	r3, [r4, #12]
 800f2a4:	f023 0303 	bic.w	r3, r3, #3
 800f2a8:	f043 0301 	orr.w	r3, r3, #1
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	431d      	orrs	r5, r3
 800f2b2:	81a5      	strh	r5, [r4, #12]
 800f2b4:	e7cf      	b.n	800f256 <__smakebuf_r+0x18>

0800f2b6 <_raise_r>:
 800f2b6:	291f      	cmp	r1, #31
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	460d      	mov	r5, r1
 800f2be:	d904      	bls.n	800f2ca <_raise_r+0x14>
 800f2c0:	2316      	movs	r3, #22
 800f2c2:	6003      	str	r3, [r0, #0]
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f2cc:	b112      	cbz	r2, 800f2d4 <_raise_r+0x1e>
 800f2ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2d2:	b94b      	cbnz	r3, 800f2e8 <_raise_r+0x32>
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	f000 f853 	bl	800f380 <_getpid_r>
 800f2da:	462a      	mov	r2, r5
 800f2dc:	4601      	mov	r1, r0
 800f2de:	4620      	mov	r0, r4
 800f2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2e4:	f000 b83a 	b.w	800f35c <_kill_r>
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d00a      	beq.n	800f302 <_raise_r+0x4c>
 800f2ec:	1c59      	adds	r1, r3, #1
 800f2ee:	d103      	bne.n	800f2f8 <_raise_r+0x42>
 800f2f0:	2316      	movs	r3, #22
 800f2f2:	6003      	str	r3, [r0, #0]
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	e7e7      	b.n	800f2c8 <_raise_r+0x12>
 800f2f8:	2400      	movs	r4, #0
 800f2fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2fe:	4628      	mov	r0, r5
 800f300:	4798      	blx	r3
 800f302:	2000      	movs	r0, #0
 800f304:	e7e0      	b.n	800f2c8 <_raise_r+0x12>
	...

0800f308 <raise>:
 800f308:	4b02      	ldr	r3, [pc, #8]	; (800f314 <raise+0xc>)
 800f30a:	4601      	mov	r1, r0
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	f7ff bfd2 	b.w	800f2b6 <_raise_r>
 800f312:	bf00      	nop
 800f314:	20000084 	.word	0x20000084

0800f318 <_fstat_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4d07      	ldr	r5, [pc, #28]	; (800f338 <_fstat_r+0x20>)
 800f31c:	2300      	movs	r3, #0
 800f31e:	4604      	mov	r4, r0
 800f320:	4608      	mov	r0, r1
 800f322:	4611      	mov	r1, r2
 800f324:	602b      	str	r3, [r5, #0]
 800f326:	f7f1 fb12 	bl	800094e <_fstat>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d102      	bne.n	800f334 <_fstat_r+0x1c>
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	b103      	cbz	r3, 800f334 <_fstat_r+0x1c>
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	bd38      	pop	{r3, r4, r5, pc}
 800f336:	bf00      	nop
 800f338:	20008524 	.word	0x20008524

0800f33c <_isatty_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d06      	ldr	r5, [pc, #24]	; (800f358 <_isatty_r+0x1c>)
 800f340:	2300      	movs	r3, #0
 800f342:	4604      	mov	r4, r0
 800f344:	4608      	mov	r0, r1
 800f346:	602b      	str	r3, [r5, #0]
 800f348:	f7f1 fb11 	bl	800096e <_isatty>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d102      	bne.n	800f356 <_isatty_r+0x1a>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	b103      	cbz	r3, 800f356 <_isatty_r+0x1a>
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	20008524 	.word	0x20008524

0800f35c <_kill_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4d07      	ldr	r5, [pc, #28]	; (800f37c <_kill_r+0x20>)
 800f360:	2300      	movs	r3, #0
 800f362:	4604      	mov	r4, r0
 800f364:	4608      	mov	r0, r1
 800f366:	4611      	mov	r1, r2
 800f368:	602b      	str	r3, [r5, #0]
 800f36a:	f7f1 fa8f 	bl	800088c <_kill>
 800f36e:	1c43      	adds	r3, r0, #1
 800f370:	d102      	bne.n	800f378 <_kill_r+0x1c>
 800f372:	682b      	ldr	r3, [r5, #0]
 800f374:	b103      	cbz	r3, 800f378 <_kill_r+0x1c>
 800f376:	6023      	str	r3, [r4, #0]
 800f378:	bd38      	pop	{r3, r4, r5, pc}
 800f37a:	bf00      	nop
 800f37c:	20008524 	.word	0x20008524

0800f380 <_getpid_r>:
 800f380:	f7f1 ba7c 	b.w	800087c <_getpid>

0800f384 <_init>:
 800f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f386:	bf00      	nop
 800f388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f38a:	bc08      	pop	{r3}
 800f38c:	469e      	mov	lr, r3
 800f38e:	4770      	bx	lr

0800f390 <_fini>:
 800f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f392:	bf00      	nop
 800f394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f396:	bc08      	pop	{r3}
 800f398:	469e      	mov	lr, r3
 800f39a:	4770      	bx	lr
