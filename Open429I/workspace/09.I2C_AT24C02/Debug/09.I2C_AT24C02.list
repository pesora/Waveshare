
09.I2C_AT24C02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003984  08003984  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800398c  0800398c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000040c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b62e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ad5  00000000  00000000  0002b709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009d8  00000000  00000000  0002d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007a0  00000000  00000000  0002dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c9f  00000000  00000000  0002e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d4f0  00000000  00000000  00051ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5e34  00000000  00000000  0005f4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e80  00000000  00000000  0013531c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800388c 	.word	0x0800388c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	0800388c 	.word	0x0800388c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __GPIOH_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_GPIO_Init+0x68>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <MX_GPIO_Init+0x68>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_GPIO_Init+0x68>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_GPIO_Init+0x68>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <MX_GPIO_Init+0x68>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_GPIO_Init+0x68>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_GPIO_Init+0x68>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <MX_GPIO_Init+0x68>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_GPIO_Init+0x68>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800

08000554 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_I2C1_Init+0x48>)
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <MX_I2C1_Init+0x4c>)
 800055c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_I2C1_Init+0x48>)
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <MX_I2C1_Init+0x50>)
 8000562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_I2C1_Init+0x48>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_I2C1_Init+0x48>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_I2C1_Init+0x48>)
 8000572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_I2C1_Init+0x48>)
 800057a:	2200      	movs	r2, #0
 800057c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_I2C1_Init+0x48>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_I2C1_Init+0x48>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <MX_I2C1_Init+0x48>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <MX_I2C1_Init+0x48>)
 8000592:	f000 fd77 	bl	8001084 <HAL_I2C_Init>

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000084 	.word	0x20000084
 80005a0:	40005400 	.word	0x40005400
 80005a4:	000186a0 	.word	0x000186a0

080005a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_I2C_MspInit+0x58>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d11d      	bne.n	80005f6 <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ba:	23c0      	movs	r3, #192	; 0xc0
 80005bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005be:	2312      	movs	r3, #18
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ca:	2304      	movs	r3, #4
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <HAL_I2C_MspInit+0x5c>)
 80005d6:	f000 fba9 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __I2C1_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_I2C_MspInit+0x60>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <HAL_I2C_MspInit+0x60>)
 80005e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_I2C_MspInit+0x60>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40005400 	.word	0x40005400
 8000604:	40020400 	.word	0x40020400
 8000608:	40023800 	.word	0x40023800

0800060c <main>:
}
	
/* USER CODE END 0 */

int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fa17 	bl	8000a44 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f85d 	bl	80006d4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f7ff ff65 	bl	80004e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800061e:	f7ff ff99 	bl	8000554 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000622:	f000 f98f 	bl	8000944 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
	printf("\r\n***************I2C Example*******************************\r\n");
 8000626:	4823      	ldr	r0, [pc, #140]	; (80006b4 <main+0xa8>)
 8000628:	f002 fd82 	bl	8003130 <puts>
	for(i=0; i<256; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	80fb      	strh	r3, [r7, #6]
 8000630:	e007      	b.n	8000642 <main+0x36>
		WriteBuffer[i]=i;	 /* WriteBuffer init */
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	b2d1      	uxtb	r1, r2
 8000638:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <main+0xac>)
 800063a:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<256; i++)
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	3301      	adds	r3, #1
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2bff      	cmp	r3, #255	; 0xff
 8000646:	d9f4      	bls.n	8000632 <main+0x26>
	/* wrinte date to EEPROM */
	if(HAL_I2C_Mem_Write(&hi2c1, ADDR_24LCxx_Write, 0, I2C_MEMADD_SIZE_8BIT,WriteBuffer,sizeof(WriteBuffer), 0x10) == HAL_OK)
 8000648:	2310      	movs	r3, #16
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0xac>)
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	2200      	movs	r2, #0
 800065a:	21a0      	movs	r1, #160	; 0xa0
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0xb0>)
 800065e:	f000 fe55 	bl	800130c <HAL_I2C_Mem_Write>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d103      	bne.n	8000670 <main+0x64>
		printf("\r\n EEPROM 24C02 Write Test OK \r\n");
 8000668:	4815      	ldr	r0, [pc, #84]	; (80006c0 <main+0xb4>)
 800066a:	f002 fd61 	bl	8003130 <puts>
 800066e:	e002      	b.n	8000676 <main+0x6a>
	else
		printf("\r\n EEPROM 24C02 Write Test False \r\n");
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <main+0xb8>)
 8000672:	f002 fd5d 	bl	8003130 <puts>
	
	/* read date from EEPROM */
	HAL_I2C_Mem_Read(&hi2c1, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(ReadBuffer), 0x10);
 8000676:	2310      	movs	r3, #16
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <main+0xbc>)
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	2200      	movs	r2, #0
 8000688:	21a1      	movs	r1, #161	; 0xa1
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <main+0xb0>)
 800068c:	f000 ff38 	bl	8001500 <HAL_I2C_Mem_Read>
	
	if(memcmp(WriteBuffer,ReadBuffer,sizeof(WriteBuffer)) == 0 ) /* check date */
 8000690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <main+0xbc>)
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0xac>)
 8000698:	f002 fe2a 	bl	80032f0 <memcmp>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d103      	bne.n	80006aa <main+0x9e>
		printf("\r\n EEPROM 24C02 Read Test OK\r\n");
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <main+0xc0>)
 80006a4:	f002 fd44 	bl	8003130 <puts>
 80006a8:	e002      	b.n	80006b0 <main+0xa4>
	else
		printf("\r\n EEPROM 24C02 Read Test False\r\n");
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <main+0xc4>)
 80006ac:	f002 fd40 	bl	8003130 <puts>
	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0xa4>
 80006b2:	bf00      	nop
 80006b4:	080038a4 	.word	0x080038a4
 80006b8:	200000d8 	.word	0x200000d8
 80006bc:	20000084 	.word	0x20000084
 80006c0:	080038e4 	.word	0x080038e4
 80006c4:	08003904 	.word	0x08003904
 80006c8:	200001d8 	.word	0x200001d8
 80006cc:	08003928 	.word	0x08003928
 80006d0:	08003948 	.word	0x08003948

080006d4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <SystemClock_Config+0xc0>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <SystemClock_Config+0xc0>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <SystemClock_Config+0xc0>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SystemClock_Config+0xc4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemClock_Config+0xc4>)
 8000700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <SystemClock_Config+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000726:	2305      	movs	r3, #5
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800072a:	23d2      	movs	r3, #210	; 0xd2
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fcc6 	bl	80020cc <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 8000740:	230d      	movs	r3, #13
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2105      	movs	r1, #5
 800075e:	4618      	mov	r0, r3
 8000760:	f001 ff2c 	bl	80025bc <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000764:	f002 f8d6 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8000768:	4603      	mov	r3, r0
 800076a:	4a0c      	ldr	r2, [pc, #48]	; (800079c <SystemClock_Config+0xc8>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	099b      	lsrs	r3, r3, #6
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fab1 	bl	8000cda <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000778:	2004      	movs	r0, #4
 800077a:	f000 fabb 	bl	8000cf4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	f000 fa8c 	bl	8000ca2 <HAL_NVIC_SetPriority>
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000
 800079c:	10624dd3 	.word	0x10624dd3

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f954 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000856:	f3af 8000 	nop.w
 800085a:	4601      	mov	r1, r0
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
  }

  return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e009      	b.n	80008a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <_write+0x12>
  }
  return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_close>:

int _close(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008de:	605a      	str	r2, [r3, #4]
  return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_isatty>:

int _isatty(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART1_UART_Init+0x40>)
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <MX_USART1_UART_Init+0x44>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_USART1_UART_Init+0x40>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART1_UART_Init+0x40>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART1_UART_Init+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART1_UART_Init+0x40>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART1_UART_Init+0x40>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_USART1_UART_Init+0x40>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <MX_USART1_UART_Init+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 800097a:	4802      	ldr	r0, [pc, #8]	; (8000984 <MX_USART1_UART_Init+0x40>)
 800097c:	f001 fffe 	bl	800297c <HAL_UART_Init>

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200002d8 	.word	0x200002d8
 8000988:	40011000 	.word	0x40011000

0800098c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_UART_MspInit+0x58>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d11e      	bne.n	80009dc <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __USART1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0x5c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_UART_MspInit+0x5c>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_MspInit+0x5c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009cc:	2307      	movs	r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_UART_MspInit+0x60>)
 80009d8:	f000 f9a8 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40011000 	.word	0x40011000
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f4:	f7ff ff94 	bl	8000920 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	; (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	; (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 fcc5 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fdf3 	bl	800060c <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a34:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 8000a38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a3c:	20000474 	.word	0x20000474

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f90d 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe92 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f917 	bl	8000cda <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f8ed 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000320 	.word	0x20000320

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000320 	.word	0x20000320

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff47 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff5c 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffb0 	bl	8000c48 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d106      	bne.n	8000d10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d0e:	e005      	b.n	8000d1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d16:	f023 0304 	bic.w	r3, r3, #4
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e177      	b.n	8001038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8166 	bne.w	8001032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80c0 	beq.w	8001032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b66      	ldr	r3, [pc, #408]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a65      	ldr	r2, [pc, #404]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a61      	ldr	r2, [pc, #388]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a58      	ldr	r2, [pc, #352]	; (8001058 <HAL_GPIO_Init+0x32c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d037      	beq.n	8000f6a <HAL_GPIO_Init+0x23e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <HAL_GPIO_Init+0x330>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d031      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <HAL_GPIO_Init+0x236>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a55      	ldr	r2, [pc, #340]	; (8001064 <HAL_GPIO_Init+0x338>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x232>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a54      	ldr	r2, [pc, #336]	; (8001068 <HAL_GPIO_Init+0x33c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x22e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a53      	ldr	r2, [pc, #332]	; (800106c <HAL_GPIO_Init+0x340>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x22a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a52      	ldr	r2, [pc, #328]	; (8001070 <HAL_GPIO_Init+0x344>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <HAL_GPIO_Init+0x348>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x222>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_GPIO_Init+0x34c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x21e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_GPIO_Init+0x350>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000f42:	2309      	movs	r3, #9
 8000f44:	e012      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f46:	230a      	movs	r3, #10
 8000f48:	e010      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	e00e      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fae:	4a34      	ldr	r2, [pc, #208]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd8:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_GPIO_Init+0x354>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_GPIO_Init+0x354>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_GPIO_Init+0x354>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f ae84 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40013800 	.word	0x40013800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40021400 	.word	0x40021400
 8001070:	40021800 	.word	0x40021800
 8001074:	40021c00 	.word	0x40021c00
 8001078:	40022000 	.word	0x40022000
 800107c:	40022400 	.word	0x40022400
 8001080:	40013c00 	.word	0x40013c00

08001084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e12b      	b.n	80012ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fa7c 	bl	80005a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010e8:	f001 fc20 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 80010ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a81      	ldr	r2, [pc, #516]	; (80012f8 <HAL_I2C_Init+0x274>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d807      	bhi.n	8001108 <HAL_I2C_Init+0x84>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a80      	ldr	r2, [pc, #512]	; (80012fc <HAL_I2C_Init+0x278>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	bf94      	ite	ls
 8001100:	2301      	movls	r3, #1
 8001102:	2300      	movhi	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	e006      	b.n	8001116 <HAL_I2C_Init+0x92>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4a7d      	ldr	r2, [pc, #500]	; (8001300 <HAL_I2C_Init+0x27c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	bf94      	ite	ls
 8001110:	2301      	movls	r3, #1
 8001112:	2300      	movhi	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0e7      	b.n	80012ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4a78      	ldr	r2, [pc, #480]	; (8001304 <HAL_I2C_Init+0x280>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	430a      	orrs	r2, r1
 800113c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a6a      	ldr	r2, [pc, #424]	; (80012f8 <HAL_I2C_Init+0x274>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d802      	bhi.n	8001158 <HAL_I2C_Init+0xd4>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	e009      	b.n	800116c <HAL_I2C_Init+0xe8>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	4a69      	ldr	r2, [pc, #420]	; (8001308 <HAL_I2C_Init+0x284>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	099b      	lsrs	r3, r3, #6
 800116a:	3301      	adds	r3, #1
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	430b      	orrs	r3, r1
 8001172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800117e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	495c      	ldr	r1, [pc, #368]	; (80012f8 <HAL_I2C_Init+0x274>)
 8001188:	428b      	cmp	r3, r1
 800118a:	d819      	bhi.n	80011c0 <HAL_I2C_Init+0x13c>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e59      	subs	r1, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fbb1 f3f3 	udiv	r3, r1, r3
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011a0:	400b      	ands	r3, r1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00a      	beq.n	80011bc <HAL_I2C_Init+0x138>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1e59      	subs	r1, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ba:	e051      	b.n	8001260 <HAL_I2C_Init+0x1dc>
 80011bc:	2304      	movs	r3, #4
 80011be:	e04f      	b.n	8001260 <HAL_I2C_Init+0x1dc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d111      	bne.n	80011ec <HAL_I2C_Init+0x168>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	1e58      	subs	r0, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	440b      	add	r3, r1
 80011d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	e012      	b.n	8001212 <HAL_I2C_Init+0x18e>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1e58      	subs	r0, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	0099      	lsls	r1, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001202:	3301      	adds	r3, #1
 8001204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_I2C_Init+0x196>
 8001216:	2301      	movs	r3, #1
 8001218:	e022      	b.n	8001260 <HAL_I2C_Init+0x1dc>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10e      	bne.n	8001240 <HAL_I2C_Init+0x1bc>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1e58      	subs	r0, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6859      	ldr	r1, [r3, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	440b      	add	r3, r1
 8001230:	fbb0 f3f3 	udiv	r3, r0, r3
 8001234:	3301      	adds	r3, #1
 8001236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123e:	e00f      	b.n	8001260 <HAL_I2C_Init+0x1dc>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1e58      	subs	r0, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	0099      	lsls	r1, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	fbb0 f3f3 	udiv	r3, r0, r3
 8001256:	3301      	adds	r3, #1
 8001258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	6809      	ldr	r1, [r1, #0]
 8001264:	4313      	orrs	r3, r2
 8001266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69da      	ldr	r2, [r3, #28]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800128e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6911      	ldr	r1, [r2, #16]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68d2      	ldr	r2, [r2, #12]
 800129a:	4311      	orrs	r1, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2220      	movs	r2, #32
 80012da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	000186a0 	.word	0x000186a0
 80012fc:	001e847f 	.word	0x001e847f
 8001300:	003d08ff 	.word	0x003d08ff
 8001304:	431bde83 	.word	0x431bde83
 8001308:	10624dd3 	.word	0x10624dd3

0800130c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af02      	add	r7, sp, #8
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4603      	mov	r3, r0
 800131c:	817b      	strh	r3, [r7, #10]
 800131e:	460b      	mov	r3, r1
 8001320:	813b      	strh	r3, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001326:	f7ff fbf3 	bl	8000b10 <HAL_GetTick>
 800132a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b20      	cmp	r3, #32
 8001336:	f040 80d9 	bne.w	80014ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2319      	movs	r3, #25
 8001340:	2201      	movs	r2, #1
 8001342:	496d      	ldr	r1, [pc, #436]	; (80014f8 <HAL_I2C_Mem_Write+0x1ec>)
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 fc8b 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001350:	2302      	movs	r3, #2
 8001352:	e0cc      	b.n	80014ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_I2C_Mem_Write+0x56>
 800135e:	2302      	movs	r3, #2
 8001360:	e0c5      	b.n	80014ee <HAL_I2C_Mem_Write+0x1e2>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	d007      	beq.n	8001388 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2221      	movs	r2, #33	; 0x21
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_I2C_Mem_Write+0x1f0>)
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ca:	88f8      	ldrh	r0, [r7, #6]
 80013cc:	893a      	ldrh	r2, [r7, #8]
 80013ce:	8979      	ldrh	r1, [r7, #10]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4603      	mov	r3, r0
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fac2 	bl	8001964 <I2C_RequestMemoryWrite>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d052      	beq.n	800148c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e081      	b.n	80014ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 fd50 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d107      	bne.n	8001412 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06b      	b.n	80014ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143c:	b29b      	uxth	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b04      	cmp	r3, #4
 8001452:	d11b      	bne.n	800148c <HAL_I2C_Mem_Write+0x180>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001458:	2b00      	cmp	r3, #0
 800145a:	d017      	beq.n	800148c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1aa      	bne.n	80013ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 fd43 	bl	8001f24 <I2C_WaitOnBTFFlagUntilTimeout>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00d      	beq.n	80014c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d107      	bne.n	80014bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e016      	b.n	80014ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2220      	movs	r2, #32
 80014d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e000      	b.n	80014ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80014ec:	2302      	movs	r3, #2
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	00100002 	.word	0x00100002
 80014fc:	ffff0000 	.word	0xffff0000

08001500 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af02      	add	r7, sp, #8
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4603      	mov	r3, r0
 8001510:	817b      	strh	r3, [r7, #10]
 8001512:	460b      	mov	r3, r1
 8001514:	813b      	strh	r3, [r7, #8]
 8001516:	4613      	mov	r3, r2
 8001518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800151a:	f7ff faf9 	bl	8000b10 <HAL_GetTick>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b20      	cmp	r3, #32
 800152a:	f040 8214 	bne.w	8001956 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2319      	movs	r3, #25
 8001534:	2201      	movs	r2, #1
 8001536:	497b      	ldr	r1, [pc, #492]	; (8001724 <HAL_I2C_Mem_Read+0x224>)
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fb91 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001544:	2302      	movs	r3, #2
 8001546:	e207      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_I2C_Mem_Read+0x56>
 8001552:	2302      	movs	r3, #2
 8001554:	e200      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d007      	beq.n	800157c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2222      	movs	r2, #34	; 0x22
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a5b      	ldr	r2, [pc, #364]	; (8001728 <HAL_I2C_Mem_Read+0x228>)
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	893a      	ldrh	r2, [r7, #8]
 80015c2:	8979      	ldrh	r1, [r7, #10]
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4603      	mov	r3, r0
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fa5e 	bl	8001a90 <I2C_RequestMemoryRead>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1bc      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e190      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001612:	2b01      	cmp	r3, #1
 8001614:	d11b      	bne.n	800164e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e170      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001652:	2b02      	cmp	r3, #2
 8001654:	d11b      	bne.n	800168e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	e150      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016a4:	e144      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	f200 80f1 	bhi.w	8001892 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d123      	bne.n	8001700 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 fc79 	bl	8001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e145      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016fe:	e117      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	2b02      	cmp	r3, #2
 8001706:	d14e      	bne.n	80017a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170e:	2200      	movs	r2, #0
 8001710:	4906      	ldr	r1, [pc, #24]	; (800172c <HAL_I2C_Mem_Read+0x22c>)
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 faa4 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e11a      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
 8001722:	bf00      	nop
 8001724:	00100002 	.word	0x00100002
 8001728:	ffff0000 	.word	0xffff0000
 800172c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017a4:	e0c4      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ac:	2200      	movs	r2, #0
 80017ae:	496c      	ldr	r1, [pc, #432]	; (8001960 <HAL_I2C_Mem_Read+0x460>)
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 fa55 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cb      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	2200      	movs	r2, #0
 800180a:	4955      	ldr	r1, [pc, #340]	; (8001960 <HAL_I2C_Mem_Read+0x460>)
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fa27 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e09d      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001890:	e04e      	b.n	8001930 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fb8c 	bl	8001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e058      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d124      	bne.n	8001930 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f aeb6 	bne.w	80016a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001956:	2302      	movs	r3, #2
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00010004 	.word	0x00010004

08001964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	817b      	strh	r3, [r7, #10]
 8001976:	460b      	mov	r3, r1
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	4613      	mov	r3, r2
 800197c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2200      	movs	r2, #0
 8001996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f960 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b4:	d103      	bne.n	80019be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e05f      	b.n	8001a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	6a3a      	ldr	r2, [r7, #32]
 80019d6:	492d      	ldr	r1, [pc, #180]	; (8001a8c <I2C_RequestMemoryWrite+0x128>)
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f9bb 	bl	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e04c      	b.n	8001a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fa46 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d107      	bne.n	8001a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e02b      	b.n	8001a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a30:	893b      	ldrh	r3, [r7, #8]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	e021      	b.n	8001a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a3c:	893b      	ldrh	r3, [r7, #8]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fa20 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d107      	bne.n	8001a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e005      	b.n	8001a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	00010002 	.word	0x00010002

08001a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	817b      	strh	r3, [r7, #10]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	813b      	strh	r3, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f8c2 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00d      	beq.n	8001afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af0:	d103      	bne.n	8001afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0aa      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	4952      	ldr	r1, [pc, #328]	; (8001c5c <I2C_RequestMemoryRead+0x1cc>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f91d 	bl	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e097      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	6a39      	ldr	r1, [r7, #32]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f9a8 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d107      	bne.n	8001b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e076      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b6c:	893b      	ldrh	r3, [r7, #8]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	e021      	b.n	8001bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b78:	893b      	ldrh	r3, [r7, #8]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	6a39      	ldr	r1, [r7, #32]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f982 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00d      	beq.n	8001bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d107      	bne.n	8001bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e050      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb2:	893b      	ldrh	r3, [r7, #8]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbe:	6a39      	ldr	r1, [r7, #32]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f967 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e035      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f82b 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1e:	d103      	bne.n	8001c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e013      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <I2C_RequestMemoryRead+0x1cc>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f886 	bl	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	00010002 	.word	0x00010002

08001c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c70:	e048      	b.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d044      	beq.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7fe ff49 	bl	8000b10 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d139      	bne.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10d      	bne.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	e00c      	b.n	8001cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d116      	bne.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e023      	b.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10d      	bne.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	e00c      	b.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	43da      	mvns	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4013      	ands	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d093      	beq.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d62:	e071      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d72:	d123      	bne.n	8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e067      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc2:	d041      	beq.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc4:	f7fe fea4 	bl	8000b10 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d302      	bcc.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d136      	bne.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10c      	bne.n	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4013      	ands	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	e00b      	b.n	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e021      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10c      	bne.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e00b      	b.n	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4013      	ands	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f af6d 	bne.w	8001d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	e034      	b.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f8e3 	bl	800206e <I2C_IsAcknowledgeFailed>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e034      	b.n	8001f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d028      	beq.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7fe fe29 	bl	8000b10 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11d      	bne.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d016      	beq.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e007      	b.n	8001f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b80      	cmp	r3, #128	; 0x80
 8001f18:	d1c3      	bne.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f30:	e034      	b.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f89b 	bl	800206e <I2C_IsAcknowledgeFailed>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e034      	b.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d028      	beq.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7fe fde1 	bl	8000b10 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d11d      	bne.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d016      	beq.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e007      	b.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d1c3      	bne.n	8001f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc0:	e049      	b.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d119      	bne.n	8002004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0210 	mvn.w	r2, #16
 8001fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e030      	b.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002004:	f7fe fd84 	bl	8000b10 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	d302      	bcc.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11d      	bne.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d016      	beq.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e007      	b.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d1ae      	bne.n	8001fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002084:	d11b      	bne.n	80020be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800208e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f043 0204 	orr.w	r2, r3, #4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e267      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d075      	beq.n	80021d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d00c      	beq.n	8002110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f6:	4b85      	ldr	r3, [pc, #532]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d112      	bne.n	8002128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b82      	ldr	r3, [pc, #520]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210e:	d10b      	bne.n	8002128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4b7e      	ldr	r3, [pc, #504]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05b      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d157      	bne.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e242      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d106      	bne.n	8002140 <HAL_RCC_OscConfig+0x74>
 8002132:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a75      	ldr	r2, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xb0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6f      	ldr	r2, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6c      	ldr	r2, [pc, #432]	; (800230c <HAL_RCC_OscConfig+0x240>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xb0>
 8002164:	4b69      	ldr	r3, [pc, #420]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a68      	ldr	r2, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x240>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b66      	ldr	r3, [pc, #408]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a65      	ldr	r2, [pc, #404]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fcc4 	bl	8000b10 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fcc0 	bl	8000b10 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e207      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b5b      	ldr	r3, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xc0>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fcb0 	bl	8000b10 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fcac 	bl	8000b10 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1f3      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b44      	ldr	r3, [pc, #272]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x152>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1c7      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4937      	ldr	r1, [pc, #220]	; (800230c <HAL_RCC_OscConfig+0x240>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x244>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fc65 	bl	8000b10 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fc61 	bl	8000b10 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a8      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_OscConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4925      	ldr	r1, [pc, #148]	; (800230c <HAL_RCC_OscConfig+0x240>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x244>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fc44 	bl	8000b10 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228c:	f7fe fc40 	bl	8000b10 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e187      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d036      	beq.n	8002324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_RCC_OscConfig+0x248>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fc24 	bl	8000b10 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe fc20 	bl	8000b10 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e167      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x240>)
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x200>
 80022ea:	e01b      	b.n	8002324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_OscConfig+0x248>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fc0d 	bl	8000b10 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	e00e      	b.n	8002318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fa:	f7fe fc09 	bl	8000b10 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d907      	bls.n	8002318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e150      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	42470000 	.word	0x42470000
 8002314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x470>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ea      	bne.n	80022fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8097 	beq.w	8002460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	4b7d      	ldr	r3, [pc, #500]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_RCC_OscConfig+0x470>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b7a      	ldr	r3, [pc, #488]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b77      	ldr	r3, [pc, #476]	; (8002540 <HAL_RCC_OscConfig+0x474>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b74      	ldr	r3, [pc, #464]	; (8002540 <HAL_RCC_OscConfig+0x474>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a73      	ldr	r2, [pc, #460]	; (8002540 <HAL_RCC_OscConfig+0x474>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fbc9 	bl	8000b10 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fbc5 	bl	8000b10 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e10c      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x474>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2ea>
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a63      	ldr	r2, [pc, #396]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
 80023b4:	e01c      	b.n	80023f0 <HAL_RCC_OscConfig+0x324>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x30c>
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a5e      	ldr	r2, [pc, #376]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a5b      	ldr	r2, [pc, #364]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0x324>
 80023d8:	4b58      	ldr	r3, [pc, #352]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a57      	ldr	r2, [pc, #348]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a54      	ldr	r2, [pc, #336]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d015      	beq.n	8002424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7fe fb8a 	bl	8000b10 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7fe fb86 	bl	8000b10 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0cb      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002416:	4b49      	ldr	r3, [pc, #292]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0ee      	beq.n	8002400 <HAL_RCC_OscConfig+0x334>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7fe fb74 	bl	8000b10 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7fe fb70 	bl	8000b10 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0b5      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002442:	4b3e      	ldr	r3, [pc, #248]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ee      	bne.n	800242c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	4a38      	ldr	r2, [pc, #224]	; (800253c <HAL_RCC_OscConfig+0x470>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a1 	beq.w	80025ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800246a:	4b34      	ldr	r3, [pc, #208]	; (800253c <HAL_RCC_OscConfig+0x470>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b08      	cmp	r3, #8
 8002474:	d05c      	beq.n	8002530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d141      	bne.n	8002502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCC_OscConfig+0x478>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fb44 	bl	8000b10 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fb40 	bl	8000b10 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e087      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	491b      	ldr	r1, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x478>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fb19 	bl	8000b10 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe fb15 	bl	8000b10 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e05c      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_OscConfig+0x470>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x416>
 8002500:	e054      	b.n	80025ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_RCC_OscConfig+0x478>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fb02 	bl	8000b10 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fafe 	bl	8000b10 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e045      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_OscConfig+0x470>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
 800252e:	e03d      	b.n	80025ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e038      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	40007000 	.word	0x40007000
 8002544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4ec>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d028      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d121      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11a      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800257e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0cc      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d90c      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b65      	ldr	r3, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800261a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d044      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d119      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d003      	beq.n	800267a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002676:	2b03      	cmp	r3, #3
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e067      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4934      	ldr	r1, [pc, #208]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7fe fa30 	bl	8000b10 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7fe fa2c 	bl	8000b10 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e04f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d20c      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f990 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00
 8002778:	40023800 	.word	0x40023800
 800277c:	0800396c 	.word	0x0800396c
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b090      	sub	sp, #64	; 0x40
 800278e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
 8002794:	2300      	movs	r3, #0
 8002796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002798:	2300      	movs	r3, #0
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f200 80a1 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ba:	e09b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_GetSysClockFreq+0x184>)
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027c0:	e09b      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_GetSysClockFreq+0x188>)
 80027c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027c6:	e098      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c8:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d2:	4b4d      	ldr	r3, [pc, #308]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d028      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	2200      	movs	r2, #0
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	627a      	str	r2, [r7, #36]	; 0x24
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027f0:	2100      	movs	r1, #0
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f4:	fb03 f201 	mul.w	r2, r3, r1
 80027f8:	2300      	movs	r3, #0
 80027fa:	fb00 f303 	mul.w	r3, r0, r3
 80027fe:	4413      	add	r3, r2
 8002800:	4a43      	ldr	r2, [pc, #268]	; (8002910 <HAL_RCC_GetSysClockFreq+0x188>)
 8002802:	fba0 1202 	umull	r1, r2, r0, r2
 8002806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002808:	460a      	mov	r2, r1
 800280a:	62ba      	str	r2, [r7, #40]	; 0x28
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	4413      	add	r3, r2
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	2200      	movs	r2, #0
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	61fa      	str	r2, [r7, #28]
 800281a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002822:	f7fd fce3 	bl	80001ec <__aeabi_uldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4613      	mov	r3, r2
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282e:	e053      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	617a      	str	r2, [r7, #20]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002842:	f04f 0b00 	mov.w	fp, #0
 8002846:	4652      	mov	r2, sl
 8002848:	465b      	mov	r3, fp
 800284a:	f04f 0000 	mov.w	r0, #0
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	0159      	lsls	r1, r3, #5
 8002854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002858:	0150      	lsls	r0, r2, #5
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	ebb2 080a 	subs.w	r8, r2, sl
 8002862:	eb63 090b 	sbc.w	r9, r3, fp
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002872:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002876:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800287a:	ebb2 0408 	subs.w	r4, r2, r8
 800287e:	eb63 0509 	sbc.w	r5, r3, r9
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	00eb      	lsls	r3, r5, #3
 800288c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002890:	00e2      	lsls	r2, r4, #3
 8002892:	4614      	mov	r4, r2
 8002894:	461d      	mov	r5, r3
 8002896:	eb14 030a 	adds.w	r3, r4, sl
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	eb45 030b 	adc.w	r3, r5, fp
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ae:	4629      	mov	r1, r5
 80028b0:	028b      	lsls	r3, r1, #10
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b8:	4621      	mov	r1, r4
 80028ba:	028a      	lsls	r2, r1, #10
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	2200      	movs	r2, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	60fa      	str	r2, [r7, #12]
 80028c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028cc:	f7fd fc8e 	bl	80001ec <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_GetSysClockFreq+0x180>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetSysClockFreq+0x184>)
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3740      	adds	r7, #64	; 0x40
 8002900:	46bd      	mov	sp, r7
 8002902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	00f42400 	.word	0x00f42400
 8002910:	017d7840 	.word	0x017d7840

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a9b      	lsrs	r3, r3, #10
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	0800397c 	.word	0x0800397c

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffdc 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0b5b      	lsrs	r3, r3, #13
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	0800397c 	.word	0x0800397c

0800297c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e042      	b.n	8002a14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd fff2 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f82b 	bl	8002a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a20:	b0c0      	sub	sp, #256	; 0x100
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	68d9      	ldr	r1, [r3, #12]
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	ea40 0301 	orr.w	r3, r0, r1
 8002a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a74:	f021 010c 	bic.w	r1, r1, #12
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a82:	430b      	orrs	r3, r1
 8002a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	6999      	ldr	r1, [r3, #24]
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	ea40 0301 	orr.w	r3, r0, r1
 8002aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b8f      	ldr	r3, [pc, #572]	; (8002ce8 <UART_SetConfig+0x2cc>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d005      	beq.n	8002abc <UART_SetConfig+0xa0>
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b8d      	ldr	r3, [pc, #564]	; (8002cec <UART_SetConfig+0x2d0>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d104      	bne.n	8002ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002abc:	f7ff ff4a 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8002ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ac4:	e003      	b.n	8002ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ac6:	f7ff ff31 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8002aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad8:	f040 810c 	bne.w	8002cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	1891      	adds	r1, r2, r2
 8002af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002af6:	415b      	adcs	r3, r3
 8002af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002afe:	4621      	mov	r1, r4
 8002b00:	eb12 0801 	adds.w	r8, r2, r1
 8002b04:	4629      	mov	r1, r5
 8002b06:	eb43 0901 	adc.w	r9, r3, r1
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1e:	4690      	mov	r8, r2
 8002b20:	4699      	mov	r9, r3
 8002b22:	4623      	mov	r3, r4
 8002b24:	eb18 0303 	adds.w	r3, r8, r3
 8002b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	eb49 0303 	adc.w	r3, r9, r3
 8002b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	18db      	adds	r3, r3, r3
 8002b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002b50:	4613      	mov	r3, r2
 8002b52:	eb42 0303 	adc.w	r3, r2, r3
 8002b56:	657b      	str	r3, [r7, #84]	; 0x54
 8002b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b60:	f7fd fb44 	bl	80001ec <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <UART_SetConfig+0x2d4>)
 8002b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	011c      	lsls	r4, r3, #4
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b94:	4641      	mov	r1, r8
 8002b96:	eb12 0a01 	adds.w	sl, r2, r1
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb4:	4692      	mov	sl, r2
 8002bb6:	469b      	mov	fp, r3
 8002bb8:	4643      	mov	r3, r8
 8002bba:	eb1a 0303 	adds.w	r3, sl, r3
 8002bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002be0:	460b      	mov	r3, r1
 8002be2:	18db      	adds	r3, r3, r3
 8002be4:	643b      	str	r3, [r7, #64]	; 0x40
 8002be6:	4613      	mov	r3, r2
 8002be8:	eb42 0303 	adc.w	r3, r2, r3
 8002bec:	647b      	str	r3, [r7, #68]	; 0x44
 8002bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bf6:	f7fd faf9 	bl	80001ec <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <UART_SetConfig+0x2d4>)
 8002c02:	fba3 2301 	umull	r2, r3, r3, r1
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2264      	movs	r2, #100	; 0x64
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	1acb      	subs	r3, r1, r3
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <UART_SetConfig+0x2d4>)
 8002c18:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c24:	441c      	add	r4, r3
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c40:	415b      	adcs	r3, r3
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c48:	4641      	mov	r1, r8
 8002c4a:	1851      	adds	r1, r2, r1
 8002c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c4e:	4649      	mov	r1, r9
 8002c50:	414b      	adcs	r3, r1
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c60:	4659      	mov	r1, fp
 8002c62:	00cb      	lsls	r3, r1, #3
 8002c64:	4651      	mov	r1, sl
 8002c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	00ca      	lsls	r2, r1, #3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	4642      	mov	r2, r8
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	460a      	mov	r2, r1
 8002c80:	eb42 0303 	adc.w	r3, r2, r3
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	18db      	adds	r3, r3, r3
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cb2:	f7fd fa9b 	bl	80001ec <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <UART_SetConfig+0x2d4>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <UART_SetConfig+0x2d4>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	f003 0207 	and.w	r2, r3, #7
 8002cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4422      	add	r2, r4
 8002ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce4:	e106      	b.n	8002ef4 <UART_SetConfig+0x4d8>
 8002ce6:	bf00      	nop
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d06:	4642      	mov	r2, r8
 8002d08:	464b      	mov	r3, r9
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	6239      	str	r1, [r7, #32]
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d16:	4641      	mov	r1, r8
 8002d18:	1854      	adds	r4, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb43 0501 	adc.w	r5, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	00eb      	lsls	r3, r5, #3
 8002d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2e:	00e2      	lsls	r2, r4, #3
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	18e3      	adds	r3, r4, r3
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	eb45 0303 	adc.w	r3, r5, r3
 8002d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d62:	4629      	mov	r1, r5
 8002d64:	008b      	lsls	r3, r1, #2
 8002d66:	4621      	mov	r1, r4
 8002d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	008a      	lsls	r2, r1, #2
 8002d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d74:	f7fd fa3a 	bl	80001ec <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4b60      	ldr	r3, [pc, #384]	; (8002f00 <UART_SetConfig+0x4e4>)
 8002d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	011c      	lsls	r4, r3, #4
 8002d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	61b9      	str	r1, [r7, #24]
 8002da0:	415b      	adcs	r3, r3
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da8:	4641      	mov	r1, r8
 8002daa:	1851      	adds	r1, r2, r1
 8002dac:	6139      	str	r1, [r7, #16]
 8002dae:	4649      	mov	r1, r9
 8002db0:	414b      	adcs	r3, r1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	00cb      	lsls	r3, r1, #3
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dca:	4651      	mov	r1, sl
 8002dcc:	00ca      	lsls	r2, r1, #3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ddc:	464b      	mov	r3, r9
 8002dde:	460a      	mov	r2, r1
 8002de0:	eb42 0303 	adc.w	r3, r2, r3
 8002de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e00:	4649      	mov	r1, r9
 8002e02:	008b      	lsls	r3, r1, #2
 8002e04:	4641      	mov	r1, r8
 8002e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	008a      	lsls	r2, r1, #2
 8002e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e12:	f7fd f9eb 	bl	80001ec <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <UART_SetConfig+0x4e4>)
 8002e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2264      	movs	r2, #100	; 0x64
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	3332      	adds	r3, #50	; 0x32
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <UART_SetConfig+0x4e4>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3c:	441c      	add	r4, r3
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	673b      	str	r3, [r7, #112]	; 0x70
 8002e46:	677a      	str	r2, [r7, #116]	; 0x74
 8002e48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6039      	str	r1, [r7, #0]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e8e:	464b      	mov	r3, r9
 8002e90:	460a      	mov	r2, r1
 8002e92:	eb42 0303 	adc.w	r3, r2, r3
 8002e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea2:	667a      	str	r2, [r7, #100]	; 0x64
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	008b      	lsls	r3, r1, #2
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eba:	4641      	mov	r1, r8
 8002ebc:	008a      	lsls	r2, r1, #2
 8002ebe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ec2:	f7fd f993 	bl	80001ec <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <UART_SetConfig+0x4e4>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <UART_SetConfig+0x4e4>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4422      	add	r2, r4
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002efa:	46bd      	mov	sp, r7
 8002efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f00:	51eb851f 	.word	0x51eb851f

08002f04 <std>:
 8002f04:	2300      	movs	r3, #0
 8002f06:	b510      	push	{r4, lr}
 8002f08:	4604      	mov	r4, r0
 8002f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f12:	6083      	str	r3, [r0, #8]
 8002f14:	8181      	strh	r1, [r0, #12]
 8002f16:	6643      	str	r3, [r0, #100]	; 0x64
 8002f18:	81c2      	strh	r2, [r0, #14]
 8002f1a:	6183      	str	r3, [r0, #24]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2208      	movs	r2, #8
 8002f20:	305c      	adds	r0, #92	; 0x5c
 8002f22:	f000 f9f5 	bl	8003310 <memset>
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <std+0x58>)
 8002f28:	6263      	str	r3, [r4, #36]	; 0x24
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <std+0x5c>)
 8002f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <std+0x60>)
 8002f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <std+0x64>)
 8002f34:	6323      	str	r3, [r4, #48]	; 0x30
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <std+0x68>)
 8002f38:	6224      	str	r4, [r4, #32]
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d006      	beq.n	8002f4c <std+0x48>
 8002f3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f42:	4294      	cmp	r4, r2
 8002f44:	d002      	beq.n	8002f4c <std+0x48>
 8002f46:	33d0      	adds	r3, #208	; 0xd0
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	d105      	bne.n	8002f58 <std+0x54>
 8002f4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f54:	f000 ba4e 	b.w	80033f4 <__retarget_lock_init_recursive>
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	bf00      	nop
 8002f5c:	08003141 	.word	0x08003141
 8002f60:	08003163 	.word	0x08003163
 8002f64:	0800319b 	.word	0x0800319b
 8002f68:	080031bf 	.word	0x080031bf
 8002f6c:	20000324 	.word	0x20000324

08002f70 <stdio_exit_handler>:
 8002f70:	4a02      	ldr	r2, [pc, #8]	; (8002f7c <stdio_exit_handler+0xc>)
 8002f72:	4903      	ldr	r1, [pc, #12]	; (8002f80 <stdio_exit_handler+0x10>)
 8002f74:	4803      	ldr	r0, [pc, #12]	; (8002f84 <stdio_exit_handler+0x14>)
 8002f76:	f000 b869 	b.w	800304c <_fwalk_sglue>
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	080036f9 	.word	0x080036f9
 8002f84:	20000018 	.word	0x20000018

08002f88 <cleanup_stdio>:
 8002f88:	6841      	ldr	r1, [r0, #4]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <cleanup_stdio+0x34>)
 8002f8c:	4299      	cmp	r1, r3
 8002f8e:	b510      	push	{r4, lr}
 8002f90:	4604      	mov	r4, r0
 8002f92:	d001      	beq.n	8002f98 <cleanup_stdio+0x10>
 8002f94:	f000 fbb0 	bl	80036f8 <_fflush_r>
 8002f98:	68a1      	ldr	r1, [r4, #8]
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <cleanup_stdio+0x38>)
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d002      	beq.n	8002fa6 <cleanup_stdio+0x1e>
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 fba9 	bl	80036f8 <_fflush_r>
 8002fa6:	68e1      	ldr	r1, [r4, #12]
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <cleanup_stdio+0x3c>)
 8002faa:	4299      	cmp	r1, r3
 8002fac:	d004      	beq.n	8002fb8 <cleanup_stdio+0x30>
 8002fae:	4620      	mov	r0, r4
 8002fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb4:	f000 bba0 	b.w	80036f8 <_fflush_r>
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000324 	.word	0x20000324
 8002fc0:	2000038c 	.word	0x2000038c
 8002fc4:	200003f4 	.word	0x200003f4

08002fc8 <global_stdio_init.part.0>:
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <global_stdio_init.part.0+0x30>)
 8002fcc:	4c0b      	ldr	r4, [pc, #44]	; (8002ffc <global_stdio_init.part.0+0x34>)
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <global_stdio_init.part.0+0x38>)
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	f7ff ff94 	bl	8002f04 <std>
 8002fdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2109      	movs	r1, #9
 8002fe4:	f7ff ff8e 	bl	8002f04 <std>
 8002fe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fec:	2202      	movs	r2, #2
 8002fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff2:	2112      	movs	r1, #18
 8002ff4:	f7ff bf86 	b.w	8002f04 <std>
 8002ff8:	2000045c 	.word	0x2000045c
 8002ffc:	20000324 	.word	0x20000324
 8003000:	08002f71 	.word	0x08002f71

08003004 <__sfp_lock_acquire>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__sfp_lock_acquire+0x8>)
 8003006:	f000 b9f6 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 800300a:	bf00      	nop
 800300c:	20000465 	.word	0x20000465

08003010 <__sfp_lock_release>:
 8003010:	4801      	ldr	r0, [pc, #4]	; (8003018 <__sfp_lock_release+0x8>)
 8003012:	f000 b9f1 	b.w	80033f8 <__retarget_lock_release_recursive>
 8003016:	bf00      	nop
 8003018:	20000465 	.word	0x20000465

0800301c <__sinit>:
 800301c:	b510      	push	{r4, lr}
 800301e:	4604      	mov	r4, r0
 8003020:	f7ff fff0 	bl	8003004 <__sfp_lock_acquire>
 8003024:	6a23      	ldr	r3, [r4, #32]
 8003026:	b11b      	cbz	r3, 8003030 <__sinit+0x14>
 8003028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800302c:	f7ff bff0 	b.w	8003010 <__sfp_lock_release>
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__sinit+0x28>)
 8003032:	6223      	str	r3, [r4, #32]
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__sinit+0x2c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f5      	bne.n	8003028 <__sinit+0xc>
 800303c:	f7ff ffc4 	bl	8002fc8 <global_stdio_init.part.0>
 8003040:	e7f2      	b.n	8003028 <__sinit+0xc>
 8003042:	bf00      	nop
 8003044:	08002f89 	.word	0x08002f89
 8003048:	2000045c 	.word	0x2000045c

0800304c <_fwalk_sglue>:
 800304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003050:	4607      	mov	r7, r0
 8003052:	4688      	mov	r8, r1
 8003054:	4614      	mov	r4, r2
 8003056:	2600      	movs	r6, #0
 8003058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800305c:	f1b9 0901 	subs.w	r9, r9, #1
 8003060:	d505      	bpl.n	800306e <_fwalk_sglue+0x22>
 8003062:	6824      	ldr	r4, [r4, #0]
 8003064:	2c00      	cmp	r4, #0
 8003066:	d1f7      	bne.n	8003058 <_fwalk_sglue+0xc>
 8003068:	4630      	mov	r0, r6
 800306a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306e:	89ab      	ldrh	r3, [r5, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d907      	bls.n	8003084 <_fwalk_sglue+0x38>
 8003074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003078:	3301      	adds	r3, #1
 800307a:	d003      	beq.n	8003084 <_fwalk_sglue+0x38>
 800307c:	4629      	mov	r1, r5
 800307e:	4638      	mov	r0, r7
 8003080:	47c0      	blx	r8
 8003082:	4306      	orrs	r6, r0
 8003084:	3568      	adds	r5, #104	; 0x68
 8003086:	e7e9      	b.n	800305c <_fwalk_sglue+0x10>

08003088 <_puts_r>:
 8003088:	6a03      	ldr	r3, [r0, #32]
 800308a:	b570      	push	{r4, r5, r6, lr}
 800308c:	6884      	ldr	r4, [r0, #8]
 800308e:	4605      	mov	r5, r0
 8003090:	460e      	mov	r6, r1
 8003092:	b90b      	cbnz	r3, 8003098 <_puts_r+0x10>
 8003094:	f7ff ffc2 	bl	800301c <__sinit>
 8003098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800309a:	07db      	lsls	r3, r3, #31
 800309c:	d405      	bmi.n	80030aa <_puts_r+0x22>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	0598      	lsls	r0, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_puts_r+0x22>
 80030a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030a6:	f000 f9a6 	bl	80033f6 <__retarget_lock_acquire_recursive>
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	0719      	lsls	r1, r3, #28
 80030ae:	d513      	bpl.n	80030d8 <_puts_r+0x50>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	b18b      	cbz	r3, 80030d8 <_puts_r+0x50>
 80030b4:	3e01      	subs	r6, #1
 80030b6:	68a3      	ldr	r3, [r4, #8]
 80030b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030bc:	3b01      	subs	r3, #1
 80030be:	60a3      	str	r3, [r4, #8]
 80030c0:	b9e9      	cbnz	r1, 80030fe <_puts_r+0x76>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da2e      	bge.n	8003124 <_puts_r+0x9c>
 80030c6:	4622      	mov	r2, r4
 80030c8:	210a      	movs	r1, #10
 80030ca:	4628      	mov	r0, r5
 80030cc:	f000 f87b 	bl	80031c6 <__swbuf_r>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d007      	beq.n	80030e4 <_puts_r+0x5c>
 80030d4:	250a      	movs	r5, #10
 80030d6:	e007      	b.n	80030e8 <_puts_r+0x60>
 80030d8:	4621      	mov	r1, r4
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 f8b0 	bl	8003240 <__swsetup_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d0e7      	beq.n	80030b4 <_puts_r+0x2c>
 80030e4:	f04f 35ff 	mov.w	r5, #4294967295
 80030e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ea:	07da      	lsls	r2, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_puts_r+0x72>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	059b      	lsls	r3, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_puts_r+0x72>
 80030f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030f6:	f000 f97f 	bl	80033f8 <__retarget_lock_release_recursive>
 80030fa:	4628      	mov	r0, r5
 80030fc:	bd70      	pop	{r4, r5, r6, pc}
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da04      	bge.n	800310c <_puts_r+0x84>
 8003102:	69a2      	ldr	r2, [r4, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	dc06      	bgt.n	8003116 <_puts_r+0x8e>
 8003108:	290a      	cmp	r1, #10
 800310a:	d004      	beq.n	8003116 <_puts_r+0x8e>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	7019      	strb	r1, [r3, #0]
 8003114:	e7cf      	b.n	80030b6 <_puts_r+0x2e>
 8003116:	4622      	mov	r2, r4
 8003118:	4628      	mov	r0, r5
 800311a:	f000 f854 	bl	80031c6 <__swbuf_r>
 800311e:	3001      	adds	r0, #1
 8003120:	d1c9      	bne.n	80030b6 <_puts_r+0x2e>
 8003122:	e7df      	b.n	80030e4 <_puts_r+0x5c>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	250a      	movs	r5, #10
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	6022      	str	r2, [r4, #0]
 800312c:	701d      	strb	r5, [r3, #0]
 800312e:	e7db      	b.n	80030e8 <_puts_r+0x60>

08003130 <puts>:
 8003130:	4b02      	ldr	r3, [pc, #8]	; (800313c <puts+0xc>)
 8003132:	4601      	mov	r1, r0
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	f7ff bfa7 	b.w	8003088 <_puts_r>
 800313a:	bf00      	nop
 800313c:	20000064 	.word	0x20000064

08003140 <__sread>:
 8003140:	b510      	push	{r4, lr}
 8003142:	460c      	mov	r4, r1
 8003144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003148:	f000 f90c 	bl	8003364 <_read_r>
 800314c:	2800      	cmp	r0, #0
 800314e:	bfab      	itete	ge
 8003150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003152:	89a3      	ldrhlt	r3, [r4, #12]
 8003154:	181b      	addge	r3, r3, r0
 8003156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800315a:	bfac      	ite	ge
 800315c:	6563      	strge	r3, [r4, #84]	; 0x54
 800315e:	81a3      	strhlt	r3, [r4, #12]
 8003160:	bd10      	pop	{r4, pc}

08003162 <__swrite>:
 8003162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003166:	461f      	mov	r7, r3
 8003168:	898b      	ldrh	r3, [r1, #12]
 800316a:	05db      	lsls	r3, r3, #23
 800316c:	4605      	mov	r5, r0
 800316e:	460c      	mov	r4, r1
 8003170:	4616      	mov	r6, r2
 8003172:	d505      	bpl.n	8003180 <__swrite+0x1e>
 8003174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003178:	2302      	movs	r3, #2
 800317a:	2200      	movs	r2, #0
 800317c:	f000 f8e0 	bl	8003340 <_lseek_r>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800318a:	81a3      	strh	r3, [r4, #12]
 800318c:	4632      	mov	r2, r6
 800318e:	463b      	mov	r3, r7
 8003190:	4628      	mov	r0, r5
 8003192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003196:	f000 b8f7 	b.w	8003388 <_write_r>

0800319a <__sseek>:
 800319a:	b510      	push	{r4, lr}
 800319c:	460c      	mov	r4, r1
 800319e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a2:	f000 f8cd 	bl	8003340 <_lseek_r>
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	bf15      	itete	ne
 80031ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80031ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031b6:	81a3      	strheq	r3, [r4, #12]
 80031b8:	bf18      	it	ne
 80031ba:	81a3      	strhne	r3, [r4, #12]
 80031bc:	bd10      	pop	{r4, pc}

080031be <__sclose>:
 80031be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c2:	f000 b8ad 	b.w	8003320 <_close_r>

080031c6 <__swbuf_r>:
 80031c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c8:	460e      	mov	r6, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	4605      	mov	r5, r0
 80031ce:	b118      	cbz	r0, 80031d8 <__swbuf_r+0x12>
 80031d0:	6a03      	ldr	r3, [r0, #32]
 80031d2:	b90b      	cbnz	r3, 80031d8 <__swbuf_r+0x12>
 80031d4:	f7ff ff22 	bl	800301c <__sinit>
 80031d8:	69a3      	ldr	r3, [r4, #24]
 80031da:	60a3      	str	r3, [r4, #8]
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	071a      	lsls	r2, r3, #28
 80031e0:	d525      	bpl.n	800322e <__swbuf_r+0x68>
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	b31b      	cbz	r3, 800322e <__swbuf_r+0x68>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	6922      	ldr	r2, [r4, #16]
 80031ea:	1a98      	subs	r0, r3, r2
 80031ec:	6963      	ldr	r3, [r4, #20]
 80031ee:	b2f6      	uxtb	r6, r6
 80031f0:	4283      	cmp	r3, r0
 80031f2:	4637      	mov	r7, r6
 80031f4:	dc04      	bgt.n	8003200 <__swbuf_r+0x3a>
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 fa7d 	bl	80036f8 <_fflush_r>
 80031fe:	b9e0      	cbnz	r0, 800323a <__swbuf_r+0x74>
 8003200:	68a3      	ldr	r3, [r4, #8]
 8003202:	3b01      	subs	r3, #1
 8003204:	60a3      	str	r3, [r4, #8]
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	6022      	str	r2, [r4, #0]
 800320c:	701e      	strb	r6, [r3, #0]
 800320e:	6962      	ldr	r2, [r4, #20]
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	429a      	cmp	r2, r3
 8003214:	d004      	beq.n	8003220 <__swbuf_r+0x5a>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	07db      	lsls	r3, r3, #31
 800321a:	d506      	bpl.n	800322a <__swbuf_r+0x64>
 800321c:	2e0a      	cmp	r6, #10
 800321e:	d104      	bne.n	800322a <__swbuf_r+0x64>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 fa68 	bl	80036f8 <_fflush_r>
 8003228:	b938      	cbnz	r0, 800323a <__swbuf_r+0x74>
 800322a:	4638      	mov	r0, r7
 800322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322e:	4621      	mov	r1, r4
 8003230:	4628      	mov	r0, r5
 8003232:	f000 f805 	bl	8003240 <__swsetup_r>
 8003236:	2800      	cmp	r0, #0
 8003238:	d0d5      	beq.n	80031e6 <__swbuf_r+0x20>
 800323a:	f04f 37ff 	mov.w	r7, #4294967295
 800323e:	e7f4      	b.n	800322a <__swbuf_r+0x64>

08003240 <__swsetup_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <__swsetup_r+0xac>)
 8003244:	4605      	mov	r5, r0
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	460c      	mov	r4, r1
 800324a:	b118      	cbz	r0, 8003254 <__swsetup_r+0x14>
 800324c:	6a03      	ldr	r3, [r0, #32]
 800324e:	b90b      	cbnz	r3, 8003254 <__swsetup_r+0x14>
 8003250:	f7ff fee4 	bl	800301c <__sinit>
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800325a:	0718      	lsls	r0, r3, #28
 800325c:	d422      	bmi.n	80032a4 <__swsetup_r+0x64>
 800325e:	06d9      	lsls	r1, r3, #27
 8003260:	d407      	bmi.n	8003272 <__swsetup_r+0x32>
 8003262:	2309      	movs	r3, #9
 8003264:	602b      	str	r3, [r5, #0]
 8003266:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	e034      	b.n	80032dc <__swsetup_r+0x9c>
 8003272:	0758      	lsls	r0, r3, #29
 8003274:	d512      	bpl.n	800329c <__swsetup_r+0x5c>
 8003276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003278:	b141      	cbz	r1, 800328c <__swsetup_r+0x4c>
 800327a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800327e:	4299      	cmp	r1, r3
 8003280:	d002      	beq.n	8003288 <__swsetup_r+0x48>
 8003282:	4628      	mov	r0, r5
 8003284:	f000 f8ba 	bl	80033fc <_free_r>
 8003288:	2300      	movs	r3, #0
 800328a:	6363      	str	r3, [r4, #52]	; 0x34
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003292:	81a3      	strh	r3, [r4, #12]
 8003294:	2300      	movs	r3, #0
 8003296:	6063      	str	r3, [r4, #4]
 8003298:	6923      	ldr	r3, [r4, #16]
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f043 0308 	orr.w	r3, r3, #8
 80032a2:	81a3      	strh	r3, [r4, #12]
 80032a4:	6923      	ldr	r3, [r4, #16]
 80032a6:	b94b      	cbnz	r3, 80032bc <__swsetup_r+0x7c>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d003      	beq.n	80032bc <__swsetup_r+0x7c>
 80032b4:	4621      	mov	r1, r4
 80032b6:	4628      	mov	r0, r5
 80032b8:	f000 fa6c 	bl	8003794 <__smakebuf_r>
 80032bc:	89a0      	ldrh	r0, [r4, #12]
 80032be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032c2:	f010 0301 	ands.w	r3, r0, #1
 80032c6:	d00a      	beq.n	80032de <__swsetup_r+0x9e>
 80032c8:	2300      	movs	r3, #0
 80032ca:	60a3      	str	r3, [r4, #8]
 80032cc:	6963      	ldr	r3, [r4, #20]
 80032ce:	425b      	negs	r3, r3
 80032d0:	61a3      	str	r3, [r4, #24]
 80032d2:	6923      	ldr	r3, [r4, #16]
 80032d4:	b943      	cbnz	r3, 80032e8 <__swsetup_r+0xa8>
 80032d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032da:	d1c4      	bne.n	8003266 <__swsetup_r+0x26>
 80032dc:	bd38      	pop	{r3, r4, r5, pc}
 80032de:	0781      	lsls	r1, r0, #30
 80032e0:	bf58      	it	pl
 80032e2:	6963      	ldrpl	r3, [r4, #20]
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	e7f4      	b.n	80032d2 <__swsetup_r+0x92>
 80032e8:	2000      	movs	r0, #0
 80032ea:	e7f7      	b.n	80032dc <__swsetup_r+0x9c>
 80032ec:	20000064 	.word	0x20000064

080032f0 <memcmp>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	3901      	subs	r1, #1
 80032f4:	4402      	add	r2, r0
 80032f6:	4290      	cmp	r0, r2
 80032f8:	d101      	bne.n	80032fe <memcmp+0xe>
 80032fa:	2000      	movs	r0, #0
 80032fc:	e005      	b.n	800330a <memcmp+0x1a>
 80032fe:	7803      	ldrb	r3, [r0, #0]
 8003300:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003304:	42a3      	cmp	r3, r4
 8003306:	d001      	beq.n	800330c <memcmp+0x1c>
 8003308:	1b18      	subs	r0, r3, r4
 800330a:	bd10      	pop	{r4, pc}
 800330c:	3001      	adds	r0, #1
 800330e:	e7f2      	b.n	80032f6 <memcmp+0x6>

08003310 <memset>:
 8003310:	4402      	add	r2, r0
 8003312:	4603      	mov	r3, r0
 8003314:	4293      	cmp	r3, r2
 8003316:	d100      	bne.n	800331a <memset+0xa>
 8003318:	4770      	bx	lr
 800331a:	f803 1b01 	strb.w	r1, [r3], #1
 800331e:	e7f9      	b.n	8003314 <memset+0x4>

08003320 <_close_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4d06      	ldr	r5, [pc, #24]	; (800333c <_close_r+0x1c>)
 8003324:	2300      	movs	r3, #0
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	f7fd fac3 	bl	80008b6 <_close>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_close_r+0x1a>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_close_r+0x1a>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000460 	.word	0x20000460

08003340 <_lseek_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	; (8003360 <_lseek_r+0x20>)
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	2200      	movs	r2, #0
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f7fd fad8 	bl	8000904 <_lseek>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_lseek_r+0x1e>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_lseek_r+0x1e>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	20000460 	.word	0x20000460

08003364 <_read_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4d07      	ldr	r5, [pc, #28]	; (8003384 <_read_r+0x20>)
 8003368:	4604      	mov	r4, r0
 800336a:	4608      	mov	r0, r1
 800336c:	4611      	mov	r1, r2
 800336e:	2200      	movs	r2, #0
 8003370:	602a      	str	r2, [r5, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f7fd fa66 	bl	8000844 <_read>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d102      	bne.n	8003382 <_read_r+0x1e>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	b103      	cbz	r3, 8003382 <_read_r+0x1e>
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	20000460 	.word	0x20000460

08003388 <_write_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4d07      	ldr	r5, [pc, #28]	; (80033a8 <_write_r+0x20>)
 800338c:	4604      	mov	r4, r0
 800338e:	4608      	mov	r0, r1
 8003390:	4611      	mov	r1, r2
 8003392:	2200      	movs	r2, #0
 8003394:	602a      	str	r2, [r5, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	f7fd fa71 	bl	800087e <_write>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	d102      	bne.n	80033a6 <_write_r+0x1e>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	b103      	cbz	r3, 80033a6 <_write_r+0x1e>
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	20000460 	.word	0x20000460

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fa64 	bl	800388c <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	0800398c 	.word	0x0800398c
 80033e8:	0800398c 	.word	0x0800398c
 80033ec:	0800398c 	.word	0x0800398c
 80033f0:	08003990 	.word	0x08003990

080033f4 <__retarget_lock_init_recursive>:
 80033f4:	4770      	bx	lr

080033f6 <__retarget_lock_acquire_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <__retarget_lock_release_recursive>:
 80033f8:	4770      	bx	lr
	...

080033fc <_free_r>:
 80033fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033fe:	2900      	cmp	r1, #0
 8003400:	d044      	beq.n	800348c <_free_r+0x90>
 8003402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003406:	9001      	str	r0, [sp, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f1a1 0404 	sub.w	r4, r1, #4
 800340e:	bfb8      	it	lt
 8003410:	18e4      	addlt	r4, r4, r3
 8003412:	f000 f8df 	bl	80035d4 <__malloc_lock>
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <_free_r+0x94>)
 8003418:	9801      	ldr	r0, [sp, #4]
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	b933      	cbnz	r3, 800342c <_free_r+0x30>
 800341e:	6063      	str	r3, [r4, #4]
 8003420:	6014      	str	r4, [r2, #0]
 8003422:	b003      	add	sp, #12
 8003424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003428:	f000 b8da 	b.w	80035e0 <__malloc_unlock>
 800342c:	42a3      	cmp	r3, r4
 800342e:	d908      	bls.n	8003442 <_free_r+0x46>
 8003430:	6825      	ldr	r5, [r4, #0]
 8003432:	1961      	adds	r1, r4, r5
 8003434:	428b      	cmp	r3, r1
 8003436:	bf01      	itttt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	1949      	addeq	r1, r1, r5
 800343e:	6021      	streq	r1, [r4, #0]
 8003440:	e7ed      	b.n	800341e <_free_r+0x22>
 8003442:	461a      	mov	r2, r3
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	b10b      	cbz	r3, 800344c <_free_r+0x50>
 8003448:	42a3      	cmp	r3, r4
 800344a:	d9fa      	bls.n	8003442 <_free_r+0x46>
 800344c:	6811      	ldr	r1, [r2, #0]
 800344e:	1855      	adds	r5, r2, r1
 8003450:	42a5      	cmp	r5, r4
 8003452:	d10b      	bne.n	800346c <_free_r+0x70>
 8003454:	6824      	ldr	r4, [r4, #0]
 8003456:	4421      	add	r1, r4
 8003458:	1854      	adds	r4, r2, r1
 800345a:	42a3      	cmp	r3, r4
 800345c:	6011      	str	r1, [r2, #0]
 800345e:	d1e0      	bne.n	8003422 <_free_r+0x26>
 8003460:	681c      	ldr	r4, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	6053      	str	r3, [r2, #4]
 8003466:	440c      	add	r4, r1
 8003468:	6014      	str	r4, [r2, #0]
 800346a:	e7da      	b.n	8003422 <_free_r+0x26>
 800346c:	d902      	bls.n	8003474 <_free_r+0x78>
 800346e:	230c      	movs	r3, #12
 8003470:	6003      	str	r3, [r0, #0]
 8003472:	e7d6      	b.n	8003422 <_free_r+0x26>
 8003474:	6825      	ldr	r5, [r4, #0]
 8003476:	1961      	adds	r1, r4, r5
 8003478:	428b      	cmp	r3, r1
 800347a:	bf04      	itt	eq
 800347c:	6819      	ldreq	r1, [r3, #0]
 800347e:	685b      	ldreq	r3, [r3, #4]
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	bf04      	itt	eq
 8003484:	1949      	addeq	r1, r1, r5
 8003486:	6021      	streq	r1, [r4, #0]
 8003488:	6054      	str	r4, [r2, #4]
 800348a:	e7ca      	b.n	8003422 <_free_r+0x26>
 800348c:	b003      	add	sp, #12
 800348e:	bd30      	pop	{r4, r5, pc}
 8003490:	20000468 	.word	0x20000468

08003494 <sbrk_aligned>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4e0e      	ldr	r6, [pc, #56]	; (80034d0 <sbrk_aligned+0x3c>)
 8003498:	460c      	mov	r4, r1
 800349a:	6831      	ldr	r1, [r6, #0]
 800349c:	4605      	mov	r5, r0
 800349e:	b911      	cbnz	r1, 80034a6 <sbrk_aligned+0x12>
 80034a0:	f000 f9d6 	bl	8003850 <_sbrk_r>
 80034a4:	6030      	str	r0, [r6, #0]
 80034a6:	4621      	mov	r1, r4
 80034a8:	4628      	mov	r0, r5
 80034aa:	f000 f9d1 	bl	8003850 <_sbrk_r>
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	d00a      	beq.n	80034c8 <sbrk_aligned+0x34>
 80034b2:	1cc4      	adds	r4, r0, #3
 80034b4:	f024 0403 	bic.w	r4, r4, #3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d007      	beq.n	80034cc <sbrk_aligned+0x38>
 80034bc:	1a21      	subs	r1, r4, r0
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 f9c6 	bl	8003850 <_sbrk_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d101      	bne.n	80034cc <sbrk_aligned+0x38>
 80034c8:	f04f 34ff 	mov.w	r4, #4294967295
 80034cc:	4620      	mov	r0, r4
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	2000046c 	.word	0x2000046c

080034d4 <_malloc_r>:
 80034d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	1ccd      	adds	r5, r1, #3
 80034da:	f025 0503 	bic.w	r5, r5, #3
 80034de:	3508      	adds	r5, #8
 80034e0:	2d0c      	cmp	r5, #12
 80034e2:	bf38      	it	cc
 80034e4:	250c      	movcc	r5, #12
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	4607      	mov	r7, r0
 80034ea:	db01      	blt.n	80034f0 <_malloc_r+0x1c>
 80034ec:	42a9      	cmp	r1, r5
 80034ee:	d905      	bls.n	80034fc <_malloc_r+0x28>
 80034f0:	230c      	movs	r3, #12
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	2600      	movs	r6, #0
 80034f6:	4630      	mov	r0, r6
 80034f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035d0 <_malloc_r+0xfc>
 8003500:	f000 f868 	bl	80035d4 <__malloc_lock>
 8003504:	f8d8 3000 	ldr.w	r3, [r8]
 8003508:	461c      	mov	r4, r3
 800350a:	bb5c      	cbnz	r4, 8003564 <_malloc_r+0x90>
 800350c:	4629      	mov	r1, r5
 800350e:	4638      	mov	r0, r7
 8003510:	f7ff ffc0 	bl	8003494 <sbrk_aligned>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	4604      	mov	r4, r0
 8003518:	d155      	bne.n	80035c6 <_malloc_r+0xf2>
 800351a:	f8d8 4000 	ldr.w	r4, [r8]
 800351e:	4626      	mov	r6, r4
 8003520:	2e00      	cmp	r6, #0
 8003522:	d145      	bne.n	80035b0 <_malloc_r+0xdc>
 8003524:	2c00      	cmp	r4, #0
 8003526:	d048      	beq.n	80035ba <_malloc_r+0xe6>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	4631      	mov	r1, r6
 800352c:	4638      	mov	r0, r7
 800352e:	eb04 0903 	add.w	r9, r4, r3
 8003532:	f000 f98d 	bl	8003850 <_sbrk_r>
 8003536:	4581      	cmp	r9, r0
 8003538:	d13f      	bne.n	80035ba <_malloc_r+0xe6>
 800353a:	6821      	ldr	r1, [r4, #0]
 800353c:	1a6d      	subs	r5, r5, r1
 800353e:	4629      	mov	r1, r5
 8003540:	4638      	mov	r0, r7
 8003542:	f7ff ffa7 	bl	8003494 <sbrk_aligned>
 8003546:	3001      	adds	r0, #1
 8003548:	d037      	beq.n	80035ba <_malloc_r+0xe6>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	442b      	add	r3, r5
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	f8d8 3000 	ldr.w	r3, [r8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d038      	beq.n	80035ca <_malloc_r+0xf6>
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	42a2      	cmp	r2, r4
 800355c:	d12b      	bne.n	80035b6 <_malloc_r+0xe2>
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e00f      	b.n	8003584 <_malloc_r+0xb0>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	1b52      	subs	r2, r2, r5
 8003568:	d41f      	bmi.n	80035aa <_malloc_r+0xd6>
 800356a:	2a0b      	cmp	r2, #11
 800356c:	d917      	bls.n	800359e <_malloc_r+0xca>
 800356e:	1961      	adds	r1, r4, r5
 8003570:	42a3      	cmp	r3, r4
 8003572:	6025      	str	r5, [r4, #0]
 8003574:	bf18      	it	ne
 8003576:	6059      	strne	r1, [r3, #4]
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	bf08      	it	eq
 800357c:	f8c8 1000 	streq.w	r1, [r8]
 8003580:	5162      	str	r2, [r4, r5]
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	4638      	mov	r0, r7
 8003586:	f104 060b 	add.w	r6, r4, #11
 800358a:	f000 f829 	bl	80035e0 <__malloc_unlock>
 800358e:	f026 0607 	bic.w	r6, r6, #7
 8003592:	1d23      	adds	r3, r4, #4
 8003594:	1af2      	subs	r2, r6, r3
 8003596:	d0ae      	beq.n	80034f6 <_malloc_r+0x22>
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	50a3      	str	r3, [r4, r2]
 800359c:	e7ab      	b.n	80034f6 <_malloc_r+0x22>
 800359e:	42a3      	cmp	r3, r4
 80035a0:	6862      	ldr	r2, [r4, #4]
 80035a2:	d1dd      	bne.n	8003560 <_malloc_r+0x8c>
 80035a4:	f8c8 2000 	str.w	r2, [r8]
 80035a8:	e7ec      	b.n	8003584 <_malloc_r+0xb0>
 80035aa:	4623      	mov	r3, r4
 80035ac:	6864      	ldr	r4, [r4, #4]
 80035ae:	e7ac      	b.n	800350a <_malloc_r+0x36>
 80035b0:	4634      	mov	r4, r6
 80035b2:	6876      	ldr	r6, [r6, #4]
 80035b4:	e7b4      	b.n	8003520 <_malloc_r+0x4c>
 80035b6:	4613      	mov	r3, r2
 80035b8:	e7cc      	b.n	8003554 <_malloc_r+0x80>
 80035ba:	230c      	movs	r3, #12
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	4638      	mov	r0, r7
 80035c0:	f000 f80e 	bl	80035e0 <__malloc_unlock>
 80035c4:	e797      	b.n	80034f6 <_malloc_r+0x22>
 80035c6:	6025      	str	r5, [r4, #0]
 80035c8:	e7dc      	b.n	8003584 <_malloc_r+0xb0>
 80035ca:	605b      	str	r3, [r3, #4]
 80035cc:	deff      	udf	#255	; 0xff
 80035ce:	bf00      	nop
 80035d0:	20000468 	.word	0x20000468

080035d4 <__malloc_lock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <__malloc_lock+0x8>)
 80035d6:	f7ff bf0e 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 80035da:	bf00      	nop
 80035dc:	20000464 	.word	0x20000464

080035e0 <__malloc_unlock>:
 80035e0:	4801      	ldr	r0, [pc, #4]	; (80035e8 <__malloc_unlock+0x8>)
 80035e2:	f7ff bf09 	b.w	80033f8 <__retarget_lock_release_recursive>
 80035e6:	bf00      	nop
 80035e8:	20000464 	.word	0x20000464

080035ec <__sflush_r>:
 80035ec:	898a      	ldrh	r2, [r1, #12]
 80035ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	0710      	lsls	r0, r2, #28
 80035f6:	460c      	mov	r4, r1
 80035f8:	d458      	bmi.n	80036ac <__sflush_r+0xc0>
 80035fa:	684b      	ldr	r3, [r1, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	dc05      	bgt.n	800360c <__sflush_r+0x20>
 8003600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	dc02      	bgt.n	800360c <__sflush_r+0x20>
 8003606:	2000      	movs	r0, #0
 8003608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800360c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800360e:	2e00      	cmp	r6, #0
 8003610:	d0f9      	beq.n	8003606 <__sflush_r+0x1a>
 8003612:	2300      	movs	r3, #0
 8003614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003618:	682f      	ldr	r7, [r5, #0]
 800361a:	6a21      	ldr	r1, [r4, #32]
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	d032      	beq.n	8003686 <__sflush_r+0x9a>
 8003620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	075a      	lsls	r2, r3, #29
 8003626:	d505      	bpl.n	8003634 <__sflush_r+0x48>
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800362e:	b10b      	cbz	r3, 8003634 <__sflush_r+0x48>
 8003630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003632:	1ac0      	subs	r0, r0, r3
 8003634:	2300      	movs	r3, #0
 8003636:	4602      	mov	r2, r0
 8003638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800363a:	6a21      	ldr	r1, [r4, #32]
 800363c:	4628      	mov	r0, r5
 800363e:	47b0      	blx	r6
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	d106      	bne.n	8003654 <__sflush_r+0x68>
 8003646:	6829      	ldr	r1, [r5, #0]
 8003648:	291d      	cmp	r1, #29
 800364a:	d82b      	bhi.n	80036a4 <__sflush_r+0xb8>
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <__sflush_r+0x108>)
 800364e:	410a      	asrs	r2, r1
 8003650:	07d6      	lsls	r6, r2, #31
 8003652:	d427      	bmi.n	80036a4 <__sflush_r+0xb8>
 8003654:	2200      	movs	r2, #0
 8003656:	6062      	str	r2, [r4, #4]
 8003658:	04d9      	lsls	r1, r3, #19
 800365a:	6922      	ldr	r2, [r4, #16]
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	d504      	bpl.n	800366a <__sflush_r+0x7e>
 8003660:	1c42      	adds	r2, r0, #1
 8003662:	d101      	bne.n	8003668 <__sflush_r+0x7c>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b903      	cbnz	r3, 800366a <__sflush_r+0x7e>
 8003668:	6560      	str	r0, [r4, #84]	; 0x54
 800366a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800366c:	602f      	str	r7, [r5, #0]
 800366e:	2900      	cmp	r1, #0
 8003670:	d0c9      	beq.n	8003606 <__sflush_r+0x1a>
 8003672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003676:	4299      	cmp	r1, r3
 8003678:	d002      	beq.n	8003680 <__sflush_r+0x94>
 800367a:	4628      	mov	r0, r5
 800367c:	f7ff febe 	bl	80033fc <_free_r>
 8003680:	2000      	movs	r0, #0
 8003682:	6360      	str	r0, [r4, #52]	; 0x34
 8003684:	e7c0      	b.n	8003608 <__sflush_r+0x1c>
 8003686:	2301      	movs	r3, #1
 8003688:	4628      	mov	r0, r5
 800368a:	47b0      	blx	r6
 800368c:	1c41      	adds	r1, r0, #1
 800368e:	d1c8      	bne.n	8003622 <__sflush_r+0x36>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0c5      	beq.n	8003622 <__sflush_r+0x36>
 8003696:	2b1d      	cmp	r3, #29
 8003698:	d001      	beq.n	800369e <__sflush_r+0xb2>
 800369a:	2b16      	cmp	r3, #22
 800369c:	d101      	bne.n	80036a2 <__sflush_r+0xb6>
 800369e:	602f      	str	r7, [r5, #0]
 80036a0:	e7b1      	b.n	8003606 <__sflush_r+0x1a>
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	e7ad      	b.n	8003608 <__sflush_r+0x1c>
 80036ac:	690f      	ldr	r7, [r1, #16]
 80036ae:	2f00      	cmp	r7, #0
 80036b0:	d0a9      	beq.n	8003606 <__sflush_r+0x1a>
 80036b2:	0793      	lsls	r3, r2, #30
 80036b4:	680e      	ldr	r6, [r1, #0]
 80036b6:	bf08      	it	eq
 80036b8:	694b      	ldreq	r3, [r1, #20]
 80036ba:	600f      	str	r7, [r1, #0]
 80036bc:	bf18      	it	ne
 80036be:	2300      	movne	r3, #0
 80036c0:	eba6 0807 	sub.w	r8, r6, r7
 80036c4:	608b      	str	r3, [r1, #8]
 80036c6:	f1b8 0f00 	cmp.w	r8, #0
 80036ca:	dd9c      	ble.n	8003606 <__sflush_r+0x1a>
 80036cc:	6a21      	ldr	r1, [r4, #32]
 80036ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036d0:	4643      	mov	r3, r8
 80036d2:	463a      	mov	r2, r7
 80036d4:	4628      	mov	r0, r5
 80036d6:	47b0      	blx	r6
 80036d8:	2800      	cmp	r0, #0
 80036da:	dc06      	bgt.n	80036ea <__sflush_r+0xfe>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	e78e      	b.n	8003608 <__sflush_r+0x1c>
 80036ea:	4407      	add	r7, r0
 80036ec:	eba8 0800 	sub.w	r8, r8, r0
 80036f0:	e7e9      	b.n	80036c6 <__sflush_r+0xda>
 80036f2:	bf00      	nop
 80036f4:	dfbffffe 	.word	0xdfbffffe

080036f8 <_fflush_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	690b      	ldr	r3, [r1, #16]
 80036fc:	4605      	mov	r5, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	b913      	cbnz	r3, 8003708 <_fflush_r+0x10>
 8003702:	2500      	movs	r5, #0
 8003704:	4628      	mov	r0, r5
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	b118      	cbz	r0, 8003712 <_fflush_r+0x1a>
 800370a:	6a03      	ldr	r3, [r0, #32]
 800370c:	b90b      	cbnz	r3, 8003712 <_fflush_r+0x1a>
 800370e:	f7ff fc85 	bl	800301c <__sinit>
 8003712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f3      	beq.n	8003702 <_fflush_r+0xa>
 800371a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800371c:	07d0      	lsls	r0, r2, #31
 800371e:	d404      	bmi.n	800372a <_fflush_r+0x32>
 8003720:	0599      	lsls	r1, r3, #22
 8003722:	d402      	bmi.n	800372a <_fflush_r+0x32>
 8003724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003726:	f7ff fe66 	bl	80033f6 <__retarget_lock_acquire_recursive>
 800372a:	4628      	mov	r0, r5
 800372c:	4621      	mov	r1, r4
 800372e:	f7ff ff5d 	bl	80035ec <__sflush_r>
 8003732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003734:	07da      	lsls	r2, r3, #31
 8003736:	4605      	mov	r5, r0
 8003738:	d4e4      	bmi.n	8003704 <_fflush_r+0xc>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	059b      	lsls	r3, r3, #22
 800373e:	d4e1      	bmi.n	8003704 <_fflush_r+0xc>
 8003740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003742:	f7ff fe59 	bl	80033f8 <__retarget_lock_release_recursive>
 8003746:	e7dd      	b.n	8003704 <_fflush_r+0xc>

08003748 <__swhatbuf_r>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	460c      	mov	r4, r1
 800374c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003750:	2900      	cmp	r1, #0
 8003752:	b096      	sub	sp, #88	; 0x58
 8003754:	4615      	mov	r5, r2
 8003756:	461e      	mov	r6, r3
 8003758:	da0d      	bge.n	8003776 <__swhatbuf_r+0x2e>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	bf0c      	ite	eq
 8003766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800376a:	2340      	movne	r3, #64	; 0x40
 800376c:	2000      	movs	r0, #0
 800376e:	6031      	str	r1, [r6, #0]
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	b016      	add	sp, #88	; 0x58
 8003774:	bd70      	pop	{r4, r5, r6, pc}
 8003776:	466a      	mov	r2, sp
 8003778:	f000 f848 	bl	800380c <_fstat_r>
 800377c:	2800      	cmp	r0, #0
 800377e:	dbec      	blt.n	800375a <__swhatbuf_r+0x12>
 8003780:	9901      	ldr	r1, [sp, #4]
 8003782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800378a:	4259      	negs	r1, r3
 800378c:	4159      	adcs	r1, r3
 800378e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003792:	e7eb      	b.n	800376c <__swhatbuf_r+0x24>

08003794 <__smakebuf_r>:
 8003794:	898b      	ldrh	r3, [r1, #12]
 8003796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003798:	079d      	lsls	r5, r3, #30
 800379a:	4606      	mov	r6, r0
 800379c:	460c      	mov	r4, r1
 800379e:	d507      	bpl.n	80037b0 <__smakebuf_r+0x1c>
 80037a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	6123      	str	r3, [r4, #16]
 80037a8:	2301      	movs	r3, #1
 80037aa:	6163      	str	r3, [r4, #20]
 80037ac:	b002      	add	sp, #8
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	ab01      	add	r3, sp, #4
 80037b2:	466a      	mov	r2, sp
 80037b4:	f7ff ffc8 	bl	8003748 <__swhatbuf_r>
 80037b8:	9900      	ldr	r1, [sp, #0]
 80037ba:	4605      	mov	r5, r0
 80037bc:	4630      	mov	r0, r6
 80037be:	f7ff fe89 	bl	80034d4 <_malloc_r>
 80037c2:	b948      	cbnz	r0, 80037d8 <__smakebuf_r+0x44>
 80037c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c8:	059a      	lsls	r2, r3, #22
 80037ca:	d4ef      	bmi.n	80037ac <__smakebuf_r+0x18>
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	e7e3      	b.n	80037a0 <__smakebuf_r+0xc>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	6020      	str	r0, [r4, #0]
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	9b00      	ldr	r3, [sp, #0]
 80037e4:	6163      	str	r3, [r4, #20]
 80037e6:	9b01      	ldr	r3, [sp, #4]
 80037e8:	6120      	str	r0, [r4, #16]
 80037ea:	b15b      	cbz	r3, 8003804 <__smakebuf_r+0x70>
 80037ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f81d 	bl	8003830 <_isatty_r>
 80037f6:	b128      	cbz	r0, 8003804 <__smakebuf_r+0x70>
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	431d      	orrs	r5, r3
 8003808:	81a5      	strh	r5, [r4, #12]
 800380a:	e7cf      	b.n	80037ac <__smakebuf_r+0x18>

0800380c <_fstat_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4d07      	ldr	r5, [pc, #28]	; (800382c <_fstat_r+0x20>)
 8003810:	2300      	movs	r3, #0
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	f7fd f858 	bl	80008ce <_fstat>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	d102      	bne.n	8003828 <_fstat_r+0x1c>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	b103      	cbz	r3, 8003828 <_fstat_r+0x1c>
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	bd38      	pop	{r3, r4, r5, pc}
 800382a:	bf00      	nop
 800382c:	20000460 	.word	0x20000460

08003830 <_isatty_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d06      	ldr	r5, [pc, #24]	; (800384c <_isatty_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	f7fd f857 	bl	80008ee <_isatty>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_isatty_r+0x1a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_isatty_r+0x1a>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000460 	.word	0x20000460

08003850 <_sbrk_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d06      	ldr	r5, [pc, #24]	; (800386c <_sbrk_r+0x1c>)
 8003854:	2300      	movs	r3, #0
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	602b      	str	r3, [r5, #0]
 800385c:	f000 f808 	bl	8003870 <_sbrk>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_sbrk_r+0x1a>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b103      	cbz	r3, 800386a <_sbrk_r+0x1a>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	20000460 	.word	0x20000460

08003870 <_sbrk>:
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <_sbrk+0x14>)
 8003872:	6811      	ldr	r1, [r2, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	b909      	cbnz	r1, 800387c <_sbrk+0xc>
 8003878:	4903      	ldr	r1, [pc, #12]	; (8003888 <_sbrk+0x18>)
 800387a:	6011      	str	r1, [r2, #0]
 800387c:	6810      	ldr	r0, [r2, #0]
 800387e:	4403      	add	r3, r0
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4770      	bx	lr
 8003884:	20000470 	.word	0x20000470
 8003888:	20000478 	.word	0x20000478

0800388c <_init>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr

08003898 <_fini>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr
