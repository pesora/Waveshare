
11.CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080037e0  080037e0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e0  080037e0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0000029c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008b96  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e38  00000000  00000000  00028c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000730  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000053d  00000000  00000000  0002b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000242b5  00000000  00000000  0002b715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b6bd  00000000  00000000  0004f9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d154e  00000000  00000000  0005b087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002258  00000000  00000000  0012c5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0012e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003728 	.word	0x08003728

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08003728 	.word	0x08003728

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_Init+0x40>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_Init+0x40>)
 800029a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <HAL_Init+0x40>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <HAL_Init+0x40>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <HAL_Init+0x40>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_Init+0x40>)
 80002b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b8:	2003      	movs	r0, #3
 80002ba:	f000 fdc7 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f808 	bl	80002d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002c4:	f002 f916 	bl	80024f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80002c8:	2300      	movs	r3, #0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40023c00 	.word	0x40023c00

080002d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002dc:	f001 fc8e 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <HAL_InitTick+0x34>)
 80002e4:	fba2 2303 	umull	r2, r3, r2, r3
 80002e8:	099b      	lsrs	r3, r3, #6
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fdd5 	bl	8000e9a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	f04f 30ff 	mov.w	r0, #4294967295
 80002f8:	f000 fdb3 	bl	8000e62 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002fc:	2300      	movs	r3, #0
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	10624dd3 	.word	0x10624dd3

0800030c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick++;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <HAL_IncTick+0x18>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	4a03      	ldr	r2, [pc, #12]	; (8000324 <HAL_IncTick+0x18>)
 8000318:	6013      	str	r3, [r2, #0]
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	2000007c 	.word	0x2000007c

08000328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  return uwTick;
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <HAL_GetTick+0x14>)
 800032e:	681b      	ldr	r3, [r3, #0]
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	2000007c 	.word	0x2000007c

08000340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800034c:	f7ff ffec 	bl	8000328 <HAL_GetTick>
 8000350:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000352:	bf00      	nop
 8000354:	f7ff ffe8 	bl	8000328 <HAL_GetTick>
 8000358:	4602      	mov	r2, r0
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	1ad2      	subs	r2, r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	d3f7      	bcc.n	8000354 <HAL_Delay+0x14>
  {
  }
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b084      	sub	sp, #16
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  uint32_t InitStatus = 3;
 8000376:	2303      	movs	r3, #3
 8000378:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d101      	bne.n	8000388 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8000384:	2301      	movs	r3, #1
 8000386:	e118      	b.n	80005ba <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b00      	cmp	r3, #0
 8000392:	d106      	bne.n	80003a2 <HAL_CAN_Init+0x34>
  {    
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2200      	movs	r2, #0
 8000398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 feb3 	bl	8002108 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2202      	movs	r2, #2
 80003a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f022 0202 	bic.w	r2, r2, #2
 80003b8:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f042 0201 	orr.w	r2, r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80003ca:	f7ff ffad 	bl	8000328 <HAL_GetTick>
 80003ce:	60b8      	str	r0, [r7, #8]

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80003d0:	e010      	b.n	80003f4 <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80003d2:	f7ff ffa9 	bl	8000328 <HAL_GetTick>
 80003d6:	4602      	mov	r2, r0
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	2b0a      	cmp	r3, #10
 80003de:	d909      	bls.n	80003f4 <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2203      	movs	r2, #3
 80003e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      return HAL_TIMEOUT;
 80003f0:	2303      	movs	r3, #3
 80003f2:	e0e2      	b.n	80005ba <HAL_CAN_Init+0x24c>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d1e7      	bne.n	80003d2 <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b01      	cmp	r3, #1
 800040e:	d002      	beq.n	8000416 <HAL_CAN_Init+0xa8>
  {
    InitStatus = CAN_INITSTATUS_FAILED;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e0c0      	b.n	8000598 <HAL_CAN_Init+0x22a>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d108      	bne.n	8000430 <HAL_CAN_Init+0xc2>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	e007      	b.n	8000440 <HAL_CAN_Init+0xd2>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800043e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d108      	bne.n	800045a <HAL_CAN_Init+0xec>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	e007      	b.n	800046a <HAL_CAN_Init+0xfc>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000468:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6a1b      	ldr	r3, [r3, #32]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d108      	bne.n	8000484 <HAL_CAN_Init+0x116>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f042 0220 	orr.w	r2, r2, #32
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	e007      	b.n	8000494 <HAL_CAN_Init+0x126>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f022 0220 	bic.w	r2, r2, #32
 8000492:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000498:	2b01      	cmp	r3, #1
 800049a:	d108      	bne.n	80004ae <HAL_CAN_Init+0x140>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f042 0210 	orr.w	r2, r2, #16
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	e007      	b.n	80004be <HAL_CAN_Init+0x150>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f022 0210 	bic.w	r2, r2, #16
 80004bc:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d108      	bne.n	80004d8 <HAL_CAN_Init+0x16a>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f042 0208 	orr.w	r2, r2, #8
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e007      	b.n	80004e8 <HAL_CAN_Init+0x17a>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f022 0208 	bic.w	r2, r2, #8
 80004e6:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d108      	bne.n	8000502 <HAL_CAN_Init+0x194>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f042 0204 	orr.w	r2, r2, #4
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	e007      	b.n	8000512 <HAL_CAN_Init+0x1a4>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f022 0204 	bic.w	r2, r2, #4
 8000510:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689a      	ldr	r2, [r3, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68db      	ldr	r3, [r3, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800051a:	431a      	orrs	r2, r3
                ((uint32_t)hcan->Init.BS1) | \
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	691b      	ldr	r3, [r3, #16]
                ((uint32_t)hcan->Init.SJW) | \
 8000520:	431a      	orrs	r2, r3
                ((uint32_t)hcan->Init.BS2) | \
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	695b      	ldr	r3, [r3, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8000526:	ea42 0103 	orr.w	r1, r2, r3
               ((uint32_t)hcan->Init.Prescaler - 1);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	1e5a      	subs	r2, r3, #1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
                ((uint32_t)hcan->Init.BS2) | \
 8000534:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000536:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f022 0201 	bic.w	r2, r2, #1
 8000546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000548:	f7ff feee 	bl	8000328 <HAL_GetTick>
 800054c:	60b8      	str	r0, [r7, #8]

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800054e:	e010      	b.n	8000572 <HAL_CAN_Init+0x204>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000550:	f7ff feea 	bl	8000328 <HAL_GetTick>
 8000554:	4602      	mov	r2, r0
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	2b0a      	cmp	r3, #10
 800055c:	d909      	bls.n	8000572 <HAL_CAN_Init+0x204>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2203      	movs	r2, #3
 8000562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
       return HAL_TIMEOUT;
 800056e:	2303      	movs	r3, #3
 8000570:	e023      	b.n	80005ba <HAL_CAN_Init+0x24c>
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b01      	cmp	r3, #1
 800057e:	d0e7      	beq.n	8000550 <HAL_CAN_Init+0x1e2>
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b01      	cmp	r3, #1
 800058c:	d102      	bne.n	8000594 <HAL_CAN_Init+0x226>
    {
      InitStatus = CAN_INITSTATUS_FAILED;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e001      	b.n	8000598 <HAL_CAN_Init+0x22a>
    }
    else
    {
      InitStatus = CAN_INITSTATUS_SUCCESS;
 8000594:	2301      	movs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d108      	bne.n	80005b0 <HAL_CAN_Init+0x242>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    /* Return function status */
    return HAL_OK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	e004      	b.n	80005ba <HAL_CAN_Init+0x24c>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2204      	movs	r2, #4
 80005b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Return function status */
    return HAL_ERROR;
 80005b8:	2301      	movs	r3, #1
  }
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	2201      	movs	r2, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= (uint32_t)CAN_FMR_FINIT;
 80005de:	4b5e      	ldr	r3, [pc, #376]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80005e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005e4:	4a5c      	ldr	r2, [pc, #368]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
 80005ee:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80005f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f4:	4a58      	ldr	r2, [pc, #352]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80005f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80005fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8);
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000600:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	4953      	ldr	r1, [pc, #332]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800060c:	4313      	orrs	r3, r2
 800060e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
     
  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filternbrbitpos;
 8000612:	4b51      	ldr	r3, [pc, #324]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000614:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	43db      	mvns	r3, r3
 800061c:	494e      	ldr	r1, [pc, #312]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800061e:	4013      	ands	r3, r2
 8000620:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d123      	bne.n	8000674 <HAL_CAN_ConfigFilter+0xb0>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filternbrbitpos;
 800062c:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800062e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	43db      	mvns	r3, r3
 8000636:	4948      	ldr	r1, [pc, #288]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000638:	4013      	ands	r3, r2
 800063a:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	0419      	lsls	r1, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800064a:	4843      	ldr	r0, [pc, #268]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8000650:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000652:	3348      	adds	r3, #72	; 0x48
 8000654:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	0419      	lsls	r1, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000664:	483c      	ldr	r0, [pc, #240]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800066a:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800066c:	3348      	adds	r3, #72	; 0x48
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4403      	add	r3, r0
 8000672:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d122      	bne.n	80006c2 <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filternbrbitpos;
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800067e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000682:	4935      	ldr	r1, [pc, #212]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4313      	orrs	r3, r2
 8000688:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	0419      	lsls	r1, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000698:	482f      	ldr	r0, [pc, #188]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800069e:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80006a0:	3348      	adds	r3, #72	; 0x48
 80006a2:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80006b2:	4829      	ldr	r0, [pc, #164]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80006b8:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80006ba:	3348      	adds	r3, #72	; 0x48
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	4403      	add	r3, r0
 80006c0:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <HAL_CAN_ConfigFilter+0x11a>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filternbrbitpos;
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80006cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4920      	ldr	r1, [pc, #128]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80006dc:	e007      	b.n	80006ee <HAL_CAN_ConfigFilter+0x12a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filternbrbitpos;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80006e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006e4:	491c      	ldr	r1, [pc, #112]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d108      	bne.n	8000708 <HAL_CAN_ConfigFilter+0x144>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filternbrbitpos;
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 80006f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	43db      	mvns	r3, r3
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000702:	4013      	ands	r3, r2
 8000704:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d107      	bne.n	8000720 <HAL_CAN_ConfigFilter+0x15c>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filternbrbitpos;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000712:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000716:	4910      	ldr	r1, [pc, #64]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4313      	orrs	r3, r2
 800071c:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d107      	bne.n	8000738 <HAL_CAN_ConfigFilter+0x174>
  {
    CAN1->FA1R |= filternbrbitpos;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800072a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800072e:	490a      	ldr	r1, [pc, #40]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4313      	orrs	r3, r2
 8000734:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 800073a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_CAN_ConfigFilter+0x194>)
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40006400 	.word	0x40006400

0800075c <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t  transmitmailbox = 5;
 8000766:	2305      	movs	r3, #5
 8000768:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000774:	2b01      	cmp	r3, #1
 8000776:	d101      	bne.n	800077c <HAL_CAN_Transmit+0x20>
 8000778:	2302      	movs	r3, #2
 800077a:	e161      	b.n	8000a40 <HAL_CAN_Transmit+0x2e4>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b22      	cmp	r3, #34	; 0x22
 800078e:	d104      	bne.n	800079a <HAL_CAN_Transmit+0x3e>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2232      	movs	r2, #50	; 0x32
 8000794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000798:	e003      	b.n	80007a2 <HAL_CAN_Transmit+0x46>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2212      	movs	r2, #18
 800079e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  }
  
  /* Select one empty transmit mailbox */
  if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80007b0:	d102      	bne.n	80007b8 <HAL_CAN_Transmit+0x5c>
  {
    transmitmailbox = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e017      	b.n	80007e8 <HAL_CAN_Transmit+0x8c>
  }
  else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80007c6:	d102      	bne.n	80007ce <HAL_CAN_Transmit+0x72>
  {
    transmitmailbox = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e00c      	b.n	80007e8 <HAL_CAN_Transmit+0x8c>
  }
  else if ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80007dc:	d102      	bne.n	80007e4 <HAL_CAN_Transmit+0x88>
  {
    transmitmailbox = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e001      	b.n	80007e8 <HAL_CAN_Transmit+0x8c>
  }
  else
  {
    transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 80007e4:	2304      	movs	r3, #4
 80007e6:	60fb      	str	r3, [r7, #12]
  }

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	f000 811f 	beq.w	8000a2e <HAL_CAN_Transmit+0x2d2>
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3318      	adds	r3, #24
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	6811      	ldr	r1, [r2, #0]
 8000802:	f003 0201 	and.w	r2, r3, #1
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3318      	adds	r3, #24
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	440b      	add	r3, r1
 800080e:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d117      	bne.n	800084a <HAL_CAN_Transmit+0xee>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3318      	adds	r3, #24
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4413      	add	r3, r2
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0559      	lsls	r1, r3, #21
                                                  hcan->pTxMsg->RTR);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
 8000836:	430b      	orrs	r3, r1
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	6809      	ldr	r1, [r1, #0]
 800083c:	431a      	orrs	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3318      	adds	r3, #24
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	440b      	add	r3, r1
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	e01a      	b.n	8000880 <HAL_CAN_Transmit+0x124>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3318      	adds	r3, #24
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	4413      	add	r3, r2
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	00d9      	lsls	r1, r3, #3
                                                  hcan->pTxMsg->IDE | \
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
 8000866:	4319      	orrs	r1, r3
                                                  hcan->pTxMsg->RTR);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	68db      	ldr	r3, [r3, #12]
                                                  hcan->pTxMsg->IDE | \
 800086e:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	6809      	ldr	r1, [r1, #0]
 8000874:	431a      	orrs	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3318      	adds	r3, #24
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	440b      	add	r3, r1
 800087e:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f002 020f 	and.w	r2, r2, #15
 800088e:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	3318      	adds	r3, #24
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	4413      	add	r3, r2
 800089c:	3304      	adds	r3, #4
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	f023 020f 	bic.w	r2, r3, #15
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3318      	adds	r3, #24
 80008ac:	011b      	lsls	r3, r3, #4
 80008ae:	440b      	add	r3, r1
 80008b0:	3304      	adds	r3, #4
 80008b2:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3318      	adds	r3, #24
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	6809      	ldr	r1, [r1, #0]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3318      	adds	r3, #24
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	440b      	add	r3, r1
 80008d8:	3304      	adds	r3, #4
 80008da:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	7ddb      	ldrb	r3, [r3, #23]
 80008e2:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	7d9b      	ldrb	r3, [r3, #22]
 80008ea:	041b      	lsls	r3, r3, #16
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
 80008ec:	431a      	orrs	r2, r3
                                             ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	7d5b      	ldrb	r3, [r3, #21]
 80008f4:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
 80008f6:	4313      	orrs	r3, r2
                                             ((uint32_t)hcan->pTxMsg->Data[0]));
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80008fc:	7d12      	ldrb	r2, [r2, #20]
 80008fe:	4610      	mov	r0, r2
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	6811      	ldr	r1, [r2, #0]
                                             ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
 8000904:	ea43 0200 	orr.w	r2, r3, r0
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	440b      	add	r3, r1
 800090e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000912:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	7edb      	ldrb	r3, [r3, #27]
 800091a:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	7e9b      	ldrb	r3, [r3, #26]
 8000922:	041b      	lsls	r3, r3, #16
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
 8000924:	431a      	orrs	r2, r3
                                             ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	7e5b      	ldrb	r3, [r3, #25]
 800092c:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
 800092e:	4313      	orrs	r3, r2
                                             ((uint32_t)hcan->pTxMsg->Data[4]));
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000934:	7e12      	ldrb	r2, [r2, #24]
 8000936:	4610      	mov	r0, r2
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6811      	ldr	r1, [r2, #0]
                                             ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
 800093c:	ea43 0200 	orr.w	r2, r3, r0
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	440b      	add	r3, r1
 8000946:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800094a:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3318      	adds	r3, #24
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4413      	add	r3, r2
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6811      	ldr	r1, [r2, #0]
 800095e:	f043 0201 	orr.w	r2, r3, #1
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3318      	adds	r3, #24
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	440b      	add	r3, r1
 800096a:	601a      	str	r2, [r3, #0]
  
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800096c:	f7ff fcdc 	bl	8000328 <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000972:	e018      	b.n	80009a6 <HAL_CAN_Transmit+0x24a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097a:	d014      	beq.n	80009a6 <HAL_CAN_Transmit+0x24a>
      {
       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <HAL_CAN_Transmit+0x236>
 8000982:	f7ff fcd1 	bl	8000328 <HAL_GetTick>
 8000986:	4602      	mov	r2, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d209      	bcs.n	80009a6 <HAL_CAN_Transmit+0x24a>
       {
         hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2203      	movs	r2, #3
 8000996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
         /* Process unlocked */
         __HAL_UNLOCK(hcan);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         return HAL_TIMEOUT;
 80009a2:	2303      	movs	r3, #3
 80009a4:	e04c      	b.n	8000a40 <HAL_CAN_Transmit+0x2e4>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10b      	bne.n	80009c4 <HAL_CAN_Transmit+0x268>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <HAL_CAN_Transmit+0x2ec>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <HAL_CAN_Transmit+0x2ec>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	e019      	b.n	80009f8 <HAL_CAN_Transmit+0x29c>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d10b      	bne.n	80009e2 <HAL_CAN_Transmit+0x286>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_CAN_Transmit+0x2f0>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_CAN_Transmit+0x2f0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	e00a      	b.n	80009f8 <HAL_CAN_Transmit+0x29c>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_CAN_Transmit+0x2f4>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <HAL_CAN_Transmit+0x2f4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1bb      	bne.n	8000974 <HAL_CAN_Transmit+0x218>
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b32      	cmp	r3, #50	; 0x32
 8000a06:	d108      	bne.n	8000a1a <HAL_CAN_Transmit+0x2be>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2222      	movs	r2, #34	; 0x22
 8000a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000a18:	e007      	b.n	8000a2a <HAL_CAN_Transmit+0x2ce>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    
    /* Return function status */
    return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e008      	b.n	8000a40 <HAL_CAN_Transmit+0x2e4>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2204      	movs	r2, #4
 8000a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
  }
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	04000003 	.word	0x04000003
 8000a4c:	08000300 	.word	0x08000300
 8000a50:	10030000 	.word	0x10030000

08000a54 <HAL_CAN_Receive>:
  * @param  FIFONumber: FIFO Number value
  * @param  Timeout: Specify Timeout value 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive(CAN_HandleTypeDef* hcan, uint8_t FIFONumber, uint32_t Timeout)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	72fb      	strb	r3, [r7, #11]
  uint32_t tickstart = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
   
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d101      	bne.n	8000a74 <HAL_CAN_Receive+0x20>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e127      	b.n	8000cc4 <HAL_CAN_Receive+0x270>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b12      	cmp	r3, #18
 8000a86:	d104      	bne.n	8000a92 <HAL_CAN_Receive+0x3e>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2232      	movs	r2, #50	; 0x32
 8000a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000a90:	e003      	b.n	8000a9a <HAL_CAN_Receive+0x46>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2222      	movs	r2, #34	; 0x22
 8000a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  }
    
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000a9a:	f7ff fc45 	bl	8000328 <HAL_GetTick>
 8000a9e:	6178      	str	r0, [r7, #20]
  
  /* Check pending message */
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0)
 8000aa0:	e018      	b.n	8000ad4 <HAL_CAN_Receive+0x80>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d014      	beq.n	8000ad4 <HAL_CAN_Receive+0x80>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d007      	beq.n	8000ac0 <HAL_CAN_Receive+0x6c>
 8000ab0:	f7ff fc3a 	bl	8000328 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d209      	bcs.n	8000ad4 <HAL_CAN_Receive+0x80>
      {
        hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e0f7      	b.n	8000cc4 <HAL_CAN_Receive+0x270>
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0)
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10b      	bne.n	8000af2 <HAL_CAN_Receive+0x9e>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	e00a      	b.n	8000b08 <HAL_CAN_Receive+0xb4>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1ca      	bne.n	8000aa2 <HAL_CAN_Receive+0x4e>
      }
    }
  }
  
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	7afb      	ldrb	r3, [r7, #11]
 8000b12:	331b      	adds	r3, #27
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	4413      	add	r3, r2
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1e:	f002 0204 	and.w	r2, r2, #4
 8000b22:	609a      	str	r2, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10d      	bne.n	8000b4a <HAL_CAN_Receive+0xf6>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	7afb      	ldrb	r3, [r7, #11]
 8000b34:	331b      	adds	r3, #27
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	4413      	add	r3, r2
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	0d5a      	lsrs	r2, r3, #21
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e00c      	b.n	8000b64 <HAL_CAN_Receive+0x110>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	7afb      	ldrb	r3, [r7, #11]
 8000b50:	331b      	adds	r3, #27
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	4413      	add	r3, r2
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	08da      	lsrs	r2, r3, #3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000b62:	605a      	str	r2, [r3, #4]
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	331b      	adds	r3, #27
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	4413      	add	r3, r2
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b76:	f002 0202 	and.w	r2, r2, #2
 8000b7a:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	7afb      	ldrb	r3, [r7, #11]
 8000b82:	331b      	adds	r3, #27
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	4413      	add	r3, r2
 8000b88:	3304      	adds	r3, #4
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	f002 020f 	and.w	r2, r2, #15
 8000b94:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	7afb      	ldrb	r3, [r7, #11]
 8000b9c:	331b      	adds	r3, #27
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	0a1a      	lsrs	r2, r3, #8
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	4413      	add	r3, r2
 8000bba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	751a      	strb	r2, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	7afb      	ldrb	r3, [r7, #11]
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0a1a      	lsrs	r2, r3, #8
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	755a      	strb	r2, [r3, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	7afb      	ldrb	r3, [r7, #11]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	4413      	add	r3, r2
 8000bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	0c1a      	lsrs	r2, r3, #16
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	759a      	strb	r2, [r3, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	0e1a      	lsrs	r2, r3, #24
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	75da      	strb	r2, [r3, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	7afb      	ldrb	r3, [r7, #11]
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	4413      	add	r3, r2
 8000c20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	761a      	strb	r2, [r3, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	4413      	add	r3, r2
 8000c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	0a1a      	lsrs	r2, r3, #8
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	765a      	strb	r2, [r3, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	4413      	add	r3, r2
 8000c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	0c1a      	lsrs	r2, r3, #16
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	769a      	strb	r2, [r3, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	7afb      	ldrb	r3, [r7, #11]
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	0e1a      	lsrs	r2, r3, #24
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	76da      	strb	r2, [r3, #27]
  
  /* Release the FIFO */
  if(FIFONumber == CAN_FIFO0)
 8000c7c:	7afb      	ldrb	r3, [r7, #11]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d104      	bne.n	8000c8c <HAL_CAN_Receive+0x238>
  {
    /* Release FIFO0 */
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2220      	movs	r2, #32
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	e003      	b.n	8000c94 <HAL_CAN_Receive+0x240>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    /* Release FIFO1 */
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2220      	movs	r2, #32
 8000c92:	611a      	str	r2, [r3, #16]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b32      	cmp	r3, #50	; 0x32
 8000c9e:	d108      	bne.n	8000cb2 <HAL_CAN_Receive+0x25e>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2212      	movs	r2, #18
 8000ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000cb0:	e007      	b.n	8000cc2 <HAL_CAN_Receive+0x26e>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_CAN_GetState>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef* hcan)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Return CAN state */
  return hcan->State;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da0b      	bge.n	8000d78 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <NVIC_SetPriority+0x4c>)
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	3b04      	subs	r3, #4
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d76:	e009      	b.n	8000d8c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <NVIC_SetPriority+0x50>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff47 	bl	8000ce8 <NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5c 	bl	8000d30 <NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d106      	bne.n	8000ed0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ece:	e005      	b.n	8000edc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ed6:	f023 0304 	bic.w	r3, r3, #4
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e177      	b.n	80011f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8166 	bne.w	80011f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x4a>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	69b9      	ldr	r1, [r7, #24]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_GPIO_Init+0xe6>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	2b11      	cmp	r3, #17
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80c0 	beq.w	80011f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a65      	ldr	r2, [pc, #404]	; (8001210 <HAL_GPIO_Init+0x324>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800108e:	4a61      	ldr	r2, [pc, #388]	; (8001214 <HAL_GPIO_Init+0x328>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_GPIO_Init+0x32c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d037      	beq.n	800112a <HAL_GPIO_Init+0x23e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a57      	ldr	r2, [pc, #348]	; (800121c <HAL_GPIO_Init+0x330>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d031      	beq.n	8001126 <HAL_GPIO_Init+0x23a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a56      	ldr	r2, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x334>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x236>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <HAL_GPIO_Init+0x338>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x232>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a54      	ldr	r2, [pc, #336]	; (8001228 <HAL_GPIO_Init+0x33c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x22e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a53      	ldr	r2, [pc, #332]	; (800122c <HAL_GPIO_Init+0x340>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x22a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x344>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x348>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_GPIO_Init+0x34c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x350>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x21a>
 8001102:	2309      	movs	r3, #9
 8001104:	e012      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001106:	230a      	movs	r3, #10
 8001108:	e010      	b.n	800112c <HAL_GPIO_Init+0x240>
 800110a:	2308      	movs	r3, #8
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x240>
 800110e:	2307      	movs	r3, #7
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x240>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x240>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x240>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x328>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_GPIO_Init+0x354>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_GPIO_Init+0x354>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_GPIO_Init+0x354>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_GPIO_Init+0x354>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae84 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40022000 	.word	0x40022000
 800123c:	40022400 	.word	0x40022400
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_PWREx_EnableOverDrive+0xcc>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <HAL_PWREx_EnableOverDrive+0xcc>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_PWREx_EnableOverDrive+0xcc>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a2:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012ac:	68fb      	ldr	r3, [r7, #12]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80012b8:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80012bc:	461a      	mov	r2, r3
 80012be:	2301      	movs	r3, #1
 80012c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c2:	f7ff f831 	bl	8000328 <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012c8:	e009      	b.n	80012de <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ca:	f7ff f82d 	bl	8000328 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d8:	d901      	bls.n	80012de <HAL_PWREx_EnableOverDrive+0x66>
    {
      return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e02e      	b.n	800133c <HAL_PWREx_EnableOverDrive+0xc4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_PWREx_EnableOverDrive+0xd0>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d1ee      	bne.n	80012ca <HAL_PWREx_EnableOverDrive+0x52>
 80012ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	607b      	str	r3, [r7, #4]
  return(result);
 80012fa:	687b      	ldr	r3, [r7, #4]
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001306:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800130a:	461a      	mov	r2, r3
 800130c:	2301      	movs	r3, #1
 800130e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff f80a 	bl	8000328 <HAL_GetTick>
 8001314:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001316:	e009      	b.n	800132c <HAL_PWREx_EnableOverDrive+0xb4>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001318:	f7ff f806 	bl	8000328 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001326:	d901      	bls.n	800132c <HAL_PWREx_EnableOverDrive+0xb4>
    {
      return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e007      	b.n	800133c <HAL_PWREx_EnableOverDrive+0xc4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_PWREx_EnableOverDrive+0xd0>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001338:	d1ee      	bne.n	8001318 <HAL_PWREx_EnableOverDrive+0xa0>
    }
  } 
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0;  
 8001354:	2300      	movs	r3, #0
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d066      	beq.n	8001432 <HAL_RCC_OscConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b04      	cmp	r3, #4
 800136e:	d00c      	beq.n	800138a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001370:	4b99      	ldr	r3, [pc, #612]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001378:	2b08      	cmp	r3, #8
 800137a:	d112      	bne.n	80013a2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137c:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001388:	d10b      	bne.n	80013a2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d04c      	beq.n	8001430 <HAL_RCC_OscConfig+0xe4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d148      	bne.n	8001430 <HAL_RCC_OscConfig+0xe4>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e20b      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80013a2:	4b8e      	ldr	r3, [pc, #568]	; (80015dc <HAL_RCC_OscConfig+0x290>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7fe ffbe 	bl	8000328 <HAL_GetTick>
 80013ac:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x76>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7fe ffba 	bl	8000328 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x76>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1fb      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x290>)
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0xbc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7fe ffa2 	bl	8000328 <HAL_GetTick>
 80013e4:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xae>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e8:	f7fe ff9e 	bl	8000328 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xae>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1df      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b77      	ldr	r3, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x9c>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0xe6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7fe ff8e 	bl	8000328 <HAL_GetTick>
 800140c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7fe ff8a 	bl	8000328 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xd6>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1cb      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b6d      	ldr	r3, [pc, #436]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0xc4>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0xe6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d077      	beq.n	800152e <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d126      	bne.n	80014a4 <HAL_RCC_OscConfig+0x158>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d120      	bne.n	80014a4 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x12e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e19f      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	23f8      	movs	r3, #248	; 0xf8
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	494e      	ldr	r1, [pc, #312]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e044      	b.n	800152e <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d02a      	beq.n	8001502 <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b4c      	ldr	r3, [pc, #304]	; (80015e0 <HAL_RCC_OscConfig+0x294>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7fe ff39 	bl	8000328 <HAL_GetTick>
 80014b6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7fe ff35 	bl	8000328 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e176      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x16e>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6919      	ldr	r1, [r3, #16]
 80014e4:	23f8      	movs	r3, #248	; 0xf8
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x1e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_RCC_OscConfig+0x294>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7fe ff0e 	bl	8000328 <HAL_GetTick>
 800150c:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001510:	f7fe ff0a 	bl	8000328 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e14b      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1c4>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d030      	beq.n	800159c <HAL_RCC_OscConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d016      	beq.n	8001570 <HAL_RCC_OscConfig+0x224>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7fe feee 	bl	8000328 <HAL_GetTick>
 800154c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001550:	f7fe feea 	bl	8000328 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x216>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e12b      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x204>
 800156e:	e015      	b.n	800159c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7fe fed7 	bl	8000328 <HAL_GetTick>
 800157a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x244>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7fe fed3 	bl	8000328 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e114      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x232>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d07c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_RCC_OscConfig+0x28c>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_RCC_OscConfig+0x29c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_RCC_OscConfig+0x29c>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015d0:	f7fe feaa 	bl	8000328 <HAL_GetTick>
 80015d4:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015d6:	e012      	b.n	80015fe <HAL_RCC_OscConfig+0x2b2>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40023802 	.word	0x40023802
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
 80015e8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015ec:	f7fe fe9c 	bl	8000328 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2b2>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0dd      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2a0>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800160a:	4b6f      	ldr	r3, [pc, #444]	; (80017c8 <HAL_RCC_OscConfig+0x47c>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001610:	f7fe fe8a 	bl	8000328 <HAL_GetTick>
 8001614:	6378      	str	r0, [r7, #52]	; 0x34
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x2e2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7fe fe86 	bl	8000328 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0c5      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x2cc>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <HAL_RCC_OscConfig+0x47c>)
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d015      	beq.n	8001678 <HAL_RCC_OscConfig+0x32c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7fe fe6c 	bl	8000328 <HAL_GetTick>
 8001650:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x31e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7fe fe68 	bl	8000328 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x31e>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0a7      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ee      	beq.n	8001654 <HAL_RCC_OscConfig+0x308>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7fe fe56 	bl	8000328 <HAL_GetTick>
 800167c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7fe fe52 	bl	8000328 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e091      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001696:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ee      	bne.n	8001680 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8086 	beq.w	80017b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d07d      	beq.n	80017b4 <HAL_RCC_OscConfig+0x468>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d162      	bne.n	8001786 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_RCC_OscConfig+0x484>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7fe fe2f 	bl	8000328 <HAL_GetTick>
 80016ca:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ce:	f7fe fe2b 	bl	8000328 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e06c      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e0:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x382>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	60fb      	str	r3, [r7, #12]
  return(result);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	1e59      	subs	r1, r3, #1
 800171c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	617b      	str	r3, [r7, #20]
  return(result);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800173e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	61fb      	str	r3, [r7, #28]
  return(result);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	491e      	ldr	r1, [pc, #120]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_RCC_OscConfig+0x484>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7fe fde3 	bl	8000328 <HAL_GetTick>
 8001762:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe fddf 	bl	8000328 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b64      	cmp	r3, #100	; 0x64
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e020      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x41a>
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_OscConfig+0x484>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7fe fdcc 	bl	8000328 <HAL_GetTick>
 8001790:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe fdc8 	bl	8000328 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e009      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_OscConfig+0x480>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x448>
 80017b2:	e001      	b.n	80017b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3738      	adds	r7, #56	; 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40007000 	.word	0x40007000
 80017c8:	40023870 	.word	0x40023870
 80017cc:	40023800 	.word	0x40023800
 80017d0:	42470060 	.word	0x42470060

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017e2:	4b9b      	ldr	r3, [pc, #620]	; (8001a50 <HAL_RCC_ClockConfig+0x27c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f240 80aa 	bls.w	8001946 <HAL_RCC_ClockConfig+0x172>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b97      	ldr	r3, [pc, #604]	; (8001a50 <HAL_RCC_ClockConfig+0x27c>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017fa:	4b95      	ldr	r3, [pc, #596]	; (8001a50 <HAL_RCC_ClockConfig+0x27c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e16d      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001818:	4b8e      	ldr	r3, [pc, #568]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	498b      	ldr	r1, [pc, #556]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8135 	beq.w	8001aa2 <HAL_RCC_ClockConfig+0x2ce>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001840:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d119      	bne.n	8001880 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e14b      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d003      	beq.n	8001860 <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800185c:	2b03      	cmp	r3, #3
 800185e:	d107      	bne.n	8001870 <HAL_RCC_ClockConfig+0x9c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001860:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e13b      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b78      	ldr	r3, [pc, #480]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e133      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001880:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 0203 	bic.w	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4971      	ldr	r1, [pc, #452]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7fe fd49 	bl	8000328 <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d112      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xf2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_ClockConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a2:	f7fe fd41 	bl	8000328 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_ClockConfig+0xe4>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e117      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d1ee      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
 80018c4:	e0ed      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x2ce>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x120>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7fe fd2a 	bl	8000328 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x112>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e100      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e6:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d1ee      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xfc>
 80018f2:	e0d6      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x2ce>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d11d      	bne.n	8001938 <HAL_RCC_ClockConfig+0x164>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_ClockConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7fe fd13 	bl	8000328 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0e9      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b03      	cmp	r3, #3
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_ClockConfig+0x12a>
 8001920:	e0bf      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x2ce>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001922:	f7fe fd01 	bl	8000328 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_ClockConfig+0x164>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0d7      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001938:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ee      	bne.n	8001922 <HAL_RCC_ClockConfig+0x14e>
 8001944:	e0ad      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x2ce>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	493d      	ldr	r1, [pc, #244]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 808b 	beq.w	8001a88 <HAL_RCC_ClockConfig+0x2b4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d119      	bne.n	80019ba <HAL_RCC_ClockConfig+0x1e6>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0ae      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d003      	beq.n	800199a <HAL_RCC_ClockConfig+0x1c6>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x1d6>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0x1e6>
        {
          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e09e      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0x1e6>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e096      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4923      	ldr	r1, [pc, #140]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7fe fcac 	bl	8000328 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d112      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7fe fca4 	bl	8000328 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e07a      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d1ee      	bne.n	80019dc <HAL_RCC_ClockConfig+0x208>
 80019fe:	e043      	b.n	8001a88 <HAL_RCC_ClockConfig+0x2b4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d112      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x25a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_ClockConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0a:	f7fe fc8d 	bl	8000328 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e063      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x236>
 8001a2c:	e02c      	b.n	8001a88 <HAL_RCC_ClockConfig+0x2b4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d122      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x2a8>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001a36:	e00f      	b.n	8001a58 <HAL_RCC_ClockConfig+0x284>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7fe fc76 	bl	8000328 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d906      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x284>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e04c      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_ClockConfig+0x31c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d1e9      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x264>
 8001a64:	e010      	b.n	8001a88 <HAL_RCC_ClockConfig+0x2b4>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7fe fc5f 	bl	8000328 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e035      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_ClockConfig+0x31c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x292>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_RCC_ClockConfig+0x320>)
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_RCC_ClockConfig+0x320>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x2ce>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e022      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x314>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_ClockConfig+0x31c>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <HAL_RCC_ClockConfig+0x31c>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x30c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_RCC_ClockConfig+0x31c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4905      	ldr	r1, [pc, #20]	; (8001af0 <HAL_RCC_ClockConfig+0x31c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7fe fbf7 	bl	80002d4 <HAL_InitTick>
  
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b08b      	sub	sp, #44	; 0x2c
 8001afc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d00c      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x3c>
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d85d      	bhi.n	8001bda <HAL_RCC_GetSysClockFreq+0xe2>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x30>
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x36>
 8001b26:	e058      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b2a:	623b      	str	r3, [r7, #32]
       break;
 8001b2c:	e058      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b30:	623b      	str	r3, [r7, #32]
      break;
 8001b32:	e055      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d017      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001b60:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	fa91 f1a1 	rbit	r1, r1
 8001b68:	6139      	str	r1, [r7, #16]
  return(result);
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	fab1 f181 	clz	r1, r1
 8001b70:	40cb      	lsrs	r3, r1
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e016      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001b90:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	fa91 f1a1 	rbit	r1, r1
 8001b98:	60b9      	str	r1, [r7, #8]
  return(result);
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	fab1 f181 	clz	r1, r1
 8001ba0:	40cb      	lsrs	r3, r1
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bb0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001bb4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	603b      	str	r3, [r7, #0]
  return(result);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	623b      	str	r3, [r7, #32]
      break;
 8001bd8:	e002      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bdc:	623b      	str	r3, [r7, #32]
      break;
 8001bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be0:	6a3b      	ldr	r3, [r7, #32]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	372c      	adds	r7, #44	; 0x2c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001c02:	f7ff ff79 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001c06:	4601      	mov	r1, r0
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x44>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c10:	23f0      	movs	r3, #240	; 0xf0
 8001c12:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x48>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2e:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001c30:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	0800379c 	.word	0x0800379c
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001c52:	f7ff ffd3 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c56:	4601      	mov	r1, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c64:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	603b      	str	r3, [r7, #0]
  return(result);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	0800379c 	.word	0x0800379c

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001c96:	f7ff ffb1 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8001ca4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ca8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	603b      	str	r3, [r7, #0]
  return(result);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	0800379c 	.word	0x0800379c

08001cd4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e03b      	b.n	8001d5e <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fd26 	bl	800274c <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d16:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f825 	bl	8001d68 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d2c:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d3c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d4c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001da4:	f023 030c 	bic.w	r3, r3, #12
 8001da8:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df8:	f040 808c 	bne.w	8001f14 <UART_SetConfig+0x1ac>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a8c      	ldr	r2, [pc, #560]	; (8002034 <UART_SetConfig+0x2cc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <UART_SetConfig+0xa8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8b      	ldr	r2, [pc, #556]	; (8002038 <UART_SetConfig+0x2d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d140      	bne.n	8001e92 <UART_SetConfig+0x12a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e10:	f7ff ff3e 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009a      	lsls	r2, r3, #2
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4a84      	ldr	r2, [pc, #528]	; (800203c <UART_SetConfig+0x2d4>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	011c      	lsls	r4, r3, #4
 8001e34:	f7ff ff2c 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009a      	lsls	r2, r3, #2
 8001e42:	441a      	add	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e4e:	f7ff ff1f 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009a      	lsls	r2, r3, #2
 8001e5c:	441a      	add	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	4a74      	ldr	r2, [pc, #464]	; (800203c <UART_SetConfig+0x2d4>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2264      	movs	r2, #100	; 0x64
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	1aeb      	subs	r3, r5, r3
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	3332      	adds	r3, #50	; 0x32
 8001e7c:	4a6f      	ldr	r2, [pc, #444]	; (800203c <UART_SetConfig+0x2d4>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4322      	orrs	r2, r4
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e0cc      	b.n	800202c <UART_SetConfig+0x2c4>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e92:	f7ff fedb 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009a      	lsls	r2, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <UART_SetConfig+0x2d4>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	011c      	lsls	r4, r3, #4
 8001eb6:	f7ff fec9 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	441a      	add	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ed0:	f7ff febc 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4a54      	ldr	r2, [pc, #336]	; (800203c <UART_SetConfig+0x2d4>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	2264      	movs	r2, #100	; 0x64
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	1aeb      	subs	r3, r5, r3
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	3332      	adds	r3, #50	; 0x32
 8001efe:	4a4f      	ldr	r2, [pc, #316]	; (800203c <UART_SetConfig+0x2d4>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4322      	orrs	r2, r4
 8001f10:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001f12:	e08b      	b.n	800202c <UART_SetConfig+0x2c4>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a46      	ldr	r2, [pc, #280]	; (8002034 <UART_SetConfig+0x2cc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <UART_SetConfig+0x1c0>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a45      	ldr	r2, [pc, #276]	; (8002038 <UART_SetConfig+0x2d0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d140      	bne.n	8001faa <UART_SetConfig+0x242>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f28:	f7ff feb2 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	009a      	lsls	r2, r3, #2
 8001f36:	441a      	add	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4a3e      	ldr	r2, [pc, #248]	; (800203c <UART_SetConfig+0x2d4>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	011c      	lsls	r4, r3, #4
 8001f4c:	f7ff fea0 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	009a      	lsls	r2, r3, #2
 8001f5a:	441a      	add	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f66:	f7ff fe93 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <UART_SetConfig+0x2d4>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2264      	movs	r2, #100	; 0x64
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	1aeb      	subs	r3, r5, r3
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	3332      	adds	r3, #50	; 0x32
 8001f94:	4a29      	ldr	r2, [pc, #164]	; (800203c <UART_SetConfig+0x2d4>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4322      	orrs	r2, r4
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e040      	b.n	800202c <UART_SetConfig+0x2c4>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001faa:	f7ff fe4f 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <UART_SetConfig+0x2d4>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	011c      	lsls	r4, r3, #4
 8001fce:	f7ff fe3d 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	009a      	lsls	r2, r3, #2
 8001fdc:	441a      	add	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fe8:	f7ff fe30 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <UART_SetConfig+0x2d4>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	2264      	movs	r2, #100	; 0x64
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	1aeb      	subs	r3, r5, r3
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	3332      	adds	r3, #50	; 0x32
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <UART_SetConfig+0x2d4>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4322      	orrs	r2, r4
 8002028:	609a      	str	r2, [r3, #8]
}
 800202a:	e7ff      	b.n	800202c <UART_SetConfig+0x2c4>
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bdb0      	pop	{r4, r5, r7, pc}
 8002034:	40011000 	.word	0x40011000
 8002038:	40011400 	.word	0x40011400
 800203c:	51eb851f 	.word	0x51eb851f

08002040 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_CAN1_Init+0x5c>)
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <MX_CAN1_Init+0x60>)
 8002048:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_CAN1_Init+0x5c>)
 800204c:	220e      	movs	r2, #14
 800204e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_CAN1_Init+0x5c>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_CAN1_Init+0x5c>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_6TQ;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_CAN1_Init+0x5c>)
 800205e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002062:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_8TQ;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <MX_CAN1_Init+0x5c>)
 8002066:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800206a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_CAN1_Init+0x5c>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_CAN1_Init+0x5c>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_CAN1_Init+0x5c>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hcan1.Init.NART = DISABLE;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <MX_CAN1_Init+0x5c>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <MX_CAN1_Init+0x5c>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <MX_CAN1_Init+0x5c>)
 800208c:	2200      	movs	r2, #0
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_CAN_Init(&hcan1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <MX_CAN1_Init+0x5c>)
 8002092:	f7fe f96c 	bl	800036e <HAL_CAN_Init>

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000080 	.word	0x20000080
 80020a0:	40006400 	.word	0x40006400

080020a4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <MX_CAN2_Init+0x60>)
 80020ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 14;
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020b0:	220e      	movs	r2, #14
 80020b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SJW = CAN_SJW_1TQ;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
  hcan2.Init.BS1 = CAN_BS1_6TQ;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020c2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80020c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.BS2 = CAN_BS2_8TQ;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020ca:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80020ce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TTCM = DISABLE;
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  hcan2.Init.ABOM = DISABLE;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	61da      	str	r2, [r3, #28]
  hcan2.Init.AWUM = DISABLE;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  hcan2.Init.NART = DISABLE;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
  hcan2.Init.RFLM = DISABLE;
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  hcan2.Init.TXFP = DISABLE;
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_CAN_Init(&hcan2);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <MX_CAN2_Init+0x5c>)
 80020f6:	f7fe f93a 	bl	800036e <HAL_CAN_Init>

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200000c0 	.word	0x200000c0
 8002104:	40006800 	.word	0x40006800

08002108 <HAL_CAN_MspInit>:

static int CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a34      	ldr	r2, [pc, #208]	; (80021e8 <HAL_CAN_MspInit+0xe0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d128      	bne.n	800216c <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    CAN1_CLK_ENABLED++;
 800211a:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_CAN_MspInit+0xe4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a32      	ldr	r2, [pc, #200]	; (80021ec <HAL_CAN_MspInit+0xe4>)
 8002122:	6013      	str	r3, [r2, #0]
    if(CAN1_CLK_ENABLED==1){
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_CAN_MspInit+0xe4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10d      	bne.n	8002148 <HAL_CAN_MspInit+0x40>
      __CAN1_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 8002136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
  
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800214c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800215a:	2309      	movs	r3, #9
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4823      	ldr	r0, [pc, #140]	; (80021f4 <HAL_CAN_MspInit+0xec>)
 8002166:	f7fe fec1 	bl	8000eec <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800216a:	e039      	b.n	80021e0 <HAL_CAN_MspInit+0xd8>
  else if(hcan->Instance==CAN2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_CAN_MspInit+0xf0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d134      	bne.n	80021e0 <HAL_CAN_MspInit+0xd8>
    __CAN2_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 8002180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    CAN1_CLK_ENABLED++;
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_CAN_MspInit+0xe4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_CAN_MspInit+0xe4>)
 800219a:	6013      	str	r3, [r2, #0]
    if(CAN1_CLK_ENABLED==1){
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_CAN_MspInit+0xe4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10d      	bne.n	80021c0 <HAL_CAN_MspInit+0xb8>
      __CAN1_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 80021ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_CAN_MspInit+0xe8>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021c0:	2360      	movs	r3, #96	; 0x60
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80021d0:	2309      	movs	r3, #9
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <HAL_CAN_MspInit+0xec>)
 80021dc:	f7fe fe86 	bl	8000eec <HAL_GPIO_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40006400 	.word	0x40006400
 80021ec:	20000100 	.word	0x20000100
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40006800 	.word	0x40006800

080021fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOF_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <MX_GPIO_Init+0x9c>)
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  __GPIOH_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <MX_GPIO_Init+0x9c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <MX_GPIO_Init+0x9c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_GPIO_Init+0x9c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_GPIO_Init+0xa0>)
 800228a:	f7fe fe2f 	bl	8000eec <HAL_GPIO_Init>

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40021400 	.word	0x40021400

080022a0 <main>:
}
	
/* USER CODE END 0 */

int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f7fd fff4 	bl	8000290 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f8b4 	bl	8002414 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ac:	f7ff ffa6 	bl	80021fc <MX_GPIO_Init>
  MX_CAN1_Init();
 80022b0:	f7ff fec6 	bl	8002040 <MX_CAN1_Init>
  MX_CAN2_Init();
 80022b4:	f7ff fef6 	bl	80020a4 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 80022b8:	f000 fa24 	bl	8002704 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  hcan2.pTxMsg = &TxMessage;
 80022bc:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <main+0x14c>)
 80022be:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <main+0x150>)
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
  hcan1.pRxMsg = &RxMessage;
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <main+0x154>)
 80022c4:	4a4c      	ldr	r2, [pc, #304]	; (80023f8 <main+0x158>)
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
	
	printf("**** This is CAN test program ****\r\n\r\n");
 80022c8:	484c      	ldr	r0, [pc, #304]	; (80023fc <main+0x15c>)
 80022ca:	f000 fbc3 	bl	8002a54 <puts>
	
	/*##-1- Configure CAN2 Transmission Massage #####################################*/
	hcan2.pTxMsg->StdId = 0x123;
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <main+0x14c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f240 1223 	movw	r2, #291	; 0x123
 80022d6:	601a      	str	r2, [r3, #0]
	hcan2.pTxMsg->RTR = CAN_RTR_DATA;
 80022d8:	4b44      	ldr	r3, [pc, #272]	; (80023ec <main+0x14c>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
	hcan2.pTxMsg->IDE = CAN_ID_STD;
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <main+0x14c>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
	hcan2.pTxMsg->DLC = 8;
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <main+0x14c>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	2208      	movs	r2, #8
 80022ee:	611a      	str	r2, [r3, #16]
	hcan2.pTxMsg->Data[0] = 'C';
 80022f0:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <main+0x14c>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	2243      	movs	r2, #67	; 0x43
 80022f6:	751a      	strb	r2, [r3, #20]
	hcan2.pTxMsg->Data[1] = 'A';
 80022f8:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <main+0x14c>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	2241      	movs	r2, #65	; 0x41
 80022fe:	755a      	strb	r2, [r3, #21]
	hcan2.pTxMsg->Data[2] = 'N';
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <main+0x14c>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	224e      	movs	r2, #78	; 0x4e
 8002306:	759a      	strb	r2, [r3, #22]
	hcan2.pTxMsg->Data[3] = ' ';
 8002308:	4b38      	ldr	r3, [pc, #224]	; (80023ec <main+0x14c>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	2220      	movs	r2, #32
 800230e:	75da      	strb	r2, [r3, #23]
	hcan2.pTxMsg->Data[4] = 'T';
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <main+0x14c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	2254      	movs	r2, #84	; 0x54
 8002316:	761a      	strb	r2, [r3, #24]
	hcan2.pTxMsg->Data[5] = 'e';
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <main+0x14c>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	2265      	movs	r2, #101	; 0x65
 800231e:	765a      	strb	r2, [r3, #25]
	hcan2.pTxMsg->Data[6] = 's';
 8002320:	4b32      	ldr	r3, [pc, #200]	; (80023ec <main+0x14c>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2273      	movs	r2, #115	; 0x73
 8002326:	769a      	strb	r2, [r3, #26]
	hcan2.pTxMsg->Data[7] = 't';
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <main+0x14c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2274      	movs	r2, #116	; 0x74
 800232e:	76da      	strb	r2, [r3, #27]
	
  /*##-2- Configure the CAN1 Filter ###########################################*/
  sFilterConfig.FilterNumber = 0;
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <main+0x160>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <main+0x160>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <main+0x160>)
 800233e:	2201      	movs	r2, #1
 8002340:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <main+0x160>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <main+0x160>)
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <main+0x160>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <main+0x160>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <main+0x160>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <main+0x160>)
 8002362:	2201      	movs	r2, #1
 8002364:	621a      	str	r2, [r3, #32]
  sFilterConfig.BankNumber = 14;
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <main+0x160>)
 8002368:	220e      	movs	r2, #14
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800236c:	4924      	ldr	r1, [pc, #144]	; (8002400 <main+0x160>)
 800236e:	4821      	ldr	r0, [pc, #132]	; (80023f4 <main+0x154>)
 8002370:	f7fe f928 	bl	80005c4 <HAL_CAN_ConfigFilter>
	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("CAN Test Start...\n");
 8002374:	4823      	ldr	r0, [pc, #140]	; (8002404 <main+0x164>)
 8002376:	f000 fb6d 	bl	8002a54 <puts>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		
		/*##-3- Start the CAN2 Transmission process #####################################*/
		if(HAL_CAN_Transmit(&hcan2, 10) != HAL_OK)
 800237a:	210a      	movs	r1, #10
 800237c:	481b      	ldr	r0, [pc, #108]	; (80023ec <main+0x14c>)
 800237e:	f7fe f9ed 	bl	800075c <HAL_CAN_Transmit>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <main+0xec>
		{
			/* Transmition Error */
			Error_Handler();
 8002388:	f000 f8aa 	bl	80024e0 <Error_Handler>
		}
		if(HAL_CAN_GetState(&hcan2) != HAL_CAN_STATE_READY)
 800238c:	4817      	ldr	r0, [pc, #92]	; (80023ec <main+0x14c>)
 800238e:	f7fe fc9d 	bl	8000ccc <HAL_CAN_GetState>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d001      	beq.n	800239c <main+0xfc>
		{
			Error_Handler();
 8002398:	f000 f8a2 	bl	80024e0 <Error_Handler>
			
		}
		/*##-4- Start the CAN1 Reception process ########################################*/
		if(HAL_CAN_Receive(&hcan1, CAN_FIFO0,10) != HAL_OK)
 800239c:	220a      	movs	r2, #10
 800239e:	2100      	movs	r1, #0
 80023a0:	4814      	ldr	r0, [pc, #80]	; (80023f4 <main+0x154>)
 80023a2:	f7fe fb57 	bl	8000a54 <HAL_CAN_Receive>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <main+0x110>
		{
			/* Reception Error */
			Error_Handler();	
 80023ac:	f000 f898 	bl	80024e0 <Error_Handler>
		}
		if(HAL_CAN_GetState(&hcan1) != HAL_CAN_STATE_READY)
 80023b0:	4810      	ldr	r0, [pc, #64]	; (80023f4 <main+0x154>)
 80023b2:	f7fe fc8b 	bl	8000ccc <HAL_CAN_GetState>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d001      	beq.n	80023c0 <main+0x120>
		{
			Error_Handler();
 80023bc:	f000 f890 	bl	80024e0 <Error_Handler>
		}
		printf("StdId : %lx\r\n", hcan1.pRxMsg->StdId);
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <main+0x154>)
 80023c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	480f      	ldr	r0, [pc, #60]	; (8002408 <main+0x168>)
 80023ca:	f000 fadd 	bl	8002988 <iprintf>
		printf("RxMsg : %s",hcan1.pRxMsg->Data);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <main+0x154>)
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	3314      	adds	r3, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <main+0x16c>)
 80023d8:	f000 fad6 	bl	8002988 <iprintf>
		printf("\r\n\r\n");		
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <main+0x170>)
 80023de:	f000 fb39 	bl	8002a54 <puts>
		
		HAL_Delay(1000);
 80023e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e6:	f7fd ffab 	bl	8000340 <HAL_Delay>
		if(HAL_CAN_Transmit(&hcan2, 10) != HAL_OK)
 80023ea:	e7c6      	b.n	800237a <main+0xda>
 80023ec:	200000c0 	.word	0x200000c0
 80023f0:	2000012c 	.word	0x2000012c
 80023f4:	20000080 	.word	0x20000080
 80023f8:	20000148 	.word	0x20000148
 80023fc:	08003740 	.word	0x08003740
 8002400:	20000104 	.word	0x20000104
 8002404:	08003768 	.word	0x08003768
 8002408:	0800377c 	.word	0x0800377c
 800240c:	0800378c 	.word	0x0800378c
 8002410:	08003798 	.word	0x08003798

08002414 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b094      	sub	sp, #80	; 0x50
 8002418:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <SystemClock_Config+0xc0>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <SystemClock_Config+0xc0>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <SystemClock_Config+0xc0>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <SystemClock_Config+0xc4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <SystemClock_Config+0xc4>)
 8002440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <SystemClock_Config+0xc4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002452:	2301      	movs	r3, #1
 8002454:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002456:	2301      	movs	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245a:	2302      	movs	r3, #2
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800245e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002464:	2305      	movs	r3, #5
 8002466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 225;
 8002468:	23e1      	movs	r3, #225	; 0xe1
 800246a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800246c:	2302      	movs	r3, #2
 800246e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002470:	2304      	movs	r3, #4
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe ff67 	bl	800134c <HAL_RCC_OscConfig>

  HAL_PWREx_ActivateOverDrive();
 800247e:	f7fe fefb 	bl	8001278 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 8002482:	230d      	movs	r3, #13
 8002484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002486:	2302      	movs	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800248e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2105      	movs	r1, #5
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff f997 	bl	80017d4 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024a6:	f7ff fba9 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <SystemClock_Config+0xc8>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fcf0 	bl	8000e9a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024ba:	2004      	movs	r0, #4
 80024bc:	f7fe fcfa 	bl	8000eb4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7fe fccb 	bl	8000e62 <HAL_NVIC_SetPriority>
}
 80024cc:	bf00      	nop
 80024ce:	3750      	adds	r7, #80	; 0x50
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000
 80024dc:	10624dd3 	.word	0x10624dd3

080024e0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Turn LED1 on */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	4801      	ldr	r0, [pc, #4]	; (80024f0 <Error_Handler+0x10>)
 80024ea:	f7fe feab 	bl	8001244 <HAL_GPIO_WritePin>
  while(1)
 80024ee:	e7fe      	b.n	80024ee <Error_Handler+0xe>
 80024f0:	40021400 	.word	0x40021400

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_MspInit+0x4c>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_MspInit+0x4c>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_MspInit+0x4c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_MspInit+0x4c>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002548:	f7fd fee0 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
  }

  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
  }
  return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	605a      	str	r2, [r3, #4]
  return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f000 fb28 	bl	8002cb0 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20030000 	.word	0x20030000
 800268c:	00000400 	.word	0x00000400
 8002690:	2000016c 	.word	0x2000016c
 8002694:	20000300 	.word	0x20000300

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <SystemInit+0x60>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <SystemInit+0x60>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <SystemInit+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <SystemInit+0x64>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <SystemInit+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <SystemInit+0x64>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <SystemInit+0x64>)
 80026c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <SystemInit+0x64>)
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <SystemInit+0x68>)
 80026d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <SystemInit+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a08      	ldr	r2, [pc, #32]	; (80026fc <SystemInit+0x64>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x64>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <SystemInit+0x60>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ec:	609a      	str	r2, [r3, #8]
#endif
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	40023800 	.word	0x40023800
 8002700:	24003010 	.word	0x24003010

08002704 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_USART1_UART_Init+0x40>)
 800270a:	4a0f      	ldr	r2, [pc, #60]	; (8002748 <MX_USART1_UART_Init+0x44>)
 800270c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <MX_USART1_UART_Init+0x40>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <MX_USART1_UART_Init+0x40>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_USART1_UART_Init+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <MX_USART1_UART_Init+0x40>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_USART1_UART_Init+0x40>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <MX_USART1_UART_Init+0x40>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <MX_USART1_UART_Init+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 800273a:	4802      	ldr	r0, [pc, #8]	; (8002744 <MX_USART1_UART_Init+0x40>)
 800273c:	f7ff faca 	bl	8001cd4 <HAL_UART_Init>

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000170 	.word	0x20000170
 8002748:	40011000 	.word	0x40011000

0800274c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_UART_MspInit+0x58>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d11e      	bne.n	800279c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __USART1_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_UART_MspInit+0x5c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <HAL_UART_MspInit+0x5c>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_UART_MspInit+0x5c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800277a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800277e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002784:	2301      	movs	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800278c:	2307      	movs	r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_UART_MspInit+0x60>)
 8002798:	f7fe fba8 	bl	8000eec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40011000 	.word	0x40011000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b4:	f7ff ff70 	bl	8002698 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027de:	f000 fa6d 	bl	8002cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7ff fd5d 	bl	80022a0 <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80027f4:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 80027f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80027fc:	200002fc 	.word	0x200002fc

08002800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC_IRQHandler>
	...

08002804 <std>:
 8002804:	2300      	movs	r3, #0
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
 800280a:	e9c0 3300 	strd	r3, r3, [r0]
 800280e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002812:	6083      	str	r3, [r0, #8]
 8002814:	8181      	strh	r1, [r0, #12]
 8002816:	6643      	str	r3, [r0, #100]	; 0x64
 8002818:	81c2      	strh	r2, [r0, #14]
 800281a:	6183      	str	r3, [r0, #24]
 800281c:	4619      	mov	r1, r3
 800281e:	2208      	movs	r2, #8
 8002820:	305c      	adds	r0, #92	; 0x5c
 8002822:	f000 f9f7 	bl	8002c14 <memset>
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <std+0x58>)
 8002828:	6263      	str	r3, [r4, #36]	; 0x24
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <std+0x5c>)
 800282c:	62a3      	str	r3, [r4, #40]	; 0x28
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <std+0x60>)
 8002830:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <std+0x64>)
 8002834:	6323      	str	r3, [r4, #48]	; 0x30
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <std+0x68>)
 8002838:	6224      	str	r4, [r4, #32]
 800283a:	429c      	cmp	r4, r3
 800283c:	d006      	beq.n	800284c <std+0x48>
 800283e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002842:	4294      	cmp	r4, r2
 8002844:	d002      	beq.n	800284c <std+0x48>
 8002846:	33d0      	adds	r3, #208	; 0xd0
 8002848:	429c      	cmp	r4, r3
 800284a:	d105      	bne.n	8002858 <std+0x54>
 800284c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002854:	f000 ba56 	b.w	8002d04 <__retarget_lock_init_recursive>
 8002858:	bd10      	pop	{r4, pc}
 800285a:	bf00      	nop
 800285c:	08002a65 	.word	0x08002a65
 8002860:	08002a87 	.word	0x08002a87
 8002864:	08002abf 	.word	0x08002abf
 8002868:	08002ae3 	.word	0x08002ae3
 800286c:	200001b0 	.word	0x200001b0

08002870 <stdio_exit_handler>:
 8002870:	4a02      	ldr	r2, [pc, #8]	; (800287c <stdio_exit_handler+0xc>)
 8002872:	4903      	ldr	r1, [pc, #12]	; (8002880 <stdio_exit_handler+0x10>)
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <stdio_exit_handler+0x14>)
 8002876:	f000 b869 	b.w	800294c <_fwalk_sglue>
 800287a:	bf00      	nop
 800287c:	20000004 	.word	0x20000004
 8002880:	080035b1 	.word	0x080035b1
 8002884:	20000010 	.word	0x20000010

08002888 <cleanup_stdio>:
 8002888:	6841      	ldr	r1, [r0, #4]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <cleanup_stdio+0x34>)
 800288c:	4299      	cmp	r1, r3
 800288e:	b510      	push	{r4, lr}
 8002890:	4604      	mov	r4, r0
 8002892:	d001      	beq.n	8002898 <cleanup_stdio+0x10>
 8002894:	f000 fe8c 	bl	80035b0 <_fflush_r>
 8002898:	68a1      	ldr	r1, [r4, #8]
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <cleanup_stdio+0x38>)
 800289c:	4299      	cmp	r1, r3
 800289e:	d002      	beq.n	80028a6 <cleanup_stdio+0x1e>
 80028a0:	4620      	mov	r0, r4
 80028a2:	f000 fe85 	bl	80035b0 <_fflush_r>
 80028a6:	68e1      	ldr	r1, [r4, #12]
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <cleanup_stdio+0x3c>)
 80028aa:	4299      	cmp	r1, r3
 80028ac:	d004      	beq.n	80028b8 <cleanup_stdio+0x30>
 80028ae:	4620      	mov	r0, r4
 80028b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b4:	f000 be7c 	b.w	80035b0 <_fflush_r>
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	bf00      	nop
 80028bc:	200001b0 	.word	0x200001b0
 80028c0:	20000218 	.word	0x20000218
 80028c4:	20000280 	.word	0x20000280

080028c8 <global_stdio_init.part.0>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <global_stdio_init.part.0+0x30>)
 80028cc:	4c0b      	ldr	r4, [pc, #44]	; (80028fc <global_stdio_init.part.0+0x34>)
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <global_stdio_init.part.0+0x38>)
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4620      	mov	r0, r4
 80028d4:	2200      	movs	r2, #0
 80028d6:	2104      	movs	r1, #4
 80028d8:	f7ff ff94 	bl	8002804 <std>
 80028dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80028e0:	2201      	movs	r2, #1
 80028e2:	2109      	movs	r1, #9
 80028e4:	f7ff ff8e 	bl	8002804 <std>
 80028e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80028ec:	2202      	movs	r2, #2
 80028ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f2:	2112      	movs	r1, #18
 80028f4:	f7ff bf86 	b.w	8002804 <std>
 80028f8:	200002e8 	.word	0x200002e8
 80028fc:	200001b0 	.word	0x200001b0
 8002900:	08002871 	.word	0x08002871

08002904 <__sfp_lock_acquire>:
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <__sfp_lock_acquire+0x8>)
 8002906:	f000 b9fe 	b.w	8002d06 <__retarget_lock_acquire_recursive>
 800290a:	bf00      	nop
 800290c:	200002f1 	.word	0x200002f1

08002910 <__sfp_lock_release>:
 8002910:	4801      	ldr	r0, [pc, #4]	; (8002918 <__sfp_lock_release+0x8>)
 8002912:	f000 b9f9 	b.w	8002d08 <__retarget_lock_release_recursive>
 8002916:	bf00      	nop
 8002918:	200002f1 	.word	0x200002f1

0800291c <__sinit>:
 800291c:	b510      	push	{r4, lr}
 800291e:	4604      	mov	r4, r0
 8002920:	f7ff fff0 	bl	8002904 <__sfp_lock_acquire>
 8002924:	6a23      	ldr	r3, [r4, #32]
 8002926:	b11b      	cbz	r3, 8002930 <__sinit+0x14>
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292c:	f7ff bff0 	b.w	8002910 <__sfp_lock_release>
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__sinit+0x28>)
 8002932:	6223      	str	r3, [r4, #32]
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <__sinit+0x2c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f5      	bne.n	8002928 <__sinit+0xc>
 800293c:	f7ff ffc4 	bl	80028c8 <global_stdio_init.part.0>
 8002940:	e7f2      	b.n	8002928 <__sinit+0xc>
 8002942:	bf00      	nop
 8002944:	08002889 	.word	0x08002889
 8002948:	200002e8 	.word	0x200002e8

0800294c <_fwalk_sglue>:
 800294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002950:	4607      	mov	r7, r0
 8002952:	4688      	mov	r8, r1
 8002954:	4614      	mov	r4, r2
 8002956:	2600      	movs	r6, #0
 8002958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800295c:	f1b9 0901 	subs.w	r9, r9, #1
 8002960:	d505      	bpl.n	800296e <_fwalk_sglue+0x22>
 8002962:	6824      	ldr	r4, [r4, #0]
 8002964:	2c00      	cmp	r4, #0
 8002966:	d1f7      	bne.n	8002958 <_fwalk_sglue+0xc>
 8002968:	4630      	mov	r0, r6
 800296a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800296e:	89ab      	ldrh	r3, [r5, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d907      	bls.n	8002984 <_fwalk_sglue+0x38>
 8002974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002978:	3301      	adds	r3, #1
 800297a:	d003      	beq.n	8002984 <_fwalk_sglue+0x38>
 800297c:	4629      	mov	r1, r5
 800297e:	4638      	mov	r0, r7
 8002980:	47c0      	blx	r8
 8002982:	4306      	orrs	r6, r0
 8002984:	3568      	adds	r5, #104	; 0x68
 8002986:	e7e9      	b.n	800295c <_fwalk_sglue+0x10>

08002988 <iprintf>:
 8002988:	b40f      	push	{r0, r1, r2, r3}
 800298a:	b507      	push	{r0, r1, r2, lr}
 800298c:	4906      	ldr	r1, [pc, #24]	; (80029a8 <iprintf+0x20>)
 800298e:	ab04      	add	r3, sp, #16
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	f853 2b04 	ldr.w	r2, [r3], #4
 8002996:	6881      	ldr	r1, [r0, #8]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	f000 fad9 	bl	8002f50 <_vfiprintf_r>
 800299e:	b003      	add	sp, #12
 80029a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029a4:	b004      	add	sp, #16
 80029a6:	4770      	bx	lr
 80029a8:	2000005c 	.word	0x2000005c

080029ac <_puts_r>:
 80029ac:	6a03      	ldr	r3, [r0, #32]
 80029ae:	b570      	push	{r4, r5, r6, lr}
 80029b0:	6884      	ldr	r4, [r0, #8]
 80029b2:	4605      	mov	r5, r0
 80029b4:	460e      	mov	r6, r1
 80029b6:	b90b      	cbnz	r3, 80029bc <_puts_r+0x10>
 80029b8:	f7ff ffb0 	bl	800291c <__sinit>
 80029bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029be:	07db      	lsls	r3, r3, #31
 80029c0:	d405      	bmi.n	80029ce <_puts_r+0x22>
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	0598      	lsls	r0, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_puts_r+0x22>
 80029c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ca:	f000 f99c 	bl	8002d06 <__retarget_lock_acquire_recursive>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	0719      	lsls	r1, r3, #28
 80029d2:	d513      	bpl.n	80029fc <_puts_r+0x50>
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	b18b      	cbz	r3, 80029fc <_puts_r+0x50>
 80029d8:	3e01      	subs	r6, #1
 80029da:	68a3      	ldr	r3, [r4, #8]
 80029dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60a3      	str	r3, [r4, #8]
 80029e4:	b9e9      	cbnz	r1, 8002a22 <_puts_r+0x76>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da2e      	bge.n	8002a48 <_puts_r+0x9c>
 80029ea:	4622      	mov	r2, r4
 80029ec:	210a      	movs	r1, #10
 80029ee:	4628      	mov	r0, r5
 80029f0:	f000 f87b 	bl	8002aea <__swbuf_r>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d007      	beq.n	8002a08 <_puts_r+0x5c>
 80029f8:	250a      	movs	r5, #10
 80029fa:	e007      	b.n	8002a0c <_puts_r+0x60>
 80029fc:	4621      	mov	r1, r4
 80029fe:	4628      	mov	r0, r5
 8002a00:	f000 f8b0 	bl	8002b64 <__swsetup_r>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d0e7      	beq.n	80029d8 <_puts_r+0x2c>
 8002a08:	f04f 35ff 	mov.w	r5, #4294967295
 8002a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a0e:	07da      	lsls	r2, r3, #31
 8002a10:	d405      	bmi.n	8002a1e <_puts_r+0x72>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	059b      	lsls	r3, r3, #22
 8002a16:	d402      	bmi.n	8002a1e <_puts_r+0x72>
 8002a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a1a:	f000 f975 	bl	8002d08 <__retarget_lock_release_recursive>
 8002a1e:	4628      	mov	r0, r5
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da04      	bge.n	8002a30 <_puts_r+0x84>
 8002a26:	69a2      	ldr	r2, [r4, #24]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dc06      	bgt.n	8002a3a <_puts_r+0x8e>
 8002a2c:	290a      	cmp	r1, #10
 8002a2e:	d004      	beq.n	8002a3a <_puts_r+0x8e>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	6022      	str	r2, [r4, #0]
 8002a36:	7019      	strb	r1, [r3, #0]
 8002a38:	e7cf      	b.n	80029da <_puts_r+0x2e>
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f000 f854 	bl	8002aea <__swbuf_r>
 8002a42:	3001      	adds	r0, #1
 8002a44:	d1c9      	bne.n	80029da <_puts_r+0x2e>
 8002a46:	e7df      	b.n	8002a08 <_puts_r+0x5c>
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	250a      	movs	r5, #10
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	701d      	strb	r5, [r3, #0]
 8002a52:	e7db      	b.n	8002a0c <_puts_r+0x60>

08002a54 <puts>:
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <puts+0xc>)
 8002a56:	4601      	mov	r1, r0
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	f7ff bfa7 	b.w	80029ac <_puts_r>
 8002a5e:	bf00      	nop
 8002a60:	2000005c 	.word	0x2000005c

08002a64 <__sread>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	460c      	mov	r4, r1
 8002a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a6c:	f000 f8fc 	bl	8002c68 <_read_r>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	bfab      	itete	ge
 8002a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a76:	89a3      	ldrhlt	r3, [r4, #12]
 8002a78:	181b      	addge	r3, r3, r0
 8002a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a7e:	bfac      	ite	ge
 8002a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a82:	81a3      	strhlt	r3, [r4, #12]
 8002a84:	bd10      	pop	{r4, pc}

08002a86 <__swrite>:
 8002a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	898b      	ldrh	r3, [r1, #12]
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	4605      	mov	r5, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	4616      	mov	r6, r2
 8002a96:	d505      	bpl.n	8002aa4 <__swrite+0x1e>
 8002a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f000 f8d0 	bl	8002c44 <_lseek_r>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	4632      	mov	r2, r6
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aba:	f000 b8e7 	b.w	8002c8c <_write_r>

08002abe <__sseek>:
 8002abe:	b510      	push	{r4, lr}
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac6:	f000 f8bd 	bl	8002c44 <_lseek_r>
 8002aca:	1c43      	adds	r3, r0, #1
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	bf15      	itete	ne
 8002ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ada:	81a3      	strheq	r3, [r4, #12]
 8002adc:	bf18      	it	ne
 8002ade:	81a3      	strhne	r3, [r4, #12]
 8002ae0:	bd10      	pop	{r4, pc}

08002ae2 <__sclose>:
 8002ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae6:	f000 b89d 	b.w	8002c24 <_close_r>

08002aea <__swbuf_r>:
 8002aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aec:	460e      	mov	r6, r1
 8002aee:	4614      	mov	r4, r2
 8002af0:	4605      	mov	r5, r0
 8002af2:	b118      	cbz	r0, 8002afc <__swbuf_r+0x12>
 8002af4:	6a03      	ldr	r3, [r0, #32]
 8002af6:	b90b      	cbnz	r3, 8002afc <__swbuf_r+0x12>
 8002af8:	f7ff ff10 	bl	800291c <__sinit>
 8002afc:	69a3      	ldr	r3, [r4, #24]
 8002afe:	60a3      	str	r3, [r4, #8]
 8002b00:	89a3      	ldrh	r3, [r4, #12]
 8002b02:	071a      	lsls	r2, r3, #28
 8002b04:	d525      	bpl.n	8002b52 <__swbuf_r+0x68>
 8002b06:	6923      	ldr	r3, [r4, #16]
 8002b08:	b31b      	cbz	r3, 8002b52 <__swbuf_r+0x68>
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	6922      	ldr	r2, [r4, #16]
 8002b0e:	1a98      	subs	r0, r3, r2
 8002b10:	6963      	ldr	r3, [r4, #20]
 8002b12:	b2f6      	uxtb	r6, r6
 8002b14:	4283      	cmp	r3, r0
 8002b16:	4637      	mov	r7, r6
 8002b18:	dc04      	bgt.n	8002b24 <__swbuf_r+0x3a>
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 fd47 	bl	80035b0 <_fflush_r>
 8002b22:	b9e0      	cbnz	r0, 8002b5e <__swbuf_r+0x74>
 8002b24:	68a3      	ldr	r3, [r4, #8]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	60a3      	str	r3, [r4, #8]
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	6022      	str	r2, [r4, #0]
 8002b30:	701e      	strb	r6, [r3, #0]
 8002b32:	6962      	ldr	r2, [r4, #20]
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d004      	beq.n	8002b44 <__swbuf_r+0x5a>
 8002b3a:	89a3      	ldrh	r3, [r4, #12]
 8002b3c:	07db      	lsls	r3, r3, #31
 8002b3e:	d506      	bpl.n	8002b4e <__swbuf_r+0x64>
 8002b40:	2e0a      	cmp	r6, #10
 8002b42:	d104      	bne.n	8002b4e <__swbuf_r+0x64>
 8002b44:	4621      	mov	r1, r4
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 fd32 	bl	80035b0 <_fflush_r>
 8002b4c:	b938      	cbnz	r0, 8002b5e <__swbuf_r+0x74>
 8002b4e:	4638      	mov	r0, r7
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b52:	4621      	mov	r1, r4
 8002b54:	4628      	mov	r0, r5
 8002b56:	f000 f805 	bl	8002b64 <__swsetup_r>
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d0d5      	beq.n	8002b0a <__swbuf_r+0x20>
 8002b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8002b62:	e7f4      	b.n	8002b4e <__swbuf_r+0x64>

08002b64 <__swsetup_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <__swsetup_r+0xac>)
 8002b68:	4605      	mov	r5, r0
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	b118      	cbz	r0, 8002b78 <__swsetup_r+0x14>
 8002b70:	6a03      	ldr	r3, [r0, #32]
 8002b72:	b90b      	cbnz	r3, 8002b78 <__swsetup_r+0x14>
 8002b74:	f7ff fed2 	bl	800291c <__sinit>
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b7e:	0718      	lsls	r0, r3, #28
 8002b80:	d422      	bmi.n	8002bc8 <__swsetup_r+0x64>
 8002b82:	06d9      	lsls	r1, r3, #27
 8002b84:	d407      	bmi.n	8002b96 <__swsetup_r+0x32>
 8002b86:	2309      	movs	r3, #9
 8002b88:	602b      	str	r3, [r5, #0]
 8002b8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	e034      	b.n	8002c00 <__swsetup_r+0x9c>
 8002b96:	0758      	lsls	r0, r3, #29
 8002b98:	d512      	bpl.n	8002bc0 <__swsetup_r+0x5c>
 8002b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9c:	b141      	cbz	r1, 8002bb0 <__swsetup_r+0x4c>
 8002b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ba2:	4299      	cmp	r1, r3
 8002ba4:	d002      	beq.n	8002bac <__swsetup_r+0x48>
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f000 f8b0 	bl	8002d0c <_free_r>
 8002bac:	2300      	movs	r3, #0
 8002bae:	6363      	str	r3, [r4, #52]	; 0x34
 8002bb0:	89a3      	ldrh	r3, [r4, #12]
 8002bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002bb6:	81a3      	strh	r3, [r4, #12]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6063      	str	r3, [r4, #4]
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	6923      	ldr	r3, [r4, #16]
 8002bca:	b94b      	cbnz	r3, 8002be0 <__swsetup_r+0x7c>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd6:	d003      	beq.n	8002be0 <__swsetup_r+0x7c>
 8002bd8:	4621      	mov	r1, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 fd36 	bl	800364c <__smakebuf_r>
 8002be0:	89a0      	ldrh	r0, [r4, #12]
 8002be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002be6:	f010 0301 	ands.w	r3, r0, #1
 8002bea:	d00a      	beq.n	8002c02 <__swsetup_r+0x9e>
 8002bec:	2300      	movs	r3, #0
 8002bee:	60a3      	str	r3, [r4, #8]
 8002bf0:	6963      	ldr	r3, [r4, #20]
 8002bf2:	425b      	negs	r3, r3
 8002bf4:	61a3      	str	r3, [r4, #24]
 8002bf6:	6923      	ldr	r3, [r4, #16]
 8002bf8:	b943      	cbnz	r3, 8002c0c <__swsetup_r+0xa8>
 8002bfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002bfe:	d1c4      	bne.n	8002b8a <__swsetup_r+0x26>
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
 8002c02:	0781      	lsls	r1, r0, #30
 8002c04:	bf58      	it	pl
 8002c06:	6963      	ldrpl	r3, [r4, #20]
 8002c08:	60a3      	str	r3, [r4, #8]
 8002c0a:	e7f4      	b.n	8002bf6 <__swsetup_r+0x92>
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e7f7      	b.n	8002c00 <__swsetup_r+0x9c>
 8002c10:	2000005c 	.word	0x2000005c

08002c14 <memset>:
 8002c14:	4402      	add	r2, r0
 8002c16:	4603      	mov	r3, r0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <memset+0xa>
 8002c1c:	4770      	bx	lr
 8002c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c22:	e7f9      	b.n	8002c18 <memset+0x4>

08002c24 <_close_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4d06      	ldr	r5, [pc, #24]	; (8002c40 <_close_r+0x1c>)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	602b      	str	r3, [r5, #0]
 8002c30:	f7ff fcc7 	bl	80025c2 <_close>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d102      	bne.n	8002c3e <_close_r+0x1a>
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	b103      	cbz	r3, 8002c3e <_close_r+0x1a>
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	200002ec 	.word	0x200002ec

08002c44 <_lseek_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4d07      	ldr	r5, [pc, #28]	; (8002c64 <_lseek_r+0x20>)
 8002c48:	4604      	mov	r4, r0
 8002c4a:	4608      	mov	r0, r1
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	602a      	str	r2, [r5, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f7ff fcdc 	bl	8002610 <_lseek>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d102      	bne.n	8002c62 <_lseek_r+0x1e>
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	b103      	cbz	r3, 8002c62 <_lseek_r+0x1e>
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	bd38      	pop	{r3, r4, r5, pc}
 8002c64:	200002ec 	.word	0x200002ec

08002c68 <_read_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4d07      	ldr	r5, [pc, #28]	; (8002c88 <_read_r+0x20>)
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	602a      	str	r2, [r5, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7ff fc6a 	bl	8002550 <_read>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_read_r+0x1e>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_read_r+0x1e>
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	200002ec 	.word	0x200002ec

08002c8c <_write_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d07      	ldr	r5, [pc, #28]	; (8002cac <_write_r+0x20>)
 8002c90:	4604      	mov	r4, r0
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7ff fc75 	bl	800258a <_write>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_write_r+0x1e>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_write_r+0x1e>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200002ec 	.word	0x200002ec

08002cb0 <__errno>:
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <__errno+0x8>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000005c 	.word	0x2000005c

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	4d0d      	ldr	r5, [pc, #52]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc0:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc2:	1b64      	subs	r4, r4, r5
 8002cc4:	10a4      	asrs	r4, r4, #2
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	42a6      	cmp	r6, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	4d0b      	ldr	r5, [pc, #44]	; (8002cfc <__libc_init_array+0x40>)
 8002cce:	4c0c      	ldr	r4, [pc, #48]	; (8002d00 <__libc_init_array+0x44>)
 8002cd0:	f000 fd2a 	bl	8003728 <_init>
 8002cd4:	1b64      	subs	r4, r4, r5
 8002cd6:	10a4      	asrs	r4, r4, #2
 8002cd8:	2600      	movs	r6, #0
 8002cda:	42a6      	cmp	r6, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce4:	4798      	blx	r3
 8002ce6:	3601      	adds	r6, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cee:	4798      	blx	r3
 8002cf0:	3601      	adds	r6, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	080037e0 	.word	0x080037e0
 8002cf8:	080037e0 	.word	0x080037e0
 8002cfc:	080037e0 	.word	0x080037e0
 8002d00:	080037e4 	.word	0x080037e4

08002d04 <__retarget_lock_init_recursive>:
 8002d04:	4770      	bx	lr

08002d06 <__retarget_lock_acquire_recursive>:
 8002d06:	4770      	bx	lr

08002d08 <__retarget_lock_release_recursive>:
 8002d08:	4770      	bx	lr
	...

08002d0c <_free_r>:
 8002d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d044      	beq.n	8002d9c <_free_r+0x90>
 8002d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d16:	9001      	str	r0, [sp, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8002d1e:	bfb8      	it	lt
 8002d20:	18e4      	addlt	r4, r4, r3
 8002d22:	f000 f8df 	bl	8002ee4 <__malloc_lock>
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <_free_r+0x94>)
 8002d28:	9801      	ldr	r0, [sp, #4]
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	b933      	cbnz	r3, 8002d3c <_free_r+0x30>
 8002d2e:	6063      	str	r3, [r4, #4]
 8002d30:	6014      	str	r4, [r2, #0]
 8002d32:	b003      	add	sp, #12
 8002d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d38:	f000 b8da 	b.w	8002ef0 <__malloc_unlock>
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d908      	bls.n	8002d52 <_free_r+0x46>
 8002d40:	6825      	ldr	r5, [r4, #0]
 8002d42:	1961      	adds	r1, r4, r5
 8002d44:	428b      	cmp	r3, r1
 8002d46:	bf01      	itttt	eq
 8002d48:	6819      	ldreq	r1, [r3, #0]
 8002d4a:	685b      	ldreq	r3, [r3, #4]
 8002d4c:	1949      	addeq	r1, r1, r5
 8002d4e:	6021      	streq	r1, [r4, #0]
 8002d50:	e7ed      	b.n	8002d2e <_free_r+0x22>
 8002d52:	461a      	mov	r2, r3
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b10b      	cbz	r3, 8002d5c <_free_r+0x50>
 8002d58:	42a3      	cmp	r3, r4
 8002d5a:	d9fa      	bls.n	8002d52 <_free_r+0x46>
 8002d5c:	6811      	ldr	r1, [r2, #0]
 8002d5e:	1855      	adds	r5, r2, r1
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d10b      	bne.n	8002d7c <_free_r+0x70>
 8002d64:	6824      	ldr	r4, [r4, #0]
 8002d66:	4421      	add	r1, r4
 8002d68:	1854      	adds	r4, r2, r1
 8002d6a:	42a3      	cmp	r3, r4
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	d1e0      	bne.n	8002d32 <_free_r+0x26>
 8002d70:	681c      	ldr	r4, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6053      	str	r3, [r2, #4]
 8002d76:	440c      	add	r4, r1
 8002d78:	6014      	str	r4, [r2, #0]
 8002d7a:	e7da      	b.n	8002d32 <_free_r+0x26>
 8002d7c:	d902      	bls.n	8002d84 <_free_r+0x78>
 8002d7e:	230c      	movs	r3, #12
 8002d80:	6003      	str	r3, [r0, #0]
 8002d82:	e7d6      	b.n	8002d32 <_free_r+0x26>
 8002d84:	6825      	ldr	r5, [r4, #0]
 8002d86:	1961      	adds	r1, r4, r5
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	bf04      	itt	eq
 8002d8c:	6819      	ldreq	r1, [r3, #0]
 8002d8e:	685b      	ldreq	r3, [r3, #4]
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	bf04      	itt	eq
 8002d94:	1949      	addeq	r1, r1, r5
 8002d96:	6021      	streq	r1, [r4, #0]
 8002d98:	6054      	str	r4, [r2, #4]
 8002d9a:	e7ca      	b.n	8002d32 <_free_r+0x26>
 8002d9c:	b003      	add	sp, #12
 8002d9e:	bd30      	pop	{r4, r5, pc}
 8002da0:	200002f4 	.word	0x200002f4

08002da4 <sbrk_aligned>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4e0e      	ldr	r6, [pc, #56]	; (8002de0 <sbrk_aligned+0x3c>)
 8002da8:	460c      	mov	r4, r1
 8002daa:	6831      	ldr	r1, [r6, #0]
 8002dac:	4605      	mov	r5, r0
 8002dae:	b911      	cbnz	r1, 8002db6 <sbrk_aligned+0x12>
 8002db0:	f000 fcaa 	bl	8003708 <_sbrk_r>
 8002db4:	6030      	str	r0, [r6, #0]
 8002db6:	4621      	mov	r1, r4
 8002db8:	4628      	mov	r0, r5
 8002dba:	f000 fca5 	bl	8003708 <_sbrk_r>
 8002dbe:	1c43      	adds	r3, r0, #1
 8002dc0:	d00a      	beq.n	8002dd8 <sbrk_aligned+0x34>
 8002dc2:	1cc4      	adds	r4, r0, #3
 8002dc4:	f024 0403 	bic.w	r4, r4, #3
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d007      	beq.n	8002ddc <sbrk_aligned+0x38>
 8002dcc:	1a21      	subs	r1, r4, r0
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fc9a 	bl	8003708 <_sbrk_r>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d101      	bne.n	8002ddc <sbrk_aligned+0x38>
 8002dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
 8002de0:	200002f8 	.word	0x200002f8

08002de4 <_malloc_r>:
 8002de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002de8:	1ccd      	adds	r5, r1, #3
 8002dea:	f025 0503 	bic.w	r5, r5, #3
 8002dee:	3508      	adds	r5, #8
 8002df0:	2d0c      	cmp	r5, #12
 8002df2:	bf38      	it	cc
 8002df4:	250c      	movcc	r5, #12
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	4607      	mov	r7, r0
 8002dfa:	db01      	blt.n	8002e00 <_malloc_r+0x1c>
 8002dfc:	42a9      	cmp	r1, r5
 8002dfe:	d905      	bls.n	8002e0c <_malloc_r+0x28>
 8002e00:	230c      	movs	r3, #12
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	2600      	movs	r6, #0
 8002e06:	4630      	mov	r0, r6
 8002e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002ee0 <_malloc_r+0xfc>
 8002e10:	f000 f868 	bl	8002ee4 <__malloc_lock>
 8002e14:	f8d8 3000 	ldr.w	r3, [r8]
 8002e18:	461c      	mov	r4, r3
 8002e1a:	bb5c      	cbnz	r4, 8002e74 <_malloc_r+0x90>
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4638      	mov	r0, r7
 8002e20:	f7ff ffc0 	bl	8002da4 <sbrk_aligned>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	4604      	mov	r4, r0
 8002e28:	d155      	bne.n	8002ed6 <_malloc_r+0xf2>
 8002e2a:	f8d8 4000 	ldr.w	r4, [r8]
 8002e2e:	4626      	mov	r6, r4
 8002e30:	2e00      	cmp	r6, #0
 8002e32:	d145      	bne.n	8002ec0 <_malloc_r+0xdc>
 8002e34:	2c00      	cmp	r4, #0
 8002e36:	d048      	beq.n	8002eca <_malloc_r+0xe6>
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	eb04 0903 	add.w	r9, r4, r3
 8002e42:	f000 fc61 	bl	8003708 <_sbrk_r>
 8002e46:	4581      	cmp	r9, r0
 8002e48:	d13f      	bne.n	8002eca <_malloc_r+0xe6>
 8002e4a:	6821      	ldr	r1, [r4, #0]
 8002e4c:	1a6d      	subs	r5, r5, r1
 8002e4e:	4629      	mov	r1, r5
 8002e50:	4638      	mov	r0, r7
 8002e52:	f7ff ffa7 	bl	8002da4 <sbrk_aligned>
 8002e56:	3001      	adds	r0, #1
 8002e58:	d037      	beq.n	8002eca <_malloc_r+0xe6>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	442b      	add	r3, r5
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	f8d8 3000 	ldr.w	r3, [r8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d038      	beq.n	8002eda <_malloc_r+0xf6>
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	42a2      	cmp	r2, r4
 8002e6c:	d12b      	bne.n	8002ec6 <_malloc_r+0xe2>
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	e00f      	b.n	8002e94 <_malloc_r+0xb0>
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	1b52      	subs	r2, r2, r5
 8002e78:	d41f      	bmi.n	8002eba <_malloc_r+0xd6>
 8002e7a:	2a0b      	cmp	r2, #11
 8002e7c:	d917      	bls.n	8002eae <_malloc_r+0xca>
 8002e7e:	1961      	adds	r1, r4, r5
 8002e80:	42a3      	cmp	r3, r4
 8002e82:	6025      	str	r5, [r4, #0]
 8002e84:	bf18      	it	ne
 8002e86:	6059      	strne	r1, [r3, #4]
 8002e88:	6863      	ldr	r3, [r4, #4]
 8002e8a:	bf08      	it	eq
 8002e8c:	f8c8 1000 	streq.w	r1, [r8]
 8002e90:	5162      	str	r2, [r4, r5]
 8002e92:	604b      	str	r3, [r1, #4]
 8002e94:	4638      	mov	r0, r7
 8002e96:	f104 060b 	add.w	r6, r4, #11
 8002e9a:	f000 f829 	bl	8002ef0 <__malloc_unlock>
 8002e9e:	f026 0607 	bic.w	r6, r6, #7
 8002ea2:	1d23      	adds	r3, r4, #4
 8002ea4:	1af2      	subs	r2, r6, r3
 8002ea6:	d0ae      	beq.n	8002e06 <_malloc_r+0x22>
 8002ea8:	1b9b      	subs	r3, r3, r6
 8002eaa:	50a3      	str	r3, [r4, r2]
 8002eac:	e7ab      	b.n	8002e06 <_malloc_r+0x22>
 8002eae:	42a3      	cmp	r3, r4
 8002eb0:	6862      	ldr	r2, [r4, #4]
 8002eb2:	d1dd      	bne.n	8002e70 <_malloc_r+0x8c>
 8002eb4:	f8c8 2000 	str.w	r2, [r8]
 8002eb8:	e7ec      	b.n	8002e94 <_malloc_r+0xb0>
 8002eba:	4623      	mov	r3, r4
 8002ebc:	6864      	ldr	r4, [r4, #4]
 8002ebe:	e7ac      	b.n	8002e1a <_malloc_r+0x36>
 8002ec0:	4634      	mov	r4, r6
 8002ec2:	6876      	ldr	r6, [r6, #4]
 8002ec4:	e7b4      	b.n	8002e30 <_malloc_r+0x4c>
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	e7cc      	b.n	8002e64 <_malloc_r+0x80>
 8002eca:	230c      	movs	r3, #12
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f000 f80e 	bl	8002ef0 <__malloc_unlock>
 8002ed4:	e797      	b.n	8002e06 <_malloc_r+0x22>
 8002ed6:	6025      	str	r5, [r4, #0]
 8002ed8:	e7dc      	b.n	8002e94 <_malloc_r+0xb0>
 8002eda:	605b      	str	r3, [r3, #4]
 8002edc:	deff      	udf	#255	; 0xff
 8002ede:	bf00      	nop
 8002ee0:	200002f4 	.word	0x200002f4

08002ee4 <__malloc_lock>:
 8002ee4:	4801      	ldr	r0, [pc, #4]	; (8002eec <__malloc_lock+0x8>)
 8002ee6:	f7ff bf0e 	b.w	8002d06 <__retarget_lock_acquire_recursive>
 8002eea:	bf00      	nop
 8002eec:	200002f0 	.word	0x200002f0

08002ef0 <__malloc_unlock>:
 8002ef0:	4801      	ldr	r0, [pc, #4]	; (8002ef8 <__malloc_unlock+0x8>)
 8002ef2:	f7ff bf09 	b.w	8002d08 <__retarget_lock_release_recursive>
 8002ef6:	bf00      	nop
 8002ef8:	200002f0 	.word	0x200002f0

08002efc <__sfputc_r>:
 8002efc:	6893      	ldr	r3, [r2, #8]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	b410      	push	{r4}
 8002f04:	6093      	str	r3, [r2, #8]
 8002f06:	da08      	bge.n	8002f1a <__sfputc_r+0x1e>
 8002f08:	6994      	ldr	r4, [r2, #24]
 8002f0a:	42a3      	cmp	r3, r4
 8002f0c:	db01      	blt.n	8002f12 <__sfputc_r+0x16>
 8002f0e:	290a      	cmp	r1, #10
 8002f10:	d103      	bne.n	8002f1a <__sfputc_r+0x1e>
 8002f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f16:	f7ff bde8 	b.w	8002aea <__swbuf_r>
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	1c58      	adds	r0, r3, #1
 8002f1e:	6010      	str	r0, [r2, #0]
 8002f20:	7019      	strb	r1, [r3, #0]
 8002f22:	4608      	mov	r0, r1
 8002f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <__sfputs_r>:
 8002f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	460f      	mov	r7, r1
 8002f30:	4614      	mov	r4, r2
 8002f32:	18d5      	adds	r5, r2, r3
 8002f34:	42ac      	cmp	r4, r5
 8002f36:	d101      	bne.n	8002f3c <__sfputs_r+0x12>
 8002f38:	2000      	movs	r0, #0
 8002f3a:	e007      	b.n	8002f4c <__sfputs_r+0x22>
 8002f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f40:	463a      	mov	r2, r7
 8002f42:	4630      	mov	r0, r6
 8002f44:	f7ff ffda 	bl	8002efc <__sfputc_r>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d1f3      	bne.n	8002f34 <__sfputs_r+0xa>
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f50 <_vfiprintf_r>:
 8002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f54:	460d      	mov	r5, r1
 8002f56:	b09d      	sub	sp, #116	; 0x74
 8002f58:	4614      	mov	r4, r2
 8002f5a:	4698      	mov	r8, r3
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	b118      	cbz	r0, 8002f68 <_vfiprintf_r+0x18>
 8002f60:	6a03      	ldr	r3, [r0, #32]
 8002f62:	b90b      	cbnz	r3, 8002f68 <_vfiprintf_r+0x18>
 8002f64:	f7ff fcda 	bl	800291c <__sinit>
 8002f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f6a:	07d9      	lsls	r1, r3, #31
 8002f6c:	d405      	bmi.n	8002f7a <_vfiprintf_r+0x2a>
 8002f6e:	89ab      	ldrh	r3, [r5, #12]
 8002f70:	059a      	lsls	r2, r3, #22
 8002f72:	d402      	bmi.n	8002f7a <_vfiprintf_r+0x2a>
 8002f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f76:	f7ff fec6 	bl	8002d06 <__retarget_lock_acquire_recursive>
 8002f7a:	89ab      	ldrh	r3, [r5, #12]
 8002f7c:	071b      	lsls	r3, r3, #28
 8002f7e:	d501      	bpl.n	8002f84 <_vfiprintf_r+0x34>
 8002f80:	692b      	ldr	r3, [r5, #16]
 8002f82:	b99b      	cbnz	r3, 8002fac <_vfiprintf_r+0x5c>
 8002f84:	4629      	mov	r1, r5
 8002f86:	4630      	mov	r0, r6
 8002f88:	f7ff fdec 	bl	8002b64 <__swsetup_r>
 8002f8c:	b170      	cbz	r0, 8002fac <_vfiprintf_r+0x5c>
 8002f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f90:	07dc      	lsls	r4, r3, #31
 8002f92:	d504      	bpl.n	8002f9e <_vfiprintf_r+0x4e>
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	b01d      	add	sp, #116	; 0x74
 8002f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f9e:	89ab      	ldrh	r3, [r5, #12]
 8002fa0:	0598      	lsls	r0, r3, #22
 8002fa2:	d4f7      	bmi.n	8002f94 <_vfiprintf_r+0x44>
 8002fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fa6:	f7ff feaf 	bl	8002d08 <__retarget_lock_release_recursive>
 8002faa:	e7f3      	b.n	8002f94 <_vfiprintf_r+0x44>
 8002fac:	2300      	movs	r3, #0
 8002fae:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fba:	2330      	movs	r3, #48	; 0x30
 8002fbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003170 <_vfiprintf_r+0x220>
 8002fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fc4:	f04f 0901 	mov.w	r9, #1
 8002fc8:	4623      	mov	r3, r4
 8002fca:	469a      	mov	sl, r3
 8002fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fd0:	b10a      	cbz	r2, 8002fd6 <_vfiprintf_r+0x86>
 8002fd2:	2a25      	cmp	r2, #37	; 0x25
 8002fd4:	d1f9      	bne.n	8002fca <_vfiprintf_r+0x7a>
 8002fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8002fda:	d00b      	beq.n	8002ff4 <_vfiprintf_r+0xa4>
 8002fdc:	465b      	mov	r3, fp
 8002fde:	4622      	mov	r2, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f7ff ffa1 	bl	8002f2a <__sfputs_r>
 8002fe8:	3001      	adds	r0, #1
 8002fea:	f000 80a9 	beq.w	8003140 <_vfiprintf_r+0x1f0>
 8002fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ff0:	445a      	add	r2, fp
 8002ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a1 	beq.w	8003140 <_vfiprintf_r+0x1f0>
 8002ffe:	2300      	movs	r3, #0
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003008:	f10a 0a01 	add.w	sl, sl, #1
 800300c:	9304      	str	r3, [sp, #16]
 800300e:	9307      	str	r3, [sp, #28]
 8003010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003014:	931a      	str	r3, [sp, #104]	; 0x68
 8003016:	4654      	mov	r4, sl
 8003018:	2205      	movs	r2, #5
 800301a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301e:	4854      	ldr	r0, [pc, #336]	; (8003170 <_vfiprintf_r+0x220>)
 8003020:	f7fd f8e6 	bl	80001f0 <memchr>
 8003024:	9a04      	ldr	r2, [sp, #16]
 8003026:	b9d8      	cbnz	r0, 8003060 <_vfiprintf_r+0x110>
 8003028:	06d1      	lsls	r1, r2, #27
 800302a:	bf44      	itt	mi
 800302c:	2320      	movmi	r3, #32
 800302e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003032:	0713      	lsls	r3, r2, #28
 8003034:	bf44      	itt	mi
 8003036:	232b      	movmi	r3, #43	; 0x2b
 8003038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800303c:	f89a 3000 	ldrb.w	r3, [sl]
 8003040:	2b2a      	cmp	r3, #42	; 0x2a
 8003042:	d015      	beq.n	8003070 <_vfiprintf_r+0x120>
 8003044:	9a07      	ldr	r2, [sp, #28]
 8003046:	4654      	mov	r4, sl
 8003048:	2000      	movs	r0, #0
 800304a:	f04f 0c0a 	mov.w	ip, #10
 800304e:	4621      	mov	r1, r4
 8003050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003054:	3b30      	subs	r3, #48	; 0x30
 8003056:	2b09      	cmp	r3, #9
 8003058:	d94d      	bls.n	80030f6 <_vfiprintf_r+0x1a6>
 800305a:	b1b0      	cbz	r0, 800308a <_vfiprintf_r+0x13a>
 800305c:	9207      	str	r2, [sp, #28]
 800305e:	e014      	b.n	800308a <_vfiprintf_r+0x13a>
 8003060:	eba0 0308 	sub.w	r3, r0, r8
 8003064:	fa09 f303 	lsl.w	r3, r9, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	9304      	str	r3, [sp, #16]
 800306c:	46a2      	mov	sl, r4
 800306e:	e7d2      	b.n	8003016 <_vfiprintf_r+0xc6>
 8003070:	9b03      	ldr	r3, [sp, #12]
 8003072:	1d19      	adds	r1, r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	9103      	str	r1, [sp, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	bfbb      	ittet	lt
 800307c:	425b      	neglt	r3, r3
 800307e:	f042 0202 	orrlt.w	r2, r2, #2
 8003082:	9307      	strge	r3, [sp, #28]
 8003084:	9307      	strlt	r3, [sp, #28]
 8003086:	bfb8      	it	lt
 8003088:	9204      	strlt	r2, [sp, #16]
 800308a:	7823      	ldrb	r3, [r4, #0]
 800308c:	2b2e      	cmp	r3, #46	; 0x2e
 800308e:	d10c      	bne.n	80030aa <_vfiprintf_r+0x15a>
 8003090:	7863      	ldrb	r3, [r4, #1]
 8003092:	2b2a      	cmp	r3, #42	; 0x2a
 8003094:	d134      	bne.n	8003100 <_vfiprintf_r+0x1b0>
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	1d1a      	adds	r2, r3, #4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	9203      	str	r2, [sp, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bfb8      	it	lt
 80030a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80030a6:	3402      	adds	r4, #2
 80030a8:	9305      	str	r3, [sp, #20]
 80030aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003180 <_vfiprintf_r+0x230>
 80030ae:	7821      	ldrb	r1, [r4, #0]
 80030b0:	2203      	movs	r2, #3
 80030b2:	4650      	mov	r0, sl
 80030b4:	f7fd f89c 	bl	80001f0 <memchr>
 80030b8:	b138      	cbz	r0, 80030ca <_vfiprintf_r+0x17a>
 80030ba:	9b04      	ldr	r3, [sp, #16]
 80030bc:	eba0 000a 	sub.w	r0, r0, sl
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	4082      	lsls	r2, r0
 80030c4:	4313      	orrs	r3, r2
 80030c6:	3401      	adds	r4, #1
 80030c8:	9304      	str	r3, [sp, #16]
 80030ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ce:	4829      	ldr	r0, [pc, #164]	; (8003174 <_vfiprintf_r+0x224>)
 80030d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030d4:	2206      	movs	r2, #6
 80030d6:	f7fd f88b 	bl	80001f0 <memchr>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d03f      	beq.n	800315e <_vfiprintf_r+0x20e>
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <_vfiprintf_r+0x228>)
 80030e0:	bb1b      	cbnz	r3, 800312a <_vfiprintf_r+0x1da>
 80030e2:	9b03      	ldr	r3, [sp, #12]
 80030e4:	3307      	adds	r3, #7
 80030e6:	f023 0307 	bic.w	r3, r3, #7
 80030ea:	3308      	adds	r3, #8
 80030ec:	9303      	str	r3, [sp, #12]
 80030ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030f0:	443b      	add	r3, r7
 80030f2:	9309      	str	r3, [sp, #36]	; 0x24
 80030f4:	e768      	b.n	8002fc8 <_vfiprintf_r+0x78>
 80030f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80030fa:	460c      	mov	r4, r1
 80030fc:	2001      	movs	r0, #1
 80030fe:	e7a6      	b.n	800304e <_vfiprintf_r+0xfe>
 8003100:	2300      	movs	r3, #0
 8003102:	3401      	adds	r4, #1
 8003104:	9305      	str	r3, [sp, #20]
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 0c0a 	mov.w	ip, #10
 800310c:	4620      	mov	r0, r4
 800310e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003112:	3a30      	subs	r2, #48	; 0x30
 8003114:	2a09      	cmp	r2, #9
 8003116:	d903      	bls.n	8003120 <_vfiprintf_r+0x1d0>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0c6      	beq.n	80030aa <_vfiprintf_r+0x15a>
 800311c:	9105      	str	r1, [sp, #20]
 800311e:	e7c4      	b.n	80030aa <_vfiprintf_r+0x15a>
 8003120:	fb0c 2101 	mla	r1, ip, r1, r2
 8003124:	4604      	mov	r4, r0
 8003126:	2301      	movs	r3, #1
 8003128:	e7f0      	b.n	800310c <_vfiprintf_r+0x1bc>
 800312a:	ab03      	add	r3, sp, #12
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	462a      	mov	r2, r5
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <_vfiprintf_r+0x22c>)
 8003132:	a904      	add	r1, sp, #16
 8003134:	4630      	mov	r0, r6
 8003136:	f3af 8000 	nop.w
 800313a:	4607      	mov	r7, r0
 800313c:	1c78      	adds	r0, r7, #1
 800313e:	d1d6      	bne.n	80030ee <_vfiprintf_r+0x19e>
 8003140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003142:	07d9      	lsls	r1, r3, #31
 8003144:	d405      	bmi.n	8003152 <_vfiprintf_r+0x202>
 8003146:	89ab      	ldrh	r3, [r5, #12]
 8003148:	059a      	lsls	r2, r3, #22
 800314a:	d402      	bmi.n	8003152 <_vfiprintf_r+0x202>
 800314c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800314e:	f7ff fddb 	bl	8002d08 <__retarget_lock_release_recursive>
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	065b      	lsls	r3, r3, #25
 8003156:	f53f af1d 	bmi.w	8002f94 <_vfiprintf_r+0x44>
 800315a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800315c:	e71c      	b.n	8002f98 <_vfiprintf_r+0x48>
 800315e:	ab03      	add	r3, sp, #12
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	462a      	mov	r2, r5
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <_vfiprintf_r+0x22c>)
 8003166:	a904      	add	r1, sp, #16
 8003168:	4630      	mov	r0, r6
 800316a:	f000 f879 	bl	8003260 <_printf_i>
 800316e:	e7e4      	b.n	800313a <_vfiprintf_r+0x1ea>
 8003170:	080037ac 	.word	0x080037ac
 8003174:	080037b6 	.word	0x080037b6
 8003178:	00000000 	.word	0x00000000
 800317c:	08002f2b 	.word	0x08002f2b
 8003180:	080037b2 	.word	0x080037b2

08003184 <_printf_common>:
 8003184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003188:	4616      	mov	r6, r2
 800318a:	4699      	mov	r9, r3
 800318c:	688a      	ldr	r2, [r1, #8]
 800318e:	690b      	ldr	r3, [r1, #16]
 8003190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003194:	4293      	cmp	r3, r2
 8003196:	bfb8      	it	lt
 8003198:	4613      	movlt	r3, r2
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031a0:	4607      	mov	r7, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	b10a      	cbz	r2, 80031aa <_printf_common+0x26>
 80031a6:	3301      	adds	r3, #1
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	0699      	lsls	r1, r3, #26
 80031ae:	bf42      	ittt	mi
 80031b0:	6833      	ldrmi	r3, [r6, #0]
 80031b2:	3302      	addmi	r3, #2
 80031b4:	6033      	strmi	r3, [r6, #0]
 80031b6:	6825      	ldr	r5, [r4, #0]
 80031b8:	f015 0506 	ands.w	r5, r5, #6
 80031bc:	d106      	bne.n	80031cc <_printf_common+0x48>
 80031be:	f104 0a19 	add.w	sl, r4, #25
 80031c2:	68e3      	ldr	r3, [r4, #12]
 80031c4:	6832      	ldr	r2, [r6, #0]
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	42ab      	cmp	r3, r5
 80031ca:	dc26      	bgt.n	800321a <_printf_common+0x96>
 80031cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031d0:	1e13      	subs	r3, r2, #0
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	bf18      	it	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	0692      	lsls	r2, r2, #26
 80031da:	d42b      	bmi.n	8003234 <_printf_common+0xb0>
 80031dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e0:	4649      	mov	r1, r9
 80031e2:	4638      	mov	r0, r7
 80031e4:	47c0      	blx	r8
 80031e6:	3001      	adds	r0, #1
 80031e8:	d01e      	beq.n	8003228 <_printf_common+0xa4>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	6922      	ldr	r2, [r4, #16]
 80031ee:	f003 0306 	and.w	r3, r3, #6
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf02      	ittt	eq
 80031f6:	68e5      	ldreq	r5, [r4, #12]
 80031f8:	6833      	ldreq	r3, [r6, #0]
 80031fa:	1aed      	subeq	r5, r5, r3
 80031fc:	68a3      	ldr	r3, [r4, #8]
 80031fe:	bf0c      	ite	eq
 8003200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003204:	2500      	movne	r5, #0
 8003206:	4293      	cmp	r3, r2
 8003208:	bfc4      	itt	gt
 800320a:	1a9b      	subgt	r3, r3, r2
 800320c:	18ed      	addgt	r5, r5, r3
 800320e:	2600      	movs	r6, #0
 8003210:	341a      	adds	r4, #26
 8003212:	42b5      	cmp	r5, r6
 8003214:	d11a      	bne.n	800324c <_printf_common+0xc8>
 8003216:	2000      	movs	r0, #0
 8003218:	e008      	b.n	800322c <_printf_common+0xa8>
 800321a:	2301      	movs	r3, #1
 800321c:	4652      	mov	r2, sl
 800321e:	4649      	mov	r1, r9
 8003220:	4638      	mov	r0, r7
 8003222:	47c0      	blx	r8
 8003224:	3001      	adds	r0, #1
 8003226:	d103      	bne.n	8003230 <_printf_common+0xac>
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	3501      	adds	r5, #1
 8003232:	e7c6      	b.n	80031c2 <_printf_common+0x3e>
 8003234:	18e1      	adds	r1, r4, r3
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	2030      	movs	r0, #48	; 0x30
 800323a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800323e:	4422      	add	r2, r4
 8003240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003248:	3302      	adds	r3, #2
 800324a:	e7c7      	b.n	80031dc <_printf_common+0x58>
 800324c:	2301      	movs	r3, #1
 800324e:	4622      	mov	r2, r4
 8003250:	4649      	mov	r1, r9
 8003252:	4638      	mov	r0, r7
 8003254:	47c0      	blx	r8
 8003256:	3001      	adds	r0, #1
 8003258:	d0e6      	beq.n	8003228 <_printf_common+0xa4>
 800325a:	3601      	adds	r6, #1
 800325c:	e7d9      	b.n	8003212 <_printf_common+0x8e>
	...

08003260 <_printf_i>:
 8003260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	7e0f      	ldrb	r7, [r1, #24]
 8003266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003268:	2f78      	cmp	r7, #120	; 0x78
 800326a:	4691      	mov	r9, r2
 800326c:	4680      	mov	r8, r0
 800326e:	460c      	mov	r4, r1
 8003270:	469a      	mov	sl, r3
 8003272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003276:	d807      	bhi.n	8003288 <_printf_i+0x28>
 8003278:	2f62      	cmp	r7, #98	; 0x62
 800327a:	d80a      	bhi.n	8003292 <_printf_i+0x32>
 800327c:	2f00      	cmp	r7, #0
 800327e:	f000 80d4 	beq.w	800342a <_printf_i+0x1ca>
 8003282:	2f58      	cmp	r7, #88	; 0x58
 8003284:	f000 80c0 	beq.w	8003408 <_printf_i+0x1a8>
 8003288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800328c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003290:	e03a      	b.n	8003308 <_printf_i+0xa8>
 8003292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003296:	2b15      	cmp	r3, #21
 8003298:	d8f6      	bhi.n	8003288 <_printf_i+0x28>
 800329a:	a101      	add	r1, pc, #4	; (adr r1, 80032a0 <_printf_i+0x40>)
 800329c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032a0:	080032f9 	.word	0x080032f9
 80032a4:	0800330d 	.word	0x0800330d
 80032a8:	08003289 	.word	0x08003289
 80032ac:	08003289 	.word	0x08003289
 80032b0:	08003289 	.word	0x08003289
 80032b4:	08003289 	.word	0x08003289
 80032b8:	0800330d 	.word	0x0800330d
 80032bc:	08003289 	.word	0x08003289
 80032c0:	08003289 	.word	0x08003289
 80032c4:	08003289 	.word	0x08003289
 80032c8:	08003289 	.word	0x08003289
 80032cc:	08003411 	.word	0x08003411
 80032d0:	08003339 	.word	0x08003339
 80032d4:	080033cb 	.word	0x080033cb
 80032d8:	08003289 	.word	0x08003289
 80032dc:	08003289 	.word	0x08003289
 80032e0:	08003433 	.word	0x08003433
 80032e4:	08003289 	.word	0x08003289
 80032e8:	08003339 	.word	0x08003339
 80032ec:	08003289 	.word	0x08003289
 80032f0:	08003289 	.word	0x08003289
 80032f4:	080033d3 	.word	0x080033d3
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	1d1a      	adds	r2, r3, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	602a      	str	r2, [r5, #0]
 8003300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003308:	2301      	movs	r3, #1
 800330a:	e09f      	b.n	800344c <_printf_i+0x1ec>
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	682b      	ldr	r3, [r5, #0]
 8003310:	0607      	lsls	r7, r0, #24
 8003312:	f103 0104 	add.w	r1, r3, #4
 8003316:	6029      	str	r1, [r5, #0]
 8003318:	d501      	bpl.n	800331e <_printf_i+0xbe>
 800331a:	681e      	ldr	r6, [r3, #0]
 800331c:	e003      	b.n	8003326 <_printf_i+0xc6>
 800331e:	0646      	lsls	r6, r0, #25
 8003320:	d5fb      	bpl.n	800331a <_printf_i+0xba>
 8003322:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003326:	2e00      	cmp	r6, #0
 8003328:	da03      	bge.n	8003332 <_printf_i+0xd2>
 800332a:	232d      	movs	r3, #45	; 0x2d
 800332c:	4276      	negs	r6, r6
 800332e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003332:	485a      	ldr	r0, [pc, #360]	; (800349c <_printf_i+0x23c>)
 8003334:	230a      	movs	r3, #10
 8003336:	e012      	b.n	800335e <_printf_i+0xfe>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	6029      	str	r1, [r5, #0]
 8003340:	0605      	lsls	r5, r0, #24
 8003342:	d501      	bpl.n	8003348 <_printf_i+0xe8>
 8003344:	681e      	ldr	r6, [r3, #0]
 8003346:	e002      	b.n	800334e <_printf_i+0xee>
 8003348:	0641      	lsls	r1, r0, #25
 800334a:	d5fb      	bpl.n	8003344 <_printf_i+0xe4>
 800334c:	881e      	ldrh	r6, [r3, #0]
 800334e:	4853      	ldr	r0, [pc, #332]	; (800349c <_printf_i+0x23c>)
 8003350:	2f6f      	cmp	r7, #111	; 0x6f
 8003352:	bf0c      	ite	eq
 8003354:	2308      	moveq	r3, #8
 8003356:	230a      	movne	r3, #10
 8003358:	2100      	movs	r1, #0
 800335a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800335e:	6865      	ldr	r5, [r4, #4]
 8003360:	60a5      	str	r5, [r4, #8]
 8003362:	2d00      	cmp	r5, #0
 8003364:	bfa2      	ittt	ge
 8003366:	6821      	ldrge	r1, [r4, #0]
 8003368:	f021 0104 	bicge.w	r1, r1, #4
 800336c:	6021      	strge	r1, [r4, #0]
 800336e:	b90e      	cbnz	r6, 8003374 <_printf_i+0x114>
 8003370:	2d00      	cmp	r5, #0
 8003372:	d04b      	beq.n	800340c <_printf_i+0x1ac>
 8003374:	4615      	mov	r5, r2
 8003376:	fbb6 f1f3 	udiv	r1, r6, r3
 800337a:	fb03 6711 	mls	r7, r3, r1, r6
 800337e:	5dc7      	ldrb	r7, [r0, r7]
 8003380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003384:	4637      	mov	r7, r6
 8003386:	42bb      	cmp	r3, r7
 8003388:	460e      	mov	r6, r1
 800338a:	d9f4      	bls.n	8003376 <_printf_i+0x116>
 800338c:	2b08      	cmp	r3, #8
 800338e:	d10b      	bne.n	80033a8 <_printf_i+0x148>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	07de      	lsls	r6, r3, #31
 8003394:	d508      	bpl.n	80033a8 <_printf_i+0x148>
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	6861      	ldr	r1, [r4, #4]
 800339a:	4299      	cmp	r1, r3
 800339c:	bfde      	ittt	le
 800339e:	2330      	movle	r3, #48	; 0x30
 80033a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033a8:	1b52      	subs	r2, r2, r5
 80033aa:	6122      	str	r2, [r4, #16]
 80033ac:	f8cd a000 	str.w	sl, [sp]
 80033b0:	464b      	mov	r3, r9
 80033b2:	aa03      	add	r2, sp, #12
 80033b4:	4621      	mov	r1, r4
 80033b6:	4640      	mov	r0, r8
 80033b8:	f7ff fee4 	bl	8003184 <_printf_common>
 80033bc:	3001      	adds	r0, #1
 80033be:	d14a      	bne.n	8003456 <_printf_i+0x1f6>
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	b004      	add	sp, #16
 80033c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	f043 0320 	orr.w	r3, r3, #32
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	4833      	ldr	r0, [pc, #204]	; (80034a0 <_printf_i+0x240>)
 80033d4:	2778      	movs	r7, #120	; 0x78
 80033d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	6829      	ldr	r1, [r5, #0]
 80033de:	061f      	lsls	r7, r3, #24
 80033e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80033e4:	d402      	bmi.n	80033ec <_printf_i+0x18c>
 80033e6:	065f      	lsls	r7, r3, #25
 80033e8:	bf48      	it	mi
 80033ea:	b2b6      	uxthmi	r6, r6
 80033ec:	07df      	lsls	r7, r3, #31
 80033ee:	bf48      	it	mi
 80033f0:	f043 0320 	orrmi.w	r3, r3, #32
 80033f4:	6029      	str	r1, [r5, #0]
 80033f6:	bf48      	it	mi
 80033f8:	6023      	strmi	r3, [r4, #0]
 80033fa:	b91e      	cbnz	r6, 8003404 <_printf_i+0x1a4>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	f023 0320 	bic.w	r3, r3, #32
 8003402:	6023      	str	r3, [r4, #0]
 8003404:	2310      	movs	r3, #16
 8003406:	e7a7      	b.n	8003358 <_printf_i+0xf8>
 8003408:	4824      	ldr	r0, [pc, #144]	; (800349c <_printf_i+0x23c>)
 800340a:	e7e4      	b.n	80033d6 <_printf_i+0x176>
 800340c:	4615      	mov	r5, r2
 800340e:	e7bd      	b.n	800338c <_printf_i+0x12c>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	6826      	ldr	r6, [r4, #0]
 8003414:	6961      	ldr	r1, [r4, #20]
 8003416:	1d18      	adds	r0, r3, #4
 8003418:	6028      	str	r0, [r5, #0]
 800341a:	0635      	lsls	r5, r6, #24
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	d501      	bpl.n	8003424 <_printf_i+0x1c4>
 8003420:	6019      	str	r1, [r3, #0]
 8003422:	e002      	b.n	800342a <_printf_i+0x1ca>
 8003424:	0670      	lsls	r0, r6, #25
 8003426:	d5fb      	bpl.n	8003420 <_printf_i+0x1c0>
 8003428:	8019      	strh	r1, [r3, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	6123      	str	r3, [r4, #16]
 800342e:	4615      	mov	r5, r2
 8003430:	e7bc      	b.n	80033ac <_printf_i+0x14c>
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	1d1a      	adds	r2, r3, #4
 8003436:	602a      	str	r2, [r5, #0]
 8003438:	681d      	ldr	r5, [r3, #0]
 800343a:	6862      	ldr	r2, [r4, #4]
 800343c:	2100      	movs	r1, #0
 800343e:	4628      	mov	r0, r5
 8003440:	f7fc fed6 	bl	80001f0 <memchr>
 8003444:	b108      	cbz	r0, 800344a <_printf_i+0x1ea>
 8003446:	1b40      	subs	r0, r0, r5
 8003448:	6060      	str	r0, [r4, #4]
 800344a:	6863      	ldr	r3, [r4, #4]
 800344c:	6123      	str	r3, [r4, #16]
 800344e:	2300      	movs	r3, #0
 8003450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003454:	e7aa      	b.n	80033ac <_printf_i+0x14c>
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	462a      	mov	r2, r5
 800345a:	4649      	mov	r1, r9
 800345c:	4640      	mov	r0, r8
 800345e:	47d0      	blx	sl
 8003460:	3001      	adds	r0, #1
 8003462:	d0ad      	beq.n	80033c0 <_printf_i+0x160>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	079b      	lsls	r3, r3, #30
 8003468:	d413      	bmi.n	8003492 <_printf_i+0x232>
 800346a:	68e0      	ldr	r0, [r4, #12]
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	4298      	cmp	r0, r3
 8003470:	bfb8      	it	lt
 8003472:	4618      	movlt	r0, r3
 8003474:	e7a6      	b.n	80033c4 <_printf_i+0x164>
 8003476:	2301      	movs	r3, #1
 8003478:	4632      	mov	r2, r6
 800347a:	4649      	mov	r1, r9
 800347c:	4640      	mov	r0, r8
 800347e:	47d0      	blx	sl
 8003480:	3001      	adds	r0, #1
 8003482:	d09d      	beq.n	80033c0 <_printf_i+0x160>
 8003484:	3501      	adds	r5, #1
 8003486:	68e3      	ldr	r3, [r4, #12]
 8003488:	9903      	ldr	r1, [sp, #12]
 800348a:	1a5b      	subs	r3, r3, r1
 800348c:	42ab      	cmp	r3, r5
 800348e:	dcf2      	bgt.n	8003476 <_printf_i+0x216>
 8003490:	e7eb      	b.n	800346a <_printf_i+0x20a>
 8003492:	2500      	movs	r5, #0
 8003494:	f104 0619 	add.w	r6, r4, #25
 8003498:	e7f5      	b.n	8003486 <_printf_i+0x226>
 800349a:	bf00      	nop
 800349c:	080037bd 	.word	0x080037bd
 80034a0:	080037ce 	.word	0x080037ce

080034a4 <__sflush_r>:
 80034a4:	898a      	ldrh	r2, [r1, #12]
 80034a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034aa:	4605      	mov	r5, r0
 80034ac:	0710      	lsls	r0, r2, #28
 80034ae:	460c      	mov	r4, r1
 80034b0:	d458      	bmi.n	8003564 <__sflush_r+0xc0>
 80034b2:	684b      	ldr	r3, [r1, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	dc05      	bgt.n	80034c4 <__sflush_r+0x20>
 80034b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dc02      	bgt.n	80034c4 <__sflush_r+0x20>
 80034be:	2000      	movs	r0, #0
 80034c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d0f9      	beq.n	80034be <__sflush_r+0x1a>
 80034ca:	2300      	movs	r3, #0
 80034cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034d0:	682f      	ldr	r7, [r5, #0]
 80034d2:	6a21      	ldr	r1, [r4, #32]
 80034d4:	602b      	str	r3, [r5, #0]
 80034d6:	d032      	beq.n	800353e <__sflush_r+0x9a>
 80034d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	075a      	lsls	r2, r3, #29
 80034de:	d505      	bpl.n	80034ec <__sflush_r+0x48>
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	1ac0      	subs	r0, r0, r3
 80034e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034e6:	b10b      	cbz	r3, 80034ec <__sflush_r+0x48>
 80034e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ea:	1ac0      	subs	r0, r0, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	4602      	mov	r2, r0
 80034f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034f2:	6a21      	ldr	r1, [r4, #32]
 80034f4:	4628      	mov	r0, r5
 80034f6:	47b0      	blx	r6
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	d106      	bne.n	800350c <__sflush_r+0x68>
 80034fe:	6829      	ldr	r1, [r5, #0]
 8003500:	291d      	cmp	r1, #29
 8003502:	d82b      	bhi.n	800355c <__sflush_r+0xb8>
 8003504:	4a29      	ldr	r2, [pc, #164]	; (80035ac <__sflush_r+0x108>)
 8003506:	410a      	asrs	r2, r1
 8003508:	07d6      	lsls	r6, r2, #31
 800350a:	d427      	bmi.n	800355c <__sflush_r+0xb8>
 800350c:	2200      	movs	r2, #0
 800350e:	6062      	str	r2, [r4, #4]
 8003510:	04d9      	lsls	r1, r3, #19
 8003512:	6922      	ldr	r2, [r4, #16]
 8003514:	6022      	str	r2, [r4, #0]
 8003516:	d504      	bpl.n	8003522 <__sflush_r+0x7e>
 8003518:	1c42      	adds	r2, r0, #1
 800351a:	d101      	bne.n	8003520 <__sflush_r+0x7c>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b903      	cbnz	r3, 8003522 <__sflush_r+0x7e>
 8003520:	6560      	str	r0, [r4, #84]	; 0x54
 8003522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003524:	602f      	str	r7, [r5, #0]
 8003526:	2900      	cmp	r1, #0
 8003528:	d0c9      	beq.n	80034be <__sflush_r+0x1a>
 800352a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800352e:	4299      	cmp	r1, r3
 8003530:	d002      	beq.n	8003538 <__sflush_r+0x94>
 8003532:	4628      	mov	r0, r5
 8003534:	f7ff fbea 	bl	8002d0c <_free_r>
 8003538:	2000      	movs	r0, #0
 800353a:	6360      	str	r0, [r4, #52]	; 0x34
 800353c:	e7c0      	b.n	80034c0 <__sflush_r+0x1c>
 800353e:	2301      	movs	r3, #1
 8003540:	4628      	mov	r0, r5
 8003542:	47b0      	blx	r6
 8003544:	1c41      	adds	r1, r0, #1
 8003546:	d1c8      	bne.n	80034da <__sflush_r+0x36>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0c5      	beq.n	80034da <__sflush_r+0x36>
 800354e:	2b1d      	cmp	r3, #29
 8003550:	d001      	beq.n	8003556 <__sflush_r+0xb2>
 8003552:	2b16      	cmp	r3, #22
 8003554:	d101      	bne.n	800355a <__sflush_r+0xb6>
 8003556:	602f      	str	r7, [r5, #0]
 8003558:	e7b1      	b.n	80034be <__sflush_r+0x1a>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	e7ad      	b.n	80034c0 <__sflush_r+0x1c>
 8003564:	690f      	ldr	r7, [r1, #16]
 8003566:	2f00      	cmp	r7, #0
 8003568:	d0a9      	beq.n	80034be <__sflush_r+0x1a>
 800356a:	0793      	lsls	r3, r2, #30
 800356c:	680e      	ldr	r6, [r1, #0]
 800356e:	bf08      	it	eq
 8003570:	694b      	ldreq	r3, [r1, #20]
 8003572:	600f      	str	r7, [r1, #0]
 8003574:	bf18      	it	ne
 8003576:	2300      	movne	r3, #0
 8003578:	eba6 0807 	sub.w	r8, r6, r7
 800357c:	608b      	str	r3, [r1, #8]
 800357e:	f1b8 0f00 	cmp.w	r8, #0
 8003582:	dd9c      	ble.n	80034be <__sflush_r+0x1a>
 8003584:	6a21      	ldr	r1, [r4, #32]
 8003586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003588:	4643      	mov	r3, r8
 800358a:	463a      	mov	r2, r7
 800358c:	4628      	mov	r0, r5
 800358e:	47b0      	blx	r6
 8003590:	2800      	cmp	r0, #0
 8003592:	dc06      	bgt.n	80035a2 <__sflush_r+0xfe>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e78e      	b.n	80034c0 <__sflush_r+0x1c>
 80035a2:	4407      	add	r7, r0
 80035a4:	eba8 0800 	sub.w	r8, r8, r0
 80035a8:	e7e9      	b.n	800357e <__sflush_r+0xda>
 80035aa:	bf00      	nop
 80035ac:	dfbffffe 	.word	0xdfbffffe

080035b0 <_fflush_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	b913      	cbnz	r3, 80035c0 <_fflush_r+0x10>
 80035ba:	2500      	movs	r5, #0
 80035bc:	4628      	mov	r0, r5
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	b118      	cbz	r0, 80035ca <_fflush_r+0x1a>
 80035c2:	6a03      	ldr	r3, [r0, #32]
 80035c4:	b90b      	cbnz	r3, 80035ca <_fflush_r+0x1a>
 80035c6:	f7ff f9a9 	bl	800291c <__sinit>
 80035ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f3      	beq.n	80035ba <_fflush_r+0xa>
 80035d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035d4:	07d0      	lsls	r0, r2, #31
 80035d6:	d404      	bmi.n	80035e2 <_fflush_r+0x32>
 80035d8:	0599      	lsls	r1, r3, #22
 80035da:	d402      	bmi.n	80035e2 <_fflush_r+0x32>
 80035dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035de:	f7ff fb92 	bl	8002d06 <__retarget_lock_acquire_recursive>
 80035e2:	4628      	mov	r0, r5
 80035e4:	4621      	mov	r1, r4
 80035e6:	f7ff ff5d 	bl	80034a4 <__sflush_r>
 80035ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ec:	07da      	lsls	r2, r3, #31
 80035ee:	4605      	mov	r5, r0
 80035f0:	d4e4      	bmi.n	80035bc <_fflush_r+0xc>
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	059b      	lsls	r3, r3, #22
 80035f6:	d4e1      	bmi.n	80035bc <_fflush_r+0xc>
 80035f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035fa:	f7ff fb85 	bl	8002d08 <__retarget_lock_release_recursive>
 80035fe:	e7dd      	b.n	80035bc <_fflush_r+0xc>

08003600 <__swhatbuf_r>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	460c      	mov	r4, r1
 8003604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003608:	2900      	cmp	r1, #0
 800360a:	b096      	sub	sp, #88	; 0x58
 800360c:	4615      	mov	r5, r2
 800360e:	461e      	mov	r6, r3
 8003610:	da0d      	bge.n	800362e <__swhatbuf_r+0x2e>
 8003612:	89a3      	ldrh	r3, [r4, #12]
 8003614:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	bf0c      	ite	eq
 800361e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003622:	2340      	movne	r3, #64	; 0x40
 8003624:	2000      	movs	r0, #0
 8003626:	6031      	str	r1, [r6, #0]
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	b016      	add	sp, #88	; 0x58
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	466a      	mov	r2, sp
 8003630:	f000 f848 	bl	80036c4 <_fstat_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	dbec      	blt.n	8003612 <__swhatbuf_r+0x12>
 8003638:	9901      	ldr	r1, [sp, #4]
 800363a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800363e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003642:	4259      	negs	r1, r3
 8003644:	4159      	adcs	r1, r3
 8003646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364a:	e7eb      	b.n	8003624 <__swhatbuf_r+0x24>

0800364c <__smakebuf_r>:
 800364c:	898b      	ldrh	r3, [r1, #12]
 800364e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003650:	079d      	lsls	r5, r3, #30
 8003652:	4606      	mov	r6, r0
 8003654:	460c      	mov	r4, r1
 8003656:	d507      	bpl.n	8003668 <__smakebuf_r+0x1c>
 8003658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	6123      	str	r3, [r4, #16]
 8003660:	2301      	movs	r3, #1
 8003662:	6163      	str	r3, [r4, #20]
 8003664:	b002      	add	sp, #8
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	ab01      	add	r3, sp, #4
 800366a:	466a      	mov	r2, sp
 800366c:	f7ff ffc8 	bl	8003600 <__swhatbuf_r>
 8003670:	9900      	ldr	r1, [sp, #0]
 8003672:	4605      	mov	r5, r0
 8003674:	4630      	mov	r0, r6
 8003676:	f7ff fbb5 	bl	8002de4 <_malloc_r>
 800367a:	b948      	cbnz	r0, 8003690 <__smakebuf_r+0x44>
 800367c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003680:	059a      	lsls	r2, r3, #22
 8003682:	d4ef      	bmi.n	8003664 <__smakebuf_r+0x18>
 8003684:	f023 0303 	bic.w	r3, r3, #3
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	81a3      	strh	r3, [r4, #12]
 800368e:	e7e3      	b.n	8003658 <__smakebuf_r+0xc>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	6020      	str	r0, [r4, #0]
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	81a3      	strh	r3, [r4, #12]
 800369a:	9b00      	ldr	r3, [sp, #0]
 800369c:	6163      	str	r3, [r4, #20]
 800369e:	9b01      	ldr	r3, [sp, #4]
 80036a0:	6120      	str	r0, [r4, #16]
 80036a2:	b15b      	cbz	r3, 80036bc <__smakebuf_r+0x70>
 80036a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 f81d 	bl	80036e8 <_isatty_r>
 80036ae:	b128      	cbz	r0, 80036bc <__smakebuf_r+0x70>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	431d      	orrs	r5, r3
 80036c0:	81a5      	strh	r5, [r4, #12]
 80036c2:	e7cf      	b.n	8003664 <__smakebuf_r+0x18>

080036c4 <_fstat_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4d07      	ldr	r5, [pc, #28]	; (80036e4 <_fstat_r+0x20>)
 80036c8:	2300      	movs	r3, #0
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	f7fe ff82 	bl	80025da <_fstat>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	d102      	bne.n	80036e0 <_fstat_r+0x1c>
 80036da:	682b      	ldr	r3, [r5, #0]
 80036dc:	b103      	cbz	r3, 80036e0 <_fstat_r+0x1c>
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	bd38      	pop	{r3, r4, r5, pc}
 80036e2:	bf00      	nop
 80036e4:	200002ec 	.word	0x200002ec

080036e8 <_isatty_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4d06      	ldr	r5, [pc, #24]	; (8003704 <_isatty_r+0x1c>)
 80036ec:	2300      	movs	r3, #0
 80036ee:	4604      	mov	r4, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	f7fe ff81 	bl	80025fa <_isatty>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_isatty_r+0x1a>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_isatty_r+0x1a>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	200002ec 	.word	0x200002ec

08003708 <_sbrk_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4d06      	ldr	r5, [pc, #24]	; (8003724 <_sbrk_r+0x1c>)
 800370c:	2300      	movs	r3, #0
 800370e:	4604      	mov	r4, r0
 8003710:	4608      	mov	r0, r1
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	f7fe ff8a 	bl	800262c <_sbrk>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_sbrk_r+0x1a>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_sbrk_r+0x1a>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	200002ec 	.word	0x200002ec

08003728 <_init>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr

08003734 <_fini>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr
